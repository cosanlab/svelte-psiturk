{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Peaks from 'peaks.js';\n  import { onMount } from \"svelte\";\n  import { db } from './firebase.js';\n\n  let peaksInstance;\n  let segments = [];\n  let selectedSegmentId;\n  let rowSelected = false;\n  let segmentPrevMax = 0;\n\n  // After Svelte has created the webpage, initialize the peaks.js waveform player and all of its event-handlers. Also make sure the segments variable gets updated whenever a user manipulates the waveform player\n  onMount(() => {\n    const options = {\n      container: document.getElementById('waveform-container'),\n      mediaElement: document.getElementById('audio'),\n      webAudio: {\n        audioContext: new AudioContext()\n      },\n      keyboard: false,\n      pointMarkerColor: '#006eb0',\n      showPlayheadTime: true,\n      inMarkerColor: '#999999',\n      outMarkerColor: '#3d3d3d',\n\n    };\n    // Initialize peaks.js UI\n    peaksInstance = Peaks.init(options, function (err, peakrs) {\n      console.log(\"Peaks instance ready\");\n      segments = peaksInstance.segments.getSegments();\n    });\n    // Add some built-in event handlers for mouse events for segments\n    peaksInstance.on('segments.mouseleave', function (segment) {\n      segments = peaksInstance.segments.getSegments();\n    });\n    peaksInstance.on('segments.click', function (segment) {\n      segments = peaksInstance.segments.getSegments();\n    });\n    peaksInstance.on('segments.dragged', function (segment) {\n      segments = peaksInstance.segments.getSegments();\n    });\n  });\n\n  // Grab the start and end time for each thought and save them into firebase\n  function finish() {\n    // if (segments) {\n    //   if (segments.length < 2) {\n    //     alert(\"Please tag a few more thoughts\");\n    //   }\n    //   else {\n    //     // We have to strip-out the extra properties that segment objects have (e.g. like waveform color) because firebase doesn't like that. Plus we only care about start and end times\n    //     let toSave = {};\n    //     segments.forEach((obj) => {\n    //       toSave[obj._id] = { startTime: obj._startTime, endTime: obj._endTime };\n    //     });\n    //     db.collection('thoughts').doc('test-user').set(Object.assign({}, toSave))\n    //       .then(() => {\n    //         console.log(\"document added successfully\");\n    //       })\n    //       .catch((error) => {\n    //         console.error(error);\n    //       });\n    //   }\n    // }\n    console.log('finished');\n    window.top.postMessage('finished', '*');\n  }\n\n  // Store a new segment on button click\n  function addSegment() {\n    peaksInstance.segments.add({\n      startTime: peaksInstance.player.getCurrentTime(),\n      endTime: peaksInstance.player.getCurrentTime() + 5,\n      labelText: \"Thought \" + segmentPrevMax.toString(),\n      editable: true\n    });\n    // Update the variable that stores all the segments for dynamic rendering\n    segments = peaksInstance.segments.getSegments();\n    segmentPrevMax = segmentPrevMax + 1;\n  }\n\n  // Select a segment based on a table row that get clicked \n  function selectSegment(ev) {\n    // Get all rows\n    let rows = document.getElementsByClassName(\"table-row\");\n    // Get click row\n    let row = ev.target.parentNode;\n    // If clicked row already has class unselected it and all other rows\n    if (row.className === 'table-row is-selected') {\n      for (let r of rows) {\n        r.className = 'table-row';\n      }\n      rowSelected = false;\n    }\n    // Otherwise unselect everything else first then select this one\n    else {\n      for (let r of rows) {\n        r.className = 'table-row';\n      }\n      row.className += \" is-selected\";\n      rowSelected = true;\n    }\n    // Save the segment id\n    selectedSegmentId = parseInt(row.querySelector(\"td.segment-id\").innerText);\n    selectedSegmentId = \"peaks.segment.\" + selectedSegmentId.toString();\n  }\n\n  // Play a selected segment on button click\n  function playSegment() {\n    let segment = peaksInstance.segments.getSegment(selectedSegmentId);\n    peaksInstance.player.playSegment(segment);\n  }\n\n  // Delete a selected segment on button click\n  function deleteSegment() {\n    peaksInstance.segments.removeById(selectedSegmentId);\n    // Clear selection from all other rows and hide button\n    let rows = document.getElementsByClassName(\"table-row\");\n    for (let r of rows) {\n      r.className = 'table-row';\n    }\n    rowSelected = false;\n    segments = peaksInstance.segments.getSegments();\n  }\n\n  // Print all segments to console on button click; just for debugging\n  function seeSegments() {\n    console.log(segments);\n  }\n</script>\n\n<style>\n  .hidden {\n    visibility: hidden;\n  }\n\n  .table {\n    margin-left: auto;\n    margin-right: auto;\n  }\n</style>\n<section class=\"section\">\n  <div class=\"container\">\n    <div class=\"columns is-centered\">\n      <div class=\"column is-three-quarters\">\n        <h1 class='title'>Thought Segmentation</h1>\n        <p class=\"is-size-5\">\n          In this task, you will listen to a series of audio files (~2 min) in which you will hear people describing\n          characters from a television drama. The goal of this task is to divide the audio into separate speech segments\n          or thoughts. Follow the directions below to perform the task. <b>Do not refresh your browser</b>\n        </p>\n        <div class=\"columns\">\n          <div class=\"column is-10 is-offset-1\">\n            <ol>\n              <li>Click the play button\n                to start listening to the audio. </li>\n              <li>Pay close attention to where there are natural breaks in a person’s speech, demarcating a separate\n                thought.\n              </li>\n              <li>Click Tag Thought, to tag a speech segment or “thought”. You can adjust the start and end times by\n                dragging the sliders. Add segments as you continue to listen to the audio. </li>\n              <li>You can go back and edit segments by clicking on then in the table.</li>\n              <li>Click Finish to continue to the next audio file. </li>\n            </ol>\n          </div>\n        </div>\n        <div id=\"waveform-container\"></div>\n        <div class=\"columns\">\n          <div class=\"column is-one-quarter\">\n            <audio id=\"audio\" controls=\"controls\">\n              <source src=\"https://dl.dropboxusercontent.com/s/vvq50nz47pndx2b/s12_JulieTaylor.wav\" type=\"audio/wav\">\n              Your browser does not support the audio element.\n            </audio>\n          </div>\n          <div class=\"column is-one-half\">\n            <button class=\"button is-primary is-large\" on:click={addSegment}>Tag Thought</button>\n            <button class=\"button is-info is-large\" on:click={finish}>Finished</button>\n            <button class=\"{rowSelected ? 'button is-success is-large' : 'button is-success is-large hidden'}\"\n              on:click={playSegment}>Play\n              Thought</button>\n            <button class=\"{rowSelected ? 'button is-danger is-large' : 'button is-danger is-large hidden'}\"\n              on:click={deleteSegment}>Delete\n              Segment</button>\n            <!-- <button class=\"button is-warning is-large\" on:click={seeSegments}>Debug</button> -->\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"columns is-centered\">\n      <div class=\"column is-three-quarters has-text-centered\">\n        {#if segments && segments.length}\n        <div class=\"table-container\">\n          <table class=\"table is-hoverable\">\n            <thead>\n              <tr>\n                <th>Thought Number</th>\n                <th>Start time</th>\n                <th>End time</th>\n              </tr>\n            </thead>\n            <tbody>\n              {#each segments as segment, i (segment.id)}\n                <tr on:click={selectSegment} class='table-row'> \n                  <td type=\"text\" class=\"segment-id\">{segment.id.split('.').slice(-1)[0]}</td>\n                  <td type=\"number\">{(segment.startTime).toFixed(2)}</td> \n                  <td type=\"number\">{(segment.endTime).toFixed(2)}</td> \n                </tr>\n              {/each}\n            </tbody>\n          </table>\n        </div>\n        {:else}\n          <h2 class=\"title is-4\">No Thoughts Tagged</h2>\n        {/if}\n      </div>\n    </div>\n  </div>\n</section>"
  ],
  "names": [],
  "mappings": "AAoIE,OAAO,aAAC,CAAC,AACP,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,MAAM,aAAC,CAAC,AACN,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,AACpB,CAAC"
}