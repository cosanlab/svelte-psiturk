{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/pages/Instructions.svelte",
    "../../src/pages/Debrief.svelte",
    "../../src/components/Loading.svelte",
    "../../src/components/Tutorial.svelte",
    "../../src/components/ThoughtTagger.svelte"
  ],
  "sourcesContent": [
    "<script>\n  // This is the Instructions page. It loops over the instructions array as a user reads and when click to the last page it notifies the main App.svelte component by dispatching a 'finished' event. When the last page of the instructions are reached the forward button turns into a \"Take Quiz\" button, but currently there is no quiz and it goes straight to the experiment\n  import { createEventDispatcher } from 'svelte';\n\n  // Add/remove items here to create more instructions pages\n  const instructions = [\n    \"In this task, you will listen to a series of audio recordings (~2 min) in which you will hear people describing characters from a television drama. The goal of this task is to divide the audio into separate speech segments or thoughts.<br><br> While listening, pay close attention to where there are natural breaks in the person's speech, demarcating a separate thought.\",\n\n    'You will be able to play and pause each recording using buttons on screen. Click the Tag Thought button to tag a speech segment that you feel represents a complete thought. You can adjust the start and end times of the segment by dragging the sliders on the audio waveform. As you listen keep tagging new thoughts as you detect them.<br><br>You can always go back and edit segments by clicking on them in the table below the controls.',\n\n    'When you are finished with a recording click the Finish button to move onto the next recording. You will complete a total of <b>N</b> recordings for this HIT.',\n\n    'If these instructions make sense click the button below to try a practice trial. Otherwise feel free to go back through the instructions to make sure you understand this task'\n  ];\n\n  const dispatch = createEventDispatcher();\n  let currentPage = 0;\n\n  const backward = () => {\n    currentPage -= 1;\n    currentPage = Math.max(currentPage, 0);\n  };\n  const forward = () => {\n    // Check if we're increasing the value of currentPage beyond the number of instructions, if so tell App.svelte we're ready to move to the quiz\n    if (currentPage + 1 === instructions.length) {\n      dispatch('finished');\n    } else {\n      currentPage += 1;\n      currentPage = Math.min(currentPage, instructions.length - 1);\n    }\n  };\n</script>\n\n<style>\n  .no-space-hr {\n    margin: 0;\n  }\n  .custom-card-title {\n    margin-bottom: 2% !important;\n    padding-top: 2% !important;\n  }\n  .controls {\n    min-width: 50%;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"columns is-centered\">\n    <div class=\"column is-three-fifths \">\n      <div class=\"card\">\n        <div class=\"has-text-centered\">\n          <h1 class=\"title is-2 custom-card-title\">Instructions</h1>\n          <hr class=\"no-space-hr\" />\n        </div>\n        <div class=\"card-content\">\n          <div class=\"content\">\n            {@html instructions[currentPage]}\n          </div>\n        </div>\n        <footer class=\"card-footer\">\n          <p class=\"card-footer-item\">\n            <button class=\"button is-link controls\" on:click={backward}>\n              <span class=\"icon\">\n                <i class=\"fas fa-backward\" />\n              </span>\n            </button>\n          </p>\n          <p class=\"card-footer-item\">\n            <button class=\"button is-link controls\" on:click={forward}>\n              {#if currentPage === instructions.length - 1}\n                Try Practice\n              {:else}\n                <span class=\"icon\">\n                  <i class=\"fas fa-forward\" />\n                </span>\n              {/if}\n            </button>\n          </p>\n        </footer>\n      </div>\n    </div>\n  </div>\n</div>\n",
    "<script>\n  // This is the debrief page in which we should collect any post survey questions. There's a single button that should save reponses to firebase and then tell PsiTurk we're done.\n  import { db, params, serverTime } from '../utils.js';\n\n  let age = '';\n  let feedback = '';\n  let sex = '';\n  const submitHIT = async () => {\n    try {\n      await db.ref(`participants/${params.workerId}`).update({\n        age,\n        sex,\n        feedback,\n        HIT_complete: serverTime\n      });\n      console.log('exit survey added successfully');\n      window.top.postMessage('finished', '*');\n      console.log('back to PsiTurk!');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n</script>\n\n<style>\n  .age-input {\n    width: 2.5rem;\n  }\n  .textarea-feedback {\n    min-width: 80%;\n    max-width: 80%;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"columns is-centered\">\n    <div class=\"column is-three-quarters\">\n      <p class=\"title is-3 has-text-centered\">Thank You For Participating!</p>\n      <p class=\"subtitle is-6 has-text-centered\">\n        <em>All questions are optional</em>\n      </p>\n      <form on:submit|preventDefault={submitHIT}>\n        <div class=\"field is-horizontal\">\n          <div class=\"field-label is-normal\">\n            <label class=\"label\">Age</label>\n          </div>\n          <div class=\"field-body is-narrow\">\n            <div class=\"field\">\n              <p class=\"control\">\n                <input class=\"input age-input\" type=\"text\" bind:value={age} />\n              </p>\n            </div>\n          </div>\n        </div>\n        <div class=\"field is-horizontal\">\n          <div class=\"field-label\">\n            <label class=\"label\">Sex</label>\n          </div>\n          <div class=\"field-body\">\n            <div class=\"field is-narrow\">\n              <div class=\"control\">\n                <label class=\"radio\">\n                  <input type=\"radio\" bind:group={sex} value={'male'} />\n                  Male\n                </label>\n                <label class=\"radio\">\n                  <input type=\"radio\" bind:group={sex} value={'female'} />\n                  Female\n                </label>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"field is-horizontal\">\n          <div class=\"field-label is-normal\">\n            <label class=\"label\">Feedback</label>\n          </div>\n          <div class=\"field-body\">\n            <div class=\"field\">\n              <div class=\"control\">\n                <textarea\n                  class=\"textarea textarea-feedback\"\n                  bind:value={feedback}\n                  placeholder=\"Thoughts or suggestions about this HIT\" />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"field is-horizontal\">\n          <div class=\"field-label\">\n            <!-- Left empty for spacing -->\n          </div>\n          <div class=\"field-body\">\n            <div class=\"field\">\n              <div class=\"control\">\n                <button class=\"button is-success is-large\">Submit HIT</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n",
    "<script>\n  // This component is just for displaying while we wait for firebase responses\n</script>\n\n<style>\n  .loader-wrapper {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    top: 0;\n    left: 0;\n    background: #fff;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .loader {\n    width: 35rem;\n    height: 35rem;\n    position: absolute;\n  }\n  .loading-text {\n    z-index: 9;\n  }\n</style>\n\n<div class=\"loader-wrapper\">\n  <div class=\"loader is-loading\" />\n  <div class=\"loading-text\">\n    <h1 class=\"is-size-3\">\n      <slot />\n    </h1>\n  </div>\n</div>\n",
    "<script>\n  // This is the main ThoughTagging component that gets rendered within Experiment.svelte. It takes as an \"argument\" a \"src\" value from Experiment.svelte that tells it which audo file to render\n  import { createEventDispatcher } from 'svelte';\n  import { db, params, serverTime } from '../utils.js';\n\n  // Input variables\n  export let modalOpen;\n  export let tutorial;\n  export let tutorialStep = 0;\n  export let tutorialComplete;\n  export let quiz;\n  export let numSegments;\n  export let quizState;\n\n  let modalTitle;\n  let modalContent;\n  let q;\n\n  // Reactively determine what to show in the modal depending on whether the tutorial is still going or what state of the quiz we're in\n  $: if (!tutorialComplete) {\n    modalTitle = tutorial[tutorialStep].title;\n    modalContent = tutorial[tutorialStep].content;\n  } else {\n    [q] = quiz.filter((obj) => obj.state === quizState);\n    modalTitle = q.title;\n    modalContent = q.content;\n  }\n\n  let modalXInitial;\n  let modalYInitial;\n  let modalXCurrent;\n  let modalYCurrent;\n  let modalXOffset = 0;\n  let modalYOffset = 0;\n  let dragActive = false;\n  $: down = tutorialStep === 1;\n  $: up = tutorialStep === 2 || quizState === 'pass';\n  $: right = tutorialStep === 3 || tutorialStep === 1;\n  $: upp = tutorialStep === 3;\n\n  const dispatch = createEventDispatcher();\n\n  const backward = () => {\n    tutorialStep -= 1;\n    tutorialStep = Math.max(tutorialStep, 0);\n    dispatch('stateChange', { tutorialStep });\n  };\n\n  const forward = () => {\n    tutorialStep = Math.min(tutorialStep + 1, tutorial.length - 1);\n    dispatch('stateChange', { tutorialStep });\n  };\n\n  const setTranslate = (xPos, yPos, el) => {\n    el.style.transform = `translate3d(${xPos}px, ${yPos}px, 0)`;\n  };\n\n  const dragStart = (ev) => {\n    if (ev.target.parentElement.closest('.modal')) {\n      modalXInitial = ev.clientX - modalXOffset;\n      modalYInitial = ev.clientY - modalYOffset;\n      dragActive = true;\n    }\n  };\n\n  const drag = (ev) => {\n    if (dragActive) {\n      modalXCurrent = ev.clientX - modalXInitial;\n      modalYCurrent = ev.clientY - modalYInitial;\n      modalXOffset = modalXCurrent;\n      modalYOffset = modalYCurrent;\n      const el = document.getElementById('modal');\n      setTranslate(modalXCurrent, modalYCurrent, el);\n    }\n  };\n\n  const dragEnd = (ev) => {\n    modalXInitial = modalXCurrent;\n    modalYInitial = modalYCurrent;\n    dragActive = false;\n  };\n</script>\n\n<style>\n  .modal-card {\n    border-radius: 6px;\n    box-shadow: 3px 3px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);\n    pointer-events: auto;\n  }\n  .modal {\n    pointer-events: none;\n  }\n  .down {\n    top: 15%;\n  }\n  .up {\n    top: -15%;\n  }\n  .upp {\n    top: -21%;\n  }\n  .right {\n    left: 12%;\n  }\n  .controls {\n    min-width: 50%;\n  }\n</style>\n\n<div\n  class={modalOpen ? 'modal is-active' : 'modal'}\n  on:mousedown|preventDefault={dragStart}\n  on:mouseup|preventDefault={dragEnd}\n  on:mousemove|preventDefault={drag}>\n  <div class=\"modal-card\" id=\"modal\" class:up class:right class:down class:upp>\n    <header class=\"modal-card-head\">\n      <p class=\"modal-card-title\">{modalTitle}</p>\n    </header>\n    <section class=\"modal-card-body\">\n      {@html modalContent}\n    </section>\n    <footer class=\"modal-card-foot\">\n      {#if !tutorialComplete}\n        <p class=\"card-footer-item\">\n          <button class=\"button is-link controls\" on:click={backward}>\n            <span class=\"icon\">\n              <i class=\"fas fa-backward\" />\n            </span>\n          </button>\n        </p>\n        <p class=\"card-footer-item\">\n          {#if tutorialStep === tutorial.length - 1}\n            <button\n              class=\"button is-link\"\n              on:click={() => {\n                dispatch('toggleTutorial');\n              }}>\n              Hide Help\n            </button>\n          {:else if tutorialStep !== 2 || numSegments > 0}\n            <button class=\"button is-link controls\" on:click={forward}>\n              <span class=\"icon\">\n                <i class=\"fas fa-forward\" />\n              </span>\n            </button>\n          {/if}\n        </p>\n      {:else if quizState === 'readyForExperiment'}\n        <p class=\"card-footer-item\">\n          <button class=\"button is-warning is-large\" on:click={() => dispatch('finishedComplete')}>\n            Skip bonus work\n          </button>\n        </p>\n        <p class=\"card-footer-item\">\n          <button class=\"button is-success is-large\" on:click={() => dispatch('finishedContinue')}>\n            Do bonus work\n          </button>\n        </p>\n      {:else if quizState === 'fail'}\n        <p class=\"card-footer-item\">\n          <button class=\"button is-success is-large\" on:click={() => dispatch('finishedComplete')}>\n            Submit HIT\n          </button>\n        </p>\n      {/if}\n    </footer>\n  </div>\n</div>\n",
    "<script>\n  // This is the main ThoughTagging component that gets rendered within Experiment.svelte. It takes as an \"argument\" a \"src\" value from Experiment.svelte that tells it which audo file to render\n  import Peaks from 'peaks.js';\n  import { onMount, createEventDispatcher } from 'svelte';\n  import { db, params, serverTime } from '../utils.js';\n\n  // Input variables\n  export let src;\n  export let currentTrial = NaN;\n  export let fileName = '';\n  export let tutorialStep = -1;\n  export let hasTutorial = false;\n  export let quizAnswers = [];\n  export let quizState = '';\n\n  // eslint-disable-next-line prefer-const\n  let subjectId;\n  let character;\n  if (fileName) {\n    [subjectId, character] = fileName.split('_');\n    [character] = character.split('_');\n  }\n  let quizAttempts = 0;\n  let quizPassed = false;\n  let peaksInstance;\n  let segments = [];\n  let selectedSegmentId;\n  let rowSelected = false;\n  let segmentPrevMax = 0;\n  const dispatch = createEventDispatcher();\n  let peaksLoading = true;\n  let rate = false;\n  let confidence = 50;\n  let clarity = 50;\n  let clarityRated = false;\n  let confidenceRated = false;\n  let time = '';\n  let timer;\n  let invalidTime = false;\n  $: nextTrialActive = !(clarityRated && confidenceRated && time && !invalidTime);\n  $: ratingActive = segments.length === 0;\n\n  const debounce = (v) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      if ((time.length === 5 && time.includes(':')) || !time) {\n        invalidTime = false;\n      } else {\n        invalidTime = true;\n      }\n    }, 600);\n  };\n\n  // After Svelte has created the webpage, initialize the peaks.js waveform player and all of its event-handlers. Also make sure the segments variable gets updated whenever a user manipulates the waveform player\n  onMount(() => {\n    const options = {\n      container: document.getElementById('waveform-container'),\n      mediaElement: document.getElementById('audio'),\n      webAudio: {\n        audioContext: new AudioContext()\n      },\n      keyboard: false,\n      pointMarkerColor: '#006eb0',\n      showPlayheadTime: true,\n      inMarkerColor: '#999999',\n      outMarkerColor: '#3d3d3d'\n    };\n    // Initialize peaks.js UI\n    peaksInstance = Peaks.init(options, (err) => {\n      if (err) {\n        console.error(err);\n      } else {\n        peaksLoading = false;\n        console.log('Peaks instance ready');\n        segments = peaksInstance.segments.getSegments();\n      }\n    });\n    // Add some built-in event handlers for mouse events for segments\n    peaksInstance.on('segments.mouseleave', (segment) => {\n      segments = peaksInstance.segments.getSegments();\n    });\n    peaksInstance.on('segments.click', (segment) => {\n      segments = peaksInstance.segments.getSegments();\n    });\n    peaksInstance.on('segments.dragged', (segment) => {\n      segments = peaksInstance.segments.getSegments();\n    });\n  });\n\n  // General purpose function to call event dispatcher if this component knows theres a tutorial component it should be working in tandem with\n  const communicateData = (evName) => {\n    if (hasTutorial) {\n      if (evName === 'updateSegmentsCount') {\n        dispatch('updateSegmentsCount', {\n          numSegments: segments.length,\n          moveForward: tutorialStep === 2\n        });\n      } else if (evName === 'quizAttempt') {\n        dispatch('quizAttempt', { quizAttempts, quizPassed });\n      } else if (evName === 'finished') {\n        dispatch('readyForExperiment');\n      }\n    }\n  };\n\n  // Grab the start and end time for each thought and save them into firebase\n  const finish = async () => {\n    if (hasTutorial) {\n      communicateData('finished');\n    } else {\n      // We have to strip-out the extra properties that segment objects have (e.g. like waveform color) because firebase doesn't like that. Plus we only care about start and end times\n      const toSave = {};\n      console.log(segments);\n      segments.forEach((obj) => {\n        toSave[obj._id.replace(/\\./g, '_')] = {\n          startTime: obj._startTime,\n          endTime: obj._endTime\n        };\n      });\n      // Create a nested dictionary of data to save with the key being the current trial number and sub-dictionaries containing the subject id of the person speaking, the character being talked about and the tagged thoughts\n      const doc = {\n        [`trial_${currentTrial}`]: {\n          subject: subjectId,\n          character: character.slice(0, character.length - 4),\n          clarity,\n          confidence,\n          recordingLength: time,\n          thoughts: toSave,\n          submitTime: serverTime\n        },\n        currentTrial: currentTrial + 1\n      };\n      try {\n        await db.ref(`participants/${params.workerId}`).update(doc);\n        console.log('document added successfully');\n        peaksInstance.destroy();\n        dispatch('next');\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  const verifyTags = () => {\n    const nearestValue = (arr, val) =>\n      arr.reduce((p, n) => (Math.abs(p) > Math.abs(n - val) ? n - val : p), Infinity) + val;\n    const check = [];\n    let match;\n    const correctStartTimes = quizAnswers.map((obj) => obj.startTime);\n    const correctEndTimes = quizAnswers.map((obj) => obj.endTime);\n    for (const [i, obj] of segments.entries()) {\n      match =\n        nearestValue(correctStartTimes, obj.startTime) === correctStartTimes[i] &&\n        nearestValue(correctEndTimes, obj.endTime) === correctEndTimes[i];\n      check.push(match);\n    }\n    const allCorrect = check.every((e) => e);\n    quizAttempts += 1;\n    if (allCorrect) {\n      quizPassed = true;\n    }\n    console.log(`Quiz passed: ${quizPassed}`);\n    console.log(`Quiz attempts: ${quizAttempts}`);\n  };\n\n  const submitTags = () => {\n    if (!segments || (segments && segments.length <= 2)) {\n      alert('Please tag a few more thoughts');\n    } else if (hasTutorial) {\n      // check tutorial thoughts\n      verifyTags();\n      communicateData('quizAttempt');\n      rate = quizPassed;\n    } else {\n      rate = !rate;\n    }\n  };\n\n  // Store a new segment on button click\n  function addSegment() {\n    peaksInstance.segments.add({\n      startTime: peaksInstance.player.getCurrentTime(),\n      endTime: peaksInstance.player.getCurrentTime() + 5,\n      labelText: `Thought ${segmentPrevMax.toString()}`,\n      editable: true\n    });\n    // Update the variable that stores all the segments for dynamic rendering\n    segments = peaksInstance.segments.getSegments();\n    segmentPrevMax += 1;\n    communicateData('updateSegmentsCount');\n  }\n\n  // Select a segment based on a table row that get clicked\n  function selectSegment(ev) {\n    // Get all rows\n    const rows = document.getElementsByClassName('table-row');\n    // Get click row\n    const row = ev.target.parentNode;\n    // If clicked row already has class unselected it and all other rows\n    if (row.className === 'table-row is-selected') {\n      for (const r of rows) {\n        r.className = 'table-row';\n      }\n      rowSelected = false;\n    } else {\n      // Otherwise unselect everything else first then select this one\n      for (const r of rows) {\n        r.className = 'table-row';\n      }\n      row.className += ' is-selected';\n      rowSelected = true;\n    }\n    // Save the segment id\n    selectedSegmentId = parseInt(row.querySelector('td.segment-id').innerText, 10);\n    selectedSegmentId = `peaks.segment.${selectedSegmentId.toString()}`;\n  }\n\n  // Play a selected segment on button click\n  function playSegment() {\n    const segment = peaksInstance.segments.getSegment(selectedSegmentId);\n    peaksInstance.player.playSegment(segment);\n  }\n\n  // Delete a selected segment on button click\n  function deleteSegment() {\n    peaksInstance.segments.removeById(selectedSegmentId);\n    // Clear selection from all other rows and hide button\n    const rows = document.getElementsByClassName('table-row');\n    for (const r of rows) {\n      r.className = 'table-row';\n    }\n    rowSelected = false;\n    segments = peaksInstance.segments.getSegments();\n    communicateData('updateSegmentsCount');\n  }\n</script>\n\n<style>\n  .table {\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .loading-button {\n    font-size: 4.5rem !important;\n  }\n\n  .blur {\n    -webkit-filter: blur(5px);\n    filter: blur(5px);\n    pointer-events: none;\n  }\n\n  .button-row {\n    margin-bottom: 0 !important;\n  }\n  .button-col {\n    padding-bottom: 0 !important;\n  }\n</style>\n\n<div\n  class=\"container is-fluid\"\n  class:blur={hasTutorial && (tutorialStep === 0 || quizState === 'fail' || quizState === 'readyForExperiment')}>\n  <!-- Title + Waveform display row -->\n  <div class=\"columns is-centered\" id=\"row-title-waveform\">\n    <div class=\"column is-full has-text-centered\">\n      {#if hasTutorial}\n        <h1 class=\"title\">Example Recording</h1>\n      {:else}\n        <h1 class=\"title\">Recording #{currentTrial}</h1>\n      {/if}\n      {#if peaksLoading}\n        <h3 class=\"title is-3\">Loading audio...</h3>\n        <button class=\"button is-white is-loading loading-button\" disabled />\n      {/if}\n      <div\n        id=\"waveform-container\"\n        class:blur={hasTutorial && tutorialStep < 1}\n        class={hasTutorial && tutorialStep === 1 ? 'animated flash slow' : ''} />\n    </div>\n  </div>\n  <!-- Controls + Button row -->\n  <div class=\"columns is-centered\" id=\"row-controls-buttons\">\n    <div class=\"column is-full\" id=\"playback-controls-info-column\">\n      <!-- Nested row with playback controls on left and buttons on right -->\n      <div class=\"columns\">\n        <div class=\"column is-narrow\">\n          <div class=\"columns is-gapless is-mobile\">\n            <div class=\"column is-narrow\">\n              <audio\n                id=\"audio\"\n                controls=\"controls\"\n                controlslist=\"nodownload\"\n                class={hasTutorial && tutorialStep === 1 ? 'animated flash slow' : ''}>\n                <source {src} type=\"audio/wav\" />\n                Your browser does not support the audio element.\n              </audio>\n            </div>\n            <div\n              class={hasTutorial && tutorialStep === 4 ? 'column animated shake delay-2s' : 'column'}>\n              {#if hasTutorial}\n                <span class=\"icon is-large\" on:click={() => dispatch('toggleTutorial')}>\n                  <i class=\"fas fa-question-circle fa-2x fa-fw\" />\n                </span>\n              {/if}\n            </div>\n          </div>\n        </div>\n        <div class=\"column\">\n          {#if rate}\n            <button\n              class={hasTutorial ? 'button is-primary is-large animated flash delay-1s' : 'button is-primary is-large'}\n              on:click={finish}\n              disabled={nextTrialActive}>\n              Next\n            </button>\n          {:else}\n            <div class=\"columns is-gapless\">\n              <div class=\"column is-narrow\">\n                <div class=\"columns button-row\">\n                  <div class=\"column button-col\">\n                    <button\n                      class={hasTutorial && tutorialStep === 2 ? 'button is-primary is-large animated flash delay-1s' : 'button is-primary is-large'}\n                      class:blur={hasTutorial && tutorialStep < 2}\n                      on:click={addSegment}>\n                      Tag\n                    </button>\n                    <button\n                      class=\"button is-info is-large\"\n                      class:blur={hasTutorial && tutorialStep < 2}\n                      disabled={ratingActive}\n                      on:click={submitTags}>\n                      Done\n                    </button>\n                  </div>\n                </div>\n                <div class=\"columns\">\n                  <div class=\"column\">\n                    <p class=\"is-size-7\" class:is-invisible={segments.length === 0}>\n                      Select a row below to edit a Thought\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <div class=\"column\">\n                <button\n                  class=\"button is-success is-large\"\n                  class:is-invisible={!rowSelected}\n                  on:click={playSegment}>\n                  Play\n                </button>\n                <button\n                  class=\"button is-danger is-large\"\n                  class:is-invisible={!rowSelected}\n                  on:click={deleteSegment}>\n                  Delete\n                </button>\n              </div>\n            </div>\n          {/if}\n        </div>\n      </div>\n    </div>\n  </div>\n  {#if rate}\n    <!-- Rating row (only if table not displayed) -->\n    <div class=\"columns is-centered\">\n      <div class=\"column is-narrow has-text-centered\">\n        <div class=\"field\">\n          <label class=\"label has-text-weight-normal is-size-5\">\n            When did the speaker stop talking?\n          </label>\n          <div class=\"control\">\n            <input\n              class={invalidTime ? 'input age-input is-danger' : 'input age-input'}\n              type=\"text\"\n              bind:value={time}\n              on:keyup={(ev) => debounce(ev.target.value)}\n              placeholder=\"Please enter a timestamp like MM:SS\" />\n          </div>\n          {#if invalidTime}\n            <p class=\"help is-danger\">Invalid timestamp. Please use MM:SS format.</p>\n          {/if}\n        </div>\n      </div>\n      <div class=\"column is-4-desktop is-3-fullhd has-text-centered\">\n        <p class=\"has-text-centered is-size-5\">How clear was the quality of the recording?</p>\n        <input\n          step=\"1\"\n          min=\"0\"\n          max=\"100\"\n          type=\"range\"\n          bind:value={clarity}\n          on:click|once={() => (clarityRated = true)} />\n        <div class=\"columns is-mobile is-centered\">\n          <div class=\"column has-text-left\">\n            <p class=\"subtitle is-size-6\">Uninterpretable</p>\n          </div>\n          <div class=\"column has-text-right\">\n            <p class=\"subtitle is-size-6\">Perfect</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"column is-4-desktop is-3-fullhd has-text-centered\">\n        <p class=\"has-text-centered is-size-5\">How easy was it to tag different thoughts?</p>\n        <input\n          step=\"1\"\n          min=\"0\"\n          max=\"100\"\n          type=\"range\"\n          bind:value={confidence}\n          on:click|once={() => (confidenceRated = true)} />\n        <div class=\"columns is-mobile is-centered\">\n          <div class=\"column has-text-left\">\n            <p class=\"subtitle is-size-6\">Impossible</p>\n          </div>\n          <div class=\"column has-text-right\">\n            <p class=\"subtitle is-size-6\">Effortless</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  {:else}\n    <!-- Table row only if rating now displayed -->\n    <div class=\"columns is-centered\" class:blur={hasTutorial && tutorialStep < 2}>\n      <div class=\"column is-full has-text-centered\">\n        {#if segments && segments.length}\n          <div class=\"table-container\">\n            <table class=\"table is-hoverable\">\n              <thead>\n                <tr>\n                  <th>Thought Number</th>\n                  <th>Start time</th>\n                  <th>End time</th>\n                </tr>\n              </thead>\n              <tbody>\n                {#each segments as segment, i (segment.id)}\n                  <tr on:click={selectSegment} class=\"table-row\">\n                    <td type=\"text\" class=\"segment-id\">{segment.id.split('.').slice(-1)[0]}</td>\n                    <td type=\"number\">{segment.startTime.toFixed(2)}</td>\n                    <td type=\"number\">{segment.endTime.toFixed(2)}</td>\n                  </tr>\n                {/each}\n              </tbody>\n            </table>\n          </div>\n        {:else}\n          <h2 class=\"title is-4\">No Thoughts Tagged</h2>\n        {/if}\n      </div>\n    </div>\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAkCE,YAAY,eAAC,CAAC,AACZ,MAAM,CAAE,CAAC,AACX,CAAC,AACD,kBAAkB,eAAC,CAAC,AAClB,aAAa,CAAE,EAAE,CAAC,UAAU,CAC5B,WAAW,CAAE,EAAE,CAAC,UAAU,AAC5B,CAAC,AACD,SAAS,eAAC,CAAC,AACT,SAAS,CAAE,GAAG,AAChB,CAAC;AClBD,UAAU,cAAC,CAAC,AACV,KAAK,CAAE,MAAM,AACf,CAAC,AACD,kBAAkB,cAAC,CAAC,AAClB,SAAS,CAAE,GAAG,CACd,SAAS,CAAE,GAAG,AAChB,CAAC;AC1BD,eAAe,eAAC,CAAC,AACf,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,AACrB,CAAC,AACD,OAAO,eAAC,CAAC,AACP,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,aAAa,eAAC,CAAC,AACb,OAAO,CAAE,CAAC,AACZ,CAAC;AC6DD,WAAW,eAAC,CAAC,AACX,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAC9E,cAAc,CAAE,IAAI,AACtB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,cAAc,CAAE,IAAI,AACtB,CAAC,AACD,KAAK,eAAC,CAAC,AACL,GAAG,CAAE,GAAG,AACV,CAAC,AACD,GAAG,eAAC,CAAC,AACH,GAAG,CAAE,IAAI,AACX,CAAC,AACD,IAAI,eAAC,CAAC,AACJ,GAAG,CAAE,IAAI,AACX,CAAC,AACD,MAAM,eAAC,CAAC,AACN,IAAI,CAAE,GAAG,AACX,CAAC,AACD,SAAS,eAAC,CAAC,AACT,SAAS,CAAE,GAAG,AAChB,CAAC;ACoID,MAAM,cAAC,CAAC,AACN,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,eAAe,cAAC,CAAC,AACf,SAAS,CAAE,MAAM,CAAC,UAAU,AAC9B,CAAC,AAED,KAAK,cAAC,CAAC,AACL,cAAc,CAAE,KAAK,GAAG,CAAC,CACzB,MAAM,CAAE,KAAK,GAAG,CAAC,CACjB,cAAc,CAAE,IAAI,AACtB,CAAC,AAED,WAAW,cAAC,CAAC,AACX,aAAa,CAAE,CAAC,CAAC,UAAU,AAC7B,CAAC,AACD,WAAW,cAAC,CAAC,AACX,cAAc,CAAE,CAAC,CAAC,UAAU,AAC9B,CAAC"
}