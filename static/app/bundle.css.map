{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/pages/Instructions.svelte",
    "../../src/components/TagThought.svelte",
    "../../src/pages/Debrief.svelte"
  ],
  "sourcesContent": [
    "<script>\n  // This is the Instructions page. It loops over the instructions array as a user reads and when click to the last page it notifies the main App.svelte component by dispatching a 'finished' event. When the last page of the instructions are reached the forward button turns into a \"Take Quiz\" button, but currently there is no quiz and it goes straight to the experiment\n  import { createEventDispatcher } from 'svelte';\n\n  // Add/remove items here to create more instructions pages\n  const instructions = [\n    \"In this task, you will listen to a series of audio recordings (~2 min) in which you will hear people describing characters from a television drama. The goal of this task is to divide the audio into separate speech segments or thoughts.<br><br> While listening, pay close attention to where there are natural breaks in the person's speech, demarcating a separate thought.\",\n\n    'You will be able to play and pause each recording using buttons on screen. Click the Tag Thought button to tag a speech segment that you feel represents a complete thought. You can adjust the start and end times of the segment by dragging the sliders on the audio waveform. As you listen keep tagging new thoughts as you detect them.<br><br>You can always go back and edit segments by clicking on them in the table below the controls.',\n\n    'When you are finished with a recording click the Finish button to move onto the next recording. You will complete a total of <b>N</b> recordings for this HIT.',\n\n    'If these instructions make sense click the button below to try a practice trial. Otherwise feel free to go back through the instructions to make sure you understand this task'\n  ];\n\n  const dispatch = createEventDispatcher();\n  let currentPage = 0;\n\n  const backward = () => {\n    currentPage -= 1;\n    currentPage = Math.max(currentPage, 0);\n  };\n  const forward = () => {\n    // Check if we're increasing the value of currentPage beyond the number of instructions, if so tell App.svelte we're ready to move to the quiz\n    if (currentPage + 1 === instructions.length) {\n      dispatch('finished');\n    } else {\n      currentPage += 1;\n      currentPage = Math.min(currentPage, instructions.length - 1);\n    }\n  };\n</script>\n\n<style>\n  .no-space-hr {\n    margin: 0;\n  }\n  .custom-card-title {\n    margin-bottom: 2% !important;\n    padding-top: 2% !important;\n  }\n  .controls {\n    min-width: 50%;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"columns is-centered\">\n    <div class=\"column is-three-fifths \">\n      <div class=\"card\">\n        <div class=\"has-text-centered\">\n          <h1 class=\"title is-2 custom-card-title\">Instructions</h1>\n          <hr class=\"no-space-hr\" />\n        </div>\n        <div class=\"card-content\">\n          <div class=\"content\">\n            {@html instructions[currentPage]}\n          </div>\n        </div>\n        <footer class=\"card-footer\">\n          <p class=\"card-footer-item\">\n            <button class=\"button is-link controls\" on:click={backward}>\n              <span class=\"icon\">\n                <i class=\"fas fa-backward\" />\n              </span>\n            </button>\n          </p>\n          <p class=\"card-footer-item\">\n            <button class=\"button is-link controls\" on:click={forward}>\n              {#if currentPage === instructions.length - 1}\n                Try Practice\n              {:else}\n                <span class=\"icon\">\n                  <i class=\"fas fa-forward\" />\n                </span>\n              {/if}\n            </button>\n          </p>\n        </footer>\n      </div>\n    </div>\n  </div>\n</div>\n",
    "<script>\n  // This is the main ThoughTagging component that gets rendered within Experiment.svelte. It takes as an \"argument\" a \"src\" value from Experiment.svelte that tells it which audo file to render\n  import Peaks from 'peaks.js';\n  import { onMount, createEventDispatcher } from 'svelte';\n  import { db, params } from '../utils.js';\n\n  // This is how the Experiment page can tell TagThought which src to display in Peaksjs. It's like a function argument to TagThought\n  export let src;\n  export let currentTrial;\n  export let fileName;\n  // eslint-disable-next-line prefer-const\n  let [subjectId, character] = fileName.split('_');\n  [character] = character.split('_');\n  let peaksInstance;\n  let segments = [];\n  let selectedSegmentId;\n  let rowSelected = false;\n  let segmentPrevMax = 0;\n  const dispatch = createEventDispatcher();\n  let peaksLoading = true;\n\n  // After Svelte has created the webpage, initialize the peaks.js waveform player and all of its event-handlers. Also make sure the segments variable gets updated whenever a user manipulates the waveform player\n  onMount(() => {\n    const options = {\n      container: document.getElementById('waveform-container'),\n      mediaElement: document.getElementById('audio'),\n      webAudio: {\n        audioContext: new AudioContext()\n      },\n      keyboard: false,\n      pointMarkerColor: '#006eb0',\n      showPlayheadTime: true,\n      inMarkerColor: '#999999',\n      outMarkerColor: '#3d3d3d'\n    };\n    // Initialize peaks.js UI\n    peaksInstance = Peaks.init(options, (err) => {\n      if (err) {\n        console.error(err);\n      } else {\n        peaksLoading = false;\n        console.log('Peaks instance ready');\n        segments = peaksInstance.segments.getSegments();\n      }\n    });\n    // Add some built-in event handlers for mouse events for segments\n    peaksInstance.on('segments.mouseleave', (segment) => {\n      segments = peaksInstance.segments.getSegments();\n    });\n    peaksInstance.on('segments.click', (segment) => {\n      segments = peaksInstance.segments.getSegments();\n    });\n    peaksInstance.on('segments.dragged', (segment) => {\n      segments = peaksInstance.segments.getSegments();\n    });\n  });\n\n  // Grab the start and end time for each thought and save them into firebase\n  const finish = async () => {\n    if (segments) {\n      if (segments.length < 2) {\n        alert('Please tag a few more thoughts');\n      } else {\n        // We have to strip-out the extra properties that segment objects have (e.g. like waveform color) because firebase doesn't like that. Plus we only care about start and end times\n        const toSave = {};\n        segments.forEach((obj) => {\n          toSave[obj._id] = {\n            startTime: obj._startTime,\n            endTime: obj._endTime\n          };\n        });\n        // Create a nested dictionary of data to save with the key being the current trial number and sub-dictionaries containing the subject id of the person speaking, the character being talked about and the tagged thoughts\n        const doc = {\n          [`trial_${currentTrial}`]: {\n            subject: subjectId,\n            character,\n            thoughts: toSave\n          },\n          currentTrial: currentTrial + 1\n        };\n        try {\n          await db\n            .collection('participants')\n            .doc(params.workerId)\n            .set(doc, { merge: true });\n          console.log('document added successfully');\n          peaksInstance.destroy();\n          dispatch('next');\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    }\n  };\n\n  // Store a new segment on button click\n  function addSegment() {\n    peaksInstance.segments.add({\n      startTime: peaksInstance.player.getCurrentTime(),\n      endTime: peaksInstance.player.getCurrentTime() + 5,\n      labelText: `Thought ${segmentPrevMax.toString()}`,\n      editable: true\n    });\n    // Update the variable that stores all the segments for dynamic rendering\n    segments = peaksInstance.segments.getSegments();\n    segmentPrevMax += 1;\n  }\n\n  // Select a segment based on a table row that get clicked\n  function selectSegment(ev) {\n    // Get all rows\n    const rows = document.getElementsByClassName('table-row');\n    // Get click row\n    const row = ev.target.parentNode;\n    // If clicked row already has class unselected it and all other rows\n    if (row.className === 'table-row is-selected') {\n      for (const r of rows) {\n        r.className = 'table-row';\n      }\n      rowSelected = false;\n    } else {\n      // Otherwise unselect everything else first then select this one\n      for (const r of rows) {\n        r.className = 'table-row';\n      }\n      row.className += ' is-selected';\n      rowSelected = true;\n    }\n    // Save the segment id\n    selectedSegmentId = parseInt(\n      row.querySelector('td.segment-id').innerText,\n      10\n    );\n    selectedSegmentId = `peaks.segment.${selectedSegmentId.toString()}`;\n  }\n\n  // Play a selected segment on button click\n  function playSegment() {\n    const segment = peaksInstance.segments.getSegment(selectedSegmentId);\n    peaksInstance.player.playSegment(segment);\n  }\n\n  // Delete a selected segment on button click\n  function deleteSegment() {\n    peaksInstance.segments.removeById(selectedSegmentId);\n    // Clear selection from all other rows and hide button\n    const rows = document.getElementsByClassName('table-row');\n    for (const r of rows) {\n      r.className = 'table-row';\n    }\n    rowSelected = false;\n    segments = peaksInstance.segments.getSegments();\n  }\n\n  // Print all segments to console on button click; just for debugging\n  function seeSegments() {\n    console.log(segments);\n  }\n</script>\n\n<style>\n  .hidden {\n    visibility: hidden;\n  }\n\n  .table {\n    margin-left: auto;\n    margin-right: auto;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"columns is-centered\">\n    <div class=\"column is-three-quarters\">\n      <h1 class=\"title\">Recording #{currentTrial}</h1>\n      {#if peaksLoading}\n        <h3 class=\"title is-3\">Loading audio...</h3>\n      {/if}\n      <div id=\"waveform-container\" />\n      <div class=\"columns\">\n        <div class=\"column is-one-quarter\">\n          <audio id=\"audio\" controls=\"controls\">\n            <source {src} type=\"audio/wav\" />\n            Your browser does not support the audio element.\n          </audio>\n        </div>\n        <div class=\"column is-one-half\">\n          <button class=\"button is-primary is-large\" on:click={addSegment}>\n            Tag Thought\n          </button>\n          <button class=\"button is-info is-large\" on:click={finish}>\n            Finished\n          </button>\n          <button\n            class={rowSelected ? 'button is-success is-large' : 'button is-success is-large hidden'}\n            on:click={playSegment}>\n            Play Thought\n          </button>\n          <button\n            class={rowSelected ? 'button is-danger is-large' : 'button is-danger is-large hidden'}\n            on:click={deleteSegment}>\n            Delete Segment\n          </button>\n          <!-- <button class=\"button is-warning is-large\" on:click={seeSegments}>Debug</button> -->\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"columns is-centered\">\n    <div class=\"column is-three-quarters has-text-centered\">\n      {#if segments && segments.length}\n        <div class=\"table-container\">\n          <table class=\"table is-hoverable\">\n            <thead>\n              <tr>\n                <th>Thought Number</th>\n                <th>Start time</th>\n                <th>End time</th>\n              </tr>\n            </thead>\n            <tbody>\n              {#each segments as segment, i (segment.id)}\n                <tr on:click={selectSegment} class=\"table-row\">\n                  <td type=\"text\" class=\"segment-id\">\n                    {segment.id.split('.').slice(-1)[0]}\n                  </td>\n                  <td type=\"number\">{segment.startTime.toFixed(2)}</td>\n                  <td type=\"number\">{segment.endTime.toFixed(2)}</td>\n                </tr>\n              {/each}\n            </tbody>\n          </table>\n        </div>\n      {:else}\n        <h2 class=\"title is-4\">No Thoughts Tagged</h2>\n      {/if}\n    </div>\n  </div>\n</div>\n",
    "<script>\n  // This is the debrief page in which we should collect any post survey questions. There's a single button that should save reponses to firebase and then tell PsiTurk we're done.\n  import { db, params } from '../utils.js';\n\n  let age = '';\n  let feedback = '';\n  let sex = '';\n  const submitHIT = async () => {\n    try {\n      await db\n        .collection('participants')\n        .doc(params.workerId)\n        .set(\n          {\n            age,\n            sex,\n            feedback\n          },\n          { merge: true }\n        );\n      console.log('exit survey added successfully');\n      window.top.postMessage('finished', '*');\n      console.log('back to PsiTurk!');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n</script>\n\n<style>\n  .age-input {\n    width: 2.5rem;\n  }\n  .textarea-feedback {\n    min-width: 80%;\n    max-width: 80%;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"columns is-centered\">\n    <div class=\"column is-three-quarters\">\n      <p class=\"title is-3 has-text-centered\">Thank You For Participating!</p>\n      <p class=\"subtitle is-6 has-text-centered\">\n        <em>All questions are optional</em>\n      </p>\n      <form on:submit|preventDefault={submitHIT}>\n        <div class=\"field is-horizontal\">\n          <div class=\"field-label is-normal\">\n            <label class=\"label\">Age</label>\n          </div>\n          <div class=\"field-body is-narrow\">\n            <div class=\"field\">\n              <p class=\"control\">\n                <input class=\"input age-input\" type=\"text\" bind:value={age} />\n              </p>\n            </div>\n          </div>\n        </div>\n        <div class=\"field is-horizontal\">\n          <div class=\"field-label\">\n            <label class=\"label\">Sex</label>\n          </div>\n          <div class=\"field-body\">\n            <div class=\"field is-narrow\">\n              <div class=\"control\">\n                <label class=\"radio\">\n                  <input type=\"radio\" bind:group={sex} value={'male'} />\n                  Male\n                </label>\n                <label class=\"radio\">\n                  <input type=\"radio\" bind:group={sex} value={'female'} />\n                  Female\n                </label>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"field is-horizontal\">\n          <div class=\"field-label is-normal\">\n            <label class=\"label\">Feedback</label>\n          </div>\n          <div class=\"field-body\">\n            <div class=\"field\">\n              <div class=\"control\">\n                <textarea\n                  class=\"textarea textarea-feedback\"\n                  bind:value={feedback}\n                  placeholder=\"Thoughts or suggestions about this HIT\" />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"field is-horizontal\">\n          <div class=\"field-label\">\n            <!-- Left empty for spacing -->\n          </div>\n          <div class=\"field-body\">\n            <div class=\"field\">\n              <div class=\"control\">\n                <button class=\"button is-success is-large\">Submit HIT</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAkCE,YAAY,eAAC,CAAC,AACZ,MAAM,CAAE,CAAC,AACX,CAAC,AACD,kBAAkB,eAAC,CAAC,AAClB,aAAa,CAAE,EAAE,CAAC,UAAU,CAC5B,WAAW,CAAE,EAAE,CAAC,UAAU,AAC5B,CAAC,AACD,SAAS,eAAC,CAAC,AACT,SAAS,CAAE,GAAG,AAChB,CAAC;ACsHD,OAAO,aAAC,CAAC,AACP,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,MAAM,aAAC,CAAC,AACN,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,AACpB,CAAC;AC1ID,UAAU,cAAC,CAAC,AACV,KAAK,CAAE,MAAM,AACf,CAAC,AACD,kBAAkB,cAAC,CAAC,AAClB,SAAS,CAAE,GAAG,CACd,SAAS,CAAE,GAAG,AAChB,CAAC"
}