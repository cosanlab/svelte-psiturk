{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/TagThought.svelte",
    "../../src/Instructions.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Peaks from 'peaks.js';\n  import { onMount } from 'svelte';\n  import { db } from './firebase.js';\n\n  let peaksInstance;\n  let segments = [];\n  let selectedSegmentId;\n  let rowSelected = false;\n  let segmentPrevMax = 0;\n\n  // After Svelte has created the webpage, initialize the peaks.js waveform player and all of its event-handlers. Also make sure the segments variable gets updated whenever a user manipulates the waveform player\n  onMount(() => {\n    const options = {\n      container: document.getElementById('waveform-container'),\n      mediaElement: document.getElementById('audio'),\n      webAudio: {\n        audioContext: new AudioContext()\n      },\n      keyboard: false,\n      pointMarkerColor: '#006eb0',\n      showPlayheadTime: true,\n      inMarkerColor: '#999999',\n      outMarkerColor: '#3d3d3d'\n    };\n    // Initialize peaks.js UI\n    peaksInstance = Peaks.init(options, function (err, peakrs) {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log('Peaks instance ready');\n        segments = peaksInstance.segments.getSegments();\n      }\n    });\n    // Add some built-in event handlers for mouse events for segments\n    peaksInstance.on('segments.mouseleave', function (segment) {\n      segments = peaksInstance.segments.getSegments();\n    });\n    peaksInstance.on('segments.click', function (segment) {\n      segments = peaksInstance.segments.getSegments();\n    });\n    peaksInstance.on('segments.dragged', function (segment) {\n      segments = peaksInstance.segments.getSegments();\n    });\n  });\n\n  // Grab the start and end time for each thought and save them into firebase\n  function finish () {\n    // if (segments) {\n    //   if (segments.length < 2) {\n    //     alert(\"Please tag a few more thoughts\");\n    //   }\n    //   else {\n    //     // We have to strip-out the extra properties that segment objects have (e.g. like waveform color) because firebase doesn't like that. Plus we only care about start and end times\n    //     let toSave = {};\n    //     segments.forEach((obj) => {\n    //       toSave[obj._id] = { startTime: obj._startTime, endTime: obj._endTime };\n    //     });\n    //     db.collection('thoughts').doc('test-user').set(Object.assign({}, toSave))\n    //       .then(() => {\n    //         console.log(\"document added successfully\");\n    //       })\n    //       .catch((error) => {\n    //         console.error(error);\n    //       });\n    //   }\n    // }\n    console.log('finished');\n    window.top.postMessage('finished', '*');\n  }\n\n  // Store a new segment on button click\n  function addSegment () {\n    peaksInstance.segments.add({\n      startTime: peaksInstance.player.getCurrentTime(),\n      endTime: peaksInstance.player.getCurrentTime() + 5,\n      labelText: 'Thought ' + segmentPrevMax.toString(),\n      editable: true\n    });\n    // Update the variable that stores all the segments for dynamic rendering\n    segments = peaksInstance.segments.getSegments();\n    segmentPrevMax = segmentPrevMax + 1;\n  }\n\n  // Select a segment based on a table row that get clicked\n  function selectSegment (ev) {\n    // Get all rows\n    const rows = document.getElementsByClassName('table-row');\n    // Get click row\n    const row = ev.target.parentNode;\n    // If clicked row already has class unselected it and all other rows\n    if (row.className === 'table-row is-selected') {\n      for (const r of rows) {\n        r.className = 'table-row';\n      }\n      rowSelected = false;\n    } else {\n      // Otherwise unselect everything else first then select this one\n      for (const r of rows) {\n        r.className = 'table-row';\n      }\n      row.className += ' is-selected';\n      rowSelected = true;\n    }\n    // Save the segment id\n    selectedSegmentId = parseInt(row.querySelector('td.segment-id').innerText);\n    selectedSegmentId = 'peaks.segment.' + selectedSegmentId.toString();\n  }\n\n  // Play a selected segment on button click\n  function playSegment () {\n    const segment = peaksInstance.segments.getSegment(selectedSegmentId);\n    peaksInstance.player.playSegment(segment);\n  }\n\n  // Delete a selected segment on button click\n  function deleteSegment () {\n    peaksInstance.segments.removeById(selectedSegmentId);\n    // Clear selection from all other rows and hide button\n    const rows = document.getElementsByClassName('table-row');\n    for (const r of rows) {\n      r.className = 'table-row';\n    }\n    rowSelected = false;\n    segments = peaksInstance.segments.getSegments();\n  }\n\n  // Print all segments to console on button click; just for debugging\n  function seeSegments () {\n    console.log(segments);\n  }\n</script>\n\n<style>\n  .hidden {\n    visibility: hidden;\n  }\n\n  .table {\n    margin-left: auto;\n    margin-right: auto;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"columns is-centered\">\n    <div class=\"column is-three-quarters\">\n      <h1 class=\"title\">Thought Segmentation</h1>\n      <p class=\"is-size-5\">\n        In this task, you will listen to a series of audio files (~2 min) in\n        which you will hear people describing characters from a television\n        drama. The goal of this task is to divide the audio into separate speech\n        segments or thoughts. Follow the directions below to perform the task.\n        <b>Do not refresh your browser</b>\n      </p>\n      <div class=\"columns\">\n        <div class=\"column is-10 is-offset-1\">\n          <ol>\n            <li>Click the play button to start listening to the audio.</li>\n            <li>\n              Pay close attention to where there are natural breaks in a\n              person’s speech, demarcating a separate thought.\n            </li>\n            <li>\n              Click Tag Thought, to tag a speech segment or “thought”. You can\n              adjust the start and end times by dragging the sliders. Add\n              segments as you continue to listen to the audio.\n            </li>\n            <li>\n              You can go back and edit segments by clicking on then in the\n              table.\n            </li>\n            <li>Click Finish to continue to the next audio file.</li>\n          </ol>\n        </div>\n      </div>\n      <div id=\"waveform-container\" />\n      <div class=\"columns\">\n        <div class=\"column is-one-quarter\">\n          <audio id=\"audio\" controls=\"controls\">\n            <source\n              src=\"https://dl.dropboxusercontent.com/s/vvq50nz47pndx2b/s12_JulieTaylor.wav\"\n              type=\"audio/wav\" />\n            Your browser does not support the audio element.\n          </audio>\n        </div>\n        <div class=\"column is-one-half\">\n          <button class=\"button is-primary is-large\" on:click={addSegment}>\n            Tag Thought\n          </button>\n          <button class=\"button is-info is-large\" on:click={finish}>\n            Finished\n          </button>\n          <button\n            class={rowSelected ? 'button is-success is-large' : 'button is-success is-large hidden'}\n            on:click={playSegment}>\n            Play Thought\n          </button>\n          <button\n            class={rowSelected ? 'button is-danger is-large' : 'button is-danger is-large hidden'}\n            on:click={deleteSegment}>\n            Delete Segment\n          </button>\n          <!-- <button class=\"button is-warning is-large\" on:click={seeSegments}>Debug</button> -->\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"columns is-centered\">\n    <div class=\"column is-three-quarters has-text-centered\">\n      {#if segments && segments.length}\n        <div class=\"table-container\">\n          <table class=\"table is-hoverable\">\n            <thead>\n              <tr>\n                <th>Thought Number</th>\n                <th>Start time</th>\n                <th>End time</th>\n              </tr>\n            </thead>\n            <tbody>\n              {#each segments as segment, i (segment.id)}\n                <tr on:click={selectSegment} class=\"table-row\">\n                  <td type=\"text\" class=\"segment-id\">\n                    {segment.id.split('.').slice(-1)[0]}\n                  </td>\n                  <td type=\"number\">{segment.startTime.toFixed(2)}</td>\n                  <td type=\"number\">{segment.endTime.toFixed(2)}</td>\n                </tr>\n              {/each}\n            </tbody>\n          </table>\n        </div>\n      {:else}\n        <h2 class=\"title is-4\">No Thoughts Tagged</h2>\n      {/if}\n    </div>\n  </div>\n</div>\n",
    "<script>\n  let currentPage = 0;\n  const instructions = [\n    'This is the first page of the instructions',\n    'This is the second page of the instructions. Its a bit longer and might stretch over multiple lines',\n    'This is the third page of the instructions'\n  ];\n\n  const backward = () => {\n    currentPage -= 1;\n    currentPage = Math.max(currentPage, 0);\n  };\n  const forward = () => {\n    currentPage += 1;\n    currentPage = Math.min(currentPage, instructions.length - 1);\n  };\n</script>\n\n<style>\n  .no-space-hr {\n    margin: 0;\n  }\n  .custom-card-title {\n    margin-bottom: 2% !important;\n    padding-top: 2% !important;\n  }\n  .controls {\n    min-width: 50%;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"columns is-centered\">\n    <div class=\"column is-three-fifths \">\n      <div class=\"card\">\n        <div class=\"has-text-centered\">\n          <h1 class=\"title is-2 custom-card-title\">Instructions</h1>\n          <hr class=\"no-space-hr\" />\n        </div>\n        <div class=\"card-content\">\n          <div class=\"content\">{instructions[currentPage]}</div>\n        </div>\n        <footer class=\"card-footer\">\n          <p class=\"card-footer-item\">\n            <button class=\"button is-link controls\" on:click={backward}>\n              <span class=\"icon\">\n                <i class=\"fas fa-backward\" />\n              </span>\n            </button>\n          </p>\n          <p class=\"card-footer-item\">\n            <button class=\"button is-link controls\" on:click={forward}>\n              <span class=\"icon\">\n                <i class=\"fas fa-forward\" />\n              </span>\n            </button>\n          </p>\n        </footer>\n      </div>\n    </div>\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAsIE,OAAO,aAAC,CAAC,AACP,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,MAAM,aAAC,CAAC,AACN,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,AACpB,CAAC;AC1HD,YAAY,eAAC,CAAC,AACZ,MAAM,CAAE,CAAC,AACX,CAAC,AACD,kBAAkB,eAAC,CAAC,AAClB,aAAa,CAAE,EAAE,CAAC,UAAU,CAC5B,WAAW,CAAE,EAAE,CAAC,UAAU,AAC5B,CAAC,AACD,SAAS,eAAC,CAAC,AACT,SAAS,CAAE,GAAG,AAChB,CAAC"
}