{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/pages/Instructions.svelte",
    "../../src/pages/Debrief.svelte",
    "../../src/components/Loading.svelte",
    "../../src/pages/Quiz.svelte",
    "../../src/components/TagThought.svelte"
  ],
  "sourcesContent": [
    "<script>\n  // This is the Instructions page. It loops over the instructions array as a user reads and when click to the last page it notifies the main App.svelte component by dispatching a 'finished' event. When the last page of the instructions are reached the forward button turns into a \"Take Quiz\" button, but currently there is no quiz and it goes straight to the experiment\n  import { createEventDispatcher } from 'svelte';\n\n  // Add/remove items here to create more instructions pages\n  const instructions = [\n    \"In this task, you will listen to a series of audio recordings (~2 min) in which you will hear people describing characters from a television drama. The goal of this task is to divide the audio into separate speech segments or thoughts.<br><br> While listening, pay close attention to where there are natural breaks in the person's speech, demarcating a separate thought.\",\n\n    'You will be able to play and pause each recording using buttons on screen. Click the Tag Thought button to tag a speech segment that you feel represents a complete thought. You can adjust the start and end times of the segment by dragging the sliders on the audio waveform. As you listen keep tagging new thoughts as you detect them.<br><br>You can always go back and edit segments by clicking on them in the table below the controls.',\n\n    'When you are finished with a recording click the Finish button to move onto the next recording. You will complete a total of <b>N</b> recordings for this HIT.',\n\n    'If these instructions make sense click the button below to try a practice trial. Otherwise feel free to go back through the instructions to make sure you understand this task'\n  ];\n\n  const dispatch = createEventDispatcher();\n  let currentPage = 0;\n\n  const backward = () => {\n    currentPage -= 1;\n    currentPage = Math.max(currentPage, 0);\n  };\n  const forward = () => {\n    // Check if we're increasing the value of currentPage beyond the number of instructions, if so tell App.svelte we're ready to move to the quiz\n    if (currentPage + 1 === instructions.length) {\n      dispatch('finished');\n    } else {\n      currentPage += 1;\n      currentPage = Math.min(currentPage, instructions.length - 1);\n    }\n  };\n</script>\n\n<style>\n  .no-space-hr {\n    margin: 0;\n  }\n  .custom-card-title {\n    margin-bottom: 2% !important;\n    padding-top: 2% !important;\n  }\n  .controls {\n    min-width: 50%;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"columns is-centered\">\n    <div class=\"column is-three-fifths \">\n      <div class=\"card\">\n        <div class=\"has-text-centered\">\n          <h1 class=\"title is-2 custom-card-title\">Instructions</h1>\n          <hr class=\"no-space-hr\" />\n        </div>\n        <div class=\"card-content\">\n          <div class=\"content\">\n            {@html instructions[currentPage]}\n          </div>\n        </div>\n        <footer class=\"card-footer\">\n          <p class=\"card-footer-item\">\n            <button class=\"button is-link controls\" on:click={backward}>\n              <span class=\"icon\">\n                <i class=\"fas fa-backward\" />\n              </span>\n            </button>\n          </p>\n          <p class=\"card-footer-item\">\n            <button class=\"button is-link controls\" on:click={forward}>\n              {#if currentPage === instructions.length - 1}\n                Try Practice\n              {:else}\n                <span class=\"icon\">\n                  <i class=\"fas fa-forward\" />\n                </span>\n              {/if}\n            </button>\n          </p>\n        </footer>\n      </div>\n    </div>\n  </div>\n</div>\n",
    "<script>\n  // This is the debrief page in which we should collect any post survey questions. There's a single button that should save reponses to firebase and then tell PsiTurk we're done.\n  import { db, params, serverTime } from '../utils.js';\n\n  let age = '';\n  let feedback = '';\n  let sex = '';\n  const submitHIT = async () => {\n    try {\n      await db.ref(`participants/${params.workerId}`).update({\n        age,\n        sex,\n        feedback,\n        HIT_complete: serverTime\n      });\n      console.log('exit survey added successfully');\n      window.top.postMessage('finished', '*');\n      console.log('back to PsiTurk!');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n</script>\n\n<style>\n  .age-input {\n    width: 2.5rem;\n  }\n  .textarea-feedback {\n    min-width: 80%;\n    max-width: 80%;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"columns is-centered\">\n    <div class=\"column is-three-quarters\">\n      <p class=\"title is-3 has-text-centered\">Thank You For Participating!</p>\n      <p class=\"subtitle is-6 has-text-centered\">\n        <em>All questions are optional</em>\n      </p>\n      <form on:submit|preventDefault={submitHIT}>\n        <div class=\"field is-horizontal\">\n          <div class=\"field-label is-normal\">\n            <label class=\"label\">Age</label>\n          </div>\n          <div class=\"field-body is-narrow\">\n            <div class=\"field\">\n              <p class=\"control\">\n                <input class=\"input age-input\" type=\"text\" bind:value={age} />\n              </p>\n            </div>\n          </div>\n        </div>\n        <div class=\"field is-horizontal\">\n          <div class=\"field-label\">\n            <label class=\"label\">Sex</label>\n          </div>\n          <div class=\"field-body\">\n            <div class=\"field is-narrow\">\n              <div class=\"control\">\n                <label class=\"radio\">\n                  <input type=\"radio\" bind:group={sex} value={'male'} />\n                  Male\n                </label>\n                <label class=\"radio\">\n                  <input type=\"radio\" bind:group={sex} value={'female'} />\n                  Female\n                </label>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"field is-horizontal\">\n          <div class=\"field-label is-normal\">\n            <label class=\"label\">Feedback</label>\n          </div>\n          <div class=\"field-body\">\n            <div class=\"field\">\n              <div class=\"control\">\n                <textarea\n                  class=\"textarea textarea-feedback\"\n                  bind:value={feedback}\n                  placeholder=\"Thoughts or suggestions about this HIT\" />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"field is-horizontal\">\n          <div class=\"field-label\">\n            <!-- Left empty for spacing -->\n          </div>\n          <div class=\"field-body\">\n            <div class=\"field\">\n              <div class=\"control\">\n                <button class=\"button is-success is-large\">Submit HIT</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n",
    "<script>\n  // This component is just for displaying while we wait for firebase responses\n</script>\n\n<style>\n  .loader-wrapper {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    top: 0;\n    left: 0;\n    background: #fff;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .loader {\n    width: 35rem;\n    height: 35rem;\n    position: absolute;\n  }\n  .loading-text {\n    z-index: 9;\n  }\n</style>\n\n<div class=\"loader-wrapper\">\n  <div class=\"loader is-loading\" />\n  <div class=\"loading-text\">\n    <h1 class=\"is-size-3\">\n      <slot />\n    </h1>\n  </div>\n</div>\n",
    "<script>\n  // This is the main ThoughTagging component that gets rendered within Experiment.svelte. It takes as an \"argument\" a \"src\" value from Experiment.svelte that tells it which audo file to render\n  import Peaks from 'peaks.js';\n  import { onMount, createEventDispatcher } from 'svelte';\n  import { db, params, serverTime } from '../utils.js';\n\n  // This is how the Experiment page can tell TagThought which src to display in Peaksjs. It's like a function argument to TagThought\n  export let src;\n  let peaksInstance;\n  let segments = [];\n  let selectedSegmentId;\n  let rowSelected = false;\n  let segmentPrevMax = 0;\n  const dispatch = createEventDispatcher();\n  let peaksLoading = true;\n  let rate = false;\n  let confidence = 50;\n  let clarity = 50;\n  let clarityRated = false;\n  let confidenceRated = false;\n  let time = '';\n  let timer;\n  let invalidTime = false;\n  $: nextTrialActive = !(clarityRated && confidenceRated && time && !invalidTime);\n  $: ratingActive = segments.length === 0;\n  let modalOpen;\n  const tutorialSteps = [\n    'Overview',\n    'Recording Display',\n    'Controls',\n    'Tagging Thoughts',\n    'Comprehension Check'\n  ];\n  let currentStep = 0;\n  $: tutorialState = tutorialSteps[currentStep];\n  let modalXInitial;\n  let modalYInitial;\n  let modalXCurrent;\n  let modalYCurrent;\n  let modalXOffset = 0;\n  let modalYOffset = 0;\n  let dragActive = false;\n  let tutorialComplete = false;\n  let quizComplete = false;\n  let quizFailed = false;\n  let tutorialSubmitted = false;\n  $: down = currentStep === 1;\n  $: up = currentStep === 2 || quizComplete;\n  $: right = currentStep === 3 || currentStep === 1;\n  $: upp = currentStep === 3;\n\n  const tutorialInstructions = [\n    '<p>This brief tutorial will introduce you to the interface you will use to complete the task. Feel free to drag and reposition this popup as you progress through each step of the tutorial.</p>',\n\n    '<p>This part of the screen creen contains a visual representation of the audio recording. The top half of this display (in green) shows a zoomed in view of an <strong>audio snippet</strong> of the recording, while the bottom half displays the <strong>full recording</strong> along with a box highlighting the <strong>location of the snippet</strong> within the full recording. Below this are playback controls you can use to play, pause, and adjust the volume of the recording. Playback is synchronized between these controls and the visual display.</p><p>You can move to a specific location within the snippet or within the full recording by <strong>clicking</strong> in the top or bottom display respectively. This will move the vertical position indicator to a new timepoint in both displays. You can also scrub through the snippet or full recording by <strong>clicking & dragging</strong> left or right.</p><br/><p>Feel free to click around within this display to get a feel for how you can control your position within the recording.</p>',\n\n    '<p>Next to the audio controls you will also find buttons to tag a new thought and submit your responses when you are finished tagging thoughts in this audio file. Below this you will see a section that lists your currently tagged thoughts. As you can see currently no thoughts have been tagged so nothing is visible.</p><br/><p><strong>Try clicking the Tag thought button now.</strong></p>',\n\n    'Notice how this added a row to the table along with markers to the visual display above. The <span class=\"has-text-weight-bold has-text-grey\">start marker (light grey)</span> indicates the beginning of a tag based on your current position in the audio file. The <span class=\"has-text-weight-bold has-text-grey-darker\">end marker (dark grey)</span> indicates the end of a tag and defaults to 5 seconds after the start marker. <br><br>You should edit these times to match when when you think a new thought begins and when that same thought ends. To edit these times first select this thought by <strong>clicking on its row</strong> within the table. Then <strong>drag the markers</strong> in the display above to make an adjustment. Notice how the values in the table change in sync with your actions in the display above. You can also delete a tag or play audio within a tag verify your work using the buttons that appear. After you finish editing just click on the same thought in the table to deselect it.',\n\n    'You now know how to use the controls. Try to identify <strong>three thoughts</strong> within this audio file to continue. We will verify your tags to determine your eligibility to continue with this HIT and earn a bonus payment for tagging more files. If you fail to correctly identify these thoughts you will be paid for the HIT but will not be permitted to continute tagging. You can bring up this guide by clicking the help icon next to the audio controls.'\n  ];\n  $: tutorialContent = tutorialInstructions[currentStep];\n\n  const quizOutcome = [\n    '<div class=\"content\"><p>Nice job! You did exactly what were looking for. After you finish tagging thoughts there are 3 additional questions we would like you input before submitting your tags.<ol class=\"1\"><li>The approximate time that the speaker in the recording stopped talking</li><li>The clarity of the audio recording</li><li>The difficulty of identifying thoughts based on the speaker style</li><ol>Please complete these now and click the Next button.</p></div>',\n    '<p>Perfect! You are now eligible to tag more recordings. You will earn a $0.50 bonus for each additional recording you tag thoughts for. Otherwise you can complete this HIT and earn your payment without any bonuses. Please select your preference below </p>',\n    '<p>Hmm your tags are not quite what we are looking for. We have highlighted the tags you made below that do not line up with what we expected. Please adjust your tags and click Done to try verifying your responses again. <br><br> You will only have <strong>1 more chance</strong> to identify the correct tags before you forfeit any bonus payments.</p>',\n    '<p>Unfortunately your tags still do not reflect what we are looking for. Therefore you can no longer continue with this HIT and earn bonus payments.<br><br>Do not worry, you will still be compensenated the base payment for this HIT.</p>'\n  ];\n\n  const backward = () => {\n    currentStep -= 1;\n    currentStep = Math.max(currentStep, 0);\n    console.log(tutorialSteps[currentStep]);\n  };\n  const forward = () => {\n    currentStep = Math.min(currentStep + 1, tutorialSteps.length - 1);\n    if (currentStep === tutorialSteps.length - 1) {\n      tutorialComplete = true;\n    }\n    console.log(tutorialSteps[currentStep]);\n  };\n\n  const setTranslate = (xPos, yPos, el) => {\n    el.style.transform = `translate3d(${xPos}px, ${yPos}px, 0)`;\n  };\n\n  const dragStart = (ev) => {\n    if (ev.target.parentElement.closest('.modal')) {\n      modalXInitial = ev.clientX - modalXOffset;\n      modalYInitial = ev.clientY - modalYOffset;\n      dragActive = true;\n    }\n  };\n\n  const drag = (ev) => {\n    if (dragActive) {\n      modalXCurrent = ev.clientX - modalXInitial;\n      modalYCurrent = ev.clientY - modalYInitial;\n      modalXOffset = modalXCurrent;\n      modalYOffset = modalYCurrent;\n      const el = document.getElementById('modal');\n      setTranslate(modalXCurrent, modalYCurrent, el);\n    }\n  };\n\n  const dragEnd = (ev) => {\n    modalXInitial = modalXCurrent;\n    modalYInitial = modalYCurrent;\n    dragActive = false;\n  };\n\n  const debounce = (v) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      if ((time.length === 5 && time.includes(':')) || !time) {\n        invalidTime = false;\n      } else {\n        invalidTime = true;\n      }\n    }, 600);\n  };\n\n  const checkQuiz = () => {\n    if (segments.length === 3) {\n      quizComplete = true;\n      tutorialContent = quizOutcome[0];\n      rate = true;\n    } else {\n      quizComplete = true;\n      quizFailed = true;\n      tutorialContent = quizOutcome[3];\n    }\n  };\n\n  // After Svelte has created the webpage, initialize the peaks.js waveform player and all of its event-handlers. Also make sure the segments variable gets updated whenever a user manipulates the waveform player\n  onMount(() => {\n    const options = {\n      container: document.getElementById('waveform-container'),\n      mediaElement: document.getElementById('audio'),\n      webAudio: {\n        audioContext: new AudioContext()\n      },\n      keyboard: false,\n      pointMarkerColor: '#006eb0',\n      showPlayheadTime: true,\n      inMarkerColor: '#999999',\n      outMarkerColor: '#3d3d3d'\n    };\n    modalOpen = true;\n    // Initialize peaks.js UI\n    peaksInstance = Peaks.init(options, (err) => {\n      if (err) {\n        console.error(err);\n      } else {\n        peaksLoading = false;\n        console.log('Peaks instance ready');\n        segments = peaksInstance.segments.getSegments();\n      }\n    });\n    // Add some built-in event handlers for mouse events for segments\n    peaksInstance.on('segments.mouseleave', (segment) => {\n      segments = peaksInstance.segments.getSegments();\n    });\n    peaksInstance.on('segments.click', (segment) => {\n      segments = peaksInstance.segments.getSegments();\n    });\n    peaksInstance.on('segments.dragged', (segment) => {\n      segments = peaksInstance.segments.getSegments();\n    });\n  });\n\n  // Grab the start and end time for each thought and save them into firebase\n  const finish = () => {\n    tutorialSubmitted = true;\n    tutorialContent = quizOutcome[1];\n    modalOpen = true;\n  };\n\n  const submitTags = () => {\n    if (!segments || (segments && segments.length <= 2)) {\n      alert('Please tag a few more thoughts');\n    } else {\n      // TODO: Check inputted responses here change quizOutcome state\n      // TODO: Put state and quiz pass into firebase to page refresh doesn't reset\n      checkQuiz();\n      modalOpen = true;\n    }\n  };\n  // Store a new segment on button click\n  function addSegment() {\n    peaksInstance.segments.add({\n      startTime: peaksInstance.player.getCurrentTime(),\n      endTime: peaksInstance.player.getCurrentTime() + 5,\n      labelText: `Thought ${segmentPrevMax.toString()}`,\n      editable: true\n    });\n    // Update the variable that stores all the segments for dynamic rendering\n    segments = peaksInstance.segments.getSegments();\n    segmentPrevMax += 1;\n    if (currentStep === 2) {\n      forward();\n    }\n  }\n\n  // Select a segment based on a table row that get clicked\n  function selectSegment(ev) {\n    // Get all rows\n    const rows = document.getElementsByClassName('table-row');\n    // Get click row\n    const row = ev.target.parentNode;\n    // If clicked row already has class unselected it and all other rows\n    if (row.className === 'table-row is-selected') {\n      for (const r of rows) {\n        r.className = 'table-row';\n      }\n      rowSelected = false;\n    } else {\n      // Otherwise unselect everything else first then select this one\n      for (const r of rows) {\n        r.className = 'table-row';\n      }\n      row.className += ' is-selected';\n      rowSelected = true;\n    }\n    // Save the segment id\n    selectedSegmentId = parseInt(row.querySelector('td.segment-id').innerText, 10);\n    selectedSegmentId = `peaks.segment.${selectedSegmentId.toString()}`;\n  }\n\n  // Play a selected segment on button click\n  function playSegment() {\n    const segment = peaksInstance.segments.getSegment(selectedSegmentId);\n    peaksInstance.player.playSegment(segment);\n  }\n\n  // Delete a selected segment on button click\n  function deleteSegment() {\n    peaksInstance.segments.removeById(selectedSegmentId);\n    // Clear selection from all other rows and hide button\n    const rows = document.getElementsByClassName('table-row');\n    for (const r of rows) {\n      r.className = 'table-row';\n    }\n    rowSelected = false;\n    segments = peaksInstance.segments.getSegments();\n  }\n</script>\n\n<style>\n  .table {\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .loading-button {\n    font-size: 4.5rem !important;\n  }\n\n  .blur {\n    -webkit-filter: blur(5px);\n    filter: blur(5px);\n    pointer-events: none;\n  }\n  .modal-card {\n    border-radius: 6px;\n    box-shadow: 3px 3px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);\n    pointer-events: auto;\n  }\n  .modal {\n    pointer-events: none;\n  }\n  .down {\n    top: 15%;\n  }\n  .up {\n    top: -15%;\n  }\n  .upp {\n    top: -21%;\n  }\n  .right {\n    left: 12%;\n  }\n  .button-row {\n    margin-bottom: 0 !important;\n  }\n  .button-col {\n    padding-bottom: 0 !important;\n  }\n</style>\n\n<div\n  class={modalOpen ? 'modal is-active' : 'modal'}\n  on:mousedown|preventDefault={dragStart}\n  on:mouseup|preventDefault={dragEnd}\n  on:mousemove|preventDefault={drag}>\n  <div class=\"modal-card\" id=\"modal\" class:up class:right class:down class:upp>\n    <header class=\"modal-card-head\">\n      <p class=\"modal-card-title\">{tutorialState}</p>\n    </header>\n    <section class=\"modal-card-body\">\n\n      {@html tutorialContent}\n\n    </section>\n    <footer class=\"modal-card-foot\">\n      {#if quizComplete}\n        {#if tutorialSubmitted}\n          <p class=\"card-footer-item\">\n            <button\n              class=\"button is-warning controls\"\n              on:click={() => dispatch('finishedComplete')}>\n              Skip bonus work\n            </button>\n          </p>\n          <p class=\"card-footer-item\">\n            <button\n              class=\"button is-success controls\"\n              on:click={() => dispatch('finishedContinue')}>\n              Do bonus work\n            </button>\n          </p>\n        {/if}\n        {#if quizFailed}\n          <p class=\"card-footer-item\">\n            <button\n              class=\"button is-success is-large controls\"\n              on:click={() => dispatch('finishedComplete')}>\n              Submit HIT\n            </button>\n          </p>\n        {/if}\n      {:else}\n        <p class=\"card-footer-item\">\n          <button class=\"button is-link controls\" on:click={backward}>\n            <span class=\"icon\">\n              <i class=\"fas fa-backward\" />\n            </span>\n          </button>\n        </p>\n        <p class=\"card-footer-item\">\n          {#if currentStep === tutorialInstructions.length - 1}\n            <button\n              class=\"button is-link controls\"\n              on:click={() => {\n                modalOpen = !modalOpen;\n              }}>\n              Hide Help\n            </button>\n          {:else if currentStep !== 2 || segments.length > 0}\n            <button class=\"button is-link controls\" on:click={forward}>\n              <span class=\"icon\">\n                <i class=\"fas fa-forward\" />\n              </span>\n            </button>\n          {/if}\n        </p>\n      {/if}\n    </footer>\n  </div>\n</div>\n\n<div\n  class=\"container is-fluid\"\n  class:blur={tutorialState === 'Overview' || tutorialSubmitted || quizFailed}>\n  <!-- Title + Waveform display row -->\n  <div class=\"columns is-centered\">\n    <div class=\"column is-full has-text-centered\">\n      <h1 class=\"title\">Example Audio</h1>\n      {#if peaksLoading}\n        <h3 class=\"title is-3\">Loading audio...</h3>\n        <button class=\"button is-white is-loading loading-button\" disabled />\n      {/if}\n      <div id=\"waveform-container\" class:blur={currentStep < 1} />\n    </div>\n  </div>\n  <!-- Controls + Button row -->\n  <div class=\"columns is-centered\">\n    <div class=\"column is-full\">\n      <!-- Nested row with playback controls on left and buttons on right -->\n      <div class=\"columns\">\n        <div class=\"column is-narrow\">\n          <div class=\"columns is-gapless is-mobile\">\n            <div class=\"column is-narrow\">\n              <audio id=\"audio\" controls=\"controls\" controlslist=\"nodownload\">\n                <source {src} type=\"audio/wav\" />\n                Your browser does not support the audio element.\n              </audio>\n            </div>\n            <div class=\"column\">\n              <span\n                class=\"icon is-large\"\n                class:is-invisible={!tutorialComplete}\n                on:click={() => (modalOpen = !modalOpen)}>\n                <i class=\"fas fa-question-circle fa-2x fa-fw\" />\n              </span>\n            </div>\n          </div>\n        </div>\n        <div class=\"column\">\n          {#if rate}\n            <button class=\"button is-primary is-large\" on:click={finish} disabled={nextTrialActive}>\n              Next\n            </button>\n          {:else}\n            <div class=\"columns is-gapless\">\n              <div class=\"column is-narrow\">\n                <div class=\"columns button-row\">\n                  <div class=\"column button-col\">\n                    <button\n                      class=\"button is-primary is-large\"\n                      class:blur={currentStep < 2}\n                      on:click={addSegment}>\n                      Tag\n                    </button>\n                    <button\n                      class=\"button is-info is-large\"\n                      class:blur={currentStep < 2}\n                      disabled={ratingActive}\n                      on:click={submitTags}>\n                      Done\n                    </button>\n                  </div>\n                </div>\n                <div class=\"columns\">\n                  <div class=\"column\">\n                    <p class=\"is-size-7\" class:is-invisible={segments.length === 0}>\n                      Select a row below to edit a Thought\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <div class=\"column\">\n                <button\n                  class=\"button is-success is-large\"\n                  class:is-invisible={!rowSelected}\n                  on:click={playSegment}>\n                  Play\n                </button>\n                <button\n                  class=\"button is-danger is-large\"\n                  class:is-invisible={!rowSelected}\n                  on:click={deleteSegment}>\n                  Delete\n                </button>\n              </div>\n            </div>\n          {/if}\n        </div>\n      </div>\n    </div>\n  </div>\n  {#if rate}\n    <!-- Rating row (only if table not displayed) -->\n    <div class=\"columns is-centered\">\n      <div class=\"column is-narrow has-text-centered\">\n        <div class=\"field\">\n          <label class=\"label has-text-weight-normal is-size-5\">\n            When did the speaker stop talking?\n          </label>\n          <div class=\"control\">\n            <input\n              class={invalidTime ? 'input age-input is-danger' : 'input age-input'}\n              type=\"text\"\n              bind:value={time}\n              on:keyup={(ev) => debounce(ev.target.value)}\n              placeholder=\"Please enter a timestamp like MM:SS\" />\n          </div>\n          {#if invalidTime}\n            <p class=\"help is-danger\">Invalid timestamp. Please use MM:SS format.</p>\n          {/if}\n        </div>\n      </div>\n      <div class=\"column is-4-desktop is-3-fullhd has-text-centered\">\n        <p class=\"has-text-centered is-size-5\">How clear was the quality of the recording?</p>\n        <input\n          step=\"1\"\n          min=\"0\"\n          max=\"100\"\n          type=\"range\"\n          bind:value={clarity}\n          on:click|once={() => (clarityRated = true)} />\n        <div class=\"columns is-mobile is-centered\">\n          <div class=\"column has-text-left\">\n            <p class=\"subtitle is-size-6\">Uninterpretable</p>\n          </div>\n          <div class=\"column has-text-right\">\n            <p class=\"subtitle is-size-6\">Perfect</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"column is-4-desktop is-3-fullhd has-text-centered\">\n        <p class=\"has-text-centered is-size-5\">How easy was it to tag different thoughts?</p>\n        <input\n          step=\"1\"\n          min=\"0\"\n          max=\"100\"\n          type=\"range\"\n          bind:value={confidence}\n          on:click|once={() => (confidenceRated = true)} />\n        <div class=\"columns is-mobile is-centered\">\n          <div class=\"column has-text-left\">\n            <p class=\"subtitle is-size-6\">Impossible</p>\n          </div>\n          <div class=\"column has-text-right\">\n            <p class=\"subtitle is-size-6\">Effortless</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  {:else}\n    <!-- Table row only if rating now displayed -->\n    <div class=\"columns is-centered\" class:blur={currentStep < 2}>\n      <div class=\"column is-full has-text-centered\">\n        {#if segments && segments.length}\n          <div class=\"table-container\">\n            <table class=\"table is-hoverable\">\n              <thead>\n                <tr>\n                  <th>Thought Number</th>\n                  <th>Start time</th>\n                  <th>End time</th>\n                </tr>\n              </thead>\n              <tbody>\n                {#each segments as segment, i (segment.id)}\n                  <tr on:click={selectSegment} class=\"table-row\">\n                    <td type=\"text\" class=\"segment-id\">{segment.id.split('.').slice(-1)[0]}</td>\n                    <td type=\"number\">{segment.startTime.toFixed(2)}</td>\n                    <td type=\"number\">{segment.endTime.toFixed(2)}</td>\n                  </tr>\n                {/each}\n              </tbody>\n            </table>\n          </div>\n        {:else}\n          <h2 class=\"title is-4\">No Thoughts Tagged</h2>\n        {/if}\n      </div>\n    </div>\n  {/if}\n</div>\n",
    "<script>\n  // This is the main ThoughTagging component that gets rendered within Experiment.svelte. It takes as an \"argument\" a \"src\" value from Experiment.svelte that tells it which audo file to render\n  import Peaks from 'peaks.js';\n  import { onMount, createEventDispatcher } from 'svelte';\n  import { db, params, serverTime } from '../utils.js';\n\n  // This is how the Experiment page can tell TagThought which src to display in Peaksjs. It's like a function argument to TagThought\n  export let src;\n  export let currentTrial;\n  export let fileName;\n  // eslint-disable-next-line prefer-const\n  let [subjectId, character] = fileName.split('_');\n  [character] = character.split('_');\n  let peaksInstance;\n  let segments = [];\n  let selectedSegmentId;\n  let rowSelected = false;\n  let segmentPrevMax = 0;\n  const dispatch = createEventDispatcher();\n  let peaksLoading = true;\n  let rate = false;\n  let confidence = 50;\n  let clarity = 50;\n  let clarityRated = false;\n  let confidenceRated = false;\n  let time = '';\n  let timer;\n  let invalidTime = false;\n  $: nextTrialActive = !(clarityRated && confidenceRated && time && !invalidTime);\n  $: ratingActive = segments.length === 0;\n\n  const debounce = (v) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      if ((time.length === 5 && time.includes(':')) || !time) {\n        invalidTime = false;\n      } else {\n        invalidTime = true;\n      }\n    }, 600);\n  };\n\n  // After Svelte has created the webpage, initialize the peaks.js waveform player and all of its event-handlers. Also make sure the segments variable gets updated whenever a user manipulates the waveform player\n  onMount(() => {\n    const options = {\n      container: document.getElementById('waveform-container'),\n      mediaElement: document.getElementById('audio'),\n      webAudio: {\n        audioContext: new AudioContext()\n      },\n      keyboard: false,\n      pointMarkerColor: '#006eb0',\n      showPlayheadTime: true,\n      inMarkerColor: '#999999',\n      outMarkerColor: '#3d3d3d'\n    };\n    // Initialize peaks.js UI\n    peaksInstance = Peaks.init(options, (err) => {\n      if (err) {\n        console.error(err);\n      } else {\n        peaksLoading = false;\n        console.log('Peaks instance ready');\n        segments = peaksInstance.segments.getSegments();\n      }\n    });\n    // Add some built-in event handlers for mouse events for segments\n    peaksInstance.on('segments.mouseleave', (segment) => {\n      segments = peaksInstance.segments.getSegments();\n    });\n    peaksInstance.on('segments.click', (segment) => {\n      segments = peaksInstance.segments.getSegments();\n    });\n    peaksInstance.on('segments.dragged', (segment) => {\n      segments = peaksInstance.segments.getSegments();\n    });\n  });\n\n  // Grab the start and end time for each thought and save them into firebase\n  const finish = async () => {\n    // We have to strip-out the extra properties that segment objects have (e.g. like waveform color) because firebase doesn't like that. Plus we only care about start and end times\n    const toSave = {};\n    console.log(segments);\n    segments.forEach((obj) => {\n      toSave[obj._id.replace(/\\./g, '_')] = {\n        startTime: obj._startTime,\n        endTime: obj._endTime\n      };\n    });\n    // Create a nested dictionary of data to save with the key being the current trial number and sub-dictionaries containing the subject id of the person speaking, the character being talked about and the tagged thoughts\n    const doc = {\n      [`trial_${currentTrial}`]: {\n        subject: subjectId,\n        character: character.slice(0, character.length - 4),\n        clarity,\n        confidence,\n        recordingLength: time,\n        thoughts: toSave,\n        submitTime: serverTime\n      },\n      currentTrial: currentTrial + 1\n    };\n    try {\n      await db.ref(`participants/${params.workerId}`).update(doc);\n      console.log('document added successfully');\n      peaksInstance.destroy();\n      dispatch('next');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const makeRatings = () => {\n    if (!segments || (segments && segments.length <= 2)) {\n      alert('Please tag a few more thoughts');\n    } else {\n      rate = !rate;\n    }\n  };\n  // Store a new segment on button click\n  function addSegment() {\n    peaksInstance.segments.add({\n      startTime: peaksInstance.player.getCurrentTime(),\n      endTime: peaksInstance.player.getCurrentTime() + 5,\n      labelText: `Thought ${segmentPrevMax.toString()}`,\n      editable: true\n    });\n    // Update the variable that stores all the segments for dynamic rendering\n    segments = peaksInstance.segments.getSegments();\n    segmentPrevMax += 1;\n  }\n\n  // Select a segment based on a table row that get clicked\n  function selectSegment(ev) {\n    // Get all rows\n    const rows = document.getElementsByClassName('table-row');\n    // Get click row\n    const row = ev.target.parentNode;\n    // If clicked row already has class unselected it and all other rows\n    if (row.className === 'table-row is-selected') {\n      for (const r of rows) {\n        r.className = 'table-row';\n      }\n      rowSelected = false;\n    } else {\n      // Otherwise unselect everything else first then select this one\n      for (const r of rows) {\n        r.className = 'table-row';\n      }\n      row.className += ' is-selected';\n      rowSelected = true;\n    }\n    // Save the segment id\n    selectedSegmentId = parseInt(row.querySelector('td.segment-id').innerText, 10);\n    selectedSegmentId = `peaks.segment.${selectedSegmentId.toString()}`;\n  }\n\n  // Play a selected segment on button click\n  function playSegment() {\n    const segment = peaksInstance.segments.getSegment(selectedSegmentId);\n    peaksInstance.player.playSegment(segment);\n  }\n\n  // Delete a selected segment on button click\n  function deleteSegment() {\n    peaksInstance.segments.removeById(selectedSegmentId);\n    // Clear selection from all other rows and hide button\n    const rows = document.getElementsByClassName('table-row');\n    for (const r of rows) {\n      r.className = 'table-row';\n    }\n    rowSelected = false;\n    segments = peaksInstance.segments.getSegments();\n  }\n\n  // Print all segments to console on button click; just for debugging\n  function seeSegments() {\n    console.log(segments);\n  }\n</script>\n\n<style>\n  .hidden {\n    visibility: hidden;\n  }\n\n  .table {\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .loading-button {\n    font-size: 4.5rem !important;\n  }\n</style>\n\n<div class=\"container is-fluid\">\n  <div class=\"columns is-centered\">\n    <div class=\"column is-three-quarters has-text-centered\">\n      <h1 class=\"title\">Recording #{currentTrial}</h1>\n      {#if peaksLoading}\n        <h3 class=\"title is-3\">Loading audio...</h3>\n        <button class=\"button is-white is-loading loading-button\" disabled />\n      {/if}\n      <div id=\"waveform-container\" />\n    </div>\n  </div>\n  <div class=\"columns is-centered\">\n    <div class=\"column is-three-quarters\">\n      <div class=\"columns\">\n        <div class=\"column is-one-quarter\">\n          <audio id=\"audio\" controls=\"controls\">\n            <source {src} type=\"audio/wav\" />\n            Your browser does not support the audio element.\n          </audio>\n        </div>\n        <div class=\"column is-one-half\">\n          {#if rate}\n            <button class=\"button is-primary is-large\" on:click={finish} disabled={nextTrialActive}>\n              Next Recording\n            </button>\n          {:else}\n            <button class=\"button is-primary is-large\" on:click={addSegment}>Tag Thought</button>\n            <button class=\"button is-info is-large\" disabled={ratingActive} on:click={makeRatings}>\n              Done\n            </button>\n            <button\n              class={rowSelected ? 'button is-success is-large' : 'button is-success is-large hidden'}\n              on:click={playSegment}>\n              Play Thought\n            </button>\n            <button\n              class={rowSelected ? 'button is-danger is-large' : 'button is-danger is-large hidden'}\n              on:click={deleteSegment}>\n              Delete Segment\n            </button>\n            <!-- <button class=\"button is-warning is-large\" on:click={seeSegments}>Debug</button> -->\n          {/if}\n        </div>\n      </div>\n    </div>\n\n  </div>\n  {#if rate}\n    <div class={rate ? 'columns is-centered' : 'columns is-centered'}>\n      <div class=\"column is-3 has-text-centered\">\n        <div class=\"field\">\n          <label class=\"label has-text-weight-normal is-size-5\">\n            When did the speaker stop talking?\n          </label>\n          <div class=\"control\">\n            <input\n              class={invalidTime ? 'input age-input is-danger' : 'input age-input'}\n              type=\"text\"\n              bind:value={time}\n              on:keyup={(ev) => debounce(ev.target.value)}\n              placeholder=\"Please enter a timestamp like MM:SS\" />\n          </div>\n          {#if invalidTime}\n            <p class=\"help is-danger\">Invalid timestamp. Please use MM:SS format.</p>\n          {/if}\n        </div>\n      </div>\n      <div class=\"column is-3 has-text-centered\">\n        <p class=\"has-text-centered is-size-5\">How clear was the quality of the recording?</p>\n        <input\n          step=\"1\"\n          min=\"0\"\n          max=\"100\"\n          type=\"range\"\n          bind:value={clarity}\n          on:click|once={() => (clarityRated = true)} />\n        <div class=\"columns is-centered\">\n          <div class=\"column has-text-left\">\n            <p class=\"subtitle is-size-6\">Uninterpretable</p>\n          </div>\n          <div class=\"column has-text-right\">\n            <p class=\"subtitle is-size-6\">Perfect</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"column is-3 has-text-centered\">\n        <p class=\"has-text-centered is-size-5\">How easy was it to tag different thoughts?</p>\n        <input\n          step=\"1\"\n          min=\"0\"\n          max=\"100\"\n          type=\"range\"\n          bind:value={confidence}\n          on:click|once={() => (confidenceRated = true)} />\n        <div class=\"columns is-centered\">\n          <div class=\"column has-text-left\">\n            <p class=\"subtitle is-size-6\">Impossible</p>\n          </div>\n          <div class=\"column has-text-right\">\n            <p class=\"subtitle is-size-6\">Effortless</p>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  {:else}\n    <div class=\"columns is-centered\">\n      <div class=\"column is-three-quarters has-text-centered\">\n        {#if segments && segments.length}\n          <div class=\"table-container\">\n            <table class=\"table is-hoverable\">\n              <thead>\n                <tr>\n                  <th>Thought Number</th>\n                  <th>Start time</th>\n                  <th>End time</th>\n                </tr>\n              </thead>\n              <tbody>\n                {#each segments as segment, i (segment.id)}\n                  <tr on:click={selectSegment} class=\"table-row\">\n                    <td type=\"text\" class=\"segment-id\">{segment.id.split('.').slice(-1)[0]}</td>\n                    <td type=\"number\">{segment.startTime.toFixed(2)}</td>\n                    <td type=\"number\">{segment.endTime.toFixed(2)}</td>\n                  </tr>\n                {/each}\n              </tbody>\n            </table>\n          </div>\n        {:else}\n          <h2 class=\"title is-4\">No Thoughts Tagged</h2>\n        {/if}\n      </div>\n    </div>\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAkCE,YAAY,eAAC,CAAC,AACZ,MAAM,CAAE,CAAC,AACX,CAAC,AACD,kBAAkB,eAAC,CAAC,AAClB,aAAa,CAAE,EAAE,CAAC,UAAU,CAC5B,WAAW,CAAE,EAAE,CAAC,UAAU,AAC5B,CAAC,AACD,SAAS,eAAC,CAAC,AACT,SAAS,CAAE,GAAG,AAChB,CAAC;AClBD,UAAU,cAAC,CAAC,AACV,KAAK,CAAE,MAAM,AACf,CAAC,AACD,kBAAkB,cAAC,CAAC,AAClB,SAAS,CAAE,GAAG,CACd,SAAS,CAAE,GAAG,AAChB,CAAC;AC1BD,eAAe,eAAC,CAAC,AACf,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,AACrB,CAAC,AACD,OAAO,eAAC,CAAC,AACP,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,aAAa,eAAC,CAAC,AACb,OAAO,CAAE,CAAC,AACZ,CAAC;ACoOD,MAAM,cAAC,CAAC,AACN,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,eAAe,cAAC,CAAC,AACf,SAAS,CAAE,MAAM,CAAC,UAAU,AAC9B,CAAC,AAED,KAAK,cAAC,CAAC,AACL,cAAc,CAAE,KAAK,GAAG,CAAC,CACzB,MAAM,CAAE,KAAK,GAAG,CAAC,CACjB,cAAc,CAAE,IAAI,AACtB,CAAC,AACD,WAAW,cAAC,CAAC,AACX,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAC9E,cAAc,CAAE,IAAI,AACtB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,cAAc,CAAE,IAAI,AACtB,CAAC,AACD,KAAK,cAAC,CAAC,AACL,GAAG,CAAE,GAAG,AACV,CAAC,AACD,GAAG,cAAC,CAAC,AACH,GAAG,CAAE,IAAI,AACX,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,GAAG,CAAE,IAAI,AACX,CAAC,AACD,MAAM,cAAC,CAAC,AACN,IAAI,CAAE,GAAG,AACX,CAAC,AACD,WAAW,cAAC,CAAC,AACX,aAAa,CAAE,CAAC,CAAC,UAAU,AAC7B,CAAC,AACD,WAAW,cAAC,CAAC,AACX,cAAc,CAAE,CAAC,CAAC,UAAU,AAC9B,CAAC;AC5GD,OAAO,eAAC,CAAC,AACP,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,eAAe,eAAC,CAAC,AACf,SAAS,CAAE,MAAM,CAAC,UAAU,AAC9B,CAAC"
}