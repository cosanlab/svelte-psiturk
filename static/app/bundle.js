
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':8080/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
var app = (function () {
  'use strict';

  function styleInject(css, ref) {
    if ( ref === void 0 ) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css = "/*! bulma.io v0.7.5 | MIT License | github.com/jgthms/bulma */\n@keyframes spinAround {\n  from {\n    transform: rotate(0deg); }\n  to {\n    transform: rotate(359deg); } }\n\n.delete, .modal-close, .is-unselectable, .button, .file, .breadcrumb, .pagination-previous,\n.pagination-next,\n.pagination-link,\n.pagination-ellipsis, .tabs {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.select:not(.is-multiple):not(.is-loading)::after, .navbar-link:not(.is-arrowless)::after {\n  border: 3px solid transparent;\n  border-radius: 2px;\n  border-right: 0;\n  border-top: 0;\n  content: \" \";\n  display: block;\n  height: 0.625em;\n  margin-top: -0.4375em;\n  pointer-events: none;\n  position: absolute;\n  top: 50%;\n  transform: rotate(-45deg);\n  transform-origin: center;\n  width: 0.625em; }\n\n.box:not(:last-child), .content:not(:last-child), .notification:not(:last-child), .progress:not(:last-child), .table:not(:last-child), .table-container:not(:last-child), .title:not(:last-child),\n.subtitle:not(:last-child), .block:not(:last-child), .highlight:not(:last-child), .breadcrumb:not(:last-child), .level:not(:last-child), .list:not(:last-child), .message:not(:last-child), .tabs:not(:last-child) {\n  margin-bottom: 1.5rem; }\n\n.delete, .modal-close {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  background-color: rgba(10, 10, 10, 0.2);\n  border: none;\n  border-radius: 290486px;\n  cursor: pointer;\n  pointer-events: auto;\n  display: inline-block;\n  flex-grow: 0;\n  flex-shrink: 0;\n  font-size: 0;\n  height: 20px;\n  max-height: 20px;\n  max-width: 20px;\n  min-height: 20px;\n  min-width: 20px;\n  outline: none;\n  position: relative;\n  vertical-align: top;\n  width: 20px; }\n  .delete::before, .modal-close::before, .delete::after, .modal-close::after {\n    background-color: white;\n    content: \"\";\n    display: block;\n    left: 50%;\n    position: absolute;\n    top: 50%;\n    transform: translateX(-50%) translateY(-50%) rotate(45deg);\n    transform-origin: center center; }\n  .delete::before, .modal-close::before {\n    height: 2px;\n    width: 50%; }\n  .delete::after, .modal-close::after {\n    height: 50%;\n    width: 2px; }\n  .delete:hover, .modal-close:hover, .delete:focus, .modal-close:focus {\n    background-color: rgba(10, 10, 10, 0.3); }\n  .delete:active, .modal-close:active {\n    background-color: rgba(10, 10, 10, 0.4); }\n  .is-small.delete, .is-small.modal-close {\n    height: 16px;\n    max-height: 16px;\n    max-width: 16px;\n    min-height: 16px;\n    min-width: 16px;\n    width: 16px; }\n  .is-medium.delete, .is-medium.modal-close {\n    height: 24px;\n    max-height: 24px;\n    max-width: 24px;\n    min-height: 24px;\n    min-width: 24px;\n    width: 24px; }\n  .is-large.delete, .is-large.modal-close {\n    height: 32px;\n    max-height: 32px;\n    max-width: 32px;\n    min-height: 32px;\n    min-width: 32px;\n    width: 32px; }\n\n.button.is-loading::after, .loader, .select.is-loading::after, .control.is-loading::after {\n  animation: spinAround 500ms infinite linear;\n  border: 2px solid #dbdbdb;\n  border-radius: 290486px;\n  border-right-color: transparent;\n  border-top-color: transparent;\n  content: \"\";\n  display: block;\n  height: 1em;\n  position: relative;\n  width: 1em; }\n\n.is-overlay, .image.is-square img,\n.image.is-square .has-ratio, .image.is-1by1 img,\n.image.is-1by1 .has-ratio, .image.is-5by4 img,\n.image.is-5by4 .has-ratio, .image.is-4by3 img,\n.image.is-4by3 .has-ratio, .image.is-3by2 img,\n.image.is-3by2 .has-ratio, .image.is-5by3 img,\n.image.is-5by3 .has-ratio, .image.is-16by9 img,\n.image.is-16by9 .has-ratio, .image.is-2by1 img,\n.image.is-2by1 .has-ratio, .image.is-3by1 img,\n.image.is-3by1 .has-ratio, .image.is-4by5 img,\n.image.is-4by5 .has-ratio, .image.is-3by4 img,\n.image.is-3by4 .has-ratio, .image.is-2by3 img,\n.image.is-2by3 .has-ratio, .image.is-3by5 img,\n.image.is-3by5 .has-ratio, .image.is-9by16 img,\n.image.is-9by16 .has-ratio, .image.is-1by2 img,\n.image.is-1by2 .has-ratio, .image.is-1by3 img,\n.image.is-1by3 .has-ratio, .modal, .modal-background, .hero-video {\n  bottom: 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\n.button, .input, .textarea, .select select, .file-cta,\n.file-name, .pagination-previous,\n.pagination-next,\n.pagination-link,\n.pagination-ellipsis {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  align-items: center;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  box-shadow: none;\n  display: inline-flex;\n  font-size: 1rem;\n  height: 2.25em;\n  justify-content: flex-start;\n  line-height: 1.5;\n  padding-bottom: calc(0.375em - 1px);\n  padding-left: calc(0.625em - 1px);\n  padding-right: calc(0.625em - 1px);\n  padding-top: calc(0.375em - 1px);\n  position: relative;\n  vertical-align: top; }\n  .button:focus, .input:focus, .textarea:focus, .select select:focus, .file-cta:focus,\n  .file-name:focus, .pagination-previous:focus,\n  .pagination-next:focus,\n  .pagination-link:focus,\n  .pagination-ellipsis:focus, .is-focused.button, .is-focused.input, .is-focused.textarea, .select select.is-focused, .is-focused.file-cta,\n  .is-focused.file-name, .is-focused.pagination-previous,\n  .is-focused.pagination-next,\n  .is-focused.pagination-link,\n  .is-focused.pagination-ellipsis, .button:active, .input:active, .textarea:active, .select select:active, .file-cta:active,\n  .file-name:active, .pagination-previous:active,\n  .pagination-next:active,\n  .pagination-link:active,\n  .pagination-ellipsis:active, .is-active.button, .is-active.input, .is-active.textarea, .select select.is-active, .is-active.file-cta,\n  .is-active.file-name, .is-active.pagination-previous,\n  .is-active.pagination-next,\n  .is-active.pagination-link,\n  .is-active.pagination-ellipsis {\n    outline: none; }\n  .button[disabled], .input[disabled], .textarea[disabled], .select select[disabled], .file-cta[disabled],\n  .file-name[disabled], .pagination-previous[disabled],\n  .pagination-next[disabled],\n  .pagination-link[disabled],\n  .pagination-ellipsis[disabled],\n  fieldset[disabled] .button,\n  fieldset[disabled] .input,\n  fieldset[disabled] .textarea,\n  fieldset[disabled] .select select,\n  .select fieldset[disabled] select,\n  fieldset[disabled] .file-cta,\n  fieldset[disabled] .file-name,\n  fieldset[disabled] .pagination-previous,\n  fieldset[disabled] .pagination-next,\n  fieldset[disabled] .pagination-link,\n  fieldset[disabled] .pagination-ellipsis {\n    cursor: not-allowed; }\n\n/*! minireset.css v0.0.4 | MIT License | github.com/jgthms/minireset.css */\nhtml,\nbody,\np,\nol,\nul,\nli,\ndl,\ndt,\ndd,\nblockquote,\nfigure,\nfieldset,\nlegend,\ntextarea,\npre,\niframe,\nhr,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin: 0;\n  padding: 0; }\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: 100%;\n  font-weight: normal; }\n\nul {\n  list-style: none; }\n\nbutton,\ninput,\nselect,\ntextarea {\n  margin: 0; }\n\nhtml {\n  box-sizing: border-box; }\n\n*, *::before, *::after {\n  box-sizing: inherit; }\n\nimg,\nembed,\niframe,\nobject,\nvideo {\n  height: auto;\n  max-width: 100%; }\n\naudio {\n  max-width: 100%; }\n\niframe {\n  border: 0; }\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\ntd,\nth {\n  padding: 0; }\n  td:not([align]),\n  th:not([align]) {\n    text-align: left; }\n\nhtml {\n  background-color: white;\n  font-size: 16px;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  min-width: 300px;\n  overflow-x: hidden;\n  overflow-y: scroll;\n  text-rendering: optimizeLegibility;\n  text-size-adjust: 100%; }\n\narticle,\naside,\nfigure,\nfooter,\nheader,\nhgroup,\nsection {\n  display: block; }\n\nbody,\nbutton,\ninput,\nselect,\ntextarea {\n  font-family: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif; }\n\ncode,\npre {\n  -moz-osx-font-smoothing: auto;\n  -webkit-font-smoothing: auto;\n  font-family: monospace; }\n\nbody {\n  color: #4a4a4a;\n  font-size: 1em;\n  font-weight: 400;\n  line-height: 1.5; }\n\na {\n  color: #3273dc;\n  cursor: pointer;\n  text-decoration: none; }\n  a strong {\n    color: currentColor; }\n  a:hover {\n    color: #363636; }\n\ncode {\n  background-color: whitesmoke;\n  color: #ff3860;\n  font-size: 0.875em;\n  font-weight: normal;\n  padding: 0.25em 0.5em 0.25em; }\n\nhr {\n  background-color: whitesmoke;\n  border: none;\n  display: block;\n  height: 2px;\n  margin: 1.5rem 0; }\n\nimg {\n  height: auto;\n  max-width: 100%; }\n\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  vertical-align: baseline; }\n\nsmall {\n  font-size: 0.875em; }\n\nspan {\n  font-style: inherit;\n  font-weight: inherit; }\n\nstrong {\n  color: #363636;\n  font-weight: 700; }\n\nfieldset {\n  border: none; }\n\npre {\n  -webkit-overflow-scrolling: touch;\n  background-color: whitesmoke;\n  color: #4a4a4a;\n  font-size: 0.875em;\n  overflow-x: auto;\n  padding: 1.25rem 1.5rem;\n  white-space: pre;\n  word-wrap: normal; }\n  pre code {\n    background-color: transparent;\n    color: currentColor;\n    font-size: 1em;\n    padding: 0; }\n\ntable td,\ntable th {\n  vertical-align: top; }\n  table td:not([align]),\n  table th:not([align]) {\n    text-align: left; }\n\ntable th {\n  color: #363636; }\n\n.is-clearfix::after {\n  clear: both;\n  content: \" \";\n  display: table; }\n\n.is-pulled-left {\n  float: left !important; }\n\n.is-pulled-right {\n  float: right !important; }\n\n.is-clipped {\n  overflow: hidden !important; }\n\n.is-size-1 {\n  font-size: 3rem !important; }\n\n.is-size-2 {\n  font-size: 2.5rem !important; }\n\n.is-size-3 {\n  font-size: 2rem !important; }\n\n.is-size-4 {\n  font-size: 1.5rem !important; }\n\n.is-size-5 {\n  font-size: 1.25rem !important; }\n\n.is-size-6 {\n  font-size: 1rem !important; }\n\n.is-size-7 {\n  font-size: 0.75rem !important; }\n\n@media screen and (max-width: 768px) {\n  .is-size-1-mobile {\n    font-size: 3rem !important; }\n  .is-size-2-mobile {\n    font-size: 2.5rem !important; }\n  .is-size-3-mobile {\n    font-size: 2rem !important; }\n  .is-size-4-mobile {\n    font-size: 1.5rem !important; }\n  .is-size-5-mobile {\n    font-size: 1.25rem !important; }\n  .is-size-6-mobile {\n    font-size: 1rem !important; }\n  .is-size-7-mobile {\n    font-size: 0.75rem !important; } }\n\n@media screen and (min-width: 769px), print {\n  .is-size-1-tablet {\n    font-size: 3rem !important; }\n  .is-size-2-tablet {\n    font-size: 2.5rem !important; }\n  .is-size-3-tablet {\n    font-size: 2rem !important; }\n  .is-size-4-tablet {\n    font-size: 1.5rem !important; }\n  .is-size-5-tablet {\n    font-size: 1.25rem !important; }\n  .is-size-6-tablet {\n    font-size: 1rem !important; }\n  .is-size-7-tablet {\n    font-size: 0.75rem !important; } }\n\n@media screen and (max-width: 1023px) {\n  .is-size-1-touch {\n    font-size: 3rem !important; }\n  .is-size-2-touch {\n    font-size: 2.5rem !important; }\n  .is-size-3-touch {\n    font-size: 2rem !important; }\n  .is-size-4-touch {\n    font-size: 1.5rem !important; }\n  .is-size-5-touch {\n    font-size: 1.25rem !important; }\n  .is-size-6-touch {\n    font-size: 1rem !important; }\n  .is-size-7-touch {\n    font-size: 0.75rem !important; } }\n\n@media screen and (min-width: 1024px) {\n  .is-size-1-desktop {\n    font-size: 3rem !important; }\n  .is-size-2-desktop {\n    font-size: 2.5rem !important; }\n  .is-size-3-desktop {\n    font-size: 2rem !important; }\n  .is-size-4-desktop {\n    font-size: 1.5rem !important; }\n  .is-size-5-desktop {\n    font-size: 1.25rem !important; }\n  .is-size-6-desktop {\n    font-size: 1rem !important; }\n  .is-size-7-desktop {\n    font-size: 0.75rem !important; } }\n\n@media screen and (min-width: 1216px) {\n  .is-size-1-widescreen {\n    font-size: 3rem !important; }\n  .is-size-2-widescreen {\n    font-size: 2.5rem !important; }\n  .is-size-3-widescreen {\n    font-size: 2rem !important; }\n  .is-size-4-widescreen {\n    font-size: 1.5rem !important; }\n  .is-size-5-widescreen {\n    font-size: 1.25rem !important; }\n  .is-size-6-widescreen {\n    font-size: 1rem !important; }\n  .is-size-7-widescreen {\n    font-size: 0.75rem !important; } }\n\n@media screen and (min-width: 1408px) {\n  .is-size-1-fullhd {\n    font-size: 3rem !important; }\n  .is-size-2-fullhd {\n    font-size: 2.5rem !important; }\n  .is-size-3-fullhd {\n    font-size: 2rem !important; }\n  .is-size-4-fullhd {\n    font-size: 1.5rem !important; }\n  .is-size-5-fullhd {\n    font-size: 1.25rem !important; }\n  .is-size-6-fullhd {\n    font-size: 1rem !important; }\n  .is-size-7-fullhd {\n    font-size: 0.75rem !important; } }\n\n.has-text-centered {\n  text-align: center !important; }\n\n.has-text-justified {\n  text-align: justify !important; }\n\n.has-text-left {\n  text-align: left !important; }\n\n.has-text-right {\n  text-align: right !important; }\n\n@media screen and (max-width: 768px) {\n  .has-text-centered-mobile {\n    text-align: center !important; } }\n\n@media screen and (min-width: 769px), print {\n  .has-text-centered-tablet {\n    text-align: center !important; } }\n\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .has-text-centered-tablet-only {\n    text-align: center !important; } }\n\n@media screen and (max-width: 1023px) {\n  .has-text-centered-touch {\n    text-align: center !important; } }\n\n@media screen and (min-width: 1024px) {\n  .has-text-centered-desktop {\n    text-align: center !important; } }\n\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .has-text-centered-desktop-only {\n    text-align: center !important; } }\n\n@media screen and (min-width: 1216px) {\n  .has-text-centered-widescreen {\n    text-align: center !important; } }\n\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .has-text-centered-widescreen-only {\n    text-align: center !important; } }\n\n@media screen and (min-width: 1408px) {\n  .has-text-centered-fullhd {\n    text-align: center !important; } }\n\n@media screen and (max-width: 768px) {\n  .has-text-justified-mobile {\n    text-align: justify !important; } }\n\n@media screen and (min-width: 769px), print {\n  .has-text-justified-tablet {\n    text-align: justify !important; } }\n\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .has-text-justified-tablet-only {\n    text-align: justify !important; } }\n\n@media screen and (max-width: 1023px) {\n  .has-text-justified-touch {\n    text-align: justify !important; } }\n\n@media screen and (min-width: 1024px) {\n  .has-text-justified-desktop {\n    text-align: justify !important; } }\n\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .has-text-justified-desktop-only {\n    text-align: justify !important; } }\n\n@media screen and (min-width: 1216px) {\n  .has-text-justified-widescreen {\n    text-align: justify !important; } }\n\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .has-text-justified-widescreen-only {\n    text-align: justify !important; } }\n\n@media screen and (min-width: 1408px) {\n  .has-text-justified-fullhd {\n    text-align: justify !important; } }\n\n@media screen and (max-width: 768px) {\n  .has-text-left-mobile {\n    text-align: left !important; } }\n\n@media screen and (min-width: 769px), print {\n  .has-text-left-tablet {\n    text-align: left !important; } }\n\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .has-text-left-tablet-only {\n    text-align: left !important; } }\n\n@media screen and (max-width: 1023px) {\n  .has-text-left-touch {\n    text-align: left !important; } }\n\n@media screen and (min-width: 1024px) {\n  .has-text-left-desktop {\n    text-align: left !important; } }\n\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .has-text-left-desktop-only {\n    text-align: left !important; } }\n\n@media screen and (min-width: 1216px) {\n  .has-text-left-widescreen {\n    text-align: left !important; } }\n\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .has-text-left-widescreen-only {\n    text-align: left !important; } }\n\n@media screen and (min-width: 1408px) {\n  .has-text-left-fullhd {\n    text-align: left !important; } }\n\n@media screen and (max-width: 768px) {\n  .has-text-right-mobile {\n    text-align: right !important; } }\n\n@media screen and (min-width: 769px), print {\n  .has-text-right-tablet {\n    text-align: right !important; } }\n\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .has-text-right-tablet-only {\n    text-align: right !important; } }\n\n@media screen and (max-width: 1023px) {\n  .has-text-right-touch {\n    text-align: right !important; } }\n\n@media screen and (min-width: 1024px) {\n  .has-text-right-desktop {\n    text-align: right !important; } }\n\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .has-text-right-desktop-only {\n    text-align: right !important; } }\n\n@media screen and (min-width: 1216px) {\n  .has-text-right-widescreen {\n    text-align: right !important; } }\n\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .has-text-right-widescreen-only {\n    text-align: right !important; } }\n\n@media screen and (min-width: 1408px) {\n  .has-text-right-fullhd {\n    text-align: right !important; } }\n\n.is-capitalized {\n  text-transform: capitalize !important; }\n\n.is-lowercase {\n  text-transform: lowercase !important; }\n\n.is-uppercase {\n  text-transform: uppercase !important; }\n\n.is-italic {\n  font-style: italic !important; }\n\n.has-text-white {\n  color: white !important; }\n\na.has-text-white:hover, a.has-text-white:focus {\n  color: #e6e6e6 !important; }\n\n.has-background-white {\n  background-color: white !important; }\n\n.has-text-black {\n  color: #0a0a0a !important; }\n\na.has-text-black:hover, a.has-text-black:focus {\n  color: black !important; }\n\n.has-background-black {\n  background-color: #0a0a0a !important; }\n\n.has-text-light {\n  color: whitesmoke !important; }\n\na.has-text-light:hover, a.has-text-light:focus {\n  color: #dbdbdb !important; }\n\n.has-background-light {\n  background-color: whitesmoke !important; }\n\n.has-text-dark {\n  color: #363636 !important; }\n\na.has-text-dark:hover, a.has-text-dark:focus {\n  color: #1c1c1c !important; }\n\n.has-background-dark {\n  background-color: #363636 !important; }\n\n.has-text-primary {\n  color: #00d1b2 !important; }\n\na.has-text-primary:hover, a.has-text-primary:focus {\n  color: #009e86 !important; }\n\n.has-background-primary {\n  background-color: #00d1b2 !important; }\n\n.has-text-link {\n  color: #3273dc !important; }\n\na.has-text-link:hover, a.has-text-link:focus {\n  color: #205bbc !important; }\n\n.has-background-link {\n  background-color: #3273dc !important; }\n\n.has-text-info {\n  color: #209cee !important; }\n\na.has-text-info:hover, a.has-text-info:focus {\n  color: #0f81cc !important; }\n\n.has-background-info {\n  background-color: #209cee !important; }\n\n.has-text-success {\n  color: #23d160 !important; }\n\na.has-text-success:hover, a.has-text-success:focus {\n  color: #1ca64c !important; }\n\n.has-background-success {\n  background-color: #23d160 !important; }\n\n.has-text-warning {\n  color: #ffdd57 !important; }\n\na.has-text-warning:hover, a.has-text-warning:focus {\n  color: #ffd324 !important; }\n\n.has-background-warning {\n  background-color: #ffdd57 !important; }\n\n.has-text-danger {\n  color: #ff3860 !important; }\n\na.has-text-danger:hover, a.has-text-danger:focus {\n  color: #ff0537 !important; }\n\n.has-background-danger {\n  background-color: #ff3860 !important; }\n\n.has-text-black-bis {\n  color: #121212 !important; }\n\n.has-background-black-bis {\n  background-color: #121212 !important; }\n\n.has-text-black-ter {\n  color: #242424 !important; }\n\n.has-background-black-ter {\n  background-color: #242424 !important; }\n\n.has-text-grey-darker {\n  color: #363636 !important; }\n\n.has-background-grey-darker {\n  background-color: #363636 !important; }\n\n.has-text-grey-dark {\n  color: #4a4a4a !important; }\n\n.has-background-grey-dark {\n  background-color: #4a4a4a !important; }\n\n.has-text-grey {\n  color: #7a7a7a !important; }\n\n.has-background-grey {\n  background-color: #7a7a7a !important; }\n\n.has-text-grey-light {\n  color: #b5b5b5 !important; }\n\n.has-background-grey-light {\n  background-color: #b5b5b5 !important; }\n\n.has-text-grey-lighter {\n  color: #dbdbdb !important; }\n\n.has-background-grey-lighter {\n  background-color: #dbdbdb !important; }\n\n.has-text-white-ter {\n  color: whitesmoke !important; }\n\n.has-background-white-ter {\n  background-color: whitesmoke !important; }\n\n.has-text-white-bis {\n  color: #fafafa !important; }\n\n.has-background-white-bis {\n  background-color: #fafafa !important; }\n\n.has-text-weight-light {\n  font-weight: 300 !important; }\n\n.has-text-weight-normal {\n  font-weight: 400 !important; }\n\n.has-text-weight-medium {\n  font-weight: 500 !important; }\n\n.has-text-weight-semibold {\n  font-weight: 600 !important; }\n\n.has-text-weight-bold {\n  font-weight: 700 !important; }\n\n.is-family-primary {\n  font-family: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif !important; }\n\n.is-family-secondary {\n  font-family: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif !important; }\n\n.is-family-sans-serif {\n  font-family: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif !important; }\n\n.is-family-monospace {\n  font-family: monospace !important; }\n\n.is-family-code {\n  font-family: monospace !important; }\n\n.is-block {\n  display: block !important; }\n\n@media screen and (max-width: 768px) {\n  .is-block-mobile {\n    display: block !important; } }\n\n@media screen and (min-width: 769px), print {\n  .is-block-tablet {\n    display: block !important; } }\n\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-block-tablet-only {\n    display: block !important; } }\n\n@media screen and (max-width: 1023px) {\n  .is-block-touch {\n    display: block !important; } }\n\n@media screen and (min-width: 1024px) {\n  .is-block-desktop {\n    display: block !important; } }\n\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-block-desktop-only {\n    display: block !important; } }\n\n@media screen and (min-width: 1216px) {\n  .is-block-widescreen {\n    display: block !important; } }\n\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-block-widescreen-only {\n    display: block !important; } }\n\n@media screen and (min-width: 1408px) {\n  .is-block-fullhd {\n    display: block !important; } }\n\n.is-flex {\n  display: flex !important; }\n\n@media screen and (max-width: 768px) {\n  .is-flex-mobile {\n    display: flex !important; } }\n\n@media screen and (min-width: 769px), print {\n  .is-flex-tablet {\n    display: flex !important; } }\n\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-flex-tablet-only {\n    display: flex !important; } }\n\n@media screen and (max-width: 1023px) {\n  .is-flex-touch {\n    display: flex !important; } }\n\n@media screen and (min-width: 1024px) {\n  .is-flex-desktop {\n    display: flex !important; } }\n\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-flex-desktop-only {\n    display: flex !important; } }\n\n@media screen and (min-width: 1216px) {\n  .is-flex-widescreen {\n    display: flex !important; } }\n\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-flex-widescreen-only {\n    display: flex !important; } }\n\n@media screen and (min-width: 1408px) {\n  .is-flex-fullhd {\n    display: flex !important; } }\n\n.is-inline {\n  display: inline !important; }\n\n@media screen and (max-width: 768px) {\n  .is-inline-mobile {\n    display: inline !important; } }\n\n@media screen and (min-width: 769px), print {\n  .is-inline-tablet {\n    display: inline !important; } }\n\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-inline-tablet-only {\n    display: inline !important; } }\n\n@media screen and (max-width: 1023px) {\n  .is-inline-touch {\n    display: inline !important; } }\n\n@media screen and (min-width: 1024px) {\n  .is-inline-desktop {\n    display: inline !important; } }\n\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-inline-desktop-only {\n    display: inline !important; } }\n\n@media screen and (min-width: 1216px) {\n  .is-inline-widescreen {\n    display: inline !important; } }\n\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-inline-widescreen-only {\n    display: inline !important; } }\n\n@media screen and (min-width: 1408px) {\n  .is-inline-fullhd {\n    display: inline !important; } }\n\n.is-inline-block {\n  display: inline-block !important; }\n\n@media screen and (max-width: 768px) {\n  .is-inline-block-mobile {\n    display: inline-block !important; } }\n\n@media screen and (min-width: 769px), print {\n  .is-inline-block-tablet {\n    display: inline-block !important; } }\n\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-inline-block-tablet-only {\n    display: inline-block !important; } }\n\n@media screen and (max-width: 1023px) {\n  .is-inline-block-touch {\n    display: inline-block !important; } }\n\n@media screen and (min-width: 1024px) {\n  .is-inline-block-desktop {\n    display: inline-block !important; } }\n\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-inline-block-desktop-only {\n    display: inline-block !important; } }\n\n@media screen and (min-width: 1216px) {\n  .is-inline-block-widescreen {\n    display: inline-block !important; } }\n\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-inline-block-widescreen-only {\n    display: inline-block !important; } }\n\n@media screen and (min-width: 1408px) {\n  .is-inline-block-fullhd {\n    display: inline-block !important; } }\n\n.is-inline-flex {\n  display: inline-flex !important; }\n\n@media screen and (max-width: 768px) {\n  .is-inline-flex-mobile {\n    display: inline-flex !important; } }\n\n@media screen and (min-width: 769px), print {\n  .is-inline-flex-tablet {\n    display: inline-flex !important; } }\n\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-inline-flex-tablet-only {\n    display: inline-flex !important; } }\n\n@media screen and (max-width: 1023px) {\n  .is-inline-flex-touch {\n    display: inline-flex !important; } }\n\n@media screen and (min-width: 1024px) {\n  .is-inline-flex-desktop {\n    display: inline-flex !important; } }\n\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-inline-flex-desktop-only {\n    display: inline-flex !important; } }\n\n@media screen and (min-width: 1216px) {\n  .is-inline-flex-widescreen {\n    display: inline-flex !important; } }\n\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-inline-flex-widescreen-only {\n    display: inline-flex !important; } }\n\n@media screen and (min-width: 1408px) {\n  .is-inline-flex-fullhd {\n    display: inline-flex !important; } }\n\n.is-hidden {\n  display: none !important; }\n\n.is-sr-only {\n  border: none !important;\n  clip: rect(0, 0, 0, 0) !important;\n  height: 0.01em !important;\n  overflow: hidden !important;\n  padding: 0 !important;\n  position: absolute !important;\n  white-space: nowrap !important;\n  width: 0.01em !important; }\n\n@media screen and (max-width: 768px) {\n  .is-hidden-mobile {\n    display: none !important; } }\n\n@media screen and (min-width: 769px), print {\n  .is-hidden-tablet {\n    display: none !important; } }\n\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-hidden-tablet-only {\n    display: none !important; } }\n\n@media screen and (max-width: 1023px) {\n  .is-hidden-touch {\n    display: none !important; } }\n\n@media screen and (min-width: 1024px) {\n  .is-hidden-desktop {\n    display: none !important; } }\n\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-hidden-desktop-only {\n    display: none !important; } }\n\n@media screen and (min-width: 1216px) {\n  .is-hidden-widescreen {\n    display: none !important; } }\n\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-hidden-widescreen-only {\n    display: none !important; } }\n\n@media screen and (min-width: 1408px) {\n  .is-hidden-fullhd {\n    display: none !important; } }\n\n.is-invisible {\n  visibility: hidden !important; }\n\n@media screen and (max-width: 768px) {\n  .is-invisible-mobile {\n    visibility: hidden !important; } }\n\n@media screen and (min-width: 769px), print {\n  .is-invisible-tablet {\n    visibility: hidden !important; } }\n\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-invisible-tablet-only {\n    visibility: hidden !important; } }\n\n@media screen and (max-width: 1023px) {\n  .is-invisible-touch {\n    visibility: hidden !important; } }\n\n@media screen and (min-width: 1024px) {\n  .is-invisible-desktop {\n    visibility: hidden !important; } }\n\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-invisible-desktop-only {\n    visibility: hidden !important; } }\n\n@media screen and (min-width: 1216px) {\n  .is-invisible-widescreen {\n    visibility: hidden !important; } }\n\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-invisible-widescreen-only {\n    visibility: hidden !important; } }\n\n@media screen and (min-width: 1408px) {\n  .is-invisible-fullhd {\n    visibility: hidden !important; } }\n\n.is-marginless {\n  margin: 0 !important; }\n\n.is-paddingless {\n  padding: 0 !important; }\n\n.is-radiusless {\n  border-radius: 0 !important; }\n\n.is-shadowless {\n  box-shadow: none !important; }\n\n.is-relative {\n  position: relative !important; }\n\n.box {\n  background-color: white;\n  border-radius: 6px;\n  box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);\n  color: #4a4a4a;\n  display: block;\n  padding: 1.25rem; }\n\na.box:hover, a.box:focus {\n  box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px #3273dc; }\n\na.box:active {\n  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.2), 0 0 0 1px #3273dc; }\n\n.button {\n  background-color: white;\n  border-color: #dbdbdb;\n  border-width: 1px;\n  color: #363636;\n  cursor: pointer;\n  justify-content: center;\n  padding-bottom: calc(0.375em - 1px);\n  padding-left: 0.75em;\n  padding-right: 0.75em;\n  padding-top: calc(0.375em - 1px);\n  text-align: center;\n  white-space: nowrap; }\n  .button strong {\n    color: inherit; }\n  .button .icon, .button .icon.is-small, .button .icon.is-medium, .button .icon.is-large {\n    height: 1.5em;\n    width: 1.5em; }\n  .button .icon:first-child:not(:last-child) {\n    margin-left: calc(-0.375em - 1px);\n    margin-right: 0.1875em; }\n  .button .icon:last-child:not(:first-child) {\n    margin-left: 0.1875em;\n    margin-right: calc(-0.375em - 1px); }\n  .button .icon:first-child:last-child {\n    margin-left: calc(-0.375em - 1px);\n    margin-right: calc(-0.375em - 1px); }\n  .button:hover, .button.is-hovered {\n    border-color: #b5b5b5;\n    color: #363636; }\n  .button:focus, .button.is-focused {\n    border-color: #3273dc;\n    color: #363636; }\n    .button:focus:not(:active), .button.is-focused:not(:active) {\n      box-shadow: 0 0 0 0.125em rgba(50, 115, 220, 0.25); }\n  .button:active, .button.is-active {\n    border-color: #4a4a4a;\n    color: #363636; }\n  .button.is-text {\n    background-color: transparent;\n    border-color: transparent;\n    color: #4a4a4a;\n    text-decoration: underline; }\n    .button.is-text:hover, .button.is-text.is-hovered, .button.is-text:focus, .button.is-text.is-focused {\n      background-color: whitesmoke;\n      color: #363636; }\n    .button.is-text:active, .button.is-text.is-active {\n      background-color: #e8e8e8;\n      color: #363636; }\n    .button.is-text[disabled],\n    fieldset[disabled] .button.is-text {\n      background-color: transparent;\n      border-color: transparent;\n      box-shadow: none; }\n  .button.is-white {\n    background-color: white;\n    border-color: transparent;\n    color: #0a0a0a; }\n    .button.is-white:hover, .button.is-white.is-hovered {\n      background-color: #f9f9f9;\n      border-color: transparent;\n      color: #0a0a0a; }\n    .button.is-white:focus, .button.is-white.is-focused {\n      border-color: transparent;\n      color: #0a0a0a; }\n      .button.is-white:focus:not(:active), .button.is-white.is-focused:not(:active) {\n        box-shadow: 0 0 0 0.125em rgba(255, 255, 255, 0.25); }\n    .button.is-white:active, .button.is-white.is-active {\n      background-color: #f2f2f2;\n      border-color: transparent;\n      color: #0a0a0a; }\n    .button.is-white[disabled],\n    fieldset[disabled] .button.is-white {\n      background-color: white;\n      border-color: transparent;\n      box-shadow: none; }\n    .button.is-white.is-inverted {\n      background-color: #0a0a0a;\n      color: white; }\n      .button.is-white.is-inverted:hover, .button.is-white.is-inverted.is-hovered {\n        background-color: black; }\n      .button.is-white.is-inverted[disabled],\n      fieldset[disabled] .button.is-white.is-inverted {\n        background-color: #0a0a0a;\n        border-color: transparent;\n        box-shadow: none;\n        color: white; }\n    .button.is-white.is-loading::after {\n      border-color: transparent transparent #0a0a0a #0a0a0a !important; }\n    .button.is-white.is-outlined {\n      background-color: transparent;\n      border-color: white;\n      color: white; }\n      .button.is-white.is-outlined:hover, .button.is-white.is-outlined.is-hovered, .button.is-white.is-outlined:focus, .button.is-white.is-outlined.is-focused {\n        background-color: white;\n        border-color: white;\n        color: #0a0a0a; }\n      .button.is-white.is-outlined.is-loading::after {\n        border-color: transparent transparent white white !important; }\n      .button.is-white.is-outlined.is-loading:hover::after, .button.is-white.is-outlined.is-loading.is-hovered::after, .button.is-white.is-outlined.is-loading:focus::after, .button.is-white.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #0a0a0a #0a0a0a !important; }\n      .button.is-white.is-outlined[disabled],\n      fieldset[disabled] .button.is-white.is-outlined {\n        background-color: transparent;\n        border-color: white;\n        box-shadow: none;\n        color: white; }\n    .button.is-white.is-inverted.is-outlined {\n      background-color: transparent;\n      border-color: #0a0a0a;\n      color: #0a0a0a; }\n      .button.is-white.is-inverted.is-outlined:hover, .button.is-white.is-inverted.is-outlined.is-hovered, .button.is-white.is-inverted.is-outlined:focus, .button.is-white.is-inverted.is-outlined.is-focused {\n        background-color: #0a0a0a;\n        color: white; }\n      .button.is-white.is-inverted.is-outlined.is-loading:hover::after, .button.is-white.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-white.is-inverted.is-outlined.is-loading:focus::after, .button.is-white.is-inverted.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent white white !important; }\n      .button.is-white.is-inverted.is-outlined[disabled],\n      fieldset[disabled] .button.is-white.is-inverted.is-outlined {\n        background-color: transparent;\n        border-color: #0a0a0a;\n        box-shadow: none;\n        color: #0a0a0a; }\n  .button.is-black {\n    background-color: #0a0a0a;\n    border-color: transparent;\n    color: white; }\n    .button.is-black:hover, .button.is-black.is-hovered {\n      background-color: #040404;\n      border-color: transparent;\n      color: white; }\n    .button.is-black:focus, .button.is-black.is-focused {\n      border-color: transparent;\n      color: white; }\n      .button.is-black:focus:not(:active), .button.is-black.is-focused:not(:active) {\n        box-shadow: 0 0 0 0.125em rgba(10, 10, 10, 0.25); }\n    .button.is-black:active, .button.is-black.is-active {\n      background-color: black;\n      border-color: transparent;\n      color: white; }\n    .button.is-black[disabled],\n    fieldset[disabled] .button.is-black {\n      background-color: #0a0a0a;\n      border-color: transparent;\n      box-shadow: none; }\n    .button.is-black.is-inverted {\n      background-color: white;\n      color: #0a0a0a; }\n      .button.is-black.is-inverted:hover, .button.is-black.is-inverted.is-hovered {\n        background-color: #f2f2f2; }\n      .button.is-black.is-inverted[disabled],\n      fieldset[disabled] .button.is-black.is-inverted {\n        background-color: white;\n        border-color: transparent;\n        box-shadow: none;\n        color: #0a0a0a; }\n    .button.is-black.is-loading::after {\n      border-color: transparent transparent white white !important; }\n    .button.is-black.is-outlined {\n      background-color: transparent;\n      border-color: #0a0a0a;\n      color: #0a0a0a; }\n      .button.is-black.is-outlined:hover, .button.is-black.is-outlined.is-hovered, .button.is-black.is-outlined:focus, .button.is-black.is-outlined.is-focused {\n        background-color: #0a0a0a;\n        border-color: #0a0a0a;\n        color: white; }\n      .button.is-black.is-outlined.is-loading::after {\n        border-color: transparent transparent #0a0a0a #0a0a0a !important; }\n      .button.is-black.is-outlined.is-loading:hover::after, .button.is-black.is-outlined.is-loading.is-hovered::after, .button.is-black.is-outlined.is-loading:focus::after, .button.is-black.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent white white !important; }\n      .button.is-black.is-outlined[disabled],\n      fieldset[disabled] .button.is-black.is-outlined {\n        background-color: transparent;\n        border-color: #0a0a0a;\n        box-shadow: none;\n        color: #0a0a0a; }\n    .button.is-black.is-inverted.is-outlined {\n      background-color: transparent;\n      border-color: white;\n      color: white; }\n      .button.is-black.is-inverted.is-outlined:hover, .button.is-black.is-inverted.is-outlined.is-hovered, .button.is-black.is-inverted.is-outlined:focus, .button.is-black.is-inverted.is-outlined.is-focused {\n        background-color: white;\n        color: #0a0a0a; }\n      .button.is-black.is-inverted.is-outlined.is-loading:hover::after, .button.is-black.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-black.is-inverted.is-outlined.is-loading:focus::after, .button.is-black.is-inverted.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #0a0a0a #0a0a0a !important; }\n      .button.is-black.is-inverted.is-outlined[disabled],\n      fieldset[disabled] .button.is-black.is-inverted.is-outlined {\n        background-color: transparent;\n        border-color: white;\n        box-shadow: none;\n        color: white; }\n  .button.is-light {\n    background-color: whitesmoke;\n    border-color: transparent;\n    color: #363636; }\n    .button.is-light:hover, .button.is-light.is-hovered {\n      background-color: #eeeeee;\n      border-color: transparent;\n      color: #363636; }\n    .button.is-light:focus, .button.is-light.is-focused {\n      border-color: transparent;\n      color: #363636; }\n      .button.is-light:focus:not(:active), .button.is-light.is-focused:not(:active) {\n        box-shadow: 0 0 0 0.125em rgba(245, 245, 245, 0.25); }\n    .button.is-light:active, .button.is-light.is-active {\n      background-color: #e8e8e8;\n      border-color: transparent;\n      color: #363636; }\n    .button.is-light[disabled],\n    fieldset[disabled] .button.is-light {\n      background-color: whitesmoke;\n      border-color: transparent;\n      box-shadow: none; }\n    .button.is-light.is-inverted {\n      background-color: #363636;\n      color: whitesmoke; }\n      .button.is-light.is-inverted:hover, .button.is-light.is-inverted.is-hovered {\n        background-color: #292929; }\n      .button.is-light.is-inverted[disabled],\n      fieldset[disabled] .button.is-light.is-inverted {\n        background-color: #363636;\n        border-color: transparent;\n        box-shadow: none;\n        color: whitesmoke; }\n    .button.is-light.is-loading::after {\n      border-color: transparent transparent #363636 #363636 !important; }\n    .button.is-light.is-outlined {\n      background-color: transparent;\n      border-color: whitesmoke;\n      color: whitesmoke; }\n      .button.is-light.is-outlined:hover, .button.is-light.is-outlined.is-hovered, .button.is-light.is-outlined:focus, .button.is-light.is-outlined.is-focused {\n        background-color: whitesmoke;\n        border-color: whitesmoke;\n        color: #363636; }\n      .button.is-light.is-outlined.is-loading::after {\n        border-color: transparent transparent whitesmoke whitesmoke !important; }\n      .button.is-light.is-outlined.is-loading:hover::after, .button.is-light.is-outlined.is-loading.is-hovered::after, .button.is-light.is-outlined.is-loading:focus::after, .button.is-light.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #363636 #363636 !important; }\n      .button.is-light.is-outlined[disabled],\n      fieldset[disabled] .button.is-light.is-outlined {\n        background-color: transparent;\n        border-color: whitesmoke;\n        box-shadow: none;\n        color: whitesmoke; }\n    .button.is-light.is-inverted.is-outlined {\n      background-color: transparent;\n      border-color: #363636;\n      color: #363636; }\n      .button.is-light.is-inverted.is-outlined:hover, .button.is-light.is-inverted.is-outlined.is-hovered, .button.is-light.is-inverted.is-outlined:focus, .button.is-light.is-inverted.is-outlined.is-focused {\n        background-color: #363636;\n        color: whitesmoke; }\n      .button.is-light.is-inverted.is-outlined.is-loading:hover::after, .button.is-light.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-light.is-inverted.is-outlined.is-loading:focus::after, .button.is-light.is-inverted.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent whitesmoke whitesmoke !important; }\n      .button.is-light.is-inverted.is-outlined[disabled],\n      fieldset[disabled] .button.is-light.is-inverted.is-outlined {\n        background-color: transparent;\n        border-color: #363636;\n        box-shadow: none;\n        color: #363636; }\n  .button.is-dark {\n    background-color: #363636;\n    border-color: transparent;\n    color: whitesmoke; }\n    .button.is-dark:hover, .button.is-dark.is-hovered {\n      background-color: #2f2f2f;\n      border-color: transparent;\n      color: whitesmoke; }\n    .button.is-dark:focus, .button.is-dark.is-focused {\n      border-color: transparent;\n      color: whitesmoke; }\n      .button.is-dark:focus:not(:active), .button.is-dark.is-focused:not(:active) {\n        box-shadow: 0 0 0 0.125em rgba(54, 54, 54, 0.25); }\n    .button.is-dark:active, .button.is-dark.is-active {\n      background-color: #292929;\n      border-color: transparent;\n      color: whitesmoke; }\n    .button.is-dark[disabled],\n    fieldset[disabled] .button.is-dark {\n      background-color: #363636;\n      border-color: transparent;\n      box-shadow: none; }\n    .button.is-dark.is-inverted {\n      background-color: whitesmoke;\n      color: #363636; }\n      .button.is-dark.is-inverted:hover, .button.is-dark.is-inverted.is-hovered {\n        background-color: #e8e8e8; }\n      .button.is-dark.is-inverted[disabled],\n      fieldset[disabled] .button.is-dark.is-inverted {\n        background-color: whitesmoke;\n        border-color: transparent;\n        box-shadow: none;\n        color: #363636; }\n    .button.is-dark.is-loading::after {\n      border-color: transparent transparent whitesmoke whitesmoke !important; }\n    .button.is-dark.is-outlined {\n      background-color: transparent;\n      border-color: #363636;\n      color: #363636; }\n      .button.is-dark.is-outlined:hover, .button.is-dark.is-outlined.is-hovered, .button.is-dark.is-outlined:focus, .button.is-dark.is-outlined.is-focused {\n        background-color: #363636;\n        border-color: #363636;\n        color: whitesmoke; }\n      .button.is-dark.is-outlined.is-loading::after {\n        border-color: transparent transparent #363636 #363636 !important; }\n      .button.is-dark.is-outlined.is-loading:hover::after, .button.is-dark.is-outlined.is-loading.is-hovered::after, .button.is-dark.is-outlined.is-loading:focus::after, .button.is-dark.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent whitesmoke whitesmoke !important; }\n      .button.is-dark.is-outlined[disabled],\n      fieldset[disabled] .button.is-dark.is-outlined {\n        background-color: transparent;\n        border-color: #363636;\n        box-shadow: none;\n        color: #363636; }\n    .button.is-dark.is-inverted.is-outlined {\n      background-color: transparent;\n      border-color: whitesmoke;\n      color: whitesmoke; }\n      .button.is-dark.is-inverted.is-outlined:hover, .button.is-dark.is-inverted.is-outlined.is-hovered, .button.is-dark.is-inverted.is-outlined:focus, .button.is-dark.is-inverted.is-outlined.is-focused {\n        background-color: whitesmoke;\n        color: #363636; }\n      .button.is-dark.is-inverted.is-outlined.is-loading:hover::after, .button.is-dark.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-dark.is-inverted.is-outlined.is-loading:focus::after, .button.is-dark.is-inverted.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #363636 #363636 !important; }\n      .button.is-dark.is-inverted.is-outlined[disabled],\n      fieldset[disabled] .button.is-dark.is-inverted.is-outlined {\n        background-color: transparent;\n        border-color: whitesmoke;\n        box-shadow: none;\n        color: whitesmoke; }\n  .button.is-primary {\n    background-color: #00d1b2;\n    border-color: transparent;\n    color: #fff; }\n    .button.is-primary:hover, .button.is-primary.is-hovered {\n      background-color: #00c4a7;\n      border-color: transparent;\n      color: #fff; }\n    .button.is-primary:focus, .button.is-primary.is-focused {\n      border-color: transparent;\n      color: #fff; }\n      .button.is-primary:focus:not(:active), .button.is-primary.is-focused:not(:active) {\n        box-shadow: 0 0 0 0.125em rgba(0, 209, 178, 0.25); }\n    .button.is-primary:active, .button.is-primary.is-active {\n      background-color: #00b89c;\n      border-color: transparent;\n      color: #fff; }\n    .button.is-primary[disabled],\n    fieldset[disabled] .button.is-primary {\n      background-color: #00d1b2;\n      border-color: transparent;\n      box-shadow: none; }\n    .button.is-primary.is-inverted {\n      background-color: #fff;\n      color: #00d1b2; }\n      .button.is-primary.is-inverted:hover, .button.is-primary.is-inverted.is-hovered {\n        background-color: #f2f2f2; }\n      .button.is-primary.is-inverted[disabled],\n      fieldset[disabled] .button.is-primary.is-inverted {\n        background-color: #fff;\n        border-color: transparent;\n        box-shadow: none;\n        color: #00d1b2; }\n    .button.is-primary.is-loading::after {\n      border-color: transparent transparent #fff #fff !important; }\n    .button.is-primary.is-outlined {\n      background-color: transparent;\n      border-color: #00d1b2;\n      color: #00d1b2; }\n      .button.is-primary.is-outlined:hover, .button.is-primary.is-outlined.is-hovered, .button.is-primary.is-outlined:focus, .button.is-primary.is-outlined.is-focused {\n        background-color: #00d1b2;\n        border-color: #00d1b2;\n        color: #fff; }\n      .button.is-primary.is-outlined.is-loading::after {\n        border-color: transparent transparent #00d1b2 #00d1b2 !important; }\n      .button.is-primary.is-outlined.is-loading:hover::after, .button.is-primary.is-outlined.is-loading.is-hovered::after, .button.is-primary.is-outlined.is-loading:focus::after, .button.is-primary.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #fff #fff !important; }\n      .button.is-primary.is-outlined[disabled],\n      fieldset[disabled] .button.is-primary.is-outlined {\n        background-color: transparent;\n        border-color: #00d1b2;\n        box-shadow: none;\n        color: #00d1b2; }\n    .button.is-primary.is-inverted.is-outlined {\n      background-color: transparent;\n      border-color: #fff;\n      color: #fff; }\n      .button.is-primary.is-inverted.is-outlined:hover, .button.is-primary.is-inverted.is-outlined.is-hovered, .button.is-primary.is-inverted.is-outlined:focus, .button.is-primary.is-inverted.is-outlined.is-focused {\n        background-color: #fff;\n        color: #00d1b2; }\n      .button.is-primary.is-inverted.is-outlined.is-loading:hover::after, .button.is-primary.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-primary.is-inverted.is-outlined.is-loading:focus::after, .button.is-primary.is-inverted.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #00d1b2 #00d1b2 !important; }\n      .button.is-primary.is-inverted.is-outlined[disabled],\n      fieldset[disabled] .button.is-primary.is-inverted.is-outlined {\n        background-color: transparent;\n        border-color: #fff;\n        box-shadow: none;\n        color: #fff; }\n  .button.is-link {\n    background-color: #3273dc;\n    border-color: transparent;\n    color: #fff; }\n    .button.is-link:hover, .button.is-link.is-hovered {\n      background-color: #276cda;\n      border-color: transparent;\n      color: #fff; }\n    .button.is-link:focus, .button.is-link.is-focused {\n      border-color: transparent;\n      color: #fff; }\n      .button.is-link:focus:not(:active), .button.is-link.is-focused:not(:active) {\n        box-shadow: 0 0 0 0.125em rgba(50, 115, 220, 0.25); }\n    .button.is-link:active, .button.is-link.is-active {\n      background-color: #2366d1;\n      border-color: transparent;\n      color: #fff; }\n    .button.is-link[disabled],\n    fieldset[disabled] .button.is-link {\n      background-color: #3273dc;\n      border-color: transparent;\n      box-shadow: none; }\n    .button.is-link.is-inverted {\n      background-color: #fff;\n      color: #3273dc; }\n      .button.is-link.is-inverted:hover, .button.is-link.is-inverted.is-hovered {\n        background-color: #f2f2f2; }\n      .button.is-link.is-inverted[disabled],\n      fieldset[disabled] .button.is-link.is-inverted {\n        background-color: #fff;\n        border-color: transparent;\n        box-shadow: none;\n        color: #3273dc; }\n    .button.is-link.is-loading::after {\n      border-color: transparent transparent #fff #fff !important; }\n    .button.is-link.is-outlined {\n      background-color: transparent;\n      border-color: #3273dc;\n      color: #3273dc; }\n      .button.is-link.is-outlined:hover, .button.is-link.is-outlined.is-hovered, .button.is-link.is-outlined:focus, .button.is-link.is-outlined.is-focused {\n        background-color: #3273dc;\n        border-color: #3273dc;\n        color: #fff; }\n      .button.is-link.is-outlined.is-loading::after {\n        border-color: transparent transparent #3273dc #3273dc !important; }\n      .button.is-link.is-outlined.is-loading:hover::after, .button.is-link.is-outlined.is-loading.is-hovered::after, .button.is-link.is-outlined.is-loading:focus::after, .button.is-link.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #fff #fff !important; }\n      .button.is-link.is-outlined[disabled],\n      fieldset[disabled] .button.is-link.is-outlined {\n        background-color: transparent;\n        border-color: #3273dc;\n        box-shadow: none;\n        color: #3273dc; }\n    .button.is-link.is-inverted.is-outlined {\n      background-color: transparent;\n      border-color: #fff;\n      color: #fff; }\n      .button.is-link.is-inverted.is-outlined:hover, .button.is-link.is-inverted.is-outlined.is-hovered, .button.is-link.is-inverted.is-outlined:focus, .button.is-link.is-inverted.is-outlined.is-focused {\n        background-color: #fff;\n        color: #3273dc; }\n      .button.is-link.is-inverted.is-outlined.is-loading:hover::after, .button.is-link.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-link.is-inverted.is-outlined.is-loading:focus::after, .button.is-link.is-inverted.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #3273dc #3273dc !important; }\n      .button.is-link.is-inverted.is-outlined[disabled],\n      fieldset[disabled] .button.is-link.is-inverted.is-outlined {\n        background-color: transparent;\n        border-color: #fff;\n        box-shadow: none;\n        color: #fff; }\n  .button.is-info {\n    background-color: #209cee;\n    border-color: transparent;\n    color: #fff; }\n    .button.is-info:hover, .button.is-info.is-hovered {\n      background-color: #1496ed;\n      border-color: transparent;\n      color: #fff; }\n    .button.is-info:focus, .button.is-info.is-focused {\n      border-color: transparent;\n      color: #fff; }\n      .button.is-info:focus:not(:active), .button.is-info.is-focused:not(:active) {\n        box-shadow: 0 0 0 0.125em rgba(32, 156, 238, 0.25); }\n    .button.is-info:active, .button.is-info.is-active {\n      background-color: #118fe4;\n      border-color: transparent;\n      color: #fff; }\n    .button.is-info[disabled],\n    fieldset[disabled] .button.is-info {\n      background-color: #209cee;\n      border-color: transparent;\n      box-shadow: none; }\n    .button.is-info.is-inverted {\n      background-color: #fff;\n      color: #209cee; }\n      .button.is-info.is-inverted:hover, .button.is-info.is-inverted.is-hovered {\n        background-color: #f2f2f2; }\n      .button.is-info.is-inverted[disabled],\n      fieldset[disabled] .button.is-info.is-inverted {\n        background-color: #fff;\n        border-color: transparent;\n        box-shadow: none;\n        color: #209cee; }\n    .button.is-info.is-loading::after {\n      border-color: transparent transparent #fff #fff !important; }\n    .button.is-info.is-outlined {\n      background-color: transparent;\n      border-color: #209cee;\n      color: #209cee; }\n      .button.is-info.is-outlined:hover, .button.is-info.is-outlined.is-hovered, .button.is-info.is-outlined:focus, .button.is-info.is-outlined.is-focused {\n        background-color: #209cee;\n        border-color: #209cee;\n        color: #fff; }\n      .button.is-info.is-outlined.is-loading::after {\n        border-color: transparent transparent #209cee #209cee !important; }\n      .button.is-info.is-outlined.is-loading:hover::after, .button.is-info.is-outlined.is-loading.is-hovered::after, .button.is-info.is-outlined.is-loading:focus::after, .button.is-info.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #fff #fff !important; }\n      .button.is-info.is-outlined[disabled],\n      fieldset[disabled] .button.is-info.is-outlined {\n        background-color: transparent;\n        border-color: #209cee;\n        box-shadow: none;\n        color: #209cee; }\n    .button.is-info.is-inverted.is-outlined {\n      background-color: transparent;\n      border-color: #fff;\n      color: #fff; }\n      .button.is-info.is-inverted.is-outlined:hover, .button.is-info.is-inverted.is-outlined.is-hovered, .button.is-info.is-inverted.is-outlined:focus, .button.is-info.is-inverted.is-outlined.is-focused {\n        background-color: #fff;\n        color: #209cee; }\n      .button.is-info.is-inverted.is-outlined.is-loading:hover::after, .button.is-info.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-info.is-inverted.is-outlined.is-loading:focus::after, .button.is-info.is-inverted.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #209cee #209cee !important; }\n      .button.is-info.is-inverted.is-outlined[disabled],\n      fieldset[disabled] .button.is-info.is-inverted.is-outlined {\n        background-color: transparent;\n        border-color: #fff;\n        box-shadow: none;\n        color: #fff; }\n  .button.is-success {\n    background-color: #23d160;\n    border-color: transparent;\n    color: #fff; }\n    .button.is-success:hover, .button.is-success.is-hovered {\n      background-color: #22c65b;\n      border-color: transparent;\n      color: #fff; }\n    .button.is-success:focus, .button.is-success.is-focused {\n      border-color: transparent;\n      color: #fff; }\n      .button.is-success:focus:not(:active), .button.is-success.is-focused:not(:active) {\n        box-shadow: 0 0 0 0.125em rgba(35, 209, 96, 0.25); }\n    .button.is-success:active, .button.is-success.is-active {\n      background-color: #20bc56;\n      border-color: transparent;\n      color: #fff; }\n    .button.is-success[disabled],\n    fieldset[disabled] .button.is-success {\n      background-color: #23d160;\n      border-color: transparent;\n      box-shadow: none; }\n    .button.is-success.is-inverted {\n      background-color: #fff;\n      color: #23d160; }\n      .button.is-success.is-inverted:hover, .button.is-success.is-inverted.is-hovered {\n        background-color: #f2f2f2; }\n      .button.is-success.is-inverted[disabled],\n      fieldset[disabled] .button.is-success.is-inverted {\n        background-color: #fff;\n        border-color: transparent;\n        box-shadow: none;\n        color: #23d160; }\n    .button.is-success.is-loading::after {\n      border-color: transparent transparent #fff #fff !important; }\n    .button.is-success.is-outlined {\n      background-color: transparent;\n      border-color: #23d160;\n      color: #23d160; }\n      .button.is-success.is-outlined:hover, .button.is-success.is-outlined.is-hovered, .button.is-success.is-outlined:focus, .button.is-success.is-outlined.is-focused {\n        background-color: #23d160;\n        border-color: #23d160;\n        color: #fff; }\n      .button.is-success.is-outlined.is-loading::after {\n        border-color: transparent transparent #23d160 #23d160 !important; }\n      .button.is-success.is-outlined.is-loading:hover::after, .button.is-success.is-outlined.is-loading.is-hovered::after, .button.is-success.is-outlined.is-loading:focus::after, .button.is-success.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #fff #fff !important; }\n      .button.is-success.is-outlined[disabled],\n      fieldset[disabled] .button.is-success.is-outlined {\n        background-color: transparent;\n        border-color: #23d160;\n        box-shadow: none;\n        color: #23d160; }\n    .button.is-success.is-inverted.is-outlined {\n      background-color: transparent;\n      border-color: #fff;\n      color: #fff; }\n      .button.is-success.is-inverted.is-outlined:hover, .button.is-success.is-inverted.is-outlined.is-hovered, .button.is-success.is-inverted.is-outlined:focus, .button.is-success.is-inverted.is-outlined.is-focused {\n        background-color: #fff;\n        color: #23d160; }\n      .button.is-success.is-inverted.is-outlined.is-loading:hover::after, .button.is-success.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-success.is-inverted.is-outlined.is-loading:focus::after, .button.is-success.is-inverted.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #23d160 #23d160 !important; }\n      .button.is-success.is-inverted.is-outlined[disabled],\n      fieldset[disabled] .button.is-success.is-inverted.is-outlined {\n        background-color: transparent;\n        border-color: #fff;\n        box-shadow: none;\n        color: #fff; }\n  .button.is-warning {\n    background-color: #ffdd57;\n    border-color: transparent;\n    color: rgba(0, 0, 0, 0.7); }\n    .button.is-warning:hover, .button.is-warning.is-hovered {\n      background-color: #ffdb4a;\n      border-color: transparent;\n      color: rgba(0, 0, 0, 0.7); }\n    .button.is-warning:focus, .button.is-warning.is-focused {\n      border-color: transparent;\n      color: rgba(0, 0, 0, 0.7); }\n      .button.is-warning:focus:not(:active), .button.is-warning.is-focused:not(:active) {\n        box-shadow: 0 0 0 0.125em rgba(255, 221, 87, 0.25); }\n    .button.is-warning:active, .button.is-warning.is-active {\n      background-color: #ffd83d;\n      border-color: transparent;\n      color: rgba(0, 0, 0, 0.7); }\n    .button.is-warning[disabled],\n    fieldset[disabled] .button.is-warning {\n      background-color: #ffdd57;\n      border-color: transparent;\n      box-shadow: none; }\n    .button.is-warning.is-inverted {\n      background-color: rgba(0, 0, 0, 0.7);\n      color: #ffdd57; }\n      .button.is-warning.is-inverted:hover, .button.is-warning.is-inverted.is-hovered {\n        background-color: rgba(0, 0, 0, 0.7); }\n      .button.is-warning.is-inverted[disabled],\n      fieldset[disabled] .button.is-warning.is-inverted {\n        background-color: rgba(0, 0, 0, 0.7);\n        border-color: transparent;\n        box-shadow: none;\n        color: #ffdd57; }\n    .button.is-warning.is-loading::after {\n      border-color: transparent transparent rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) !important; }\n    .button.is-warning.is-outlined {\n      background-color: transparent;\n      border-color: #ffdd57;\n      color: #ffdd57; }\n      .button.is-warning.is-outlined:hover, .button.is-warning.is-outlined.is-hovered, .button.is-warning.is-outlined:focus, .button.is-warning.is-outlined.is-focused {\n        background-color: #ffdd57;\n        border-color: #ffdd57;\n        color: rgba(0, 0, 0, 0.7); }\n      .button.is-warning.is-outlined.is-loading::after {\n        border-color: transparent transparent #ffdd57 #ffdd57 !important; }\n      .button.is-warning.is-outlined.is-loading:hover::after, .button.is-warning.is-outlined.is-loading.is-hovered::after, .button.is-warning.is-outlined.is-loading:focus::after, .button.is-warning.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) !important; }\n      .button.is-warning.is-outlined[disabled],\n      fieldset[disabled] .button.is-warning.is-outlined {\n        background-color: transparent;\n        border-color: #ffdd57;\n        box-shadow: none;\n        color: #ffdd57; }\n    .button.is-warning.is-inverted.is-outlined {\n      background-color: transparent;\n      border-color: rgba(0, 0, 0, 0.7);\n      color: rgba(0, 0, 0, 0.7); }\n      .button.is-warning.is-inverted.is-outlined:hover, .button.is-warning.is-inverted.is-outlined.is-hovered, .button.is-warning.is-inverted.is-outlined:focus, .button.is-warning.is-inverted.is-outlined.is-focused {\n        background-color: rgba(0, 0, 0, 0.7);\n        color: #ffdd57; }\n      .button.is-warning.is-inverted.is-outlined.is-loading:hover::after, .button.is-warning.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-warning.is-inverted.is-outlined.is-loading:focus::after, .button.is-warning.is-inverted.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #ffdd57 #ffdd57 !important; }\n      .button.is-warning.is-inverted.is-outlined[disabled],\n      fieldset[disabled] .button.is-warning.is-inverted.is-outlined {\n        background-color: transparent;\n        border-color: rgba(0, 0, 0, 0.7);\n        box-shadow: none;\n        color: rgba(0, 0, 0, 0.7); }\n  .button.is-danger {\n    background-color: #ff3860;\n    border-color: transparent;\n    color: #fff; }\n    .button.is-danger:hover, .button.is-danger.is-hovered {\n      background-color: #ff2b56;\n      border-color: transparent;\n      color: #fff; }\n    .button.is-danger:focus, .button.is-danger.is-focused {\n      border-color: transparent;\n      color: #fff; }\n      .button.is-danger:focus:not(:active), .button.is-danger.is-focused:not(:active) {\n        box-shadow: 0 0 0 0.125em rgba(255, 56, 96, 0.25); }\n    .button.is-danger:active, .button.is-danger.is-active {\n      background-color: #ff1f4b;\n      border-color: transparent;\n      color: #fff; }\n    .button.is-danger[disabled],\n    fieldset[disabled] .button.is-danger {\n      background-color: #ff3860;\n      border-color: transparent;\n      box-shadow: none; }\n    .button.is-danger.is-inverted {\n      background-color: #fff;\n      color: #ff3860; }\n      .button.is-danger.is-inverted:hover, .button.is-danger.is-inverted.is-hovered {\n        background-color: #f2f2f2; }\n      .button.is-danger.is-inverted[disabled],\n      fieldset[disabled] .button.is-danger.is-inverted {\n        background-color: #fff;\n        border-color: transparent;\n        box-shadow: none;\n        color: #ff3860; }\n    .button.is-danger.is-loading::after {\n      border-color: transparent transparent #fff #fff !important; }\n    .button.is-danger.is-outlined {\n      background-color: transparent;\n      border-color: #ff3860;\n      color: #ff3860; }\n      .button.is-danger.is-outlined:hover, .button.is-danger.is-outlined.is-hovered, .button.is-danger.is-outlined:focus, .button.is-danger.is-outlined.is-focused {\n        background-color: #ff3860;\n        border-color: #ff3860;\n        color: #fff; }\n      .button.is-danger.is-outlined.is-loading::after {\n        border-color: transparent transparent #ff3860 #ff3860 !important; }\n      .button.is-danger.is-outlined.is-loading:hover::after, .button.is-danger.is-outlined.is-loading.is-hovered::after, .button.is-danger.is-outlined.is-loading:focus::after, .button.is-danger.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #fff #fff !important; }\n      .button.is-danger.is-outlined[disabled],\n      fieldset[disabled] .button.is-danger.is-outlined {\n        background-color: transparent;\n        border-color: #ff3860;\n        box-shadow: none;\n        color: #ff3860; }\n    .button.is-danger.is-inverted.is-outlined {\n      background-color: transparent;\n      border-color: #fff;\n      color: #fff; }\n      .button.is-danger.is-inverted.is-outlined:hover, .button.is-danger.is-inverted.is-outlined.is-hovered, .button.is-danger.is-inverted.is-outlined:focus, .button.is-danger.is-inverted.is-outlined.is-focused {\n        background-color: #fff;\n        color: #ff3860; }\n      .button.is-danger.is-inverted.is-outlined.is-loading:hover::after, .button.is-danger.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-danger.is-inverted.is-outlined.is-loading:focus::after, .button.is-danger.is-inverted.is-outlined.is-loading.is-focused::after {\n        border-color: transparent transparent #ff3860 #ff3860 !important; }\n      .button.is-danger.is-inverted.is-outlined[disabled],\n      fieldset[disabled] .button.is-danger.is-inverted.is-outlined {\n        background-color: transparent;\n        border-color: #fff;\n        box-shadow: none;\n        color: #fff; }\n  .button.is-small {\n    border-radius: 2px;\n    font-size: 0.75rem; }\n  .button.is-normal {\n    font-size: 1rem; }\n  .button.is-medium {\n    font-size: 1.25rem; }\n  .button.is-large {\n    font-size: 1.5rem; }\n  .button[disabled],\n  fieldset[disabled] .button {\n    background-color: white;\n    border-color: #dbdbdb;\n    box-shadow: none;\n    opacity: 0.5; }\n  .button.is-fullwidth {\n    display: flex;\n    width: 100%; }\n  .button.is-loading {\n    color: transparent !important;\n    pointer-events: none; }\n    .button.is-loading::after {\n      position: absolute;\n      left: calc(50% - (1em / 2));\n      top: calc(50% - (1em / 2));\n      position: absolute !important; }\n  .button.is-static {\n    background-color: whitesmoke;\n    border-color: #dbdbdb;\n    color: #7a7a7a;\n    box-shadow: none;\n    pointer-events: none; }\n  .button.is-rounded {\n    border-radius: 290486px;\n    padding-left: 1em;\n    padding-right: 1em; }\n\n.buttons {\n  align-items: center;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start; }\n  .buttons .button {\n    margin-bottom: 0.5rem; }\n    .buttons .button:not(:last-child):not(.is-fullwidth) {\n      margin-right: 0.5rem; }\n  .buttons:last-child {\n    margin-bottom: -0.5rem; }\n  .buttons:not(:last-child) {\n    margin-bottom: 1rem; }\n  .buttons.are-small .button:not(.is-normal):not(.is-medium):not(.is-large) {\n    border-radius: 2px;\n    font-size: 0.75rem; }\n  .buttons.are-medium .button:not(.is-small):not(.is-normal):not(.is-large) {\n    font-size: 1.25rem; }\n  .buttons.are-large .button:not(.is-small):not(.is-normal):not(.is-medium) {\n    font-size: 1.5rem; }\n  .buttons.has-addons .button:not(:first-child) {\n    border-bottom-left-radius: 0;\n    border-top-left-radius: 0; }\n  .buttons.has-addons .button:not(:last-child) {\n    border-bottom-right-radius: 0;\n    border-top-right-radius: 0;\n    margin-right: -1px; }\n  .buttons.has-addons .button:last-child {\n    margin-right: 0; }\n  .buttons.has-addons .button:hover, .buttons.has-addons .button.is-hovered {\n    z-index: 2; }\n  .buttons.has-addons .button:focus, .buttons.has-addons .button.is-focused, .buttons.has-addons .button:active, .buttons.has-addons .button.is-active, .buttons.has-addons .button.is-selected {\n    z-index: 3; }\n    .buttons.has-addons .button:focus:hover, .buttons.has-addons .button.is-focused:hover, .buttons.has-addons .button:active:hover, .buttons.has-addons .button.is-active:hover, .buttons.has-addons .button.is-selected:hover {\n      z-index: 4; }\n  .buttons.has-addons .button.is-expanded {\n    flex-grow: 1;\n    flex-shrink: 1; }\n  .buttons.is-centered {\n    justify-content: center; }\n    .buttons.is-centered:not(.has-addons) .button:not(.is-fullwidth) {\n      margin-left: 0.25rem;\n      margin-right: 0.25rem; }\n  .buttons.is-right {\n    justify-content: flex-end; }\n    .buttons.is-right:not(.has-addons) .button:not(.is-fullwidth) {\n      margin-left: 0.25rem;\n      margin-right: 0.25rem; }\n\n.container {\n  flex-grow: 1;\n  margin: 0 auto;\n  position: relative;\n  width: auto; }\n  @media screen and (min-width: 1024px) {\n    .container {\n      max-width: 960px; }\n      .container.is-fluid {\n        margin-left: 32px;\n        margin-right: 32px;\n        max-width: none; } }\n  @media screen and (max-width: 1215px) {\n    .container.is-widescreen {\n      max-width: 1152px; } }\n  @media screen and (max-width: 1407px) {\n    .container.is-fullhd {\n      max-width: 1344px; } }\n  @media screen and (min-width: 1216px) {\n    .container {\n      max-width: 1152px; } }\n  @media screen and (min-width: 1408px) {\n    .container {\n      max-width: 1344px; } }\n\n.content li + li {\n  margin-top: 0.25em; }\n\n.content p:not(:last-child),\n.content dl:not(:last-child),\n.content ol:not(:last-child),\n.content ul:not(:last-child),\n.content blockquote:not(:last-child),\n.content pre:not(:last-child),\n.content table:not(:last-child) {\n  margin-bottom: 1em; }\n\n.content h1,\n.content h2,\n.content h3,\n.content h4,\n.content h5,\n.content h6 {\n  color: #363636;\n  font-weight: 600;\n  line-height: 1.125; }\n\n.content h1 {\n  font-size: 2em;\n  margin-bottom: 0.5em; }\n  .content h1:not(:first-child) {\n    margin-top: 1em; }\n\n.content h2 {\n  font-size: 1.75em;\n  margin-bottom: 0.5714em; }\n  .content h2:not(:first-child) {\n    margin-top: 1.1428em; }\n\n.content h3 {\n  font-size: 1.5em;\n  margin-bottom: 0.6666em; }\n  .content h3:not(:first-child) {\n    margin-top: 1.3333em; }\n\n.content h4 {\n  font-size: 1.25em;\n  margin-bottom: 0.8em; }\n\n.content h5 {\n  font-size: 1.125em;\n  margin-bottom: 0.8888em; }\n\n.content h6 {\n  font-size: 1em;\n  margin-bottom: 1em; }\n\n.content blockquote {\n  background-color: whitesmoke;\n  border-left: 5px solid #dbdbdb;\n  padding: 1.25em 1.5em; }\n\n.content ol {\n  list-style-position: outside;\n  margin-left: 2em;\n  margin-top: 1em; }\n  .content ol:not([type]) {\n    list-style-type: decimal; }\n    .content ol:not([type]).is-lower-alpha {\n      list-style-type: lower-alpha; }\n    .content ol:not([type]).is-lower-roman {\n      list-style-type: lower-roman; }\n    .content ol:not([type]).is-upper-alpha {\n      list-style-type: upper-alpha; }\n    .content ol:not([type]).is-upper-roman {\n      list-style-type: upper-roman; }\n\n.content ul {\n  list-style: disc outside;\n  margin-left: 2em;\n  margin-top: 1em; }\n  .content ul ul {\n    list-style-type: circle;\n    margin-top: 0.5em; }\n    .content ul ul ul {\n      list-style-type: square; }\n\n.content dd {\n  margin-left: 2em; }\n\n.content figure {\n  margin-left: 2em;\n  margin-right: 2em;\n  text-align: center; }\n  .content figure:not(:first-child) {\n    margin-top: 2em; }\n  .content figure:not(:last-child) {\n    margin-bottom: 2em; }\n  .content figure img {\n    display: inline-block; }\n  .content figure figcaption {\n    font-style: italic; }\n\n.content pre {\n  -webkit-overflow-scrolling: touch;\n  overflow-x: auto;\n  padding: 1.25em 1.5em;\n  white-space: pre;\n  word-wrap: normal; }\n\n.content sup,\n.content sub {\n  font-size: 75%; }\n\n.content table {\n  width: 100%; }\n  .content table td,\n  .content table th {\n    border: 1px solid #dbdbdb;\n    border-width: 0 0 1px;\n    padding: 0.5em 0.75em;\n    vertical-align: top; }\n  .content table th {\n    color: #363636; }\n    .content table th:not([align]) {\n      text-align: left; }\n  .content table thead td,\n  .content table thead th {\n    border-width: 0 0 2px;\n    color: #363636; }\n  .content table tfoot td,\n  .content table tfoot th {\n    border-width: 2px 0 0;\n    color: #363636; }\n  .content table tbody tr:last-child td,\n  .content table tbody tr:last-child th {\n    border-bottom-width: 0; }\n\n.content .tabs li + li {\n  margin-top: 0; }\n\n.content.is-small {\n  font-size: 0.75rem; }\n\n.content.is-medium {\n  font-size: 1.25rem; }\n\n.content.is-large {\n  font-size: 1.5rem; }\n\n.icon {\n  align-items: center;\n  display: inline-flex;\n  justify-content: center;\n  height: 1.5rem;\n  width: 1.5rem; }\n  .icon.is-small {\n    height: 1rem;\n    width: 1rem; }\n  .icon.is-medium {\n    height: 2rem;\n    width: 2rem; }\n  .icon.is-large {\n    height: 3rem;\n    width: 3rem; }\n\n.image {\n  display: block;\n  position: relative; }\n  .image img {\n    display: block;\n    height: auto;\n    width: 100%; }\n    .image img.is-rounded {\n      border-radius: 290486px; }\n  .image.is-square img,\n  .image.is-square .has-ratio, .image.is-1by1 img,\n  .image.is-1by1 .has-ratio, .image.is-5by4 img,\n  .image.is-5by4 .has-ratio, .image.is-4by3 img,\n  .image.is-4by3 .has-ratio, .image.is-3by2 img,\n  .image.is-3by2 .has-ratio, .image.is-5by3 img,\n  .image.is-5by3 .has-ratio, .image.is-16by9 img,\n  .image.is-16by9 .has-ratio, .image.is-2by1 img,\n  .image.is-2by1 .has-ratio, .image.is-3by1 img,\n  .image.is-3by1 .has-ratio, .image.is-4by5 img,\n  .image.is-4by5 .has-ratio, .image.is-3by4 img,\n  .image.is-3by4 .has-ratio, .image.is-2by3 img,\n  .image.is-2by3 .has-ratio, .image.is-3by5 img,\n  .image.is-3by5 .has-ratio, .image.is-9by16 img,\n  .image.is-9by16 .has-ratio, .image.is-1by2 img,\n  .image.is-1by2 .has-ratio, .image.is-1by3 img,\n  .image.is-1by3 .has-ratio {\n    height: 100%;\n    width: 100%; }\n  .image.is-square, .image.is-1by1 {\n    padding-top: 100%; }\n  .image.is-5by4 {\n    padding-top: 80%; }\n  .image.is-4by3 {\n    padding-top: 75%; }\n  .image.is-3by2 {\n    padding-top: 66.6666%; }\n  .image.is-5by3 {\n    padding-top: 60%; }\n  .image.is-16by9 {\n    padding-top: 56.25%; }\n  .image.is-2by1 {\n    padding-top: 50%; }\n  .image.is-3by1 {\n    padding-top: 33.3333%; }\n  .image.is-4by5 {\n    padding-top: 125%; }\n  .image.is-3by4 {\n    padding-top: 133.3333%; }\n  .image.is-2by3 {\n    padding-top: 150%; }\n  .image.is-3by5 {\n    padding-top: 166.6666%; }\n  .image.is-9by16 {\n    padding-top: 177.7777%; }\n  .image.is-1by2 {\n    padding-top: 200%; }\n  .image.is-1by3 {\n    padding-top: 300%; }\n  .image.is-16x16 {\n    height: 16px;\n    width: 16px; }\n  .image.is-24x24 {\n    height: 24px;\n    width: 24px; }\n  .image.is-32x32 {\n    height: 32px;\n    width: 32px; }\n  .image.is-48x48 {\n    height: 48px;\n    width: 48px; }\n  .image.is-64x64 {\n    height: 64px;\n    width: 64px; }\n  .image.is-96x96 {\n    height: 96px;\n    width: 96px; }\n  .image.is-128x128 {\n    height: 128px;\n    width: 128px; }\n\n.notification {\n  background-color: whitesmoke;\n  border-radius: 4px;\n  padding: 1.25rem 2.5rem 1.25rem 1.5rem;\n  position: relative; }\n  .notification a:not(.button):not(.dropdown-item) {\n    color: currentColor;\n    text-decoration: underline; }\n  .notification strong {\n    color: currentColor; }\n  .notification code,\n  .notification pre {\n    background: white; }\n  .notification pre code {\n    background: transparent; }\n  .notification > .delete {\n    position: absolute;\n    right: 0.5rem;\n    top: 0.5rem; }\n  .notification .title,\n  .notification .subtitle,\n  .notification .content {\n    color: currentColor; }\n  .notification.is-white {\n    background-color: white;\n    color: #0a0a0a; }\n  .notification.is-black {\n    background-color: #0a0a0a;\n    color: white; }\n  .notification.is-light {\n    background-color: whitesmoke;\n    color: #363636; }\n  .notification.is-dark {\n    background-color: #363636;\n    color: whitesmoke; }\n  .notification.is-primary {\n    background-color: #00d1b2;\n    color: #fff; }\n  .notification.is-link {\n    background-color: #3273dc;\n    color: #fff; }\n  .notification.is-info {\n    background-color: #209cee;\n    color: #fff; }\n  .notification.is-success {\n    background-color: #23d160;\n    color: #fff; }\n  .notification.is-warning {\n    background-color: #ffdd57;\n    color: rgba(0, 0, 0, 0.7); }\n  .notification.is-danger {\n    background-color: #ff3860;\n    color: #fff; }\n\n.progress {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  border: none;\n  border-radius: 290486px;\n  display: block;\n  height: 1rem;\n  overflow: hidden;\n  padding: 0;\n  width: 100%; }\n  .progress::-webkit-progress-bar {\n    background-color: #dbdbdb; }\n  .progress::-webkit-progress-value {\n    background-color: #4a4a4a; }\n  .progress::-moz-progress-bar {\n    background-color: #4a4a4a; }\n  .progress::-ms-fill {\n    background-color: #4a4a4a;\n    border: none; }\n  .progress.is-white::-webkit-progress-value {\n    background-color: white; }\n  .progress.is-white::-moz-progress-bar {\n    background-color: white; }\n  .progress.is-white::-ms-fill {\n    background-color: white; }\n  .progress.is-white:indeterminate {\n    background-image: linear-gradient(to right, white 30%, #dbdbdb 30%); }\n  .progress.is-black::-webkit-progress-value {\n    background-color: #0a0a0a; }\n  .progress.is-black::-moz-progress-bar {\n    background-color: #0a0a0a; }\n  .progress.is-black::-ms-fill {\n    background-color: #0a0a0a; }\n  .progress.is-black:indeterminate {\n    background-image: linear-gradient(to right, #0a0a0a 30%, #dbdbdb 30%); }\n  .progress.is-light::-webkit-progress-value {\n    background-color: whitesmoke; }\n  .progress.is-light::-moz-progress-bar {\n    background-color: whitesmoke; }\n  .progress.is-light::-ms-fill {\n    background-color: whitesmoke; }\n  .progress.is-light:indeterminate {\n    background-image: linear-gradient(to right, whitesmoke 30%, #dbdbdb 30%); }\n  .progress.is-dark::-webkit-progress-value {\n    background-color: #363636; }\n  .progress.is-dark::-moz-progress-bar {\n    background-color: #363636; }\n  .progress.is-dark::-ms-fill {\n    background-color: #363636; }\n  .progress.is-dark:indeterminate {\n    background-image: linear-gradient(to right, #363636 30%, #dbdbdb 30%); }\n  .progress.is-primary::-webkit-progress-value {\n    background-color: #00d1b2; }\n  .progress.is-primary::-moz-progress-bar {\n    background-color: #00d1b2; }\n  .progress.is-primary::-ms-fill {\n    background-color: #00d1b2; }\n  .progress.is-primary:indeterminate {\n    background-image: linear-gradient(to right, #00d1b2 30%, #dbdbdb 30%); }\n  .progress.is-link::-webkit-progress-value {\n    background-color: #3273dc; }\n  .progress.is-link::-moz-progress-bar {\n    background-color: #3273dc; }\n  .progress.is-link::-ms-fill {\n    background-color: #3273dc; }\n  .progress.is-link:indeterminate {\n    background-image: linear-gradient(to right, #3273dc 30%, #dbdbdb 30%); }\n  .progress.is-info::-webkit-progress-value {\n    background-color: #209cee; }\n  .progress.is-info::-moz-progress-bar {\n    background-color: #209cee; }\n  .progress.is-info::-ms-fill {\n    background-color: #209cee; }\n  .progress.is-info:indeterminate {\n    background-image: linear-gradient(to right, #209cee 30%, #dbdbdb 30%); }\n  .progress.is-success::-webkit-progress-value {\n    background-color: #23d160; }\n  .progress.is-success::-moz-progress-bar {\n    background-color: #23d160; }\n  .progress.is-success::-ms-fill {\n    background-color: #23d160; }\n  .progress.is-success:indeterminate {\n    background-image: linear-gradient(to right, #23d160 30%, #dbdbdb 30%); }\n  .progress.is-warning::-webkit-progress-value {\n    background-color: #ffdd57; }\n  .progress.is-warning::-moz-progress-bar {\n    background-color: #ffdd57; }\n  .progress.is-warning::-ms-fill {\n    background-color: #ffdd57; }\n  .progress.is-warning:indeterminate {\n    background-image: linear-gradient(to right, #ffdd57 30%, #dbdbdb 30%); }\n  .progress.is-danger::-webkit-progress-value {\n    background-color: #ff3860; }\n  .progress.is-danger::-moz-progress-bar {\n    background-color: #ff3860; }\n  .progress.is-danger::-ms-fill {\n    background-color: #ff3860; }\n  .progress.is-danger:indeterminate {\n    background-image: linear-gradient(to right, #ff3860 30%, #dbdbdb 30%); }\n  .progress:indeterminate {\n    animation-duration: 1.5s;\n    animation-iteration-count: infinite;\n    animation-name: moveIndeterminate;\n    animation-timing-function: linear;\n    background-color: #dbdbdb;\n    background-image: linear-gradient(to right, #4a4a4a 30%, #dbdbdb 30%);\n    background-position: top left;\n    background-repeat: no-repeat;\n    background-size: 150% 150%; }\n    .progress:indeterminate::-webkit-progress-bar {\n      background-color: transparent; }\n    .progress:indeterminate::-moz-progress-bar {\n      background-color: transparent; }\n  .progress.is-small {\n    height: 0.75rem; }\n  .progress.is-medium {\n    height: 1.25rem; }\n  .progress.is-large {\n    height: 1.5rem; }\n\n@keyframes moveIndeterminate {\n  from {\n    background-position: 200% 0; }\n  to {\n    background-position: -200% 0; } }\n\n.table {\n  background-color: white;\n  color: #363636; }\n  .table td,\n  .table th {\n    border: 1px solid #dbdbdb;\n    border-width: 0 0 1px;\n    padding: 0.5em 0.75em;\n    vertical-align: top; }\n    .table td.is-white,\n    .table th.is-white {\n      background-color: white;\n      border-color: white;\n      color: #0a0a0a; }\n    .table td.is-black,\n    .table th.is-black {\n      background-color: #0a0a0a;\n      border-color: #0a0a0a;\n      color: white; }\n    .table td.is-light,\n    .table th.is-light {\n      background-color: whitesmoke;\n      border-color: whitesmoke;\n      color: #363636; }\n    .table td.is-dark,\n    .table th.is-dark {\n      background-color: #363636;\n      border-color: #363636;\n      color: whitesmoke; }\n    .table td.is-primary,\n    .table th.is-primary {\n      background-color: #00d1b2;\n      border-color: #00d1b2;\n      color: #fff; }\n    .table td.is-link,\n    .table th.is-link {\n      background-color: #3273dc;\n      border-color: #3273dc;\n      color: #fff; }\n    .table td.is-info,\n    .table th.is-info {\n      background-color: #209cee;\n      border-color: #209cee;\n      color: #fff; }\n    .table td.is-success,\n    .table th.is-success {\n      background-color: #23d160;\n      border-color: #23d160;\n      color: #fff; }\n    .table td.is-warning,\n    .table th.is-warning {\n      background-color: #ffdd57;\n      border-color: #ffdd57;\n      color: rgba(0, 0, 0, 0.7); }\n    .table td.is-danger,\n    .table th.is-danger {\n      background-color: #ff3860;\n      border-color: #ff3860;\n      color: #fff; }\n    .table td.is-narrow,\n    .table th.is-narrow {\n      white-space: nowrap;\n      width: 1%; }\n    .table td.is-selected,\n    .table th.is-selected {\n      background-color: #00d1b2;\n      color: #fff; }\n      .table td.is-selected a,\n      .table td.is-selected strong,\n      .table th.is-selected a,\n      .table th.is-selected strong {\n        color: currentColor; }\n  .table th {\n    color: #363636; }\n    .table th:not([align]) {\n      text-align: left; }\n  .table tr.is-selected {\n    background-color: #00d1b2;\n    color: #fff; }\n    .table tr.is-selected a,\n    .table tr.is-selected strong {\n      color: currentColor; }\n    .table tr.is-selected td,\n    .table tr.is-selected th {\n      border-color: #fff;\n      color: currentColor; }\n  .table thead {\n    background-color: transparent; }\n    .table thead td,\n    .table thead th {\n      border-width: 0 0 2px;\n      color: #363636; }\n  .table tfoot {\n    background-color: transparent; }\n    .table tfoot td,\n    .table tfoot th {\n      border-width: 2px 0 0;\n      color: #363636; }\n  .table tbody {\n    background-color: transparent; }\n    .table tbody tr:last-child td,\n    .table tbody tr:last-child th {\n      border-bottom-width: 0; }\n  .table.is-bordered td,\n  .table.is-bordered th {\n    border-width: 1px; }\n  .table.is-bordered tr:last-child td,\n  .table.is-bordered tr:last-child th {\n    border-bottom-width: 1px; }\n  .table.is-fullwidth {\n    width: 100%; }\n  .table.is-hoverable tbody tr:not(.is-selected):hover {\n    background-color: #fafafa; }\n  .table.is-hoverable.is-striped tbody tr:not(.is-selected):hover {\n    background-color: #fafafa; }\n    .table.is-hoverable.is-striped tbody tr:not(.is-selected):hover:nth-child(even) {\n      background-color: whitesmoke; }\n  .table.is-narrow td,\n  .table.is-narrow th {\n    padding: 0.25em 0.5em; }\n  .table.is-striped tbody tr:not(.is-selected):nth-child(even) {\n    background-color: #fafafa; }\n\n.table-container {\n  -webkit-overflow-scrolling: touch;\n  overflow: auto;\n  overflow-y: hidden;\n  max-width: 100%; }\n\n.tags {\n  align-items: center;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start; }\n  .tags .tag {\n    margin-bottom: 0.5rem; }\n    .tags .tag:not(:last-child) {\n      margin-right: 0.5rem; }\n  .tags:last-child {\n    margin-bottom: -0.5rem; }\n  .tags:not(:last-child) {\n    margin-bottom: 1rem; }\n  .tags.are-medium .tag:not(.is-normal):not(.is-large) {\n    font-size: 1rem; }\n  .tags.are-large .tag:not(.is-normal):not(.is-medium) {\n    font-size: 1.25rem; }\n  .tags.is-centered {\n    justify-content: center; }\n    .tags.is-centered .tag {\n      margin-right: 0.25rem;\n      margin-left: 0.25rem; }\n  .tags.is-right {\n    justify-content: flex-end; }\n    .tags.is-right .tag:not(:first-child) {\n      margin-left: 0.5rem; }\n    .tags.is-right .tag:not(:last-child) {\n      margin-right: 0; }\n  .tags.has-addons .tag {\n    margin-right: 0; }\n    .tags.has-addons .tag:not(:first-child) {\n      margin-left: 0;\n      border-bottom-left-radius: 0;\n      border-top-left-radius: 0; }\n    .tags.has-addons .tag:not(:last-child) {\n      border-bottom-right-radius: 0;\n      border-top-right-radius: 0; }\n\n.tag:not(body) {\n  align-items: center;\n  background-color: whitesmoke;\n  border-radius: 4px;\n  color: #4a4a4a;\n  display: inline-flex;\n  font-size: 0.75rem;\n  height: 2em;\n  justify-content: center;\n  line-height: 1.5;\n  padding-left: 0.75em;\n  padding-right: 0.75em;\n  white-space: nowrap; }\n  .tag:not(body) .delete {\n    margin-left: 0.25rem;\n    margin-right: -0.375rem; }\n  .tag:not(body).is-white {\n    background-color: white;\n    color: #0a0a0a; }\n  .tag:not(body).is-black {\n    background-color: #0a0a0a;\n    color: white; }\n  .tag:not(body).is-light {\n    background-color: whitesmoke;\n    color: #363636; }\n  .tag:not(body).is-dark {\n    background-color: #363636;\n    color: whitesmoke; }\n  .tag:not(body).is-primary {\n    background-color: #00d1b2;\n    color: #fff; }\n  .tag:not(body).is-link {\n    background-color: #3273dc;\n    color: #fff; }\n  .tag:not(body).is-info {\n    background-color: #209cee;\n    color: #fff; }\n  .tag:not(body).is-success {\n    background-color: #23d160;\n    color: #fff; }\n  .tag:not(body).is-warning {\n    background-color: #ffdd57;\n    color: rgba(0, 0, 0, 0.7); }\n  .tag:not(body).is-danger {\n    background-color: #ff3860;\n    color: #fff; }\n  .tag:not(body).is-normal {\n    font-size: 0.75rem; }\n  .tag:not(body).is-medium {\n    font-size: 1rem; }\n  .tag:not(body).is-large {\n    font-size: 1.25rem; }\n  .tag:not(body) .icon:first-child:not(:last-child) {\n    margin-left: -0.375em;\n    margin-right: 0.1875em; }\n  .tag:not(body) .icon:last-child:not(:first-child) {\n    margin-left: 0.1875em;\n    margin-right: -0.375em; }\n  .tag:not(body) .icon:first-child:last-child {\n    margin-left: -0.375em;\n    margin-right: -0.375em; }\n  .tag:not(body).is-delete {\n    margin-left: 1px;\n    padding: 0;\n    position: relative;\n    width: 2em; }\n    .tag:not(body).is-delete::before, .tag:not(body).is-delete::after {\n      background-color: currentColor;\n      content: \"\";\n      display: block;\n      left: 50%;\n      position: absolute;\n      top: 50%;\n      transform: translateX(-50%) translateY(-50%) rotate(45deg);\n      transform-origin: center center; }\n    .tag:not(body).is-delete::before {\n      height: 1px;\n      width: 50%; }\n    .tag:not(body).is-delete::after {\n      height: 50%;\n      width: 1px; }\n    .tag:not(body).is-delete:hover, .tag:not(body).is-delete:focus {\n      background-color: #e8e8e8; }\n    .tag:not(body).is-delete:active {\n      background-color: #dbdbdb; }\n  .tag:not(body).is-rounded {\n    border-radius: 290486px; }\n\na.tag:hover {\n  text-decoration: underline; }\n\n.title,\n.subtitle {\n  word-break: break-word; }\n  .title em,\n  .title span,\n  .subtitle em,\n  .subtitle span {\n    font-weight: inherit; }\n  .title sub,\n  .subtitle sub {\n    font-size: 0.75em; }\n  .title sup,\n  .subtitle sup {\n    font-size: 0.75em; }\n  .title .tag,\n  .subtitle .tag {\n    vertical-align: middle; }\n\n.title {\n  color: #363636;\n  font-size: 2rem;\n  font-weight: 600;\n  line-height: 1.125; }\n  .title strong {\n    color: inherit;\n    font-weight: inherit; }\n  .title + .highlight {\n    margin-top: -0.75rem; }\n  .title:not(.is-spaced) + .subtitle {\n    margin-top: -1.25rem; }\n  .title.is-1 {\n    font-size: 3rem; }\n  .title.is-2 {\n    font-size: 2.5rem; }\n  .title.is-3 {\n    font-size: 2rem; }\n  .title.is-4 {\n    font-size: 1.5rem; }\n  .title.is-5 {\n    font-size: 1.25rem; }\n  .title.is-6 {\n    font-size: 1rem; }\n  .title.is-7 {\n    font-size: 0.75rem; }\n\n.subtitle {\n  color: #4a4a4a;\n  font-size: 1.25rem;\n  font-weight: 400;\n  line-height: 1.25; }\n  .subtitle strong {\n    color: #363636;\n    font-weight: 600; }\n  .subtitle:not(.is-spaced) + .title {\n    margin-top: -1.25rem; }\n  .subtitle.is-1 {\n    font-size: 3rem; }\n  .subtitle.is-2 {\n    font-size: 2.5rem; }\n  .subtitle.is-3 {\n    font-size: 2rem; }\n  .subtitle.is-4 {\n    font-size: 1.5rem; }\n  .subtitle.is-5 {\n    font-size: 1.25rem; }\n  .subtitle.is-6 {\n    font-size: 1rem; }\n  .subtitle.is-7 {\n    font-size: 0.75rem; }\n\n.heading {\n  display: block;\n  font-size: 11px;\n  letter-spacing: 1px;\n  margin-bottom: 5px;\n  text-transform: uppercase; }\n\n.highlight {\n  font-weight: 400;\n  max-width: 100%;\n  overflow: hidden;\n  padding: 0; }\n  .highlight pre {\n    overflow: auto;\n    max-width: 100%; }\n\n.number {\n  align-items: center;\n  background-color: whitesmoke;\n  border-radius: 290486px;\n  display: inline-flex;\n  font-size: 1.25rem;\n  height: 2em;\n  justify-content: center;\n  margin-right: 1.5rem;\n  min-width: 2.5em;\n  padding: 0.25rem 0.5rem;\n  text-align: center;\n  vertical-align: top; }\n\n.input, .textarea, .select select {\n  background-color: white;\n  border-color: #dbdbdb;\n  border-radius: 4px;\n  color: #363636; }\n  .input::-moz-placeholder, .textarea::-moz-placeholder, .select select::-moz-placeholder {\n    color: rgba(54, 54, 54, 0.3); }\n  .input::-webkit-input-placeholder, .textarea::-webkit-input-placeholder, .select select::-webkit-input-placeholder {\n    color: rgba(54, 54, 54, 0.3); }\n  .input:-moz-placeholder, .textarea:-moz-placeholder, .select select:-moz-placeholder {\n    color: rgba(54, 54, 54, 0.3); }\n  .input:-ms-input-placeholder, .textarea:-ms-input-placeholder, .select select:-ms-input-placeholder {\n    color: rgba(54, 54, 54, 0.3); }\n  .input:hover, .textarea:hover, .select select:hover, .is-hovered.input, .is-hovered.textarea, .select select.is-hovered {\n    border-color: #b5b5b5; }\n  .input:focus, .textarea:focus, .select select:focus, .is-focused.input, .is-focused.textarea, .select select.is-focused, .input:active, .textarea:active, .select select:active, .is-active.input, .is-active.textarea, .select select.is-active {\n    border-color: #3273dc;\n    box-shadow: 0 0 0 0.125em rgba(50, 115, 220, 0.25); }\n  .input[disabled], .textarea[disabled], .select select[disabled],\n  fieldset[disabled] .input,\n  fieldset[disabled] .textarea,\n  fieldset[disabled] .select select,\n  .select fieldset[disabled] select {\n    background-color: whitesmoke;\n    border-color: whitesmoke;\n    box-shadow: none;\n    color: #7a7a7a; }\n    .input[disabled]::-moz-placeholder, .textarea[disabled]::-moz-placeholder, .select select[disabled]::-moz-placeholder,\n    fieldset[disabled] .input::-moz-placeholder,\n    fieldset[disabled] .textarea::-moz-placeholder,\n    fieldset[disabled] .select select::-moz-placeholder,\n    .select fieldset[disabled] select::-moz-placeholder {\n      color: rgba(122, 122, 122, 0.3); }\n    .input[disabled]::-webkit-input-placeholder, .textarea[disabled]::-webkit-input-placeholder, .select select[disabled]::-webkit-input-placeholder,\n    fieldset[disabled] .input::-webkit-input-placeholder,\n    fieldset[disabled] .textarea::-webkit-input-placeholder,\n    fieldset[disabled] .select select::-webkit-input-placeholder,\n    .select fieldset[disabled] select::-webkit-input-placeholder {\n      color: rgba(122, 122, 122, 0.3); }\n    .input[disabled]:-moz-placeholder, .textarea[disabled]:-moz-placeholder, .select select[disabled]:-moz-placeholder,\n    fieldset[disabled] .input:-moz-placeholder,\n    fieldset[disabled] .textarea:-moz-placeholder,\n    fieldset[disabled] .select select:-moz-placeholder,\n    .select fieldset[disabled] select:-moz-placeholder {\n      color: rgba(122, 122, 122, 0.3); }\n    .input[disabled]:-ms-input-placeholder, .textarea[disabled]:-ms-input-placeholder, .select select[disabled]:-ms-input-placeholder,\n    fieldset[disabled] .input:-ms-input-placeholder,\n    fieldset[disabled] .textarea:-ms-input-placeholder,\n    fieldset[disabled] .select select:-ms-input-placeholder,\n    .select fieldset[disabled] select:-ms-input-placeholder {\n      color: rgba(122, 122, 122, 0.3); }\n\n.input, .textarea {\n  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);\n  max-width: 100%;\n  width: 100%; }\n  .input[readonly], .textarea[readonly] {\n    box-shadow: none; }\n  .is-white.input, .is-white.textarea {\n    border-color: white; }\n    .is-white.input:focus, .is-white.textarea:focus, .is-white.is-focused.input, .is-white.is-focused.textarea, .is-white.input:active, .is-white.textarea:active, .is-white.is-active.input, .is-white.is-active.textarea {\n      box-shadow: 0 0 0 0.125em rgba(255, 255, 255, 0.25); }\n  .is-black.input, .is-black.textarea {\n    border-color: #0a0a0a; }\n    .is-black.input:focus, .is-black.textarea:focus, .is-black.is-focused.input, .is-black.is-focused.textarea, .is-black.input:active, .is-black.textarea:active, .is-black.is-active.input, .is-black.is-active.textarea {\n      box-shadow: 0 0 0 0.125em rgba(10, 10, 10, 0.25); }\n  .is-light.input, .is-light.textarea {\n    border-color: whitesmoke; }\n    .is-light.input:focus, .is-light.textarea:focus, .is-light.is-focused.input, .is-light.is-focused.textarea, .is-light.input:active, .is-light.textarea:active, .is-light.is-active.input, .is-light.is-active.textarea {\n      box-shadow: 0 0 0 0.125em rgba(245, 245, 245, 0.25); }\n  .is-dark.input, .is-dark.textarea {\n    border-color: #363636; }\n    .is-dark.input:focus, .is-dark.textarea:focus, .is-dark.is-focused.input, .is-dark.is-focused.textarea, .is-dark.input:active, .is-dark.textarea:active, .is-dark.is-active.input, .is-dark.is-active.textarea {\n      box-shadow: 0 0 0 0.125em rgba(54, 54, 54, 0.25); }\n  .is-primary.input, .is-primary.textarea {\n    border-color: #00d1b2; }\n    .is-primary.input:focus, .is-primary.textarea:focus, .is-primary.is-focused.input, .is-primary.is-focused.textarea, .is-primary.input:active, .is-primary.textarea:active, .is-primary.is-active.input, .is-primary.is-active.textarea {\n      box-shadow: 0 0 0 0.125em rgba(0, 209, 178, 0.25); }\n  .is-link.input, .is-link.textarea {\n    border-color: #3273dc; }\n    .is-link.input:focus, .is-link.textarea:focus, .is-link.is-focused.input, .is-link.is-focused.textarea, .is-link.input:active, .is-link.textarea:active, .is-link.is-active.input, .is-link.is-active.textarea {\n      box-shadow: 0 0 0 0.125em rgba(50, 115, 220, 0.25); }\n  .is-info.input, .is-info.textarea {\n    border-color: #209cee; }\n    .is-info.input:focus, .is-info.textarea:focus, .is-info.is-focused.input, .is-info.is-focused.textarea, .is-info.input:active, .is-info.textarea:active, .is-info.is-active.input, .is-info.is-active.textarea {\n      box-shadow: 0 0 0 0.125em rgba(32, 156, 238, 0.25); }\n  .is-success.input, .is-success.textarea {\n    border-color: #23d160; }\n    .is-success.input:focus, .is-success.textarea:focus, .is-success.is-focused.input, .is-success.is-focused.textarea, .is-success.input:active, .is-success.textarea:active, .is-success.is-active.input, .is-success.is-active.textarea {\n      box-shadow: 0 0 0 0.125em rgba(35, 209, 96, 0.25); }\n  .is-warning.input, .is-warning.textarea {\n    border-color: #ffdd57; }\n    .is-warning.input:focus, .is-warning.textarea:focus, .is-warning.is-focused.input, .is-warning.is-focused.textarea, .is-warning.input:active, .is-warning.textarea:active, .is-warning.is-active.input, .is-warning.is-active.textarea {\n      box-shadow: 0 0 0 0.125em rgba(255, 221, 87, 0.25); }\n  .is-danger.input, .is-danger.textarea {\n    border-color: #ff3860; }\n    .is-danger.input:focus, .is-danger.textarea:focus, .is-danger.is-focused.input, .is-danger.is-focused.textarea, .is-danger.input:active, .is-danger.textarea:active, .is-danger.is-active.input, .is-danger.is-active.textarea {\n      box-shadow: 0 0 0 0.125em rgba(255, 56, 96, 0.25); }\n  .is-small.input, .is-small.textarea {\n    border-radius: 2px;\n    font-size: 0.75rem; }\n  .is-medium.input, .is-medium.textarea {\n    font-size: 1.25rem; }\n  .is-large.input, .is-large.textarea {\n    font-size: 1.5rem; }\n  .is-fullwidth.input, .is-fullwidth.textarea {\n    display: block;\n    width: 100%; }\n  .is-inline.input, .is-inline.textarea {\n    display: inline;\n    width: auto; }\n\n.input.is-rounded {\n  border-radius: 290486px;\n  padding-left: 1em;\n  padding-right: 1em; }\n\n.input.is-static {\n  background-color: transparent;\n  border-color: transparent;\n  box-shadow: none;\n  padding-left: 0;\n  padding-right: 0; }\n\n.textarea {\n  display: block;\n  max-width: 100%;\n  min-width: 100%;\n  padding: 0.625em;\n  resize: vertical; }\n  .textarea:not([rows]) {\n    max-height: 600px;\n    min-height: 120px; }\n  .textarea[rows] {\n    height: initial; }\n  .textarea.has-fixed-size {\n    resize: none; }\n\n.checkbox, .radio {\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1.25;\n  position: relative; }\n  .checkbox input, .radio input {\n    cursor: pointer; }\n  .checkbox:hover, .radio:hover {\n    color: #363636; }\n  .checkbox[disabled], .radio[disabled],\n  fieldset[disabled] .checkbox,\n  fieldset[disabled] .radio {\n    color: #7a7a7a;\n    cursor: not-allowed; }\n\n.radio + .radio {\n  margin-left: 0.5em; }\n\n.select {\n  display: inline-block;\n  max-width: 100%;\n  position: relative;\n  vertical-align: top; }\n  .select:not(.is-multiple) {\n    height: 2.25em; }\n  .select:not(.is-multiple):not(.is-loading)::after {\n    border-color: #3273dc;\n    right: 1.125em;\n    z-index: 4; }\n  .select.is-rounded select {\n    border-radius: 290486px;\n    padding-left: 1em; }\n  .select select {\n    cursor: pointer;\n    display: block;\n    font-size: 1em;\n    max-width: 100%;\n    outline: none; }\n    .select select::-ms-expand {\n      display: none; }\n    .select select[disabled]:hover,\n    fieldset[disabled] .select select:hover {\n      border-color: whitesmoke; }\n    .select select:not([multiple]) {\n      padding-right: 2.5em; }\n    .select select[multiple] {\n      height: auto;\n      padding: 0; }\n      .select select[multiple] option {\n        padding: 0.5em 1em; }\n  .select:not(.is-multiple):not(.is-loading):hover::after {\n    border-color: #363636; }\n  .select.is-white:not(:hover)::after {\n    border-color: white; }\n  .select.is-white select {\n    border-color: white; }\n    .select.is-white select:hover, .select.is-white select.is-hovered {\n      border-color: #f2f2f2; }\n    .select.is-white select:focus, .select.is-white select.is-focused, .select.is-white select:active, .select.is-white select.is-active {\n      box-shadow: 0 0 0 0.125em rgba(255, 255, 255, 0.25); }\n  .select.is-black:not(:hover)::after {\n    border-color: #0a0a0a; }\n  .select.is-black select {\n    border-color: #0a0a0a; }\n    .select.is-black select:hover, .select.is-black select.is-hovered {\n      border-color: black; }\n    .select.is-black select:focus, .select.is-black select.is-focused, .select.is-black select:active, .select.is-black select.is-active {\n      box-shadow: 0 0 0 0.125em rgba(10, 10, 10, 0.25); }\n  .select.is-light:not(:hover)::after {\n    border-color: whitesmoke; }\n  .select.is-light select {\n    border-color: whitesmoke; }\n    .select.is-light select:hover, .select.is-light select.is-hovered {\n      border-color: #e8e8e8; }\n    .select.is-light select:focus, .select.is-light select.is-focused, .select.is-light select:active, .select.is-light select.is-active {\n      box-shadow: 0 0 0 0.125em rgba(245, 245, 245, 0.25); }\n  .select.is-dark:not(:hover)::after {\n    border-color: #363636; }\n  .select.is-dark select {\n    border-color: #363636; }\n    .select.is-dark select:hover, .select.is-dark select.is-hovered {\n      border-color: #292929; }\n    .select.is-dark select:focus, .select.is-dark select.is-focused, .select.is-dark select:active, .select.is-dark select.is-active {\n      box-shadow: 0 0 0 0.125em rgba(54, 54, 54, 0.25); }\n  .select.is-primary:not(:hover)::after {\n    border-color: #00d1b2; }\n  .select.is-primary select {\n    border-color: #00d1b2; }\n    .select.is-primary select:hover, .select.is-primary select.is-hovered {\n      border-color: #00b89c; }\n    .select.is-primary select:focus, .select.is-primary select.is-focused, .select.is-primary select:active, .select.is-primary select.is-active {\n      box-shadow: 0 0 0 0.125em rgba(0, 209, 178, 0.25); }\n  .select.is-link:not(:hover)::after {\n    border-color: #3273dc; }\n  .select.is-link select {\n    border-color: #3273dc; }\n    .select.is-link select:hover, .select.is-link select.is-hovered {\n      border-color: #2366d1; }\n    .select.is-link select:focus, .select.is-link select.is-focused, .select.is-link select:active, .select.is-link select.is-active {\n      box-shadow: 0 0 0 0.125em rgba(50, 115, 220, 0.25); }\n  .select.is-info:not(:hover)::after {\n    border-color: #209cee; }\n  .select.is-info select {\n    border-color: #209cee; }\n    .select.is-info select:hover, .select.is-info select.is-hovered {\n      border-color: #118fe4; }\n    .select.is-info select:focus, .select.is-info select.is-focused, .select.is-info select:active, .select.is-info select.is-active {\n      box-shadow: 0 0 0 0.125em rgba(32, 156, 238, 0.25); }\n  .select.is-success:not(:hover)::after {\n    border-color: #23d160; }\n  .select.is-success select {\n    border-color: #23d160; }\n    .select.is-success select:hover, .select.is-success select.is-hovered {\n      border-color: #20bc56; }\n    .select.is-success select:focus, .select.is-success select.is-focused, .select.is-success select:active, .select.is-success select.is-active {\n      box-shadow: 0 0 0 0.125em rgba(35, 209, 96, 0.25); }\n  .select.is-warning:not(:hover)::after {\n    border-color: #ffdd57; }\n  .select.is-warning select {\n    border-color: #ffdd57; }\n    .select.is-warning select:hover, .select.is-warning select.is-hovered {\n      border-color: #ffd83d; }\n    .select.is-warning select:focus, .select.is-warning select.is-focused, .select.is-warning select:active, .select.is-warning select.is-active {\n      box-shadow: 0 0 0 0.125em rgba(255, 221, 87, 0.25); }\n  .select.is-danger:not(:hover)::after {\n    border-color: #ff3860; }\n  .select.is-danger select {\n    border-color: #ff3860; }\n    .select.is-danger select:hover, .select.is-danger select.is-hovered {\n      border-color: #ff1f4b; }\n    .select.is-danger select:focus, .select.is-danger select.is-focused, .select.is-danger select:active, .select.is-danger select.is-active {\n      box-shadow: 0 0 0 0.125em rgba(255, 56, 96, 0.25); }\n  .select.is-small {\n    border-radius: 2px;\n    font-size: 0.75rem; }\n  .select.is-medium {\n    font-size: 1.25rem; }\n  .select.is-large {\n    font-size: 1.5rem; }\n  .select.is-disabled::after {\n    border-color: #7a7a7a; }\n  .select.is-fullwidth {\n    width: 100%; }\n    .select.is-fullwidth select {\n      width: 100%; }\n  .select.is-loading::after {\n    margin-top: 0;\n    position: absolute;\n    right: 0.625em;\n    top: 0.625em;\n    transform: none; }\n  .select.is-loading.is-small:after {\n    font-size: 0.75rem; }\n  .select.is-loading.is-medium:after {\n    font-size: 1.25rem; }\n  .select.is-loading.is-large:after {\n    font-size: 1.5rem; }\n\n.file {\n  align-items: stretch;\n  display: flex;\n  justify-content: flex-start;\n  position: relative; }\n  .file.is-white .file-cta {\n    background-color: white;\n    border-color: transparent;\n    color: #0a0a0a; }\n  .file.is-white:hover .file-cta, .file.is-white.is-hovered .file-cta {\n    background-color: #f9f9f9;\n    border-color: transparent;\n    color: #0a0a0a; }\n  .file.is-white:focus .file-cta, .file.is-white.is-focused .file-cta {\n    border-color: transparent;\n    box-shadow: 0 0 0.5em rgba(255, 255, 255, 0.25);\n    color: #0a0a0a; }\n  .file.is-white:active .file-cta, .file.is-white.is-active .file-cta {\n    background-color: #f2f2f2;\n    border-color: transparent;\n    color: #0a0a0a; }\n  .file.is-black .file-cta {\n    background-color: #0a0a0a;\n    border-color: transparent;\n    color: white; }\n  .file.is-black:hover .file-cta, .file.is-black.is-hovered .file-cta {\n    background-color: #040404;\n    border-color: transparent;\n    color: white; }\n  .file.is-black:focus .file-cta, .file.is-black.is-focused .file-cta {\n    border-color: transparent;\n    box-shadow: 0 0 0.5em rgba(10, 10, 10, 0.25);\n    color: white; }\n  .file.is-black:active .file-cta, .file.is-black.is-active .file-cta {\n    background-color: black;\n    border-color: transparent;\n    color: white; }\n  .file.is-light .file-cta {\n    background-color: whitesmoke;\n    border-color: transparent;\n    color: #363636; }\n  .file.is-light:hover .file-cta, .file.is-light.is-hovered .file-cta {\n    background-color: #eeeeee;\n    border-color: transparent;\n    color: #363636; }\n  .file.is-light:focus .file-cta, .file.is-light.is-focused .file-cta {\n    border-color: transparent;\n    box-shadow: 0 0 0.5em rgba(245, 245, 245, 0.25);\n    color: #363636; }\n  .file.is-light:active .file-cta, .file.is-light.is-active .file-cta {\n    background-color: #e8e8e8;\n    border-color: transparent;\n    color: #363636; }\n  .file.is-dark .file-cta {\n    background-color: #363636;\n    border-color: transparent;\n    color: whitesmoke; }\n  .file.is-dark:hover .file-cta, .file.is-dark.is-hovered .file-cta {\n    background-color: #2f2f2f;\n    border-color: transparent;\n    color: whitesmoke; }\n  .file.is-dark:focus .file-cta, .file.is-dark.is-focused .file-cta {\n    border-color: transparent;\n    box-shadow: 0 0 0.5em rgba(54, 54, 54, 0.25);\n    color: whitesmoke; }\n  .file.is-dark:active .file-cta, .file.is-dark.is-active .file-cta {\n    background-color: #292929;\n    border-color: transparent;\n    color: whitesmoke; }\n  .file.is-primary .file-cta {\n    background-color: #00d1b2;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-primary:hover .file-cta, .file.is-primary.is-hovered .file-cta {\n    background-color: #00c4a7;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-primary:focus .file-cta, .file.is-primary.is-focused .file-cta {\n    border-color: transparent;\n    box-shadow: 0 0 0.5em rgba(0, 209, 178, 0.25);\n    color: #fff; }\n  .file.is-primary:active .file-cta, .file.is-primary.is-active .file-cta {\n    background-color: #00b89c;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-link .file-cta {\n    background-color: #3273dc;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-link:hover .file-cta, .file.is-link.is-hovered .file-cta {\n    background-color: #276cda;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-link:focus .file-cta, .file.is-link.is-focused .file-cta {\n    border-color: transparent;\n    box-shadow: 0 0 0.5em rgba(50, 115, 220, 0.25);\n    color: #fff; }\n  .file.is-link:active .file-cta, .file.is-link.is-active .file-cta {\n    background-color: #2366d1;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-info .file-cta {\n    background-color: #209cee;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-info:hover .file-cta, .file.is-info.is-hovered .file-cta {\n    background-color: #1496ed;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-info:focus .file-cta, .file.is-info.is-focused .file-cta {\n    border-color: transparent;\n    box-shadow: 0 0 0.5em rgba(32, 156, 238, 0.25);\n    color: #fff; }\n  .file.is-info:active .file-cta, .file.is-info.is-active .file-cta {\n    background-color: #118fe4;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-success .file-cta {\n    background-color: #23d160;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-success:hover .file-cta, .file.is-success.is-hovered .file-cta {\n    background-color: #22c65b;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-success:focus .file-cta, .file.is-success.is-focused .file-cta {\n    border-color: transparent;\n    box-shadow: 0 0 0.5em rgba(35, 209, 96, 0.25);\n    color: #fff; }\n  .file.is-success:active .file-cta, .file.is-success.is-active .file-cta {\n    background-color: #20bc56;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-warning .file-cta {\n    background-color: #ffdd57;\n    border-color: transparent;\n    color: rgba(0, 0, 0, 0.7); }\n  .file.is-warning:hover .file-cta, .file.is-warning.is-hovered .file-cta {\n    background-color: #ffdb4a;\n    border-color: transparent;\n    color: rgba(0, 0, 0, 0.7); }\n  .file.is-warning:focus .file-cta, .file.is-warning.is-focused .file-cta {\n    border-color: transparent;\n    box-shadow: 0 0 0.5em rgba(255, 221, 87, 0.25);\n    color: rgba(0, 0, 0, 0.7); }\n  .file.is-warning:active .file-cta, .file.is-warning.is-active .file-cta {\n    background-color: #ffd83d;\n    border-color: transparent;\n    color: rgba(0, 0, 0, 0.7); }\n  .file.is-danger .file-cta {\n    background-color: #ff3860;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-danger:hover .file-cta, .file.is-danger.is-hovered .file-cta {\n    background-color: #ff2b56;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-danger:focus .file-cta, .file.is-danger.is-focused .file-cta {\n    border-color: transparent;\n    box-shadow: 0 0 0.5em rgba(255, 56, 96, 0.25);\n    color: #fff; }\n  .file.is-danger:active .file-cta, .file.is-danger.is-active .file-cta {\n    background-color: #ff1f4b;\n    border-color: transparent;\n    color: #fff; }\n  .file.is-small {\n    font-size: 0.75rem; }\n  .file.is-medium {\n    font-size: 1.25rem; }\n    .file.is-medium .file-icon .fa {\n      font-size: 21px; }\n  .file.is-large {\n    font-size: 1.5rem; }\n    .file.is-large .file-icon .fa {\n      font-size: 28px; }\n  .file.has-name .file-cta {\n    border-bottom-right-radius: 0;\n    border-top-right-radius: 0; }\n  .file.has-name .file-name {\n    border-bottom-left-radius: 0;\n    border-top-left-radius: 0; }\n  .file.has-name.is-empty .file-cta {\n    border-radius: 4px; }\n  .file.has-name.is-empty .file-name {\n    display: none; }\n  .file.is-boxed .file-label {\n    flex-direction: column; }\n  .file.is-boxed .file-cta {\n    flex-direction: column;\n    height: auto;\n    padding: 1em 3em; }\n  .file.is-boxed .file-name {\n    border-width: 0 1px 1px; }\n  .file.is-boxed .file-icon {\n    height: 1.5em;\n    width: 1.5em; }\n    .file.is-boxed .file-icon .fa {\n      font-size: 21px; }\n  .file.is-boxed.is-small .file-icon .fa {\n    font-size: 14px; }\n  .file.is-boxed.is-medium .file-icon .fa {\n    font-size: 28px; }\n  .file.is-boxed.is-large .file-icon .fa {\n    font-size: 35px; }\n  .file.is-boxed.has-name .file-cta {\n    border-radius: 4px 4px 0 0; }\n  .file.is-boxed.has-name .file-name {\n    border-radius: 0 0 4px 4px;\n    border-width: 0 1px 1px; }\n  .file.is-centered {\n    justify-content: center; }\n  .file.is-fullwidth .file-label {\n    width: 100%; }\n  .file.is-fullwidth .file-name {\n    flex-grow: 1;\n    max-width: none; }\n  .file.is-right {\n    justify-content: flex-end; }\n    .file.is-right .file-cta {\n      border-radius: 0 4px 4px 0; }\n    .file.is-right .file-name {\n      border-radius: 4px 0 0 4px;\n      border-width: 1px 0 1px 1px;\n      order: -1; }\n\n.file-label {\n  align-items: stretch;\n  display: flex;\n  cursor: pointer;\n  justify-content: flex-start;\n  overflow: hidden;\n  position: relative; }\n  .file-label:hover .file-cta {\n    background-color: #eeeeee;\n    color: #363636; }\n  .file-label:hover .file-name {\n    border-color: #d5d5d5; }\n  .file-label:active .file-cta {\n    background-color: #e8e8e8;\n    color: #363636; }\n  .file-label:active .file-name {\n    border-color: #cfcfcf; }\n\n.file-input {\n  height: 100%;\n  left: 0;\n  opacity: 0;\n  outline: none;\n  position: absolute;\n  top: 0;\n  width: 100%; }\n\n.file-cta,\n.file-name {\n  border-color: #dbdbdb;\n  border-radius: 4px;\n  font-size: 1em;\n  padding-left: 1em;\n  padding-right: 1em;\n  white-space: nowrap; }\n\n.file-cta {\n  background-color: whitesmoke;\n  color: #4a4a4a; }\n\n.file-name {\n  border-color: #dbdbdb;\n  border-style: solid;\n  border-width: 1px 1px 1px 0;\n  display: block;\n  max-width: 16em;\n  overflow: hidden;\n  text-align: left;\n  text-overflow: ellipsis; }\n\n.file-icon {\n  align-items: center;\n  display: flex;\n  height: 1em;\n  justify-content: center;\n  margin-right: 0.5em;\n  width: 1em; }\n  .file-icon .fa {\n    font-size: 14px; }\n\n.label {\n  color: #363636;\n  display: block;\n  font-size: 1rem;\n  font-weight: 700; }\n  .label:not(:last-child) {\n    margin-bottom: 0.5em; }\n  .label.is-small {\n    font-size: 0.75rem; }\n  .label.is-medium {\n    font-size: 1.25rem; }\n  .label.is-large {\n    font-size: 1.5rem; }\n\n.help {\n  display: block;\n  font-size: 0.75rem;\n  margin-top: 0.25rem; }\n  .help.is-white {\n    color: white; }\n  .help.is-black {\n    color: #0a0a0a; }\n  .help.is-light {\n    color: whitesmoke; }\n  .help.is-dark {\n    color: #363636; }\n  .help.is-primary {\n    color: #00d1b2; }\n  .help.is-link {\n    color: #3273dc; }\n  .help.is-info {\n    color: #209cee; }\n  .help.is-success {\n    color: #23d160; }\n  .help.is-warning {\n    color: #ffdd57; }\n  .help.is-danger {\n    color: #ff3860; }\n\n.field:not(:last-child) {\n  margin-bottom: 0.75rem; }\n\n.field.has-addons {\n  display: flex;\n  justify-content: flex-start; }\n  .field.has-addons .control:not(:last-child) {\n    margin-right: -1px; }\n  .field.has-addons .control:not(:first-child):not(:last-child) .button,\n  .field.has-addons .control:not(:first-child):not(:last-child) .input,\n  .field.has-addons .control:not(:first-child):not(:last-child) .select select {\n    border-radius: 0; }\n  .field.has-addons .control:first-child:not(:only-child) .button,\n  .field.has-addons .control:first-child:not(:only-child) .input,\n  .field.has-addons .control:first-child:not(:only-child) .select select {\n    border-bottom-right-radius: 0;\n    border-top-right-radius: 0; }\n  .field.has-addons .control:last-child:not(:only-child) .button,\n  .field.has-addons .control:last-child:not(:only-child) .input,\n  .field.has-addons .control:last-child:not(:only-child) .select select {\n    border-bottom-left-radius: 0;\n    border-top-left-radius: 0; }\n  .field.has-addons .control .button:not([disabled]):hover, .field.has-addons .control .button:not([disabled]).is-hovered,\n  .field.has-addons .control .input:not([disabled]):hover,\n  .field.has-addons .control .input:not([disabled]).is-hovered,\n  .field.has-addons .control .select select:not([disabled]):hover,\n  .field.has-addons .control .select select:not([disabled]).is-hovered {\n    z-index: 2; }\n  .field.has-addons .control .button:not([disabled]):focus, .field.has-addons .control .button:not([disabled]).is-focused, .field.has-addons .control .button:not([disabled]):active, .field.has-addons .control .button:not([disabled]).is-active,\n  .field.has-addons .control .input:not([disabled]):focus,\n  .field.has-addons .control .input:not([disabled]).is-focused,\n  .field.has-addons .control .input:not([disabled]):active,\n  .field.has-addons .control .input:not([disabled]).is-active,\n  .field.has-addons .control .select select:not([disabled]):focus,\n  .field.has-addons .control .select select:not([disabled]).is-focused,\n  .field.has-addons .control .select select:not([disabled]):active,\n  .field.has-addons .control .select select:not([disabled]).is-active {\n    z-index: 3; }\n    .field.has-addons .control .button:not([disabled]):focus:hover, .field.has-addons .control .button:not([disabled]).is-focused:hover, .field.has-addons .control .button:not([disabled]):active:hover, .field.has-addons .control .button:not([disabled]).is-active:hover,\n    .field.has-addons .control .input:not([disabled]):focus:hover,\n    .field.has-addons .control .input:not([disabled]).is-focused:hover,\n    .field.has-addons .control .input:not([disabled]):active:hover,\n    .field.has-addons .control .input:not([disabled]).is-active:hover,\n    .field.has-addons .control .select select:not([disabled]):focus:hover,\n    .field.has-addons .control .select select:not([disabled]).is-focused:hover,\n    .field.has-addons .control .select select:not([disabled]):active:hover,\n    .field.has-addons .control .select select:not([disabled]).is-active:hover {\n      z-index: 4; }\n  .field.has-addons .control.is-expanded {\n    flex-grow: 1;\n    flex-shrink: 1; }\n  .field.has-addons.has-addons-centered {\n    justify-content: center; }\n  .field.has-addons.has-addons-right {\n    justify-content: flex-end; }\n  .field.has-addons.has-addons-fullwidth .control {\n    flex-grow: 1;\n    flex-shrink: 0; }\n\n.field.is-grouped {\n  display: flex;\n  justify-content: flex-start; }\n  .field.is-grouped > .control {\n    flex-shrink: 0; }\n    .field.is-grouped > .control:not(:last-child) {\n      margin-bottom: 0;\n      margin-right: 0.75rem; }\n    .field.is-grouped > .control.is-expanded {\n      flex-grow: 1;\n      flex-shrink: 1; }\n  .field.is-grouped.is-grouped-centered {\n    justify-content: center; }\n  .field.is-grouped.is-grouped-right {\n    justify-content: flex-end; }\n  .field.is-grouped.is-grouped-multiline {\n    flex-wrap: wrap; }\n    .field.is-grouped.is-grouped-multiline > .control:last-child, .field.is-grouped.is-grouped-multiline > .control:not(:last-child) {\n      margin-bottom: 0.75rem; }\n    .field.is-grouped.is-grouped-multiline:last-child {\n      margin-bottom: -0.75rem; }\n    .field.is-grouped.is-grouped-multiline:not(:last-child) {\n      margin-bottom: 0; }\n\n@media screen and (min-width: 769px), print {\n  .field.is-horizontal {\n    display: flex; } }\n\n.field-label .label {\n  font-size: inherit; }\n\n@media screen and (max-width: 768px) {\n  .field-label {\n    margin-bottom: 0.5rem; } }\n\n@media screen and (min-width: 769px), print {\n  .field-label {\n    flex-basis: 0;\n    flex-grow: 1;\n    flex-shrink: 0;\n    margin-right: 1.5rem;\n    text-align: right; }\n    .field-label.is-small {\n      font-size: 0.75rem;\n      padding-top: 0.375em; }\n    .field-label.is-normal {\n      padding-top: 0.375em; }\n    .field-label.is-medium {\n      font-size: 1.25rem;\n      padding-top: 0.375em; }\n    .field-label.is-large {\n      font-size: 1.5rem;\n      padding-top: 0.375em; } }\n\n.field-body .field .field {\n  margin-bottom: 0; }\n\n@media screen and (min-width: 769px), print {\n  .field-body {\n    display: flex;\n    flex-basis: 0;\n    flex-grow: 5;\n    flex-shrink: 1; }\n    .field-body .field {\n      margin-bottom: 0; }\n    .field-body > .field {\n      flex-shrink: 1; }\n      .field-body > .field:not(.is-narrow) {\n        flex-grow: 1; }\n      .field-body > .field:not(:last-child) {\n        margin-right: 0.75rem; } }\n\n.control {\n  box-sizing: border-box;\n  clear: both;\n  font-size: 1rem;\n  position: relative;\n  text-align: left; }\n  .control.has-icons-left .input:focus ~ .icon,\n  .control.has-icons-left .select:focus ~ .icon, .control.has-icons-right .input:focus ~ .icon,\n  .control.has-icons-right .select:focus ~ .icon {\n    color: #7a7a7a; }\n  .control.has-icons-left .input.is-small ~ .icon,\n  .control.has-icons-left .select.is-small ~ .icon, .control.has-icons-right .input.is-small ~ .icon,\n  .control.has-icons-right .select.is-small ~ .icon {\n    font-size: 0.75rem; }\n  .control.has-icons-left .input.is-medium ~ .icon,\n  .control.has-icons-left .select.is-medium ~ .icon, .control.has-icons-right .input.is-medium ~ .icon,\n  .control.has-icons-right .select.is-medium ~ .icon {\n    font-size: 1.25rem; }\n  .control.has-icons-left .input.is-large ~ .icon,\n  .control.has-icons-left .select.is-large ~ .icon, .control.has-icons-right .input.is-large ~ .icon,\n  .control.has-icons-right .select.is-large ~ .icon {\n    font-size: 1.5rem; }\n  .control.has-icons-left .icon, .control.has-icons-right .icon {\n    color: #dbdbdb;\n    height: 2.25em;\n    pointer-events: none;\n    position: absolute;\n    top: 0;\n    width: 2.25em;\n    z-index: 4; }\n  .control.has-icons-left .input,\n  .control.has-icons-left .select select {\n    padding-left: 2.25em; }\n  .control.has-icons-left .icon.is-left {\n    left: 0; }\n  .control.has-icons-right .input,\n  .control.has-icons-right .select select {\n    padding-right: 2.25em; }\n  .control.has-icons-right .icon.is-right {\n    right: 0; }\n  .control.is-loading::after {\n    position: absolute !important;\n    right: 0.625em;\n    top: 0.625em;\n    z-index: 4; }\n  .control.is-loading.is-small:after {\n    font-size: 0.75rem; }\n  .control.is-loading.is-medium:after {\n    font-size: 1.25rem; }\n  .control.is-loading.is-large:after {\n    font-size: 1.5rem; }\n\n.breadcrumb {\n  font-size: 1rem;\n  white-space: nowrap; }\n  .breadcrumb a {\n    align-items: center;\n    color: #3273dc;\n    display: flex;\n    justify-content: center;\n    padding: 0 0.75em; }\n    .breadcrumb a:hover {\n      color: #363636; }\n  .breadcrumb li {\n    align-items: center;\n    display: flex; }\n    .breadcrumb li:first-child a {\n      padding-left: 0; }\n    .breadcrumb li.is-active a {\n      color: #363636;\n      cursor: default;\n      pointer-events: none; }\n    .breadcrumb li + li::before {\n      color: #b5b5b5;\n      content: \"\\0002f\"; }\n  .breadcrumb ul,\n  .breadcrumb ol {\n    align-items: flex-start;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: flex-start; }\n  .breadcrumb .icon:first-child {\n    margin-right: 0.5em; }\n  .breadcrumb .icon:last-child {\n    margin-left: 0.5em; }\n  .breadcrumb.is-centered ol,\n  .breadcrumb.is-centered ul {\n    justify-content: center; }\n  .breadcrumb.is-right ol,\n  .breadcrumb.is-right ul {\n    justify-content: flex-end; }\n  .breadcrumb.is-small {\n    font-size: 0.75rem; }\n  .breadcrumb.is-medium {\n    font-size: 1.25rem; }\n  .breadcrumb.is-large {\n    font-size: 1.5rem; }\n  .breadcrumb.has-arrow-separator li + li::before {\n    content: \"\\02192\"; }\n  .breadcrumb.has-bullet-separator li + li::before {\n    content: \"\\02022\"; }\n  .breadcrumb.has-dot-separator li + li::before {\n    content: \"\\000b7\"; }\n  .breadcrumb.has-succeeds-separator li + li::before {\n    content: \"\\0227B\"; }\n\n.card {\n  background-color: white;\n  box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);\n  color: #4a4a4a;\n  max-width: 100%;\n  position: relative; }\n\n.card-header {\n  background-color: transparent;\n  align-items: stretch;\n  box-shadow: 0 1px 2px rgba(10, 10, 10, 0.1);\n  display: flex; }\n\n.card-header-title {\n  align-items: center;\n  color: #363636;\n  display: flex;\n  flex-grow: 1;\n  font-weight: 700;\n  padding: 0.75rem; }\n  .card-header-title.is-centered {\n    justify-content: center; }\n\n.card-header-icon {\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  padding: 0.75rem; }\n\n.card-image {\n  display: block;\n  position: relative; }\n\n.card-content {\n  background-color: transparent;\n  padding: 1.5rem; }\n\n.card-footer {\n  background-color: transparent;\n  border-top: 1px solid #dbdbdb;\n  align-items: stretch;\n  display: flex; }\n\n.card-footer-item {\n  align-items: center;\n  display: flex;\n  flex-basis: 0;\n  flex-grow: 1;\n  flex-shrink: 0;\n  justify-content: center;\n  padding: 0.75rem; }\n  .card-footer-item:not(:last-child) {\n    border-right: 1px solid #dbdbdb; }\n\n.card .media:not(:last-child) {\n  margin-bottom: 1.5rem; }\n\n.dropdown {\n  display: inline-flex;\n  position: relative;\n  vertical-align: top; }\n  .dropdown.is-active .dropdown-menu, .dropdown.is-hoverable:hover .dropdown-menu {\n    display: block; }\n  .dropdown.is-right .dropdown-menu {\n    left: auto;\n    right: 0; }\n  .dropdown.is-up .dropdown-menu {\n    bottom: 100%;\n    padding-bottom: 4px;\n    padding-top: initial;\n    top: auto; }\n\n.dropdown-menu {\n  display: none;\n  left: 0;\n  min-width: 12rem;\n  padding-top: 4px;\n  position: absolute;\n  top: 100%;\n  z-index: 20; }\n\n.dropdown-content {\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);\n  padding-bottom: 0.5rem;\n  padding-top: 0.5rem; }\n\n.dropdown-item {\n  color: #4a4a4a;\n  display: block;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  padding: 0.375rem 1rem;\n  position: relative; }\n\na.dropdown-item,\nbutton.dropdown-item {\n  padding-right: 3rem;\n  text-align: left;\n  white-space: nowrap;\n  width: 100%; }\n  a.dropdown-item:hover,\n  button.dropdown-item:hover {\n    background-color: whitesmoke;\n    color: #0a0a0a; }\n  a.dropdown-item.is-active,\n  button.dropdown-item.is-active {\n    background-color: #3273dc;\n    color: #fff; }\n\n.dropdown-divider {\n  background-color: #dbdbdb;\n  border: none;\n  display: block;\n  height: 1px;\n  margin: 0.5rem 0; }\n\n.level {\n  align-items: center;\n  justify-content: space-between; }\n  .level code {\n    border-radius: 4px; }\n  .level img {\n    display: inline-block;\n    vertical-align: top; }\n  .level.is-mobile {\n    display: flex; }\n    .level.is-mobile .level-left,\n    .level.is-mobile .level-right {\n      display: flex; }\n    .level.is-mobile .level-left + .level-right {\n      margin-top: 0; }\n    .level.is-mobile .level-item:not(:last-child) {\n      margin-bottom: 0;\n      margin-right: 0.75rem; }\n    .level.is-mobile .level-item:not(.is-narrow) {\n      flex-grow: 1; }\n  @media screen and (min-width: 769px), print {\n    .level {\n      display: flex; }\n      .level > .level-item:not(.is-narrow) {\n        flex-grow: 1; } }\n\n.level-item {\n  align-items: center;\n  display: flex;\n  flex-basis: auto;\n  flex-grow: 0;\n  flex-shrink: 0;\n  justify-content: center; }\n  .level-item .title,\n  .level-item .subtitle {\n    margin-bottom: 0; }\n  @media screen and (max-width: 768px) {\n    .level-item:not(:last-child) {\n      margin-bottom: 0.75rem; } }\n\n.level-left,\n.level-right {\n  flex-basis: auto;\n  flex-grow: 0;\n  flex-shrink: 0; }\n  .level-left .level-item.is-flexible,\n  .level-right .level-item.is-flexible {\n    flex-grow: 1; }\n  @media screen and (min-width: 769px), print {\n    .level-left .level-item:not(:last-child),\n    .level-right .level-item:not(:last-child) {\n      margin-right: 0.75rem; } }\n\n.level-left {\n  align-items: center;\n  justify-content: flex-start; }\n  @media screen and (max-width: 768px) {\n    .level-left + .level-right {\n      margin-top: 1.5rem; } }\n  @media screen and (min-width: 769px), print {\n    .level-left {\n      display: flex; } }\n\n.level-right {\n  align-items: center;\n  justify-content: flex-end; }\n  @media screen and (min-width: 769px), print {\n    .level-right {\n      display: flex; } }\n\n.list {\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1); }\n\n.list-item {\n  display: block;\n  padding: 0.5em 1em; }\n  .list-item:not(a) {\n    color: #4a4a4a; }\n  .list-item:first-child {\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px; }\n  .list-item:last-child {\n    border-bottom-left-radius: 4px;\n    border-bottom-right-radius: 4px; }\n  .list-item:not(:last-child) {\n    border-bottom: 1px solid #dbdbdb; }\n  .list-item.is-active {\n    background-color: #3273dc;\n    color: #fff; }\n\na.list-item {\n  background-color: whitesmoke;\n  cursor: pointer; }\n\n.media {\n  align-items: flex-start;\n  display: flex;\n  text-align: left; }\n  .media .content:not(:last-child) {\n    margin-bottom: 0.75rem; }\n  .media .media {\n    border-top: 1px solid rgba(219, 219, 219, 0.5);\n    display: flex;\n    padding-top: 0.75rem; }\n    .media .media .content:not(:last-child),\n    .media .media .control:not(:last-child) {\n      margin-bottom: 0.5rem; }\n    .media .media .media {\n      padding-top: 0.5rem; }\n      .media .media .media + .media {\n        margin-top: 0.5rem; }\n  .media + .media {\n    border-top: 1px solid rgba(219, 219, 219, 0.5);\n    margin-top: 1rem;\n    padding-top: 1rem; }\n  .media.is-large + .media {\n    margin-top: 1.5rem;\n    padding-top: 1.5rem; }\n\n.media-left,\n.media-right {\n  flex-basis: auto;\n  flex-grow: 0;\n  flex-shrink: 0; }\n\n.media-left {\n  margin-right: 1rem; }\n\n.media-right {\n  margin-left: 1rem; }\n\n.media-content {\n  flex-basis: auto;\n  flex-grow: 1;\n  flex-shrink: 1;\n  text-align: left; }\n\n@media screen and (max-width: 768px) {\n  .media-content {\n    overflow-x: auto; } }\n\n.menu {\n  font-size: 1rem; }\n  .menu.is-small {\n    font-size: 0.75rem; }\n  .menu.is-medium {\n    font-size: 1.25rem; }\n  .menu.is-large {\n    font-size: 1.5rem; }\n\n.menu-list {\n  line-height: 1.25; }\n  .menu-list a {\n    border-radius: 2px;\n    color: #4a4a4a;\n    display: block;\n    padding: 0.5em 0.75em; }\n    .menu-list a:hover {\n      background-color: whitesmoke;\n      color: #363636; }\n    .menu-list a.is-active {\n      background-color: #3273dc;\n      color: #fff; }\n  .menu-list li ul {\n    border-left: 1px solid #dbdbdb;\n    margin: 0.75em;\n    padding-left: 0.75em; }\n\n.menu-label {\n  color: #7a7a7a;\n  font-size: 0.75em;\n  letter-spacing: 0.1em;\n  text-transform: uppercase; }\n  .menu-label:not(:first-child) {\n    margin-top: 1em; }\n  .menu-label:not(:last-child) {\n    margin-bottom: 1em; }\n\n.message {\n  background-color: whitesmoke;\n  border-radius: 4px;\n  font-size: 1rem; }\n  .message strong {\n    color: currentColor; }\n  .message a:not(.button):not(.tag):not(.dropdown-item) {\n    color: currentColor;\n    text-decoration: underline; }\n  .message.is-small {\n    font-size: 0.75rem; }\n  .message.is-medium {\n    font-size: 1.25rem; }\n  .message.is-large {\n    font-size: 1.5rem; }\n  .message.is-white {\n    background-color: white; }\n    .message.is-white .message-header {\n      background-color: white;\n      color: #0a0a0a; }\n    .message.is-white .message-body {\n      border-color: white;\n      color: #4d4d4d; }\n  .message.is-black {\n    background-color: #fafafa; }\n    .message.is-black .message-header {\n      background-color: #0a0a0a;\n      color: white; }\n    .message.is-black .message-body {\n      border-color: #0a0a0a;\n      color: #090909; }\n  .message.is-light {\n    background-color: #fafafa; }\n    .message.is-light .message-header {\n      background-color: whitesmoke;\n      color: #363636; }\n    .message.is-light .message-body {\n      border-color: whitesmoke;\n      color: #505050; }\n  .message.is-dark {\n    background-color: #fafafa; }\n    .message.is-dark .message-header {\n      background-color: #363636;\n      color: whitesmoke; }\n    .message.is-dark .message-body {\n      border-color: #363636;\n      color: #2a2a2a; }\n  .message.is-primary {\n    background-color: #f5fffd; }\n    .message.is-primary .message-header {\n      background-color: #00d1b2;\n      color: #fff; }\n    .message.is-primary .message-body {\n      border-color: #00d1b2;\n      color: #021310; }\n  .message.is-link {\n    background-color: #f6f9fe; }\n    .message.is-link .message-header {\n      background-color: #3273dc;\n      color: #fff; }\n    .message.is-link .message-body {\n      border-color: #3273dc;\n      color: #22509a; }\n  .message.is-info {\n    background-color: #f6fbfe; }\n    .message.is-info .message-header {\n      background-color: #209cee;\n      color: #fff; }\n    .message.is-info .message-body {\n      border-color: #209cee;\n      color: #12537e; }\n  .message.is-success {\n    background-color: #f6fef9; }\n    .message.is-success .message-header {\n      background-color: #23d160;\n      color: #fff; }\n    .message.is-success .message-body {\n      border-color: #23d160;\n      color: #0e301a; }\n  .message.is-warning {\n    background-color: #fffdf5; }\n    .message.is-warning .message-header {\n      background-color: #ffdd57;\n      color: rgba(0, 0, 0, 0.7); }\n    .message.is-warning .message-body {\n      border-color: #ffdd57;\n      color: #3b3108; }\n  .message.is-danger {\n    background-color: #fff5f7; }\n    .message.is-danger .message-header {\n      background-color: #ff3860;\n      color: #fff; }\n    .message.is-danger .message-body {\n      border-color: #ff3860;\n      color: #cd0930; }\n\n.message-header {\n  align-items: center;\n  background-color: #4a4a4a;\n  border-radius: 4px 4px 0 0;\n  color: #fff;\n  display: flex;\n  font-weight: 700;\n  justify-content: space-between;\n  line-height: 1.25;\n  padding: 0.75em 1em;\n  position: relative; }\n  .message-header .delete {\n    flex-grow: 0;\n    flex-shrink: 0;\n    margin-left: 0.75em; }\n  .message-header + .message-body {\n    border-width: 0;\n    border-top-left-radius: 0;\n    border-top-right-radius: 0; }\n\n.message-body {\n  border-color: #dbdbdb;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: 0 0 0 4px;\n  color: #4a4a4a;\n  padding: 1.25em 1.5em; }\n  .message-body code,\n  .message-body pre {\n    background-color: white; }\n  .message-body pre code {\n    background-color: transparent; }\n\n.modal {\n  align-items: center;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  overflow: hidden;\n  position: fixed;\n  z-index: 40; }\n  .modal.is-active {\n    display: flex; }\n\n.modal-background {\n  background-color: rgba(10, 10, 10, 0.86); }\n\n.modal-content,\n.modal-card {\n  margin: 0 20px;\n  max-height: calc(100vh - 160px);\n  overflow: auto;\n  position: relative;\n  width: 100%; }\n  @media screen and (min-width: 769px), print {\n    .modal-content,\n    .modal-card {\n      margin: 0 auto;\n      max-height: calc(100vh - 40px);\n      width: 640px; } }\n\n.modal-close {\n  background: none;\n  height: 40px;\n  position: fixed;\n  right: 20px;\n  top: 20px;\n  width: 40px; }\n\n.modal-card {\n  display: flex;\n  flex-direction: column;\n  max-height: calc(100vh - 40px);\n  overflow: hidden;\n  -ms-overflow-y: visible; }\n\n.modal-card-head,\n.modal-card-foot {\n  align-items: center;\n  background-color: whitesmoke;\n  display: flex;\n  flex-shrink: 0;\n  justify-content: flex-start;\n  padding: 20px;\n  position: relative; }\n\n.modal-card-head {\n  border-bottom: 1px solid #dbdbdb;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px; }\n\n.modal-card-title {\n  color: #363636;\n  flex-grow: 1;\n  flex-shrink: 0;\n  font-size: 1.5rem;\n  line-height: 1; }\n\n.modal-card-foot {\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n  border-top: 1px solid #dbdbdb; }\n  .modal-card-foot .button:not(:last-child) {\n    margin-right: 0.5em; }\n\n.modal-card-body {\n  -webkit-overflow-scrolling: touch;\n  background-color: white;\n  flex-grow: 1;\n  flex-shrink: 1;\n  overflow: auto;\n  padding: 20px; }\n\n.navbar {\n  background-color: white;\n  min-height: 3.25rem;\n  position: relative;\n  z-index: 30; }\n  .navbar.is-white {\n    background-color: white;\n    color: #0a0a0a; }\n    .navbar.is-white .navbar-brand > .navbar-item,\n    .navbar.is-white .navbar-brand .navbar-link {\n      color: #0a0a0a; }\n    .navbar.is-white .navbar-brand > a.navbar-item:focus, .navbar.is-white .navbar-brand > a.navbar-item:hover, .navbar.is-white .navbar-brand > a.navbar-item.is-active,\n    .navbar.is-white .navbar-brand .navbar-link:focus,\n    .navbar.is-white .navbar-brand .navbar-link:hover,\n    .navbar.is-white .navbar-brand .navbar-link.is-active {\n      background-color: #f2f2f2;\n      color: #0a0a0a; }\n    .navbar.is-white .navbar-brand .navbar-link::after {\n      border-color: #0a0a0a; }\n    .navbar.is-white .navbar-burger {\n      color: #0a0a0a; }\n    @media screen and (min-width: 1024px) {\n      .navbar.is-white .navbar-start > .navbar-item,\n      .navbar.is-white .navbar-start .navbar-link,\n      .navbar.is-white .navbar-end > .navbar-item,\n      .navbar.is-white .navbar-end .navbar-link {\n        color: #0a0a0a; }\n      .navbar.is-white .navbar-start > a.navbar-item:focus, .navbar.is-white .navbar-start > a.navbar-item:hover, .navbar.is-white .navbar-start > a.navbar-item.is-active,\n      .navbar.is-white .navbar-start .navbar-link:focus,\n      .navbar.is-white .navbar-start .navbar-link:hover,\n      .navbar.is-white .navbar-start .navbar-link.is-active,\n      .navbar.is-white .navbar-end > a.navbar-item:focus,\n      .navbar.is-white .navbar-end > a.navbar-item:hover,\n      .navbar.is-white .navbar-end > a.navbar-item.is-active,\n      .navbar.is-white .navbar-end .navbar-link:focus,\n      .navbar.is-white .navbar-end .navbar-link:hover,\n      .navbar.is-white .navbar-end .navbar-link.is-active {\n        background-color: #f2f2f2;\n        color: #0a0a0a; }\n      .navbar.is-white .navbar-start .navbar-link::after,\n      .navbar.is-white .navbar-end .navbar-link::after {\n        border-color: #0a0a0a; }\n      .navbar.is-white .navbar-item.has-dropdown:focus .navbar-link,\n      .navbar.is-white .navbar-item.has-dropdown:hover .navbar-link,\n      .navbar.is-white .navbar-item.has-dropdown.is-active .navbar-link {\n        background-color: #f2f2f2;\n        color: #0a0a0a; }\n      .navbar.is-white .navbar-dropdown a.navbar-item.is-active {\n        background-color: white;\n        color: #0a0a0a; } }\n  .navbar.is-black {\n    background-color: #0a0a0a;\n    color: white; }\n    .navbar.is-black .navbar-brand > .navbar-item,\n    .navbar.is-black .navbar-brand .navbar-link {\n      color: white; }\n    .navbar.is-black .navbar-brand > a.navbar-item:focus, .navbar.is-black .navbar-brand > a.navbar-item:hover, .navbar.is-black .navbar-brand > a.navbar-item.is-active,\n    .navbar.is-black .navbar-brand .navbar-link:focus,\n    .navbar.is-black .navbar-brand .navbar-link:hover,\n    .navbar.is-black .navbar-brand .navbar-link.is-active {\n      background-color: black;\n      color: white; }\n    .navbar.is-black .navbar-brand .navbar-link::after {\n      border-color: white; }\n    .navbar.is-black .navbar-burger {\n      color: white; }\n    @media screen and (min-width: 1024px) {\n      .navbar.is-black .navbar-start > .navbar-item,\n      .navbar.is-black .navbar-start .navbar-link,\n      .navbar.is-black .navbar-end > .navbar-item,\n      .navbar.is-black .navbar-end .navbar-link {\n        color: white; }\n      .navbar.is-black .navbar-start > a.navbar-item:focus, .navbar.is-black .navbar-start > a.navbar-item:hover, .navbar.is-black .navbar-start > a.navbar-item.is-active,\n      .navbar.is-black .navbar-start .navbar-link:focus,\n      .navbar.is-black .navbar-start .navbar-link:hover,\n      .navbar.is-black .navbar-start .navbar-link.is-active,\n      .navbar.is-black .navbar-end > a.navbar-item:focus,\n      .navbar.is-black .navbar-end > a.navbar-item:hover,\n      .navbar.is-black .navbar-end > a.navbar-item.is-active,\n      .navbar.is-black .navbar-end .navbar-link:focus,\n      .navbar.is-black .navbar-end .navbar-link:hover,\n      .navbar.is-black .navbar-end .navbar-link.is-active {\n        background-color: black;\n        color: white; }\n      .navbar.is-black .navbar-start .navbar-link::after,\n      .navbar.is-black .navbar-end .navbar-link::after {\n        border-color: white; }\n      .navbar.is-black .navbar-item.has-dropdown:focus .navbar-link,\n      .navbar.is-black .navbar-item.has-dropdown:hover .navbar-link,\n      .navbar.is-black .navbar-item.has-dropdown.is-active .navbar-link {\n        background-color: black;\n        color: white; }\n      .navbar.is-black .navbar-dropdown a.navbar-item.is-active {\n        background-color: #0a0a0a;\n        color: white; } }\n  .navbar.is-light {\n    background-color: whitesmoke;\n    color: #363636; }\n    .navbar.is-light .navbar-brand > .navbar-item,\n    .navbar.is-light .navbar-brand .navbar-link {\n      color: #363636; }\n    .navbar.is-light .navbar-brand > a.navbar-item:focus, .navbar.is-light .navbar-brand > a.navbar-item:hover, .navbar.is-light .navbar-brand > a.navbar-item.is-active,\n    .navbar.is-light .navbar-brand .navbar-link:focus,\n    .navbar.is-light .navbar-brand .navbar-link:hover,\n    .navbar.is-light .navbar-brand .navbar-link.is-active {\n      background-color: #e8e8e8;\n      color: #363636; }\n    .navbar.is-light .navbar-brand .navbar-link::after {\n      border-color: #363636; }\n    .navbar.is-light .navbar-burger {\n      color: #363636; }\n    @media screen and (min-width: 1024px) {\n      .navbar.is-light .navbar-start > .navbar-item,\n      .navbar.is-light .navbar-start .navbar-link,\n      .navbar.is-light .navbar-end > .navbar-item,\n      .navbar.is-light .navbar-end .navbar-link {\n        color: #363636; }\n      .navbar.is-light .navbar-start > a.navbar-item:focus, .navbar.is-light .navbar-start > a.navbar-item:hover, .navbar.is-light .navbar-start > a.navbar-item.is-active,\n      .navbar.is-light .navbar-start .navbar-link:focus,\n      .navbar.is-light .navbar-start .navbar-link:hover,\n      .navbar.is-light .navbar-start .navbar-link.is-active,\n      .navbar.is-light .navbar-end > a.navbar-item:focus,\n      .navbar.is-light .navbar-end > a.navbar-item:hover,\n      .navbar.is-light .navbar-end > a.navbar-item.is-active,\n      .navbar.is-light .navbar-end .navbar-link:focus,\n      .navbar.is-light .navbar-end .navbar-link:hover,\n      .navbar.is-light .navbar-end .navbar-link.is-active {\n        background-color: #e8e8e8;\n        color: #363636; }\n      .navbar.is-light .navbar-start .navbar-link::after,\n      .navbar.is-light .navbar-end .navbar-link::after {\n        border-color: #363636; }\n      .navbar.is-light .navbar-item.has-dropdown:focus .navbar-link,\n      .navbar.is-light .navbar-item.has-dropdown:hover .navbar-link,\n      .navbar.is-light .navbar-item.has-dropdown.is-active .navbar-link {\n        background-color: #e8e8e8;\n        color: #363636; }\n      .navbar.is-light .navbar-dropdown a.navbar-item.is-active {\n        background-color: whitesmoke;\n        color: #363636; } }\n  .navbar.is-dark {\n    background-color: #363636;\n    color: whitesmoke; }\n    .navbar.is-dark .navbar-brand > .navbar-item,\n    .navbar.is-dark .navbar-brand .navbar-link {\n      color: whitesmoke; }\n    .navbar.is-dark .navbar-brand > a.navbar-item:focus, .navbar.is-dark .navbar-brand > a.navbar-item:hover, .navbar.is-dark .navbar-brand > a.navbar-item.is-active,\n    .navbar.is-dark .navbar-brand .navbar-link:focus,\n    .navbar.is-dark .navbar-brand .navbar-link:hover,\n    .navbar.is-dark .navbar-brand .navbar-link.is-active {\n      background-color: #292929;\n      color: whitesmoke; }\n    .navbar.is-dark .navbar-brand .navbar-link::after {\n      border-color: whitesmoke; }\n    .navbar.is-dark .navbar-burger {\n      color: whitesmoke; }\n    @media screen and (min-width: 1024px) {\n      .navbar.is-dark .navbar-start > .navbar-item,\n      .navbar.is-dark .navbar-start .navbar-link,\n      .navbar.is-dark .navbar-end > .navbar-item,\n      .navbar.is-dark .navbar-end .navbar-link {\n        color: whitesmoke; }\n      .navbar.is-dark .navbar-start > a.navbar-item:focus, .navbar.is-dark .navbar-start > a.navbar-item:hover, .navbar.is-dark .navbar-start > a.navbar-item.is-active,\n      .navbar.is-dark .navbar-start .navbar-link:focus,\n      .navbar.is-dark .navbar-start .navbar-link:hover,\n      .navbar.is-dark .navbar-start .navbar-link.is-active,\n      .navbar.is-dark .navbar-end > a.navbar-item:focus,\n      .navbar.is-dark .navbar-end > a.navbar-item:hover,\n      .navbar.is-dark .navbar-end > a.navbar-item.is-active,\n      .navbar.is-dark .navbar-end .navbar-link:focus,\n      .navbar.is-dark .navbar-end .navbar-link:hover,\n      .navbar.is-dark .navbar-end .navbar-link.is-active {\n        background-color: #292929;\n        color: whitesmoke; }\n      .navbar.is-dark .navbar-start .navbar-link::after,\n      .navbar.is-dark .navbar-end .navbar-link::after {\n        border-color: whitesmoke; }\n      .navbar.is-dark .navbar-item.has-dropdown:focus .navbar-link,\n      .navbar.is-dark .navbar-item.has-dropdown:hover .navbar-link,\n      .navbar.is-dark .navbar-item.has-dropdown.is-active .navbar-link {\n        background-color: #292929;\n        color: whitesmoke; }\n      .navbar.is-dark .navbar-dropdown a.navbar-item.is-active {\n        background-color: #363636;\n        color: whitesmoke; } }\n  .navbar.is-primary {\n    background-color: #00d1b2;\n    color: #fff; }\n    .navbar.is-primary .navbar-brand > .navbar-item,\n    .navbar.is-primary .navbar-brand .navbar-link {\n      color: #fff; }\n    .navbar.is-primary .navbar-brand > a.navbar-item:focus, .navbar.is-primary .navbar-brand > a.navbar-item:hover, .navbar.is-primary .navbar-brand > a.navbar-item.is-active,\n    .navbar.is-primary .navbar-brand .navbar-link:focus,\n    .navbar.is-primary .navbar-brand .navbar-link:hover,\n    .navbar.is-primary .navbar-brand .navbar-link.is-active {\n      background-color: #00b89c;\n      color: #fff; }\n    .navbar.is-primary .navbar-brand .navbar-link::after {\n      border-color: #fff; }\n    .navbar.is-primary .navbar-burger {\n      color: #fff; }\n    @media screen and (min-width: 1024px) {\n      .navbar.is-primary .navbar-start > .navbar-item,\n      .navbar.is-primary .navbar-start .navbar-link,\n      .navbar.is-primary .navbar-end > .navbar-item,\n      .navbar.is-primary .navbar-end .navbar-link {\n        color: #fff; }\n      .navbar.is-primary .navbar-start > a.navbar-item:focus, .navbar.is-primary .navbar-start > a.navbar-item:hover, .navbar.is-primary .navbar-start > a.navbar-item.is-active,\n      .navbar.is-primary .navbar-start .navbar-link:focus,\n      .navbar.is-primary .navbar-start .navbar-link:hover,\n      .navbar.is-primary .navbar-start .navbar-link.is-active,\n      .navbar.is-primary .navbar-end > a.navbar-item:focus,\n      .navbar.is-primary .navbar-end > a.navbar-item:hover,\n      .navbar.is-primary .navbar-end > a.navbar-item.is-active,\n      .navbar.is-primary .navbar-end .navbar-link:focus,\n      .navbar.is-primary .navbar-end .navbar-link:hover,\n      .navbar.is-primary .navbar-end .navbar-link.is-active {\n        background-color: #00b89c;\n        color: #fff; }\n      .navbar.is-primary .navbar-start .navbar-link::after,\n      .navbar.is-primary .navbar-end .navbar-link::after {\n        border-color: #fff; }\n      .navbar.is-primary .navbar-item.has-dropdown:focus .navbar-link,\n      .navbar.is-primary .navbar-item.has-dropdown:hover .navbar-link,\n      .navbar.is-primary .navbar-item.has-dropdown.is-active .navbar-link {\n        background-color: #00b89c;\n        color: #fff; }\n      .navbar.is-primary .navbar-dropdown a.navbar-item.is-active {\n        background-color: #00d1b2;\n        color: #fff; } }\n  .navbar.is-link {\n    background-color: #3273dc;\n    color: #fff; }\n    .navbar.is-link .navbar-brand > .navbar-item,\n    .navbar.is-link .navbar-brand .navbar-link {\n      color: #fff; }\n    .navbar.is-link .navbar-brand > a.navbar-item:focus, .navbar.is-link .navbar-brand > a.navbar-item:hover, .navbar.is-link .navbar-brand > a.navbar-item.is-active,\n    .navbar.is-link .navbar-brand .navbar-link:focus,\n    .navbar.is-link .navbar-brand .navbar-link:hover,\n    .navbar.is-link .navbar-brand .navbar-link.is-active {\n      background-color: #2366d1;\n      color: #fff; }\n    .navbar.is-link .navbar-brand .navbar-link::after {\n      border-color: #fff; }\n    .navbar.is-link .navbar-burger {\n      color: #fff; }\n    @media screen and (min-width: 1024px) {\n      .navbar.is-link .navbar-start > .navbar-item,\n      .navbar.is-link .navbar-start .navbar-link,\n      .navbar.is-link .navbar-end > .navbar-item,\n      .navbar.is-link .navbar-end .navbar-link {\n        color: #fff; }\n      .navbar.is-link .navbar-start > a.navbar-item:focus, .navbar.is-link .navbar-start > a.navbar-item:hover, .navbar.is-link .navbar-start > a.navbar-item.is-active,\n      .navbar.is-link .navbar-start .navbar-link:focus,\n      .navbar.is-link .navbar-start .navbar-link:hover,\n      .navbar.is-link .navbar-start .navbar-link.is-active,\n      .navbar.is-link .navbar-end > a.navbar-item:focus,\n      .navbar.is-link .navbar-end > a.navbar-item:hover,\n      .navbar.is-link .navbar-end > a.navbar-item.is-active,\n      .navbar.is-link .navbar-end .navbar-link:focus,\n      .navbar.is-link .navbar-end .navbar-link:hover,\n      .navbar.is-link .navbar-end .navbar-link.is-active {\n        background-color: #2366d1;\n        color: #fff; }\n      .navbar.is-link .navbar-start .navbar-link::after,\n      .navbar.is-link .navbar-end .navbar-link::after {\n        border-color: #fff; }\n      .navbar.is-link .navbar-item.has-dropdown:focus .navbar-link,\n      .navbar.is-link .navbar-item.has-dropdown:hover .navbar-link,\n      .navbar.is-link .navbar-item.has-dropdown.is-active .navbar-link {\n        background-color: #2366d1;\n        color: #fff; }\n      .navbar.is-link .navbar-dropdown a.navbar-item.is-active {\n        background-color: #3273dc;\n        color: #fff; } }\n  .navbar.is-info {\n    background-color: #209cee;\n    color: #fff; }\n    .navbar.is-info .navbar-brand > .navbar-item,\n    .navbar.is-info .navbar-brand .navbar-link {\n      color: #fff; }\n    .navbar.is-info .navbar-brand > a.navbar-item:focus, .navbar.is-info .navbar-brand > a.navbar-item:hover, .navbar.is-info .navbar-brand > a.navbar-item.is-active,\n    .navbar.is-info .navbar-brand .navbar-link:focus,\n    .navbar.is-info .navbar-brand .navbar-link:hover,\n    .navbar.is-info .navbar-brand .navbar-link.is-active {\n      background-color: #118fe4;\n      color: #fff; }\n    .navbar.is-info .navbar-brand .navbar-link::after {\n      border-color: #fff; }\n    .navbar.is-info .navbar-burger {\n      color: #fff; }\n    @media screen and (min-width: 1024px) {\n      .navbar.is-info .navbar-start > .navbar-item,\n      .navbar.is-info .navbar-start .navbar-link,\n      .navbar.is-info .navbar-end > .navbar-item,\n      .navbar.is-info .navbar-end .navbar-link {\n        color: #fff; }\n      .navbar.is-info .navbar-start > a.navbar-item:focus, .navbar.is-info .navbar-start > a.navbar-item:hover, .navbar.is-info .navbar-start > a.navbar-item.is-active,\n      .navbar.is-info .navbar-start .navbar-link:focus,\n      .navbar.is-info .navbar-start .navbar-link:hover,\n      .navbar.is-info .navbar-start .navbar-link.is-active,\n      .navbar.is-info .navbar-end > a.navbar-item:focus,\n      .navbar.is-info .navbar-end > a.navbar-item:hover,\n      .navbar.is-info .navbar-end > a.navbar-item.is-active,\n      .navbar.is-info .navbar-end .navbar-link:focus,\n      .navbar.is-info .navbar-end .navbar-link:hover,\n      .navbar.is-info .navbar-end .navbar-link.is-active {\n        background-color: #118fe4;\n        color: #fff; }\n      .navbar.is-info .navbar-start .navbar-link::after,\n      .navbar.is-info .navbar-end .navbar-link::after {\n        border-color: #fff; }\n      .navbar.is-info .navbar-item.has-dropdown:focus .navbar-link,\n      .navbar.is-info .navbar-item.has-dropdown:hover .navbar-link,\n      .navbar.is-info .navbar-item.has-dropdown.is-active .navbar-link {\n        background-color: #118fe4;\n        color: #fff; }\n      .navbar.is-info .navbar-dropdown a.navbar-item.is-active {\n        background-color: #209cee;\n        color: #fff; } }\n  .navbar.is-success {\n    background-color: #23d160;\n    color: #fff; }\n    .navbar.is-success .navbar-brand > .navbar-item,\n    .navbar.is-success .navbar-brand .navbar-link {\n      color: #fff; }\n    .navbar.is-success .navbar-brand > a.navbar-item:focus, .navbar.is-success .navbar-brand > a.navbar-item:hover, .navbar.is-success .navbar-brand > a.navbar-item.is-active,\n    .navbar.is-success .navbar-brand .navbar-link:focus,\n    .navbar.is-success .navbar-brand .navbar-link:hover,\n    .navbar.is-success .navbar-brand .navbar-link.is-active {\n      background-color: #20bc56;\n      color: #fff; }\n    .navbar.is-success .navbar-brand .navbar-link::after {\n      border-color: #fff; }\n    .navbar.is-success .navbar-burger {\n      color: #fff; }\n    @media screen and (min-width: 1024px) {\n      .navbar.is-success .navbar-start > .navbar-item,\n      .navbar.is-success .navbar-start .navbar-link,\n      .navbar.is-success .navbar-end > .navbar-item,\n      .navbar.is-success .navbar-end .navbar-link {\n        color: #fff; }\n      .navbar.is-success .navbar-start > a.navbar-item:focus, .navbar.is-success .navbar-start > a.navbar-item:hover, .navbar.is-success .navbar-start > a.navbar-item.is-active,\n      .navbar.is-success .navbar-start .navbar-link:focus,\n      .navbar.is-success .navbar-start .navbar-link:hover,\n      .navbar.is-success .navbar-start .navbar-link.is-active,\n      .navbar.is-success .navbar-end > a.navbar-item:focus,\n      .navbar.is-success .navbar-end > a.navbar-item:hover,\n      .navbar.is-success .navbar-end > a.navbar-item.is-active,\n      .navbar.is-success .navbar-end .navbar-link:focus,\n      .navbar.is-success .navbar-end .navbar-link:hover,\n      .navbar.is-success .navbar-end .navbar-link.is-active {\n        background-color: #20bc56;\n        color: #fff; }\n      .navbar.is-success .navbar-start .navbar-link::after,\n      .navbar.is-success .navbar-end .navbar-link::after {\n        border-color: #fff; }\n      .navbar.is-success .navbar-item.has-dropdown:focus .navbar-link,\n      .navbar.is-success .navbar-item.has-dropdown:hover .navbar-link,\n      .navbar.is-success .navbar-item.has-dropdown.is-active .navbar-link {\n        background-color: #20bc56;\n        color: #fff; }\n      .navbar.is-success .navbar-dropdown a.navbar-item.is-active {\n        background-color: #23d160;\n        color: #fff; } }\n  .navbar.is-warning {\n    background-color: #ffdd57;\n    color: rgba(0, 0, 0, 0.7); }\n    .navbar.is-warning .navbar-brand > .navbar-item,\n    .navbar.is-warning .navbar-brand .navbar-link {\n      color: rgba(0, 0, 0, 0.7); }\n    .navbar.is-warning .navbar-brand > a.navbar-item:focus, .navbar.is-warning .navbar-brand > a.navbar-item:hover, .navbar.is-warning .navbar-brand > a.navbar-item.is-active,\n    .navbar.is-warning .navbar-brand .navbar-link:focus,\n    .navbar.is-warning .navbar-brand .navbar-link:hover,\n    .navbar.is-warning .navbar-brand .navbar-link.is-active {\n      background-color: #ffd83d;\n      color: rgba(0, 0, 0, 0.7); }\n    .navbar.is-warning .navbar-brand .navbar-link::after {\n      border-color: rgba(0, 0, 0, 0.7); }\n    .navbar.is-warning .navbar-burger {\n      color: rgba(0, 0, 0, 0.7); }\n    @media screen and (min-width: 1024px) {\n      .navbar.is-warning .navbar-start > .navbar-item,\n      .navbar.is-warning .navbar-start .navbar-link,\n      .navbar.is-warning .navbar-end > .navbar-item,\n      .navbar.is-warning .navbar-end .navbar-link {\n        color: rgba(0, 0, 0, 0.7); }\n      .navbar.is-warning .navbar-start > a.navbar-item:focus, .navbar.is-warning .navbar-start > a.navbar-item:hover, .navbar.is-warning .navbar-start > a.navbar-item.is-active,\n      .navbar.is-warning .navbar-start .navbar-link:focus,\n      .navbar.is-warning .navbar-start .navbar-link:hover,\n      .navbar.is-warning .navbar-start .navbar-link.is-active,\n      .navbar.is-warning .navbar-end > a.navbar-item:focus,\n      .navbar.is-warning .navbar-end > a.navbar-item:hover,\n      .navbar.is-warning .navbar-end > a.navbar-item.is-active,\n      .navbar.is-warning .navbar-end .navbar-link:focus,\n      .navbar.is-warning .navbar-end .navbar-link:hover,\n      .navbar.is-warning .navbar-end .navbar-link.is-active {\n        background-color: #ffd83d;\n        color: rgba(0, 0, 0, 0.7); }\n      .navbar.is-warning .navbar-start .navbar-link::after,\n      .navbar.is-warning .navbar-end .navbar-link::after {\n        border-color: rgba(0, 0, 0, 0.7); }\n      .navbar.is-warning .navbar-item.has-dropdown:focus .navbar-link,\n      .navbar.is-warning .navbar-item.has-dropdown:hover .navbar-link,\n      .navbar.is-warning .navbar-item.has-dropdown.is-active .navbar-link {\n        background-color: #ffd83d;\n        color: rgba(0, 0, 0, 0.7); }\n      .navbar.is-warning .navbar-dropdown a.navbar-item.is-active {\n        background-color: #ffdd57;\n        color: rgba(0, 0, 0, 0.7); } }\n  .navbar.is-danger {\n    background-color: #ff3860;\n    color: #fff; }\n    .navbar.is-danger .navbar-brand > .navbar-item,\n    .navbar.is-danger .navbar-brand .navbar-link {\n      color: #fff; }\n    .navbar.is-danger .navbar-brand > a.navbar-item:focus, .navbar.is-danger .navbar-brand > a.navbar-item:hover, .navbar.is-danger .navbar-brand > a.navbar-item.is-active,\n    .navbar.is-danger .navbar-brand .navbar-link:focus,\n    .navbar.is-danger .navbar-brand .navbar-link:hover,\n    .navbar.is-danger .navbar-brand .navbar-link.is-active {\n      background-color: #ff1f4b;\n      color: #fff; }\n    .navbar.is-danger .navbar-brand .navbar-link::after {\n      border-color: #fff; }\n    .navbar.is-danger .navbar-burger {\n      color: #fff; }\n    @media screen and (min-width: 1024px) {\n      .navbar.is-danger .navbar-start > .navbar-item,\n      .navbar.is-danger .navbar-start .navbar-link,\n      .navbar.is-danger .navbar-end > .navbar-item,\n      .navbar.is-danger .navbar-end .navbar-link {\n        color: #fff; }\n      .navbar.is-danger .navbar-start > a.navbar-item:focus, .navbar.is-danger .navbar-start > a.navbar-item:hover, .navbar.is-danger .navbar-start > a.navbar-item.is-active,\n      .navbar.is-danger .navbar-start .navbar-link:focus,\n      .navbar.is-danger .navbar-start .navbar-link:hover,\n      .navbar.is-danger .navbar-start .navbar-link.is-active,\n      .navbar.is-danger .navbar-end > a.navbar-item:focus,\n      .navbar.is-danger .navbar-end > a.navbar-item:hover,\n      .navbar.is-danger .navbar-end > a.navbar-item.is-active,\n      .navbar.is-danger .navbar-end .navbar-link:focus,\n      .navbar.is-danger .navbar-end .navbar-link:hover,\n      .navbar.is-danger .navbar-end .navbar-link.is-active {\n        background-color: #ff1f4b;\n        color: #fff; }\n      .navbar.is-danger .navbar-start .navbar-link::after,\n      .navbar.is-danger .navbar-end .navbar-link::after {\n        border-color: #fff; }\n      .navbar.is-danger .navbar-item.has-dropdown:focus .navbar-link,\n      .navbar.is-danger .navbar-item.has-dropdown:hover .navbar-link,\n      .navbar.is-danger .navbar-item.has-dropdown.is-active .navbar-link {\n        background-color: #ff1f4b;\n        color: #fff; }\n      .navbar.is-danger .navbar-dropdown a.navbar-item.is-active {\n        background-color: #ff3860;\n        color: #fff; } }\n  .navbar > .container {\n    align-items: stretch;\n    display: flex;\n    min-height: 3.25rem;\n    width: 100%; }\n  .navbar.has-shadow {\n    box-shadow: 0 2px 0 0 whitesmoke; }\n  .navbar.is-fixed-bottom, .navbar.is-fixed-top {\n    left: 0;\n    position: fixed;\n    right: 0;\n    z-index: 30; }\n  .navbar.is-fixed-bottom {\n    bottom: 0; }\n    .navbar.is-fixed-bottom.has-shadow {\n      box-shadow: 0 -2px 0 0 whitesmoke; }\n  .navbar.is-fixed-top {\n    top: 0; }\n\nhtml.has-navbar-fixed-top,\nbody.has-navbar-fixed-top {\n  padding-top: 3.25rem; }\n\nhtml.has-navbar-fixed-bottom,\nbody.has-navbar-fixed-bottom {\n  padding-bottom: 3.25rem; }\n\n.navbar-brand,\n.navbar-tabs {\n  align-items: stretch;\n  display: flex;\n  flex-shrink: 0;\n  min-height: 3.25rem; }\n\n.navbar-brand a.navbar-item:focus, .navbar-brand a.navbar-item:hover {\n  background-color: transparent; }\n\n.navbar-tabs {\n  -webkit-overflow-scrolling: touch;\n  max-width: 100vw;\n  overflow-x: auto;\n  overflow-y: hidden; }\n\n.navbar-burger {\n  color: #4a4a4a;\n  cursor: pointer;\n  display: block;\n  height: 3.25rem;\n  position: relative;\n  width: 3.25rem;\n  margin-left: auto; }\n  .navbar-burger span {\n    background-color: currentColor;\n    display: block;\n    height: 1px;\n    left: calc(50% - 8px);\n    position: absolute;\n    transform-origin: center;\n    transition-duration: 86ms;\n    transition-property: background-color, opacity, transform;\n    transition-timing-function: ease-out;\n    width: 16px; }\n    .navbar-burger span:nth-child(1) {\n      top: calc(50% - 6px); }\n    .navbar-burger span:nth-child(2) {\n      top: calc(50% - 1px); }\n    .navbar-burger span:nth-child(3) {\n      top: calc(50% + 4px); }\n  .navbar-burger:hover {\n    background-color: rgba(0, 0, 0, 0.05); }\n  .navbar-burger.is-active span:nth-child(1) {\n    transform: translateY(5px) rotate(45deg); }\n  .navbar-burger.is-active span:nth-child(2) {\n    opacity: 0; }\n  .navbar-burger.is-active span:nth-child(3) {\n    transform: translateY(-5px) rotate(-45deg); }\n\n.navbar-menu {\n  display: none; }\n\n.navbar-item,\n.navbar-link {\n  color: #4a4a4a;\n  display: block;\n  line-height: 1.5;\n  padding: 0.5rem 0.75rem;\n  position: relative; }\n  .navbar-item .icon:only-child,\n  .navbar-link .icon:only-child {\n    margin-left: -0.25rem;\n    margin-right: -0.25rem; }\n\na.navbar-item,\n.navbar-link {\n  cursor: pointer; }\n  a.navbar-item:focus, a.navbar-item:focus-within, a.navbar-item:hover, a.navbar-item.is-active,\n  .navbar-link:focus,\n  .navbar-link:focus-within,\n  .navbar-link:hover,\n  .navbar-link.is-active {\n    background-color: #fafafa;\n    color: #3273dc; }\n\n.navbar-item {\n  display: block;\n  flex-grow: 0;\n  flex-shrink: 0; }\n  .navbar-item img {\n    max-height: 1.75rem; }\n  .navbar-item.has-dropdown {\n    padding: 0; }\n  .navbar-item.is-expanded {\n    flex-grow: 1;\n    flex-shrink: 1; }\n  .navbar-item.is-tab {\n    border-bottom: 1px solid transparent;\n    min-height: 3.25rem;\n    padding-bottom: calc(0.5rem - 1px); }\n    .navbar-item.is-tab:focus, .navbar-item.is-tab:hover {\n      background-color: transparent;\n      border-bottom-color: #3273dc; }\n    .navbar-item.is-tab.is-active {\n      background-color: transparent;\n      border-bottom-color: #3273dc;\n      border-bottom-style: solid;\n      border-bottom-width: 3px;\n      color: #3273dc;\n      padding-bottom: calc(0.5rem - 3px); }\n\n.navbar-content {\n  flex-grow: 1;\n  flex-shrink: 1; }\n\n.navbar-link:not(.is-arrowless) {\n  padding-right: 2.5em; }\n  .navbar-link:not(.is-arrowless)::after {\n    border-color: #3273dc;\n    margin-top: -0.375em;\n    right: 1.125em; }\n\n.navbar-dropdown {\n  font-size: 0.875rem;\n  padding-bottom: 0.5rem;\n  padding-top: 0.5rem; }\n  .navbar-dropdown .navbar-item {\n    padding-left: 1.5rem;\n    padding-right: 1.5rem; }\n\n.navbar-divider {\n  background-color: whitesmoke;\n  border: none;\n  display: none;\n  height: 2px;\n  margin: 0.5rem 0; }\n\n@media screen and (max-width: 1023px) {\n  .navbar > .container {\n    display: block; }\n  .navbar-brand .navbar-item,\n  .navbar-tabs .navbar-item {\n    align-items: center;\n    display: flex; }\n  .navbar-link::after {\n    display: none; }\n  .navbar-menu {\n    background-color: white;\n    box-shadow: 0 8px 16px rgba(10, 10, 10, 0.1);\n    padding: 0.5rem 0; }\n    .navbar-menu.is-active {\n      display: block; }\n  .navbar.is-fixed-bottom-touch, .navbar.is-fixed-top-touch {\n    left: 0;\n    position: fixed;\n    right: 0;\n    z-index: 30; }\n  .navbar.is-fixed-bottom-touch {\n    bottom: 0; }\n    .navbar.is-fixed-bottom-touch.has-shadow {\n      box-shadow: 0 -2px 3px rgba(10, 10, 10, 0.1); }\n  .navbar.is-fixed-top-touch {\n    top: 0; }\n  .navbar.is-fixed-top .navbar-menu, .navbar.is-fixed-top-touch .navbar-menu {\n    -webkit-overflow-scrolling: touch;\n    max-height: calc(100vh - 3.25rem);\n    overflow: auto; }\n  html.has-navbar-fixed-top-touch,\n  body.has-navbar-fixed-top-touch {\n    padding-top: 3.25rem; }\n  html.has-navbar-fixed-bottom-touch,\n  body.has-navbar-fixed-bottom-touch {\n    padding-bottom: 3.25rem; } }\n\n@media screen and (min-width: 1024px) {\n  .navbar,\n  .navbar-menu,\n  .navbar-start,\n  .navbar-end {\n    align-items: stretch;\n    display: flex; }\n  .navbar {\n    min-height: 3.25rem; }\n    .navbar.is-spaced {\n      padding: 1rem 2rem; }\n      .navbar.is-spaced .navbar-start,\n      .navbar.is-spaced .navbar-end {\n        align-items: center; }\n      .navbar.is-spaced a.navbar-item,\n      .navbar.is-spaced .navbar-link {\n        border-radius: 4px; }\n    .navbar.is-transparent a.navbar-item:focus, .navbar.is-transparent a.navbar-item:hover, .navbar.is-transparent a.navbar-item.is-active,\n    .navbar.is-transparent .navbar-link:focus,\n    .navbar.is-transparent .navbar-link:hover,\n    .navbar.is-transparent .navbar-link.is-active {\n      background-color: transparent !important; }\n    .navbar.is-transparent .navbar-item.has-dropdown.is-active .navbar-link, .navbar.is-transparent .navbar-item.has-dropdown.is-hoverable:focus .navbar-link, .navbar.is-transparent .navbar-item.has-dropdown.is-hoverable:focus-within .navbar-link, .navbar.is-transparent .navbar-item.has-dropdown.is-hoverable:hover .navbar-link {\n      background-color: transparent !important; }\n    .navbar.is-transparent .navbar-dropdown a.navbar-item:focus, .navbar.is-transparent .navbar-dropdown a.navbar-item:hover {\n      background-color: whitesmoke;\n      color: #0a0a0a; }\n    .navbar.is-transparent .navbar-dropdown a.navbar-item.is-active {\n      background-color: whitesmoke;\n      color: #3273dc; }\n  .navbar-burger {\n    display: none; }\n  .navbar-item,\n  .navbar-link {\n    align-items: center;\n    display: flex; }\n  .navbar-item {\n    display: flex; }\n    .navbar-item.has-dropdown {\n      align-items: stretch; }\n    .navbar-item.has-dropdown-up .navbar-link::after {\n      transform: rotate(135deg) translate(0.25em, -0.25em); }\n    .navbar-item.has-dropdown-up .navbar-dropdown {\n      border-bottom: 2px solid #dbdbdb;\n      border-radius: 6px 6px 0 0;\n      border-top: none;\n      bottom: 100%;\n      box-shadow: 0 -8px 8px rgba(10, 10, 10, 0.1);\n      top: auto; }\n    .navbar-item.is-active .navbar-dropdown, .navbar-item.is-hoverable:focus .navbar-dropdown, .navbar-item.is-hoverable:focus-within .navbar-dropdown, .navbar-item.is-hoverable:hover .navbar-dropdown {\n      display: block; }\n      .navbar.is-spaced .navbar-item.is-active .navbar-dropdown, .navbar-item.is-active .navbar-dropdown.is-boxed, .navbar.is-spaced .navbar-item.is-hoverable:focus .navbar-dropdown, .navbar-item.is-hoverable:focus .navbar-dropdown.is-boxed, .navbar.is-spaced .navbar-item.is-hoverable:focus-within .navbar-dropdown, .navbar-item.is-hoverable:focus-within .navbar-dropdown.is-boxed, .navbar.is-spaced .navbar-item.is-hoverable:hover .navbar-dropdown, .navbar-item.is-hoverable:hover .navbar-dropdown.is-boxed {\n        opacity: 1;\n        pointer-events: auto;\n        transform: translateY(0); }\n  .navbar-menu {\n    flex-grow: 1;\n    flex-shrink: 0; }\n  .navbar-start {\n    justify-content: flex-start;\n    margin-right: auto; }\n  .navbar-end {\n    justify-content: flex-end;\n    margin-left: auto; }\n  .navbar-dropdown {\n    background-color: white;\n    border-bottom-left-radius: 6px;\n    border-bottom-right-radius: 6px;\n    border-top: 2px solid #dbdbdb;\n    box-shadow: 0 8px 8px rgba(10, 10, 10, 0.1);\n    display: none;\n    font-size: 0.875rem;\n    left: 0;\n    min-width: 100%;\n    position: absolute;\n    top: 100%;\n    z-index: 20; }\n    .navbar-dropdown .navbar-item {\n      padding: 0.375rem 1rem;\n      white-space: nowrap; }\n    .navbar-dropdown a.navbar-item {\n      padding-right: 3rem; }\n      .navbar-dropdown a.navbar-item:focus, .navbar-dropdown a.navbar-item:hover {\n        background-color: whitesmoke;\n        color: #0a0a0a; }\n      .navbar-dropdown a.navbar-item.is-active {\n        background-color: whitesmoke;\n        color: #3273dc; }\n    .navbar.is-spaced .navbar-dropdown, .navbar-dropdown.is-boxed {\n      border-radius: 6px;\n      border-top: none;\n      box-shadow: 0 8px 8px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);\n      display: block;\n      opacity: 0;\n      pointer-events: none;\n      top: calc(100% + (-4px));\n      transform: translateY(-5px);\n      transition-duration: 86ms;\n      transition-property: opacity, transform; }\n    .navbar-dropdown.is-right {\n      left: auto;\n      right: 0; }\n  .navbar-divider {\n    display: block; }\n  .navbar > .container .navbar-brand,\n  .container > .navbar .navbar-brand {\n    margin-left: -.75rem; }\n  .navbar > .container .navbar-menu,\n  .container > .navbar .navbar-menu {\n    margin-right: -.75rem; }\n  .navbar.is-fixed-bottom-desktop, .navbar.is-fixed-top-desktop {\n    left: 0;\n    position: fixed;\n    right: 0;\n    z-index: 30; }\n  .navbar.is-fixed-bottom-desktop {\n    bottom: 0; }\n    .navbar.is-fixed-bottom-desktop.has-shadow {\n      box-shadow: 0 -2px 3px rgba(10, 10, 10, 0.1); }\n  .navbar.is-fixed-top-desktop {\n    top: 0; }\n  html.has-navbar-fixed-top-desktop,\n  body.has-navbar-fixed-top-desktop {\n    padding-top: 3.25rem; }\n  html.has-navbar-fixed-bottom-desktop,\n  body.has-navbar-fixed-bottom-desktop {\n    padding-bottom: 3.25rem; }\n  html.has-spaced-navbar-fixed-top,\n  body.has-spaced-navbar-fixed-top {\n    padding-top: 5.25rem; }\n  html.has-spaced-navbar-fixed-bottom,\n  body.has-spaced-navbar-fixed-bottom {\n    padding-bottom: 5.25rem; }\n  a.navbar-item.is-active,\n  .navbar-link.is-active {\n    color: #0a0a0a; }\n  a.navbar-item.is-active:not(:focus):not(:hover),\n  .navbar-link.is-active:not(:focus):not(:hover) {\n    background-color: transparent; }\n  .navbar-item.has-dropdown:focus .navbar-link, .navbar-item.has-dropdown:hover .navbar-link, .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #fafafa; } }\n\n.hero.is-fullheight-with-navbar {\n  min-height: calc(100vh - 3.25rem); }\n\n.pagination {\n  font-size: 1rem;\n  margin: -0.25rem; }\n  .pagination.is-small {\n    font-size: 0.75rem; }\n  .pagination.is-medium {\n    font-size: 1.25rem; }\n  .pagination.is-large {\n    font-size: 1.5rem; }\n  .pagination.is-rounded .pagination-previous,\n  .pagination.is-rounded .pagination-next {\n    padding-left: 1em;\n    padding-right: 1em;\n    border-radius: 290486px; }\n  .pagination.is-rounded .pagination-link {\n    border-radius: 290486px; }\n\n.pagination,\n.pagination-list {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  text-align: center; }\n\n.pagination-previous,\n.pagination-next,\n.pagination-link,\n.pagination-ellipsis {\n  font-size: 1em;\n  justify-content: center;\n  margin: 0.25rem;\n  padding-left: 0.5em;\n  padding-right: 0.5em;\n  text-align: center; }\n\n.pagination-previous,\n.pagination-next,\n.pagination-link {\n  border-color: #dbdbdb;\n  color: #363636;\n  min-width: 2.25em; }\n  .pagination-previous:hover,\n  .pagination-next:hover,\n  .pagination-link:hover {\n    border-color: #b5b5b5;\n    color: #363636; }\n  .pagination-previous:focus,\n  .pagination-next:focus,\n  .pagination-link:focus {\n    border-color: #3273dc; }\n  .pagination-previous:active,\n  .pagination-next:active,\n  .pagination-link:active {\n    box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.2); }\n  .pagination-previous[disabled],\n  .pagination-next[disabled],\n  .pagination-link[disabled] {\n    background-color: #dbdbdb;\n    border-color: #dbdbdb;\n    box-shadow: none;\n    color: #7a7a7a;\n    opacity: 0.5; }\n\n.pagination-previous,\n.pagination-next {\n  padding-left: 0.75em;\n  padding-right: 0.75em;\n  white-space: nowrap; }\n\n.pagination-link.is-current {\n  background-color: #3273dc;\n  border-color: #3273dc;\n  color: #fff; }\n\n.pagination-ellipsis {\n  color: #b5b5b5;\n  pointer-events: none; }\n\n.pagination-list {\n  flex-wrap: wrap; }\n\n@media screen and (max-width: 768px) {\n  .pagination {\n    flex-wrap: wrap; }\n  .pagination-previous,\n  .pagination-next {\n    flex-grow: 1;\n    flex-shrink: 1; }\n  .pagination-list li {\n    flex-grow: 1;\n    flex-shrink: 1; } }\n\n@media screen and (min-width: 769px), print {\n  .pagination-list {\n    flex-grow: 1;\n    flex-shrink: 1;\n    justify-content: flex-start;\n    order: 1; }\n  .pagination-previous {\n    order: 2; }\n  .pagination-next {\n    order: 3; }\n  .pagination {\n    justify-content: space-between; }\n    .pagination.is-centered .pagination-previous {\n      order: 1; }\n    .pagination.is-centered .pagination-list {\n      justify-content: center;\n      order: 2; }\n    .pagination.is-centered .pagination-next {\n      order: 3; }\n    .pagination.is-right .pagination-previous {\n      order: 1; }\n    .pagination.is-right .pagination-next {\n      order: 2; }\n    .pagination.is-right .pagination-list {\n      justify-content: flex-end;\n      order: 3; } }\n\n.panel {\n  font-size: 1rem; }\n  .panel:not(:last-child) {\n    margin-bottom: 1.5rem; }\n\n.panel-heading,\n.panel-tabs,\n.panel-block {\n  border-bottom: 1px solid #dbdbdb;\n  border-left: 1px solid #dbdbdb;\n  border-right: 1px solid #dbdbdb; }\n  .panel-heading:first-child,\n  .panel-tabs:first-child,\n  .panel-block:first-child {\n    border-top: 1px solid #dbdbdb; }\n\n.panel-heading {\n  background-color: whitesmoke;\n  border-radius: 4px 4px 0 0;\n  color: #363636;\n  font-size: 1.25em;\n  font-weight: 300;\n  line-height: 1.25;\n  padding: 0.5em 0.75em; }\n\n.panel-tabs {\n  align-items: flex-end;\n  display: flex;\n  font-size: 0.875em;\n  justify-content: center; }\n  .panel-tabs a {\n    border-bottom: 1px solid #dbdbdb;\n    margin-bottom: -1px;\n    padding: 0.5em; }\n    .panel-tabs a.is-active {\n      border-bottom-color: #4a4a4a;\n      color: #363636; }\n\n.panel-list a {\n  color: #4a4a4a; }\n  .panel-list a:hover {\n    color: #3273dc; }\n\n.panel-block {\n  align-items: center;\n  color: #363636;\n  display: flex;\n  justify-content: flex-start;\n  padding: 0.5em 0.75em; }\n  .panel-block input[type=\"checkbox\"] {\n    margin-right: 0.75em; }\n  .panel-block > .control {\n    flex-grow: 1;\n    flex-shrink: 1;\n    width: 100%; }\n  .panel-block.is-wrapped {\n    flex-wrap: wrap; }\n  .panel-block.is-active {\n    border-left-color: #3273dc;\n    color: #363636; }\n    .panel-block.is-active .panel-icon {\n      color: #3273dc; }\n\na.panel-block,\nlabel.panel-block {\n  cursor: pointer; }\n  a.panel-block:hover,\n  label.panel-block:hover {\n    background-color: whitesmoke; }\n\n.panel-icon {\n  display: inline-block;\n  font-size: 14px;\n  height: 1em;\n  line-height: 1em;\n  text-align: center;\n  vertical-align: top;\n  width: 1em;\n  color: #7a7a7a;\n  margin-right: 0.75em; }\n  .panel-icon .fa {\n    font-size: inherit;\n    line-height: inherit; }\n\n.tabs {\n  -webkit-overflow-scrolling: touch;\n  align-items: stretch;\n  display: flex;\n  font-size: 1rem;\n  justify-content: space-between;\n  overflow: hidden;\n  overflow-x: auto;\n  white-space: nowrap; }\n  .tabs a {\n    align-items: center;\n    border-bottom-color: #dbdbdb;\n    border-bottom-style: solid;\n    border-bottom-width: 2px;\n    color: #4a4a4a;\n    display: flex;\n    justify-content: center;\n    margin-bottom: -2px;\n    padding: 0.5em 1em;\n    vertical-align: top; }\n    .tabs a:hover {\n      border-bottom-color: #dbdbdb;\n      color: #D90429; }\n  .tabs li {\n    display: block; }\n    .tabs li.is-active a {\n      border-bottom-color: #D90429;\n      color: #4a4a4a; }\n  .tabs ul {\n    align-items: center;\n    border-bottom-color: #dbdbdb;\n    border-bottom-style: solid;\n    border-bottom-width: 2px;\n    display: flex;\n    flex-grow: 1;\n    flex-shrink: 0;\n    justify-content: flex-start; }\n    .tabs ul.is-left {\n      padding-right: 0.75em; }\n    .tabs ul.is-center {\n      flex: none;\n      justify-content: center;\n      padding-left: 0.75em;\n      padding-right: 0.75em; }\n    .tabs ul.is-right {\n      justify-content: flex-end;\n      padding-left: 0.75em; }\n  .tabs .icon:first-child {\n    margin-right: 0.5em; }\n  .tabs .icon:last-child {\n    margin-left: 0.5em; }\n  .tabs.is-centered ul {\n    justify-content: center; }\n  .tabs.is-right ul {\n    justify-content: flex-end; }\n  .tabs.is-boxed a {\n    border: 1px solid transparent;\n    border-radius: 4px 4px 0 0; }\n    .tabs.is-boxed a:hover {\n      background-color: whitesmoke;\n      border-bottom-color: #dbdbdb; }\n  .tabs.is-boxed li.is-active a {\n    background-color: white;\n    border-color: #dbdbdb;\n    border-bottom-color: transparent !important; }\n  .tabs.is-fullwidth li {\n    flex-grow: 1;\n    flex-shrink: 0; }\n  .tabs.is-toggle a {\n    border-color: #dbdbdb;\n    border-style: solid;\n    border-width: 1px;\n    margin-bottom: 0;\n    position: relative; }\n    .tabs.is-toggle a:hover {\n      background-color: whitesmoke;\n      border-color: #b5b5b5;\n      z-index: 2; }\n  .tabs.is-toggle li + li {\n    margin-left: -1px; }\n  .tabs.is-toggle li:first-child a {\n    border-radius: 4px 0 0 4px; }\n  .tabs.is-toggle li:last-child a {\n    border-radius: 0 4px 4px 0; }\n  .tabs.is-toggle li.is-active a {\n    background-color: #3273dc;\n    border-color: #3273dc;\n    color: #fff;\n    z-index: 1; }\n  .tabs.is-toggle ul {\n    border-bottom: none; }\n  .tabs.is-toggle.is-toggle-rounded li:first-child a {\n    border-bottom-left-radius: 290486px;\n    border-top-left-radius: 290486px;\n    padding-left: 1.25em; }\n  .tabs.is-toggle.is-toggle-rounded li:last-child a {\n    border-bottom-right-radius: 290486px;\n    border-top-right-radius: 290486px;\n    padding-right: 1.25em; }\n  .tabs.is-small {\n    font-size: 0.75rem; }\n  .tabs.is-medium {\n    font-size: 1.25rem; }\n  .tabs.is-large {\n    font-size: 1.5rem; }\n\n.column {\n  display: block;\n  flex-basis: 0;\n  flex-grow: 1;\n  flex-shrink: 1;\n  padding: 0.75rem; }\n  .columns.is-mobile > .column.is-narrow {\n    flex: none; }\n  .columns.is-mobile > .column.is-full {\n    flex: none;\n    width: 100%; }\n  .columns.is-mobile > .column.is-three-quarters {\n    flex: none;\n    width: 75%; }\n  .columns.is-mobile > .column.is-two-thirds {\n    flex: none;\n    width: 66.6666%; }\n  .columns.is-mobile > .column.is-half {\n    flex: none;\n    width: 50%; }\n  .columns.is-mobile > .column.is-one-third {\n    flex: none;\n    width: 33.3333%; }\n  .columns.is-mobile > .column.is-one-quarter {\n    flex: none;\n    width: 25%; }\n  .columns.is-mobile > .column.is-one-fifth {\n    flex: none;\n    width: 20%; }\n  .columns.is-mobile > .column.is-two-fifths {\n    flex: none;\n    width: 40%; }\n  .columns.is-mobile > .column.is-three-fifths {\n    flex: none;\n    width: 60%; }\n  .columns.is-mobile > .column.is-four-fifths {\n    flex: none;\n    width: 80%; }\n  .columns.is-mobile > .column.is-offset-three-quarters {\n    margin-left: 75%; }\n  .columns.is-mobile > .column.is-offset-two-thirds {\n    margin-left: 66.6666%; }\n  .columns.is-mobile > .column.is-offset-half {\n    margin-left: 50%; }\n  .columns.is-mobile > .column.is-offset-one-third {\n    margin-left: 33.3333%; }\n  .columns.is-mobile > .column.is-offset-one-quarter {\n    margin-left: 25%; }\n  .columns.is-mobile > .column.is-offset-one-fifth {\n    margin-left: 20%; }\n  .columns.is-mobile > .column.is-offset-two-fifths {\n    margin-left: 40%; }\n  .columns.is-mobile > .column.is-offset-three-fifths {\n    margin-left: 60%; }\n  .columns.is-mobile > .column.is-offset-four-fifths {\n    margin-left: 80%; }\n  .columns.is-mobile > .column.is-0 {\n    flex: none;\n    width: 0%; }\n  .columns.is-mobile > .column.is-offset-0 {\n    margin-left: 0%; }\n  .columns.is-mobile > .column.is-1 {\n    flex: none;\n    width: 8.33333%; }\n  .columns.is-mobile > .column.is-offset-1 {\n    margin-left: 8.33333%; }\n  .columns.is-mobile > .column.is-2 {\n    flex: none;\n    width: 16.66667%; }\n  .columns.is-mobile > .column.is-offset-2 {\n    margin-left: 16.66667%; }\n  .columns.is-mobile > .column.is-3 {\n    flex: none;\n    width: 25%; }\n  .columns.is-mobile > .column.is-offset-3 {\n    margin-left: 25%; }\n  .columns.is-mobile > .column.is-4 {\n    flex: none;\n    width: 33.33333%; }\n  .columns.is-mobile > .column.is-offset-4 {\n    margin-left: 33.33333%; }\n  .columns.is-mobile > .column.is-5 {\n    flex: none;\n    width: 41.66667%; }\n  .columns.is-mobile > .column.is-offset-5 {\n    margin-left: 41.66667%; }\n  .columns.is-mobile > .column.is-6 {\n    flex: none;\n    width: 50%; }\n  .columns.is-mobile > .column.is-offset-6 {\n    margin-left: 50%; }\n  .columns.is-mobile > .column.is-7 {\n    flex: none;\n    width: 58.33333%; }\n  .columns.is-mobile > .column.is-offset-7 {\n    margin-left: 58.33333%; }\n  .columns.is-mobile > .column.is-8 {\n    flex: none;\n    width: 66.66667%; }\n  .columns.is-mobile > .column.is-offset-8 {\n    margin-left: 66.66667%; }\n  .columns.is-mobile > .column.is-9 {\n    flex: none;\n    width: 75%; }\n  .columns.is-mobile > .column.is-offset-9 {\n    margin-left: 75%; }\n  .columns.is-mobile > .column.is-10 {\n    flex: none;\n    width: 83.33333%; }\n  .columns.is-mobile > .column.is-offset-10 {\n    margin-left: 83.33333%; }\n  .columns.is-mobile > .column.is-11 {\n    flex: none;\n    width: 91.66667%; }\n  .columns.is-mobile > .column.is-offset-11 {\n    margin-left: 91.66667%; }\n  .columns.is-mobile > .column.is-12 {\n    flex: none;\n    width: 100%; }\n  .columns.is-mobile > .column.is-offset-12 {\n    margin-left: 100%; }\n  @media screen and (max-width: 768px) {\n    .column.is-narrow-mobile {\n      flex: none; }\n    .column.is-full-mobile {\n      flex: none;\n      width: 100%; }\n    .column.is-three-quarters-mobile {\n      flex: none;\n      width: 75%; }\n    .column.is-two-thirds-mobile {\n      flex: none;\n      width: 66.6666%; }\n    .column.is-half-mobile {\n      flex: none;\n      width: 50%; }\n    .column.is-one-third-mobile {\n      flex: none;\n      width: 33.3333%; }\n    .column.is-one-quarter-mobile {\n      flex: none;\n      width: 25%; }\n    .column.is-one-fifth-mobile {\n      flex: none;\n      width: 20%; }\n    .column.is-two-fifths-mobile {\n      flex: none;\n      width: 40%; }\n    .column.is-three-fifths-mobile {\n      flex: none;\n      width: 60%; }\n    .column.is-four-fifths-mobile {\n      flex: none;\n      width: 80%; }\n    .column.is-offset-three-quarters-mobile {\n      margin-left: 75%; }\n    .column.is-offset-two-thirds-mobile {\n      margin-left: 66.6666%; }\n    .column.is-offset-half-mobile {\n      margin-left: 50%; }\n    .column.is-offset-one-third-mobile {\n      margin-left: 33.3333%; }\n    .column.is-offset-one-quarter-mobile {\n      margin-left: 25%; }\n    .column.is-offset-one-fifth-mobile {\n      margin-left: 20%; }\n    .column.is-offset-two-fifths-mobile {\n      margin-left: 40%; }\n    .column.is-offset-three-fifths-mobile {\n      margin-left: 60%; }\n    .column.is-offset-four-fifths-mobile {\n      margin-left: 80%; }\n    .column.is-0-mobile {\n      flex: none;\n      width: 0%; }\n    .column.is-offset-0-mobile {\n      margin-left: 0%; }\n    .column.is-1-mobile {\n      flex: none;\n      width: 8.33333%; }\n    .column.is-offset-1-mobile {\n      margin-left: 8.33333%; }\n    .column.is-2-mobile {\n      flex: none;\n      width: 16.66667%; }\n    .column.is-offset-2-mobile {\n      margin-left: 16.66667%; }\n    .column.is-3-mobile {\n      flex: none;\n      width: 25%; }\n    .column.is-offset-3-mobile {\n      margin-left: 25%; }\n    .column.is-4-mobile {\n      flex: none;\n      width: 33.33333%; }\n    .column.is-offset-4-mobile {\n      margin-left: 33.33333%; }\n    .column.is-5-mobile {\n      flex: none;\n      width: 41.66667%; }\n    .column.is-offset-5-mobile {\n      margin-left: 41.66667%; }\n    .column.is-6-mobile {\n      flex: none;\n      width: 50%; }\n    .column.is-offset-6-mobile {\n      margin-left: 50%; }\n    .column.is-7-mobile {\n      flex: none;\n      width: 58.33333%; }\n    .column.is-offset-7-mobile {\n      margin-left: 58.33333%; }\n    .column.is-8-mobile {\n      flex: none;\n      width: 66.66667%; }\n    .column.is-offset-8-mobile {\n      margin-left: 66.66667%; }\n    .column.is-9-mobile {\n      flex: none;\n      width: 75%; }\n    .column.is-offset-9-mobile {\n      margin-left: 75%; }\n    .column.is-10-mobile {\n      flex: none;\n      width: 83.33333%; }\n    .column.is-offset-10-mobile {\n      margin-left: 83.33333%; }\n    .column.is-11-mobile {\n      flex: none;\n      width: 91.66667%; }\n    .column.is-offset-11-mobile {\n      margin-left: 91.66667%; }\n    .column.is-12-mobile {\n      flex: none;\n      width: 100%; }\n    .column.is-offset-12-mobile {\n      margin-left: 100%; } }\n  @media screen and (min-width: 769px), print {\n    .column.is-narrow, .column.is-narrow-tablet {\n      flex: none; }\n    .column.is-full, .column.is-full-tablet {\n      flex: none;\n      width: 100%; }\n    .column.is-three-quarters, .column.is-three-quarters-tablet {\n      flex: none;\n      width: 75%; }\n    .column.is-two-thirds, .column.is-two-thirds-tablet {\n      flex: none;\n      width: 66.6666%; }\n    .column.is-half, .column.is-half-tablet {\n      flex: none;\n      width: 50%; }\n    .column.is-one-third, .column.is-one-third-tablet {\n      flex: none;\n      width: 33.3333%; }\n    .column.is-one-quarter, .column.is-one-quarter-tablet {\n      flex: none;\n      width: 25%; }\n    .column.is-one-fifth, .column.is-one-fifth-tablet {\n      flex: none;\n      width: 20%; }\n    .column.is-two-fifths, .column.is-two-fifths-tablet {\n      flex: none;\n      width: 40%; }\n    .column.is-three-fifths, .column.is-three-fifths-tablet {\n      flex: none;\n      width: 60%; }\n    .column.is-four-fifths, .column.is-four-fifths-tablet {\n      flex: none;\n      width: 80%; }\n    .column.is-offset-three-quarters, .column.is-offset-three-quarters-tablet {\n      margin-left: 75%; }\n    .column.is-offset-two-thirds, .column.is-offset-two-thirds-tablet {\n      margin-left: 66.6666%; }\n    .column.is-offset-half, .column.is-offset-half-tablet {\n      margin-left: 50%; }\n    .column.is-offset-one-third, .column.is-offset-one-third-tablet {\n      margin-left: 33.3333%; }\n    .column.is-offset-one-quarter, .column.is-offset-one-quarter-tablet {\n      margin-left: 25%; }\n    .column.is-offset-one-fifth, .column.is-offset-one-fifth-tablet {\n      margin-left: 20%; }\n    .column.is-offset-two-fifths, .column.is-offset-two-fifths-tablet {\n      margin-left: 40%; }\n    .column.is-offset-three-fifths, .column.is-offset-three-fifths-tablet {\n      margin-left: 60%; }\n    .column.is-offset-four-fifths, .column.is-offset-four-fifths-tablet {\n      margin-left: 80%; }\n    .column.is-0, .column.is-0-tablet {\n      flex: none;\n      width: 0%; }\n    .column.is-offset-0, .column.is-offset-0-tablet {\n      margin-left: 0%; }\n    .column.is-1, .column.is-1-tablet {\n      flex: none;\n      width: 8.33333%; }\n    .column.is-offset-1, .column.is-offset-1-tablet {\n      margin-left: 8.33333%; }\n    .column.is-2, .column.is-2-tablet {\n      flex: none;\n      width: 16.66667%; }\n    .column.is-offset-2, .column.is-offset-2-tablet {\n      margin-left: 16.66667%; }\n    .column.is-3, .column.is-3-tablet {\n      flex: none;\n      width: 25%; }\n    .column.is-offset-3, .column.is-offset-3-tablet {\n      margin-left: 25%; }\n    .column.is-4, .column.is-4-tablet {\n      flex: none;\n      width: 33.33333%; }\n    .column.is-offset-4, .column.is-offset-4-tablet {\n      margin-left: 33.33333%; }\n    .column.is-5, .column.is-5-tablet {\n      flex: none;\n      width: 41.66667%; }\n    .column.is-offset-5, .column.is-offset-5-tablet {\n      margin-left: 41.66667%; }\n    .column.is-6, .column.is-6-tablet {\n      flex: none;\n      width: 50%; }\n    .column.is-offset-6, .column.is-offset-6-tablet {\n      margin-left: 50%; }\n    .column.is-7, .column.is-7-tablet {\n      flex: none;\n      width: 58.33333%; }\n    .column.is-offset-7, .column.is-offset-7-tablet {\n      margin-left: 58.33333%; }\n    .column.is-8, .column.is-8-tablet {\n      flex: none;\n      width: 66.66667%; }\n    .column.is-offset-8, .column.is-offset-8-tablet {\n      margin-left: 66.66667%; }\n    .column.is-9, .column.is-9-tablet {\n      flex: none;\n      width: 75%; }\n    .column.is-offset-9, .column.is-offset-9-tablet {\n      margin-left: 75%; }\n    .column.is-10, .column.is-10-tablet {\n      flex: none;\n      width: 83.33333%; }\n    .column.is-offset-10, .column.is-offset-10-tablet {\n      margin-left: 83.33333%; }\n    .column.is-11, .column.is-11-tablet {\n      flex: none;\n      width: 91.66667%; }\n    .column.is-offset-11, .column.is-offset-11-tablet {\n      margin-left: 91.66667%; }\n    .column.is-12, .column.is-12-tablet {\n      flex: none;\n      width: 100%; }\n    .column.is-offset-12, .column.is-offset-12-tablet {\n      margin-left: 100%; } }\n  @media screen and (max-width: 1023px) {\n    .column.is-narrow-touch {\n      flex: none; }\n    .column.is-full-touch {\n      flex: none;\n      width: 100%; }\n    .column.is-three-quarters-touch {\n      flex: none;\n      width: 75%; }\n    .column.is-two-thirds-touch {\n      flex: none;\n      width: 66.6666%; }\n    .column.is-half-touch {\n      flex: none;\n      width: 50%; }\n    .column.is-one-third-touch {\n      flex: none;\n      width: 33.3333%; }\n    .column.is-one-quarter-touch {\n      flex: none;\n      width: 25%; }\n    .column.is-one-fifth-touch {\n      flex: none;\n      width: 20%; }\n    .column.is-two-fifths-touch {\n      flex: none;\n      width: 40%; }\n    .column.is-three-fifths-touch {\n      flex: none;\n      width: 60%; }\n    .column.is-four-fifths-touch {\n      flex: none;\n      width: 80%; }\n    .column.is-offset-three-quarters-touch {\n      margin-left: 75%; }\n    .column.is-offset-two-thirds-touch {\n      margin-left: 66.6666%; }\n    .column.is-offset-half-touch {\n      margin-left: 50%; }\n    .column.is-offset-one-third-touch {\n      margin-left: 33.3333%; }\n    .column.is-offset-one-quarter-touch {\n      margin-left: 25%; }\n    .column.is-offset-one-fifth-touch {\n      margin-left: 20%; }\n    .column.is-offset-two-fifths-touch {\n      margin-left: 40%; }\n    .column.is-offset-three-fifths-touch {\n      margin-left: 60%; }\n    .column.is-offset-four-fifths-touch {\n      margin-left: 80%; }\n    .column.is-0-touch {\n      flex: none;\n      width: 0%; }\n    .column.is-offset-0-touch {\n      margin-left: 0%; }\n    .column.is-1-touch {\n      flex: none;\n      width: 8.33333%; }\n    .column.is-offset-1-touch {\n      margin-left: 8.33333%; }\n    .column.is-2-touch {\n      flex: none;\n      width: 16.66667%; }\n    .column.is-offset-2-touch {\n      margin-left: 16.66667%; }\n    .column.is-3-touch {\n      flex: none;\n      width: 25%; }\n    .column.is-offset-3-touch {\n      margin-left: 25%; }\n    .column.is-4-touch {\n      flex: none;\n      width: 33.33333%; }\n    .column.is-offset-4-touch {\n      margin-left: 33.33333%; }\n    .column.is-5-touch {\n      flex: none;\n      width: 41.66667%; }\n    .column.is-offset-5-touch {\n      margin-left: 41.66667%; }\n    .column.is-6-touch {\n      flex: none;\n      width: 50%; }\n    .column.is-offset-6-touch {\n      margin-left: 50%; }\n    .column.is-7-touch {\n      flex: none;\n      width: 58.33333%; }\n    .column.is-offset-7-touch {\n      margin-left: 58.33333%; }\n    .column.is-8-touch {\n      flex: none;\n      width: 66.66667%; }\n    .column.is-offset-8-touch {\n      margin-left: 66.66667%; }\n    .column.is-9-touch {\n      flex: none;\n      width: 75%; }\n    .column.is-offset-9-touch {\n      margin-left: 75%; }\n    .column.is-10-touch {\n      flex: none;\n      width: 83.33333%; }\n    .column.is-offset-10-touch {\n      margin-left: 83.33333%; }\n    .column.is-11-touch {\n      flex: none;\n      width: 91.66667%; }\n    .column.is-offset-11-touch {\n      margin-left: 91.66667%; }\n    .column.is-12-touch {\n      flex: none;\n      width: 100%; }\n    .column.is-offset-12-touch {\n      margin-left: 100%; } }\n  @media screen and (min-width: 1024px) {\n    .column.is-narrow-desktop {\n      flex: none; }\n    .column.is-full-desktop {\n      flex: none;\n      width: 100%; }\n    .column.is-three-quarters-desktop {\n      flex: none;\n      width: 75%; }\n    .column.is-two-thirds-desktop {\n      flex: none;\n      width: 66.6666%; }\n    .column.is-half-desktop {\n      flex: none;\n      width: 50%; }\n    .column.is-one-third-desktop {\n      flex: none;\n      width: 33.3333%; }\n    .column.is-one-quarter-desktop {\n      flex: none;\n      width: 25%; }\n    .column.is-one-fifth-desktop {\n      flex: none;\n      width: 20%; }\n    .column.is-two-fifths-desktop {\n      flex: none;\n      width: 40%; }\n    .column.is-three-fifths-desktop {\n      flex: none;\n      width: 60%; }\n    .column.is-four-fifths-desktop {\n      flex: none;\n      width: 80%; }\n    .column.is-offset-three-quarters-desktop {\n      margin-left: 75%; }\n    .column.is-offset-two-thirds-desktop {\n      margin-left: 66.6666%; }\n    .column.is-offset-half-desktop {\n      margin-left: 50%; }\n    .column.is-offset-one-third-desktop {\n      margin-left: 33.3333%; }\n    .column.is-offset-one-quarter-desktop {\n      margin-left: 25%; }\n    .column.is-offset-one-fifth-desktop {\n      margin-left: 20%; }\n    .column.is-offset-two-fifths-desktop {\n      margin-left: 40%; }\n    .column.is-offset-three-fifths-desktop {\n      margin-left: 60%; }\n    .column.is-offset-four-fifths-desktop {\n      margin-left: 80%; }\n    .column.is-0-desktop {\n      flex: none;\n      width: 0%; }\n    .column.is-offset-0-desktop {\n      margin-left: 0%; }\n    .column.is-1-desktop {\n      flex: none;\n      width: 8.33333%; }\n    .column.is-offset-1-desktop {\n      margin-left: 8.33333%; }\n    .column.is-2-desktop {\n      flex: none;\n      width: 16.66667%; }\n    .column.is-offset-2-desktop {\n      margin-left: 16.66667%; }\n    .column.is-3-desktop {\n      flex: none;\n      width: 25%; }\n    .column.is-offset-3-desktop {\n      margin-left: 25%; }\n    .column.is-4-desktop {\n      flex: none;\n      width: 33.33333%; }\n    .column.is-offset-4-desktop {\n      margin-left: 33.33333%; }\n    .column.is-5-desktop {\n      flex: none;\n      width: 41.66667%; }\n    .column.is-offset-5-desktop {\n      margin-left: 41.66667%; }\n    .column.is-6-desktop {\n      flex: none;\n      width: 50%; }\n    .column.is-offset-6-desktop {\n      margin-left: 50%; }\n    .column.is-7-desktop {\n      flex: none;\n      width: 58.33333%; }\n    .column.is-offset-7-desktop {\n      margin-left: 58.33333%; }\n    .column.is-8-desktop {\n      flex: none;\n      width: 66.66667%; }\n    .column.is-offset-8-desktop {\n      margin-left: 66.66667%; }\n    .column.is-9-desktop {\n      flex: none;\n      width: 75%; }\n    .column.is-offset-9-desktop {\n      margin-left: 75%; }\n    .column.is-10-desktop {\n      flex: none;\n      width: 83.33333%; }\n    .column.is-offset-10-desktop {\n      margin-left: 83.33333%; }\n    .column.is-11-desktop {\n      flex: none;\n      width: 91.66667%; }\n    .column.is-offset-11-desktop {\n      margin-left: 91.66667%; }\n    .column.is-12-desktop {\n      flex: none;\n      width: 100%; }\n    .column.is-offset-12-desktop {\n      margin-left: 100%; } }\n  @media screen and (min-width: 1216px) {\n    .column.is-narrow-widescreen {\n      flex: none; }\n    .column.is-full-widescreen {\n      flex: none;\n      width: 100%; }\n    .column.is-three-quarters-widescreen {\n      flex: none;\n      width: 75%; }\n    .column.is-two-thirds-widescreen {\n      flex: none;\n      width: 66.6666%; }\n    .column.is-half-widescreen {\n      flex: none;\n      width: 50%; }\n    .column.is-one-third-widescreen {\n      flex: none;\n      width: 33.3333%; }\n    .column.is-one-quarter-widescreen {\n      flex: none;\n      width: 25%; }\n    .column.is-one-fifth-widescreen {\n      flex: none;\n      width: 20%; }\n    .column.is-two-fifths-widescreen {\n      flex: none;\n      width: 40%; }\n    .column.is-three-fifths-widescreen {\n      flex: none;\n      width: 60%; }\n    .column.is-four-fifths-widescreen {\n      flex: none;\n      width: 80%; }\n    .column.is-offset-three-quarters-widescreen {\n      margin-left: 75%; }\n    .column.is-offset-two-thirds-widescreen {\n      margin-left: 66.6666%; }\n    .column.is-offset-half-widescreen {\n      margin-left: 50%; }\n    .column.is-offset-one-third-widescreen {\n      margin-left: 33.3333%; }\n    .column.is-offset-one-quarter-widescreen {\n      margin-left: 25%; }\n    .column.is-offset-one-fifth-widescreen {\n      margin-left: 20%; }\n    .column.is-offset-two-fifths-widescreen {\n      margin-left: 40%; }\n    .column.is-offset-three-fifths-widescreen {\n      margin-left: 60%; }\n    .column.is-offset-four-fifths-widescreen {\n      margin-left: 80%; }\n    .column.is-0-widescreen {\n      flex: none;\n      width: 0%; }\n    .column.is-offset-0-widescreen {\n      margin-left: 0%; }\n    .column.is-1-widescreen {\n      flex: none;\n      width: 8.33333%; }\n    .column.is-offset-1-widescreen {\n      margin-left: 8.33333%; }\n    .column.is-2-widescreen {\n      flex: none;\n      width: 16.66667%; }\n    .column.is-offset-2-widescreen {\n      margin-left: 16.66667%; }\n    .column.is-3-widescreen {\n      flex: none;\n      width: 25%; }\n    .column.is-offset-3-widescreen {\n      margin-left: 25%; }\n    .column.is-4-widescreen {\n      flex: none;\n      width: 33.33333%; }\n    .column.is-offset-4-widescreen {\n      margin-left: 33.33333%; }\n    .column.is-5-widescreen {\n      flex: none;\n      width: 41.66667%; }\n    .column.is-offset-5-widescreen {\n      margin-left: 41.66667%; }\n    .column.is-6-widescreen {\n      flex: none;\n      width: 50%; }\n    .column.is-offset-6-widescreen {\n      margin-left: 50%; }\n    .column.is-7-widescreen {\n      flex: none;\n      width: 58.33333%; }\n    .column.is-offset-7-widescreen {\n      margin-left: 58.33333%; }\n    .column.is-8-widescreen {\n      flex: none;\n      width: 66.66667%; }\n    .column.is-offset-8-widescreen {\n      margin-left: 66.66667%; }\n    .column.is-9-widescreen {\n      flex: none;\n      width: 75%; }\n    .column.is-offset-9-widescreen {\n      margin-left: 75%; }\n    .column.is-10-widescreen {\n      flex: none;\n      width: 83.33333%; }\n    .column.is-offset-10-widescreen {\n      margin-left: 83.33333%; }\n    .column.is-11-widescreen {\n      flex: none;\n      width: 91.66667%; }\n    .column.is-offset-11-widescreen {\n      margin-left: 91.66667%; }\n    .column.is-12-widescreen {\n      flex: none;\n      width: 100%; }\n    .column.is-offset-12-widescreen {\n      margin-left: 100%; } }\n  @media screen and (min-width: 1408px) {\n    .column.is-narrow-fullhd {\n      flex: none; }\n    .column.is-full-fullhd {\n      flex: none;\n      width: 100%; }\n    .column.is-three-quarters-fullhd {\n      flex: none;\n      width: 75%; }\n    .column.is-two-thirds-fullhd {\n      flex: none;\n      width: 66.6666%; }\n    .column.is-half-fullhd {\n      flex: none;\n      width: 50%; }\n    .column.is-one-third-fullhd {\n      flex: none;\n      width: 33.3333%; }\n    .column.is-one-quarter-fullhd {\n      flex: none;\n      width: 25%; }\n    .column.is-one-fifth-fullhd {\n      flex: none;\n      width: 20%; }\n    .column.is-two-fifths-fullhd {\n      flex: none;\n      width: 40%; }\n    .column.is-three-fifths-fullhd {\n      flex: none;\n      width: 60%; }\n    .column.is-four-fifths-fullhd {\n      flex: none;\n      width: 80%; }\n    .column.is-offset-three-quarters-fullhd {\n      margin-left: 75%; }\n    .column.is-offset-two-thirds-fullhd {\n      margin-left: 66.6666%; }\n    .column.is-offset-half-fullhd {\n      margin-left: 50%; }\n    .column.is-offset-one-third-fullhd {\n      margin-left: 33.3333%; }\n    .column.is-offset-one-quarter-fullhd {\n      margin-left: 25%; }\n    .column.is-offset-one-fifth-fullhd {\n      margin-left: 20%; }\n    .column.is-offset-two-fifths-fullhd {\n      margin-left: 40%; }\n    .column.is-offset-three-fifths-fullhd {\n      margin-left: 60%; }\n    .column.is-offset-four-fifths-fullhd {\n      margin-left: 80%; }\n    .column.is-0-fullhd {\n      flex: none;\n      width: 0%; }\n    .column.is-offset-0-fullhd {\n      margin-left: 0%; }\n    .column.is-1-fullhd {\n      flex: none;\n      width: 8.33333%; }\n    .column.is-offset-1-fullhd {\n      margin-left: 8.33333%; }\n    .column.is-2-fullhd {\n      flex: none;\n      width: 16.66667%; }\n    .column.is-offset-2-fullhd {\n      margin-left: 16.66667%; }\n    .column.is-3-fullhd {\n      flex: none;\n      width: 25%; }\n    .column.is-offset-3-fullhd {\n      margin-left: 25%; }\n    .column.is-4-fullhd {\n      flex: none;\n      width: 33.33333%; }\n    .column.is-offset-4-fullhd {\n      margin-left: 33.33333%; }\n    .column.is-5-fullhd {\n      flex: none;\n      width: 41.66667%; }\n    .column.is-offset-5-fullhd {\n      margin-left: 41.66667%; }\n    .column.is-6-fullhd {\n      flex: none;\n      width: 50%; }\n    .column.is-offset-6-fullhd {\n      margin-left: 50%; }\n    .column.is-7-fullhd {\n      flex: none;\n      width: 58.33333%; }\n    .column.is-offset-7-fullhd {\n      margin-left: 58.33333%; }\n    .column.is-8-fullhd {\n      flex: none;\n      width: 66.66667%; }\n    .column.is-offset-8-fullhd {\n      margin-left: 66.66667%; }\n    .column.is-9-fullhd {\n      flex: none;\n      width: 75%; }\n    .column.is-offset-9-fullhd {\n      margin-left: 75%; }\n    .column.is-10-fullhd {\n      flex: none;\n      width: 83.33333%; }\n    .column.is-offset-10-fullhd {\n      margin-left: 83.33333%; }\n    .column.is-11-fullhd {\n      flex: none;\n      width: 91.66667%; }\n    .column.is-offset-11-fullhd {\n      margin-left: 91.66667%; }\n    .column.is-12-fullhd {\n      flex: none;\n      width: 100%; }\n    .column.is-offset-12-fullhd {\n      margin-left: 100%; } }\n\n.columns {\n  margin-left: -0.75rem;\n  margin-right: -0.75rem;\n  margin-top: -0.75rem; }\n  .columns:last-child {\n    margin-bottom: -0.75rem; }\n  .columns:not(:last-child) {\n    margin-bottom: calc(1.5rem - 0.75rem); }\n  .columns.is-centered {\n    justify-content: center; }\n  .columns.is-gapless {\n    margin-left: 0;\n    margin-right: 0;\n    margin-top: 0; }\n    .columns.is-gapless > .column {\n      margin: 0;\n      padding: 0 !important; }\n    .columns.is-gapless:not(:last-child) {\n      margin-bottom: 1.5rem; }\n    .columns.is-gapless:last-child {\n      margin-bottom: 0; }\n  .columns.is-mobile {\n    display: flex; }\n  .columns.is-multiline {\n    flex-wrap: wrap; }\n  .columns.is-vcentered {\n    align-items: center; }\n  @media screen and (min-width: 769px), print {\n    .columns:not(.is-desktop) {\n      display: flex; } }\n  @media screen and (min-width: 1024px) {\n    .columns.is-desktop {\n      display: flex; } }\n\n.columns.is-variable {\n  --columnGap: 0.75rem;\n  margin-left: calc(-1 * var(--columnGap));\n  margin-right: calc(-1 * var(--columnGap)); }\n  .columns.is-variable .column {\n    padding-left: var(--columnGap);\n    padding-right: var(--columnGap); }\n  .columns.is-variable.is-0 {\n    --columnGap: 0rem; }\n  @media screen and (max-width: 768px) {\n    .columns.is-variable.is-0-mobile {\n      --columnGap: 0rem; } }\n  @media screen and (min-width: 769px), print {\n    .columns.is-variable.is-0-tablet {\n      --columnGap: 0rem; } }\n  @media screen and (min-width: 769px) and (max-width: 1023px) {\n    .columns.is-variable.is-0-tablet-only {\n      --columnGap: 0rem; } }\n  @media screen and (max-width: 1023px) {\n    .columns.is-variable.is-0-touch {\n      --columnGap: 0rem; } }\n  @media screen and (min-width: 1024px) {\n    .columns.is-variable.is-0-desktop {\n      --columnGap: 0rem; } }\n  @media screen and (min-width: 1024px) and (max-width: 1215px) {\n    .columns.is-variable.is-0-desktop-only {\n      --columnGap: 0rem; } }\n  @media screen and (min-width: 1216px) {\n    .columns.is-variable.is-0-widescreen {\n      --columnGap: 0rem; } }\n  @media screen and (min-width: 1216px) and (max-width: 1407px) {\n    .columns.is-variable.is-0-widescreen-only {\n      --columnGap: 0rem; } }\n  @media screen and (min-width: 1408px) {\n    .columns.is-variable.is-0-fullhd {\n      --columnGap: 0rem; } }\n  .columns.is-variable.is-1 {\n    --columnGap: 0.25rem; }\n  @media screen and (max-width: 768px) {\n    .columns.is-variable.is-1-mobile {\n      --columnGap: 0.25rem; } }\n  @media screen and (min-width: 769px), print {\n    .columns.is-variable.is-1-tablet {\n      --columnGap: 0.25rem; } }\n  @media screen and (min-width: 769px) and (max-width: 1023px) {\n    .columns.is-variable.is-1-tablet-only {\n      --columnGap: 0.25rem; } }\n  @media screen and (max-width: 1023px) {\n    .columns.is-variable.is-1-touch {\n      --columnGap: 0.25rem; } }\n  @media screen and (min-width: 1024px) {\n    .columns.is-variable.is-1-desktop {\n      --columnGap: 0.25rem; } }\n  @media screen and (min-width: 1024px) and (max-width: 1215px) {\n    .columns.is-variable.is-1-desktop-only {\n      --columnGap: 0.25rem; } }\n  @media screen and (min-width: 1216px) {\n    .columns.is-variable.is-1-widescreen {\n      --columnGap: 0.25rem; } }\n  @media screen and (min-width: 1216px) and (max-width: 1407px) {\n    .columns.is-variable.is-1-widescreen-only {\n      --columnGap: 0.25rem; } }\n  @media screen and (min-width: 1408px) {\n    .columns.is-variable.is-1-fullhd {\n      --columnGap: 0.25rem; } }\n  .columns.is-variable.is-2 {\n    --columnGap: 0.5rem; }\n  @media screen and (max-width: 768px) {\n    .columns.is-variable.is-2-mobile {\n      --columnGap: 0.5rem; } }\n  @media screen and (min-width: 769px), print {\n    .columns.is-variable.is-2-tablet {\n      --columnGap: 0.5rem; } }\n  @media screen and (min-width: 769px) and (max-width: 1023px) {\n    .columns.is-variable.is-2-tablet-only {\n      --columnGap: 0.5rem; } }\n  @media screen and (max-width: 1023px) {\n    .columns.is-variable.is-2-touch {\n      --columnGap: 0.5rem; } }\n  @media screen and (min-width: 1024px) {\n    .columns.is-variable.is-2-desktop {\n      --columnGap: 0.5rem; } }\n  @media screen and (min-width: 1024px) and (max-width: 1215px) {\n    .columns.is-variable.is-2-desktop-only {\n      --columnGap: 0.5rem; } }\n  @media screen and (min-width: 1216px) {\n    .columns.is-variable.is-2-widescreen {\n      --columnGap: 0.5rem; } }\n  @media screen and (min-width: 1216px) and (max-width: 1407px) {\n    .columns.is-variable.is-2-widescreen-only {\n      --columnGap: 0.5rem; } }\n  @media screen and (min-width: 1408px) {\n    .columns.is-variable.is-2-fullhd {\n      --columnGap: 0.5rem; } }\n  .columns.is-variable.is-3 {\n    --columnGap: 0.75rem; }\n  @media screen and (max-width: 768px) {\n    .columns.is-variable.is-3-mobile {\n      --columnGap: 0.75rem; } }\n  @media screen and (min-width: 769px), print {\n    .columns.is-variable.is-3-tablet {\n      --columnGap: 0.75rem; } }\n  @media screen and (min-width: 769px) and (max-width: 1023px) {\n    .columns.is-variable.is-3-tablet-only {\n      --columnGap: 0.75rem; } }\n  @media screen and (max-width: 1023px) {\n    .columns.is-variable.is-3-touch {\n      --columnGap: 0.75rem; } }\n  @media screen and (min-width: 1024px) {\n    .columns.is-variable.is-3-desktop {\n      --columnGap: 0.75rem; } }\n  @media screen and (min-width: 1024px) and (max-width: 1215px) {\n    .columns.is-variable.is-3-desktop-only {\n      --columnGap: 0.75rem; } }\n  @media screen and (min-width: 1216px) {\n    .columns.is-variable.is-3-widescreen {\n      --columnGap: 0.75rem; } }\n  @media screen and (min-width: 1216px) and (max-width: 1407px) {\n    .columns.is-variable.is-3-widescreen-only {\n      --columnGap: 0.75rem; } }\n  @media screen and (min-width: 1408px) {\n    .columns.is-variable.is-3-fullhd {\n      --columnGap: 0.75rem; } }\n  .columns.is-variable.is-4 {\n    --columnGap: 1rem; }\n  @media screen and (max-width: 768px) {\n    .columns.is-variable.is-4-mobile {\n      --columnGap: 1rem; } }\n  @media screen and (min-width: 769px), print {\n    .columns.is-variable.is-4-tablet {\n      --columnGap: 1rem; } }\n  @media screen and (min-width: 769px) and (max-width: 1023px) {\n    .columns.is-variable.is-4-tablet-only {\n      --columnGap: 1rem; } }\n  @media screen and (max-width: 1023px) {\n    .columns.is-variable.is-4-touch {\n      --columnGap: 1rem; } }\n  @media screen and (min-width: 1024px) {\n    .columns.is-variable.is-4-desktop {\n      --columnGap: 1rem; } }\n  @media screen and (min-width: 1024px) and (max-width: 1215px) {\n    .columns.is-variable.is-4-desktop-only {\n      --columnGap: 1rem; } }\n  @media screen and (min-width: 1216px) {\n    .columns.is-variable.is-4-widescreen {\n      --columnGap: 1rem; } }\n  @media screen and (min-width: 1216px) and (max-width: 1407px) {\n    .columns.is-variable.is-4-widescreen-only {\n      --columnGap: 1rem; } }\n  @media screen and (min-width: 1408px) {\n    .columns.is-variable.is-4-fullhd {\n      --columnGap: 1rem; } }\n  .columns.is-variable.is-5 {\n    --columnGap: 1.25rem; }\n  @media screen and (max-width: 768px) {\n    .columns.is-variable.is-5-mobile {\n      --columnGap: 1.25rem; } }\n  @media screen and (min-width: 769px), print {\n    .columns.is-variable.is-5-tablet {\n      --columnGap: 1.25rem; } }\n  @media screen and (min-width: 769px) and (max-width: 1023px) {\n    .columns.is-variable.is-5-tablet-only {\n      --columnGap: 1.25rem; } }\n  @media screen and (max-width: 1023px) {\n    .columns.is-variable.is-5-touch {\n      --columnGap: 1.25rem; } }\n  @media screen and (min-width: 1024px) {\n    .columns.is-variable.is-5-desktop {\n      --columnGap: 1.25rem; } }\n  @media screen and (min-width: 1024px) and (max-width: 1215px) {\n    .columns.is-variable.is-5-desktop-only {\n      --columnGap: 1.25rem; } }\n  @media screen and (min-width: 1216px) {\n    .columns.is-variable.is-5-widescreen {\n      --columnGap: 1.25rem; } }\n  @media screen and (min-width: 1216px) and (max-width: 1407px) {\n    .columns.is-variable.is-5-widescreen-only {\n      --columnGap: 1.25rem; } }\n  @media screen and (min-width: 1408px) {\n    .columns.is-variable.is-5-fullhd {\n      --columnGap: 1.25rem; } }\n  .columns.is-variable.is-6 {\n    --columnGap: 1.5rem; }\n  @media screen and (max-width: 768px) {\n    .columns.is-variable.is-6-mobile {\n      --columnGap: 1.5rem; } }\n  @media screen and (min-width: 769px), print {\n    .columns.is-variable.is-6-tablet {\n      --columnGap: 1.5rem; } }\n  @media screen and (min-width: 769px) and (max-width: 1023px) {\n    .columns.is-variable.is-6-tablet-only {\n      --columnGap: 1.5rem; } }\n  @media screen and (max-width: 1023px) {\n    .columns.is-variable.is-6-touch {\n      --columnGap: 1.5rem; } }\n  @media screen and (min-width: 1024px) {\n    .columns.is-variable.is-6-desktop {\n      --columnGap: 1.5rem; } }\n  @media screen and (min-width: 1024px) and (max-width: 1215px) {\n    .columns.is-variable.is-6-desktop-only {\n      --columnGap: 1.5rem; } }\n  @media screen and (min-width: 1216px) {\n    .columns.is-variable.is-6-widescreen {\n      --columnGap: 1.5rem; } }\n  @media screen and (min-width: 1216px) and (max-width: 1407px) {\n    .columns.is-variable.is-6-widescreen-only {\n      --columnGap: 1.5rem; } }\n  @media screen and (min-width: 1408px) {\n    .columns.is-variable.is-6-fullhd {\n      --columnGap: 1.5rem; } }\n  .columns.is-variable.is-7 {\n    --columnGap: 1.75rem; }\n  @media screen and (max-width: 768px) {\n    .columns.is-variable.is-7-mobile {\n      --columnGap: 1.75rem; } }\n  @media screen and (min-width: 769px), print {\n    .columns.is-variable.is-7-tablet {\n      --columnGap: 1.75rem; } }\n  @media screen and (min-width: 769px) and (max-width: 1023px) {\n    .columns.is-variable.is-7-tablet-only {\n      --columnGap: 1.75rem; } }\n  @media screen and (max-width: 1023px) {\n    .columns.is-variable.is-7-touch {\n      --columnGap: 1.75rem; } }\n  @media screen and (min-width: 1024px) {\n    .columns.is-variable.is-7-desktop {\n      --columnGap: 1.75rem; } }\n  @media screen and (min-width: 1024px) and (max-width: 1215px) {\n    .columns.is-variable.is-7-desktop-only {\n      --columnGap: 1.75rem; } }\n  @media screen and (min-width: 1216px) {\n    .columns.is-variable.is-7-widescreen {\n      --columnGap: 1.75rem; } }\n  @media screen and (min-width: 1216px) and (max-width: 1407px) {\n    .columns.is-variable.is-7-widescreen-only {\n      --columnGap: 1.75rem; } }\n  @media screen and (min-width: 1408px) {\n    .columns.is-variable.is-7-fullhd {\n      --columnGap: 1.75rem; } }\n  .columns.is-variable.is-8 {\n    --columnGap: 2rem; }\n  @media screen and (max-width: 768px) {\n    .columns.is-variable.is-8-mobile {\n      --columnGap: 2rem; } }\n  @media screen and (min-width: 769px), print {\n    .columns.is-variable.is-8-tablet {\n      --columnGap: 2rem; } }\n  @media screen and (min-width: 769px) and (max-width: 1023px) {\n    .columns.is-variable.is-8-tablet-only {\n      --columnGap: 2rem; } }\n  @media screen and (max-width: 1023px) {\n    .columns.is-variable.is-8-touch {\n      --columnGap: 2rem; } }\n  @media screen and (min-width: 1024px) {\n    .columns.is-variable.is-8-desktop {\n      --columnGap: 2rem; } }\n  @media screen and (min-width: 1024px) and (max-width: 1215px) {\n    .columns.is-variable.is-8-desktop-only {\n      --columnGap: 2rem; } }\n  @media screen and (min-width: 1216px) {\n    .columns.is-variable.is-8-widescreen {\n      --columnGap: 2rem; } }\n  @media screen and (min-width: 1216px) and (max-width: 1407px) {\n    .columns.is-variable.is-8-widescreen-only {\n      --columnGap: 2rem; } }\n  @media screen and (min-width: 1408px) {\n    .columns.is-variable.is-8-fullhd {\n      --columnGap: 2rem; } }\n\n.tile {\n  align-items: stretch;\n  display: block;\n  flex-basis: 0;\n  flex-grow: 1;\n  flex-shrink: 1;\n  min-height: min-content; }\n  .tile.is-ancestor {\n    margin-left: -0.75rem;\n    margin-right: -0.75rem;\n    margin-top: -0.75rem; }\n    .tile.is-ancestor:last-child {\n      margin-bottom: -0.75rem; }\n    .tile.is-ancestor:not(:last-child) {\n      margin-bottom: 0.75rem; }\n  .tile.is-child {\n    margin: 0 !important; }\n  .tile.is-parent {\n    padding: 0.75rem; }\n  .tile.is-vertical {\n    flex-direction: column; }\n    .tile.is-vertical > .tile.is-child:not(:last-child) {\n      margin-bottom: 1.5rem !important; }\n  @media screen and (min-width: 769px), print {\n    .tile:not(.is-child) {\n      display: flex; }\n    .tile.is-1 {\n      flex: none;\n      width: 8.33333%; }\n    .tile.is-2 {\n      flex: none;\n      width: 16.66667%; }\n    .tile.is-3 {\n      flex: none;\n      width: 25%; }\n    .tile.is-4 {\n      flex: none;\n      width: 33.33333%; }\n    .tile.is-5 {\n      flex: none;\n      width: 41.66667%; }\n    .tile.is-6 {\n      flex: none;\n      width: 50%; }\n    .tile.is-7 {\n      flex: none;\n      width: 58.33333%; }\n    .tile.is-8 {\n      flex: none;\n      width: 66.66667%; }\n    .tile.is-9 {\n      flex: none;\n      width: 75%; }\n    .tile.is-10 {\n      flex: none;\n      width: 83.33333%; }\n    .tile.is-11 {\n      flex: none;\n      width: 91.66667%; }\n    .tile.is-12 {\n      flex: none;\n      width: 100%; } }\n\n.hero {\n  align-items: stretch;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between; }\n  .hero .navbar {\n    background: none; }\n  .hero .tabs ul {\n    border-bottom: none; }\n  .hero.is-white {\n    background-color: white;\n    color: #0a0a0a; }\n    .hero.is-white a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n    .hero.is-white strong {\n      color: inherit; }\n    .hero.is-white .title {\n      color: #0a0a0a; }\n    .hero.is-white .subtitle {\n      color: rgba(10, 10, 10, 0.9); }\n      .hero.is-white .subtitle a:not(.button),\n      .hero.is-white .subtitle strong {\n        color: #0a0a0a; }\n    @media screen and (max-width: 1023px) {\n      .hero.is-white .navbar-menu {\n        background-color: white; } }\n    .hero.is-white .navbar-item,\n    .hero.is-white .navbar-link {\n      color: rgba(10, 10, 10, 0.7); }\n    .hero.is-white a.navbar-item:hover, .hero.is-white a.navbar-item.is-active,\n    .hero.is-white .navbar-link:hover,\n    .hero.is-white .navbar-link.is-active {\n      background-color: #f2f2f2;\n      color: #0a0a0a; }\n    .hero.is-white .tabs a {\n      color: #0a0a0a;\n      opacity: 0.9; }\n      .hero.is-white .tabs a:hover {\n        opacity: 1; }\n    .hero.is-white .tabs li.is-active a {\n      opacity: 1; }\n    .hero.is-white .tabs.is-boxed a, .hero.is-white .tabs.is-toggle a {\n      color: #0a0a0a; }\n      .hero.is-white .tabs.is-boxed a:hover, .hero.is-white .tabs.is-toggle a:hover {\n        background-color: rgba(10, 10, 10, 0.1); }\n    .hero.is-white .tabs.is-boxed li.is-active a, .hero.is-white .tabs.is-boxed li.is-active a:hover, .hero.is-white .tabs.is-toggle li.is-active a, .hero.is-white .tabs.is-toggle li.is-active a:hover {\n      background-color: #0a0a0a;\n      border-color: #0a0a0a;\n      color: white; }\n    .hero.is-white.is-bold {\n      background-image: linear-gradient(141deg, #e6e6e6 0%, white 71%, white 100%); }\n      @media screen and (max-width: 768px) {\n        .hero.is-white.is-bold .navbar-menu {\n          background-image: linear-gradient(141deg, #e6e6e6 0%, white 71%, white 100%); } }\n  .hero.is-black {\n    background-color: #0a0a0a;\n    color: white; }\n    .hero.is-black a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n    .hero.is-black strong {\n      color: inherit; }\n    .hero.is-black .title {\n      color: white; }\n    .hero.is-black .subtitle {\n      color: rgba(255, 255, 255, 0.9); }\n      .hero.is-black .subtitle a:not(.button),\n      .hero.is-black .subtitle strong {\n        color: white; }\n    @media screen and (max-width: 1023px) {\n      .hero.is-black .navbar-menu {\n        background-color: #0a0a0a; } }\n    .hero.is-black .navbar-item,\n    .hero.is-black .navbar-link {\n      color: rgba(255, 255, 255, 0.7); }\n    .hero.is-black a.navbar-item:hover, .hero.is-black a.navbar-item.is-active,\n    .hero.is-black .navbar-link:hover,\n    .hero.is-black .navbar-link.is-active {\n      background-color: black;\n      color: white; }\n    .hero.is-black .tabs a {\n      color: white;\n      opacity: 0.9; }\n      .hero.is-black .tabs a:hover {\n        opacity: 1; }\n    .hero.is-black .tabs li.is-active a {\n      opacity: 1; }\n    .hero.is-black .tabs.is-boxed a, .hero.is-black .tabs.is-toggle a {\n      color: white; }\n      .hero.is-black .tabs.is-boxed a:hover, .hero.is-black .tabs.is-toggle a:hover {\n        background-color: rgba(10, 10, 10, 0.1); }\n    .hero.is-black .tabs.is-boxed li.is-active a, .hero.is-black .tabs.is-boxed li.is-active a:hover, .hero.is-black .tabs.is-toggle li.is-active a, .hero.is-black .tabs.is-toggle li.is-active a:hover {\n      background-color: white;\n      border-color: white;\n      color: #0a0a0a; }\n    .hero.is-black.is-bold {\n      background-image: linear-gradient(141deg, black 0%, #0a0a0a 71%, #181616 100%); }\n      @media screen and (max-width: 768px) {\n        .hero.is-black.is-bold .navbar-menu {\n          background-image: linear-gradient(141deg, black 0%, #0a0a0a 71%, #181616 100%); } }\n  .hero.is-light {\n    background-color: whitesmoke;\n    color: #363636; }\n    .hero.is-light a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n    .hero.is-light strong {\n      color: inherit; }\n    .hero.is-light .title {\n      color: #363636; }\n    .hero.is-light .subtitle {\n      color: rgba(54, 54, 54, 0.9); }\n      .hero.is-light .subtitle a:not(.button),\n      .hero.is-light .subtitle strong {\n        color: #363636; }\n    @media screen and (max-width: 1023px) {\n      .hero.is-light .navbar-menu {\n        background-color: whitesmoke; } }\n    .hero.is-light .navbar-item,\n    .hero.is-light .navbar-link {\n      color: rgba(54, 54, 54, 0.7); }\n    .hero.is-light a.navbar-item:hover, .hero.is-light a.navbar-item.is-active,\n    .hero.is-light .navbar-link:hover,\n    .hero.is-light .navbar-link.is-active {\n      background-color: #e8e8e8;\n      color: #363636; }\n    .hero.is-light .tabs a {\n      color: #363636;\n      opacity: 0.9; }\n      .hero.is-light .tabs a:hover {\n        opacity: 1; }\n    .hero.is-light .tabs li.is-active a {\n      opacity: 1; }\n    .hero.is-light .tabs.is-boxed a, .hero.is-light .tabs.is-toggle a {\n      color: #363636; }\n      .hero.is-light .tabs.is-boxed a:hover, .hero.is-light .tabs.is-toggle a:hover {\n        background-color: rgba(10, 10, 10, 0.1); }\n    .hero.is-light .tabs.is-boxed li.is-active a, .hero.is-light .tabs.is-boxed li.is-active a:hover, .hero.is-light .tabs.is-toggle li.is-active a, .hero.is-light .tabs.is-toggle li.is-active a:hover {\n      background-color: #363636;\n      border-color: #363636;\n      color: whitesmoke; }\n    .hero.is-light.is-bold {\n      background-image: linear-gradient(141deg, #dfd8d9 0%, whitesmoke 71%, white 100%); }\n      @media screen and (max-width: 768px) {\n        .hero.is-light.is-bold .navbar-menu {\n          background-image: linear-gradient(141deg, #dfd8d9 0%, whitesmoke 71%, white 100%); } }\n  .hero.is-dark {\n    background-color: #363636;\n    color: whitesmoke; }\n    .hero.is-dark a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n    .hero.is-dark strong {\n      color: inherit; }\n    .hero.is-dark .title {\n      color: whitesmoke; }\n    .hero.is-dark .subtitle {\n      color: rgba(245, 245, 245, 0.9); }\n      .hero.is-dark .subtitle a:not(.button),\n      .hero.is-dark .subtitle strong {\n        color: whitesmoke; }\n    @media screen and (max-width: 1023px) {\n      .hero.is-dark .navbar-menu {\n        background-color: #363636; } }\n    .hero.is-dark .navbar-item,\n    .hero.is-dark .navbar-link {\n      color: rgba(245, 245, 245, 0.7); }\n    .hero.is-dark a.navbar-item:hover, .hero.is-dark a.navbar-item.is-active,\n    .hero.is-dark .navbar-link:hover,\n    .hero.is-dark .navbar-link.is-active {\n      background-color: #292929;\n      color: whitesmoke; }\n    .hero.is-dark .tabs a {\n      color: whitesmoke;\n      opacity: 0.9; }\n      .hero.is-dark .tabs a:hover {\n        opacity: 1; }\n    .hero.is-dark .tabs li.is-active a {\n      opacity: 1; }\n    .hero.is-dark .tabs.is-boxed a, .hero.is-dark .tabs.is-toggle a {\n      color: whitesmoke; }\n      .hero.is-dark .tabs.is-boxed a:hover, .hero.is-dark .tabs.is-toggle a:hover {\n        background-color: rgba(10, 10, 10, 0.1); }\n    .hero.is-dark .tabs.is-boxed li.is-active a, .hero.is-dark .tabs.is-boxed li.is-active a:hover, .hero.is-dark .tabs.is-toggle li.is-active a, .hero.is-dark .tabs.is-toggle li.is-active a:hover {\n      background-color: whitesmoke;\n      border-color: whitesmoke;\n      color: #363636; }\n    .hero.is-dark.is-bold {\n      background-image: linear-gradient(141deg, #1f191a 0%, #363636 71%, #46403f 100%); }\n      @media screen and (max-width: 768px) {\n        .hero.is-dark.is-bold .navbar-menu {\n          background-image: linear-gradient(141deg, #1f191a 0%, #363636 71%, #46403f 100%); } }\n  .hero.is-primary {\n    background-color: #00d1b2;\n    color: #fff; }\n    .hero.is-primary a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n    .hero.is-primary strong {\n      color: inherit; }\n    .hero.is-primary .title {\n      color: #fff; }\n    .hero.is-primary .subtitle {\n      color: rgba(255, 255, 255, 0.9); }\n      .hero.is-primary .subtitle a:not(.button),\n      .hero.is-primary .subtitle strong {\n        color: #fff; }\n    @media screen and (max-width: 1023px) {\n      .hero.is-primary .navbar-menu {\n        background-color: #00d1b2; } }\n    .hero.is-primary .navbar-item,\n    .hero.is-primary .navbar-link {\n      color: rgba(255, 255, 255, 0.7); }\n    .hero.is-primary a.navbar-item:hover, .hero.is-primary a.navbar-item.is-active,\n    .hero.is-primary .navbar-link:hover,\n    .hero.is-primary .navbar-link.is-active {\n      background-color: #00b89c;\n      color: #fff; }\n    .hero.is-primary .tabs a {\n      color: #fff;\n      opacity: 0.9; }\n      .hero.is-primary .tabs a:hover {\n        opacity: 1; }\n    .hero.is-primary .tabs li.is-active a {\n      opacity: 1; }\n    .hero.is-primary .tabs.is-boxed a, .hero.is-primary .tabs.is-toggle a {\n      color: #fff; }\n      .hero.is-primary .tabs.is-boxed a:hover, .hero.is-primary .tabs.is-toggle a:hover {\n        background-color: rgba(10, 10, 10, 0.1); }\n    .hero.is-primary .tabs.is-boxed li.is-active a, .hero.is-primary .tabs.is-boxed li.is-active a:hover, .hero.is-primary .tabs.is-toggle li.is-active a, .hero.is-primary .tabs.is-toggle li.is-active a:hover {\n      background-color: #fff;\n      border-color: #fff;\n      color: #00d1b2; }\n    .hero.is-primary.is-bold {\n      background-image: linear-gradient(141deg, #009e6c 0%, #00d1b2 71%, #00e7eb 100%); }\n      @media screen and (max-width: 768px) {\n        .hero.is-primary.is-bold .navbar-menu {\n          background-image: linear-gradient(141deg, #009e6c 0%, #00d1b2 71%, #00e7eb 100%); } }\n  .hero.is-link {\n    background-color: #3273dc;\n    color: #fff; }\n    .hero.is-link a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n    .hero.is-link strong {\n      color: inherit; }\n    .hero.is-link .title {\n      color: #fff; }\n    .hero.is-link .subtitle {\n      color: rgba(255, 255, 255, 0.9); }\n      .hero.is-link .subtitle a:not(.button),\n      .hero.is-link .subtitle strong {\n        color: #fff; }\n    @media screen and (max-width: 1023px) {\n      .hero.is-link .navbar-menu {\n        background-color: #3273dc; } }\n    .hero.is-link .navbar-item,\n    .hero.is-link .navbar-link {\n      color: rgba(255, 255, 255, 0.7); }\n    .hero.is-link a.navbar-item:hover, .hero.is-link a.navbar-item.is-active,\n    .hero.is-link .navbar-link:hover,\n    .hero.is-link .navbar-link.is-active {\n      background-color: #2366d1;\n      color: #fff; }\n    .hero.is-link .tabs a {\n      color: #fff;\n      opacity: 0.9; }\n      .hero.is-link .tabs a:hover {\n        opacity: 1; }\n    .hero.is-link .tabs li.is-active a {\n      opacity: 1; }\n    .hero.is-link .tabs.is-boxed a, .hero.is-link .tabs.is-toggle a {\n      color: #fff; }\n      .hero.is-link .tabs.is-boxed a:hover, .hero.is-link .tabs.is-toggle a:hover {\n        background-color: rgba(10, 10, 10, 0.1); }\n    .hero.is-link .tabs.is-boxed li.is-active a, .hero.is-link .tabs.is-boxed li.is-active a:hover, .hero.is-link .tabs.is-toggle li.is-active a, .hero.is-link .tabs.is-toggle li.is-active a:hover {\n      background-color: #fff;\n      border-color: #fff;\n      color: #3273dc; }\n    .hero.is-link.is-bold {\n      background-image: linear-gradient(141deg, #1577c6 0%, #3273dc 71%, #4366e5 100%); }\n      @media screen and (max-width: 768px) {\n        .hero.is-link.is-bold .navbar-menu {\n          background-image: linear-gradient(141deg, #1577c6 0%, #3273dc 71%, #4366e5 100%); } }\n  .hero.is-info {\n    background-color: #209cee;\n    color: #fff; }\n    .hero.is-info a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n    .hero.is-info strong {\n      color: inherit; }\n    .hero.is-info .title {\n      color: #fff; }\n    .hero.is-info .subtitle {\n      color: rgba(255, 255, 255, 0.9); }\n      .hero.is-info .subtitle a:not(.button),\n      .hero.is-info .subtitle strong {\n        color: #fff; }\n    @media screen and (max-width: 1023px) {\n      .hero.is-info .navbar-menu {\n        background-color: #209cee; } }\n    .hero.is-info .navbar-item,\n    .hero.is-info .navbar-link {\n      color: rgba(255, 255, 255, 0.7); }\n    .hero.is-info a.navbar-item:hover, .hero.is-info a.navbar-item.is-active,\n    .hero.is-info .navbar-link:hover,\n    .hero.is-info .navbar-link.is-active {\n      background-color: #118fe4;\n      color: #fff; }\n    .hero.is-info .tabs a {\n      color: #fff;\n      opacity: 0.9; }\n      .hero.is-info .tabs a:hover {\n        opacity: 1; }\n    .hero.is-info .tabs li.is-active a {\n      opacity: 1; }\n    .hero.is-info .tabs.is-boxed a, .hero.is-info .tabs.is-toggle a {\n      color: #fff; }\n      .hero.is-info .tabs.is-boxed a:hover, .hero.is-info .tabs.is-toggle a:hover {\n        background-color: rgba(10, 10, 10, 0.1); }\n    .hero.is-info .tabs.is-boxed li.is-active a, .hero.is-info .tabs.is-boxed li.is-active a:hover, .hero.is-info .tabs.is-toggle li.is-active a, .hero.is-info .tabs.is-toggle li.is-active a:hover {\n      background-color: #fff;\n      border-color: #fff;\n      color: #209cee; }\n    .hero.is-info.is-bold {\n      background-image: linear-gradient(141deg, #04a6d7 0%, #209cee 71%, #3287f5 100%); }\n      @media screen and (max-width: 768px) {\n        .hero.is-info.is-bold .navbar-menu {\n          background-image: linear-gradient(141deg, #04a6d7 0%, #209cee 71%, #3287f5 100%); } }\n  .hero.is-success {\n    background-color: #23d160;\n    color: #fff; }\n    .hero.is-success a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n    .hero.is-success strong {\n      color: inherit; }\n    .hero.is-success .title {\n      color: #fff; }\n    .hero.is-success .subtitle {\n      color: rgba(255, 255, 255, 0.9); }\n      .hero.is-success .subtitle a:not(.button),\n      .hero.is-success .subtitle strong {\n        color: #fff; }\n    @media screen and (max-width: 1023px) {\n      .hero.is-success .navbar-menu {\n        background-color: #23d160; } }\n    .hero.is-success .navbar-item,\n    .hero.is-success .navbar-link {\n      color: rgba(255, 255, 255, 0.7); }\n    .hero.is-success a.navbar-item:hover, .hero.is-success a.navbar-item.is-active,\n    .hero.is-success .navbar-link:hover,\n    .hero.is-success .navbar-link.is-active {\n      background-color: #20bc56;\n      color: #fff; }\n    .hero.is-success .tabs a {\n      color: #fff;\n      opacity: 0.9; }\n      .hero.is-success .tabs a:hover {\n        opacity: 1; }\n    .hero.is-success .tabs li.is-active a {\n      opacity: 1; }\n    .hero.is-success .tabs.is-boxed a, .hero.is-success .tabs.is-toggle a {\n      color: #fff; }\n      .hero.is-success .tabs.is-boxed a:hover, .hero.is-success .tabs.is-toggle a:hover {\n        background-color: rgba(10, 10, 10, 0.1); }\n    .hero.is-success .tabs.is-boxed li.is-active a, .hero.is-success .tabs.is-boxed li.is-active a:hover, .hero.is-success .tabs.is-toggle li.is-active a, .hero.is-success .tabs.is-toggle li.is-active a:hover {\n      background-color: #fff;\n      border-color: #fff;\n      color: #23d160; }\n    .hero.is-success.is-bold {\n      background-image: linear-gradient(141deg, #12af2f 0%, #23d160 71%, #2ce28a 100%); }\n      @media screen and (max-width: 768px) {\n        .hero.is-success.is-bold .navbar-menu {\n          background-image: linear-gradient(141deg, #12af2f 0%, #23d160 71%, #2ce28a 100%); } }\n  .hero.is-warning {\n    background-color: #ffdd57;\n    color: rgba(0, 0, 0, 0.7); }\n    .hero.is-warning a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n    .hero.is-warning strong {\n      color: inherit; }\n    .hero.is-warning .title {\n      color: rgba(0, 0, 0, 0.7); }\n    .hero.is-warning .subtitle {\n      color: rgba(0, 0, 0, 0.9); }\n      .hero.is-warning .subtitle a:not(.button),\n      .hero.is-warning .subtitle strong {\n        color: rgba(0, 0, 0, 0.7); }\n    @media screen and (max-width: 1023px) {\n      .hero.is-warning .navbar-menu {\n        background-color: #ffdd57; } }\n    .hero.is-warning .navbar-item,\n    .hero.is-warning .navbar-link {\n      color: rgba(0, 0, 0, 0.7); }\n    .hero.is-warning a.navbar-item:hover, .hero.is-warning a.navbar-item.is-active,\n    .hero.is-warning .navbar-link:hover,\n    .hero.is-warning .navbar-link.is-active {\n      background-color: #ffd83d;\n      color: rgba(0, 0, 0, 0.7); }\n    .hero.is-warning .tabs a {\n      color: rgba(0, 0, 0, 0.7);\n      opacity: 0.9; }\n      .hero.is-warning .tabs a:hover {\n        opacity: 1; }\n    .hero.is-warning .tabs li.is-active a {\n      opacity: 1; }\n    .hero.is-warning .tabs.is-boxed a, .hero.is-warning .tabs.is-toggle a {\n      color: rgba(0, 0, 0, 0.7); }\n      .hero.is-warning .tabs.is-boxed a:hover, .hero.is-warning .tabs.is-toggle a:hover {\n        background-color: rgba(10, 10, 10, 0.1); }\n    .hero.is-warning .tabs.is-boxed li.is-active a, .hero.is-warning .tabs.is-boxed li.is-active a:hover, .hero.is-warning .tabs.is-toggle li.is-active a, .hero.is-warning .tabs.is-toggle li.is-active a:hover {\n      background-color: rgba(0, 0, 0, 0.7);\n      border-color: rgba(0, 0, 0, 0.7);\n      color: #ffdd57; }\n    .hero.is-warning.is-bold {\n      background-image: linear-gradient(141deg, #ffaf24 0%, #ffdd57 71%, #fffa70 100%); }\n      @media screen and (max-width: 768px) {\n        .hero.is-warning.is-bold .navbar-menu {\n          background-image: linear-gradient(141deg, #ffaf24 0%, #ffdd57 71%, #fffa70 100%); } }\n  .hero.is-danger {\n    background-color: #ff3860;\n    color: #fff; }\n    .hero.is-danger a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n    .hero.is-danger strong {\n      color: inherit; }\n    .hero.is-danger .title {\n      color: #fff; }\n    .hero.is-danger .subtitle {\n      color: rgba(255, 255, 255, 0.9); }\n      .hero.is-danger .subtitle a:not(.button),\n      .hero.is-danger .subtitle strong {\n        color: #fff; }\n    @media screen and (max-width: 1023px) {\n      .hero.is-danger .navbar-menu {\n        background-color: #ff3860; } }\n    .hero.is-danger .navbar-item,\n    .hero.is-danger .navbar-link {\n      color: rgba(255, 255, 255, 0.7); }\n    .hero.is-danger a.navbar-item:hover, .hero.is-danger a.navbar-item.is-active,\n    .hero.is-danger .navbar-link:hover,\n    .hero.is-danger .navbar-link.is-active {\n      background-color: #ff1f4b;\n      color: #fff; }\n    .hero.is-danger .tabs a {\n      color: #fff;\n      opacity: 0.9; }\n      .hero.is-danger .tabs a:hover {\n        opacity: 1; }\n    .hero.is-danger .tabs li.is-active a {\n      opacity: 1; }\n    .hero.is-danger .tabs.is-boxed a, .hero.is-danger .tabs.is-toggle a {\n      color: #fff; }\n      .hero.is-danger .tabs.is-boxed a:hover, .hero.is-danger .tabs.is-toggle a:hover {\n        background-color: rgba(10, 10, 10, 0.1); }\n    .hero.is-danger .tabs.is-boxed li.is-active a, .hero.is-danger .tabs.is-boxed li.is-active a:hover, .hero.is-danger .tabs.is-toggle li.is-active a, .hero.is-danger .tabs.is-toggle li.is-active a:hover {\n      background-color: #fff;\n      border-color: #fff;\n      color: #ff3860; }\n    .hero.is-danger.is-bold {\n      background-image: linear-gradient(141deg, #ff0561 0%, #ff3860 71%, #ff5257 100%); }\n      @media screen and (max-width: 768px) {\n        .hero.is-danger.is-bold .navbar-menu {\n          background-image: linear-gradient(141deg, #ff0561 0%, #ff3860 71%, #ff5257 100%); } }\n  .hero.is-small .hero-body {\n    padding-bottom: 1.5rem;\n    padding-top: 1.5rem; }\n  @media screen and (min-width: 769px), print {\n    .hero.is-medium .hero-body {\n      padding-bottom: 9rem;\n      padding-top: 9rem; } }\n  @media screen and (min-width: 769px), print {\n    .hero.is-large .hero-body {\n      padding-bottom: 18rem;\n      padding-top: 18rem; } }\n  .hero.is-halfheight .hero-body, .hero.is-fullheight .hero-body, .hero.is-fullheight-with-navbar .hero-body {\n    align-items: center;\n    display: flex; }\n    .hero.is-halfheight .hero-body > .container, .hero.is-fullheight .hero-body > .container, .hero.is-fullheight-with-navbar .hero-body > .container {\n      flex-grow: 1;\n      flex-shrink: 1; }\n  .hero.is-halfheight {\n    min-height: 50vh; }\n  .hero.is-fullheight {\n    min-height: 100vh; }\n\n.hero-video {\n  overflow: hidden; }\n  .hero-video video {\n    left: 50%;\n    min-height: 100%;\n    min-width: 100%;\n    position: absolute;\n    top: 50%;\n    transform: translate3d(-50%, -50%, 0); }\n  .hero-video.is-transparent {\n    opacity: 0.3; }\n  @media screen and (max-width: 768px) {\n    .hero-video {\n      display: none; } }\n\n.hero-buttons {\n  margin-top: 1.5rem; }\n  @media screen and (max-width: 768px) {\n    .hero-buttons .button {\n      display: flex; }\n      .hero-buttons .button:not(:last-child) {\n        margin-bottom: 0.75rem; } }\n  @media screen and (min-width: 769px), print {\n    .hero-buttons {\n      display: flex;\n      justify-content: center; }\n      .hero-buttons .button:not(:last-child) {\n        margin-right: 1.5rem; } }\n\n.hero-head,\n.hero-foot {\n  flex-grow: 0;\n  flex-shrink: 0; }\n\n.hero-body {\n  flex-grow: 1;\n  flex-shrink: 0;\n  padding: 3rem 1.5rem; }\n\n.section {\n  padding: 3rem 1.5rem; }\n  @media screen and (min-width: 1024px) {\n    .section.is-medium {\n      padding: 9rem 1.5rem; }\n    .section.is-large {\n      padding: 18rem 1.5rem; } }\n\n.footer {\n  background-color: #fafafa;\n  padding: 3rem 1.5rem 6rem; }\n";
  styleInject(css);

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var check = function (it) {
    return it && it.Math == Math && it;
  };

  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global_1 =
    // eslint-disable-next-line no-undef
    check(typeof globalThis == 'object' && globalThis) ||
    check(typeof window == 'object' && window) ||
    check(typeof self == 'object' && self) ||
    check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
    // eslint-disable-next-line no-new-func
    Function('return this')();

  var fails = function (exec) {
    try {
      return !!exec();
    } catch (error) {
      return true;
    }
  };

  // Thank's IE8 for his funny defineProperty
  var descriptors = !fails(function () {
    return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
  });

  var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

  // Nashorn ~ JDK8 bug
  var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

  // `Object.prototype.propertyIsEnumerable` method implementation
  // https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
  var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
    var descriptor = getOwnPropertyDescriptor(this, V);
    return !!descriptor && descriptor.enumerable;
  } : nativePropertyIsEnumerable;

  var objectPropertyIsEnumerable = {
  	f: f
  };

  var createPropertyDescriptor = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var toString = {}.toString;

  var classofRaw = function (it) {
    return toString.call(it).slice(8, -1);
  };

  var split = ''.split;

  // fallback for non-array-like ES3 and non-enumerable old V8 strings
  var indexedObject = fails(function () {
    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
    // eslint-disable-next-line no-prototype-builtins
    return !Object('z').propertyIsEnumerable(0);
  }) ? function (it) {
    return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
  } : Object;

  // `RequireObjectCoercible` abstract operation
  // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
  var requireObjectCoercible = function (it) {
    if (it == undefined) throw TypeError("Can't call method on " + it);
    return it;
  };

  // toObject with fallback for non-array-like ES3 strings



  var toIndexedObject = function (it) {
    return indexedObject(requireObjectCoercible(it));
  };

  var isObject = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

  // `ToPrimitive` abstract operation
  // https://tc39.github.io/ecma262/#sec-toprimitive
  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  var toPrimitive = function (input, PREFERRED_STRING) {
    if (!isObject(input)) return input;
    var fn, val;
    if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
    if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
    if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var hasOwnProperty = {}.hasOwnProperty;

  var has = function (it, key) {
    return hasOwnProperty.call(it, key);
  };

  var document$1 = global_1.document;
  // typeof document.createElement is 'object' in old IE
  var EXISTS = isObject(document$1) && isObject(document$1.createElement);

  var documentCreateElement = function (it) {
    return EXISTS ? document$1.createElement(it) : {};
  };

  // Thank's IE8 for his funny defineProperty
  var ie8DomDefine = !descriptors && !fails(function () {
    return Object.defineProperty(documentCreateElement('div'), 'a', {
      get: function () { return 7; }
    }).a != 7;
  });

  var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
  var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
    O = toIndexedObject(O);
    P = toPrimitive(P, true);
    if (ie8DomDefine) try {
      return nativeGetOwnPropertyDescriptor(O, P);
    } catch (error) { /* empty */ }
    if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
  };

  var objectGetOwnPropertyDescriptor = {
  	f: f$1
  };

  var anObject = function (it) {
    if (!isObject(it)) {
      throw TypeError(String(it) + ' is not an object');
    } return it;
  };

  var nativeDefineProperty = Object.defineProperty;

  // `Object.defineProperty` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperty
  var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (ie8DomDefine) try {
      return nativeDefineProperty(O, P, Attributes);
    } catch (error) { /* empty */ }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };

  var objectDefineProperty = {
  	f: f$2
  };

  var createNonEnumerableProperty = descriptors ? function (object, key, value) {
    return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var setGlobal = function (key, value) {
    try {
      createNonEnumerableProperty(global_1, key, value);
    } catch (error) {
      global_1[key] = value;
    } return value;
  };

  var SHARED = '__core-js_shared__';
  var store = global_1[SHARED] || setGlobal(SHARED, {});

  var sharedStore = store;

  var shared = createCommonjsModule(function (module) {
  (module.exports = function (key, value) {
    return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: '3.4.3',
    mode:  'global',
    copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
  });
  });

  var functionToString = shared('native-function-to-string', Function.toString);

  var WeakMap = global_1.WeakMap;

  var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(functionToString.call(WeakMap));

  var id = 0;
  var postfix = Math.random();

  var uid = function (key) {
    return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
  };

  var keys = shared('keys');

  var sharedKey = function (key) {
    return keys[key] || (keys[key] = uid(key));
  };

  var hiddenKeys = {};

  var WeakMap$1 = global_1.WeakMap;
  var set, get, has$1;

  var enforce = function (it) {
    return has$1(it) ? get(it) : set(it, {});
  };

  var getterFor = function (TYPE) {
    return function (it) {
      var state;
      if (!isObject(it) || (state = get(it)).type !== TYPE) {
        throw TypeError('Incompatible receiver, ' + TYPE + ' required');
      } return state;
    };
  };

  if (nativeWeakMap) {
    var store$1 = new WeakMap$1();
    var wmget = store$1.get;
    var wmhas = store$1.has;
    var wmset = store$1.set;
    set = function (it, metadata) {
      wmset.call(store$1, it, metadata);
      return metadata;
    };
    get = function (it) {
      return wmget.call(store$1, it) || {};
    };
    has$1 = function (it) {
      return wmhas.call(store$1, it);
    };
  } else {
    var STATE = sharedKey('state');
    hiddenKeys[STATE] = true;
    set = function (it, metadata) {
      createNonEnumerableProperty(it, STATE, metadata);
      return metadata;
    };
    get = function (it) {
      return has(it, STATE) ? it[STATE] : {};
    };
    has$1 = function (it) {
      return has(it, STATE);
    };
  }

  var internalState = {
    set: set,
    get: get,
    has: has$1,
    enforce: enforce,
    getterFor: getterFor
  };

  var redefine = createCommonjsModule(function (module) {
  var getInternalState = internalState.get;
  var enforceInternalState = internalState.enforce;
  var TEMPLATE = String(functionToString).split('toString');

  shared('inspectSource', function (it) {
    return functionToString.call(it);
  });

  (module.exports = function (O, key, value, options) {
    var unsafe = options ? !!options.unsafe : false;
    var simple = options ? !!options.enumerable : false;
    var noTargetGet = options ? !!options.noTargetGet : false;
    if (typeof value == 'function') {
      if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
      enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
    }
    if (O === global_1) {
      if (simple) O[key] = value;
      else setGlobal(key, value);
      return;
    } else if (!unsafe) {
      delete O[key];
    } else if (!noTargetGet && O[key]) {
      simple = true;
    }
    if (simple) O[key] = value;
    else createNonEnumerableProperty(O, key, value);
  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  })(Function.prototype, 'toString', function toString() {
    return typeof this == 'function' && getInternalState(this).source || functionToString.call(this);
  });
  });

  var path = global_1;

  var aFunction = function (variable) {
    return typeof variable == 'function' ? variable : undefined;
  };

  var getBuiltIn = function (namespace, method) {
    return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace])
      : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
  };

  var ceil = Math.ceil;
  var floor = Math.floor;

  // `ToInteger` abstract operation
  // https://tc39.github.io/ecma262/#sec-tointeger
  var toInteger = function (argument) {
    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
  };

  var min = Math.min;

  // `ToLength` abstract operation
  // https://tc39.github.io/ecma262/#sec-tolength
  var toLength = function (argument) {
    return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
  };

  var max = Math.max;
  var min$1 = Math.min;

  // Helper for a popular repeating case of the spec:
  // Let integer be ? ToInteger(index).
  // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
  var toAbsoluteIndex = function (index, length) {
    var integer = toInteger(index);
    return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
  };

  // `Array.prototype.{ indexOf, includes }` methods implementation
  var createMethod = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIndexedObject($this);
      var length = toLength(O.length);
      var index = toAbsoluteIndex(fromIndex, length);
      var value;
      // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++];
        // eslint-disable-next-line no-self-compare
        if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
      } else for (;length > index; index++) {
        if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
      } return !IS_INCLUDES && -1;
    };
  };

  var arrayIncludes = {
    // `Array.prototype.includes` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.includes
    includes: createMethod(true),
    // `Array.prototype.indexOf` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
    indexOf: createMethod(false)
  };

  var indexOf = arrayIncludes.indexOf;


  var objectKeysInternal = function (object, names) {
    var O = toIndexedObject(object);
    var i = 0;
    var result = [];
    var key;
    for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while (names.length > i) if (has(O, key = names[i++])) {
      ~indexOf(result, key) || result.push(key);
    }
    return result;
  };

  // IE8- don't enum bug keys
  var enumBugKeys = [
    'constructor',
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'toLocaleString',
    'toString',
    'valueOf'
  ];

  var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');

  // `Object.getOwnPropertyNames` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
  var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return objectKeysInternal(O, hiddenKeys$1);
  };

  var objectGetOwnPropertyNames = {
  	f: f$3
  };

  var f$4 = Object.getOwnPropertySymbols;

  var objectGetOwnPropertySymbols = {
  	f: f$4
  };

  // all object keys, includes non-enumerable and symbols
  var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
    var keys = objectGetOwnPropertyNames.f(anObject(it));
    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
    return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
  };

  var copyConstructorProperties = function (target, source) {
    var keys = ownKeys(source);
    var defineProperty = objectDefineProperty.f;
    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  };

  var replacement = /#|\.prototype\./;

  var isForced = function (feature, detection) {
    var value = data[normalize(feature)];
    return value == POLYFILL ? true
      : value == NATIVE ? false
      : typeof detection == 'function' ? fails(detection)
      : !!detection;
  };

  var normalize = isForced.normalize = function (string) {
    return String(string).replace(replacement, '.').toLowerCase();
  };

  var data = isForced.data = {};
  var NATIVE = isForced.NATIVE = 'N';
  var POLYFILL = isForced.POLYFILL = 'P';

  var isForced_1 = isForced;

  var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






  /*
    options.target      - name of the target object
    options.global      - target is the global object
    options.stat        - export as static methods of target
    options.proto       - export as prototype methods of target
    options.real        - real prototype method for the `pure` version
    options.forced      - export even if the native feature is available
    options.bind        - bind methods to the target, required for the `pure` version
    options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
    options.unsafe      - use the simple assignment of property instead of delete + defineProperty
    options.sham        - add a flag to not completely full polyfills
    options.enumerable  - export as enumerable property
    options.noTargetGet - prevent calling a getter on target
  */
  var _export = function (options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var FORCED, target, key, targetProperty, sourceProperty, descriptor;
    if (GLOBAL) {
      target = global_1;
    } else if (STATIC) {
      target = global_1[TARGET] || setGlobal(TARGET, {});
    } else {
      target = (global_1[TARGET] || {}).prototype;
    }
    if (target) for (key in source) {
      sourceProperty = source[key];
      if (options.noTargetGet) {
        descriptor = getOwnPropertyDescriptor$1(target, key);
        targetProperty = descriptor && descriptor.value;
      } else targetProperty = target[key];
      FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
      // contained in target
      if (!FORCED && targetProperty !== undefined) {
        if (typeof sourceProperty === typeof targetProperty) continue;
        copyConstructorProperties(sourceProperty, targetProperty);
      }
      // add a flag to not completely full polyfills
      if (options.sham || (targetProperty && targetProperty.sham)) {
        createNonEnumerableProperty(sourceProperty, 'sham', true);
      }
      // extend global
      redefine(target, key, sourceProperty, options);
    }
  };

  var aFunction$1 = function (it) {
    if (typeof it != 'function') {
      throw TypeError(String(it) + ' is not a function');
    } return it;
  };

  // optional / simple context binding
  var bindContext = function (fn, that, length) {
    aFunction$1(fn);
    if (that === undefined) return fn;
    switch (length) {
      case 0: return function () {
        return fn.call(that);
      };
      case 1: return function (a) {
        return fn.call(that, a);
      };
      case 2: return function (a, b) {
        return fn.call(that, a, b);
      };
      case 3: return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
    }
    return function (/* ...args */) {
      return fn.apply(that, arguments);
    };
  };

  // `ToObject` abstract operation
  // https://tc39.github.io/ecma262/#sec-toobject
  var toObject = function (argument) {
    return Object(requireObjectCoercible(argument));
  };

  // `IsArray` abstract operation
  // https://tc39.github.io/ecma262/#sec-isarray
  var isArray = Array.isArray || function isArray(arg) {
    return classofRaw(arg) == 'Array';
  };

  var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
    // Chrome 38 Symbol has incorrect toString conversion
    // eslint-disable-next-line no-undef
    return !String(Symbol());
  });

  var useSymbolAsUid = nativeSymbol
    // eslint-disable-next-line no-undef
    && !Symbol.sham
    // eslint-disable-next-line no-undef
    && typeof Symbol() == 'symbol';

  var WellKnownSymbolsStore = shared('wks');
  var Symbol$1 = global_1.Symbol;
  var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : uid;

  var wellKnownSymbol = function (name) {
    if (!has(WellKnownSymbolsStore, name)) {
      if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];
      else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
    } return WellKnownSymbolsStore[name];
  };

  var SPECIES = wellKnownSymbol('species');

  // `ArraySpeciesCreate` abstract operation
  // https://tc39.github.io/ecma262/#sec-arrayspeciescreate
  var arraySpeciesCreate = function (originalArray, length) {
    var C;
    if (isArray(originalArray)) {
      C = originalArray.constructor;
      // cross-realm fallback
      if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
      else if (isObject(C)) {
        C = C[SPECIES];
        if (C === null) C = undefined;
      }
    } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
  };

  var push = [].push;

  // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
  var createMethod$1 = function (TYPE) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    return function ($this, callbackfn, that, specificCreate) {
      var O = toObject($this);
      var self = indexedObject(O);
      var boundFunction = bindContext(callbackfn, that, 3);
      var length = toLength(self.length);
      var index = 0;
      var create = specificCreate || arraySpeciesCreate;
      var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
      var value, result;
      for (;length > index; index++) if (NO_HOLES || index in self) {
        value = self[index];
        result = boundFunction(value, index, O);
        if (TYPE) {
          if (IS_MAP) target[index] = result; // map
          else if (result) switch (TYPE) {
            case 3: return true;              // some
            case 5: return value;             // find
            case 6: return index;             // findIndex
            case 2: push.call(target, value); // filter
          } else if (IS_EVERY) return false;  // every
        }
      }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
    };
  };

  var arrayIteration = {
    // `Array.prototype.forEach` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
    forEach: createMethod$1(0),
    // `Array.prototype.map` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.map
    map: createMethod$1(1),
    // `Array.prototype.filter` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.filter
    filter: createMethod$1(2),
    // `Array.prototype.some` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.some
    some: createMethod$1(3),
    // `Array.prototype.every` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.every
    every: createMethod$1(4),
    // `Array.prototype.find` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.find
    find: createMethod$1(5),
    // `Array.prototype.findIndex` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
    findIndex: createMethod$1(6)
  };

  var sloppyArrayMethod = function (METHOD_NAME, argument) {
    var method = [][METHOD_NAME];
    return !method || !fails(function () {
      // eslint-disable-next-line no-useless-call,no-throw-literal
      method.call(null, argument || function () { throw 1; }, 1);
    });
  };

  var $forEach = arrayIteration.forEach;


  // `Array.prototype.forEach` method implementation
  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
  var arrayForEach = sloppyArrayMethod('forEach') ? function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  } : [].forEach;

  // `Array.prototype.forEach` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
  _export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {
    forEach: arrayForEach
  });

  var defineProperty = objectDefineProperty.f;

  var FunctionPrototype = Function.prototype;
  var FunctionPrototypeToString = FunctionPrototype.toString;
  var nameRE = /^\s*function ([^ (]*)/;
  var NAME = 'name';

  // Function instances `.name` property
  // https://tc39.github.io/ecma262/#sec-function-instances-name
  if (descriptors && !(NAME in FunctionPrototype)) {
    defineProperty(FunctionPrototype, NAME, {
      configurable: true,
      get: function () {
        try {
          return FunctionPrototypeToString.call(this).match(nameRE)[1];
        } catch (error) {
          return '';
        }
      }
    });
  }

  var TO_STRING_TAG = wellKnownSymbol('toStringTag');
  var test = {};

  test[TO_STRING_TAG] = 'z';

  var toStringTagSupport = String(test) === '[object z]';

  var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
  // ES3 wrong here
  var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

  // fallback for IE11 Script Access Denied error
  var tryGet = function (it, key) {
    try {
      return it[key];
    } catch (error) { /* empty */ }
  };

  // getting tag from ES6+ `Object.prototype.toString`
  var classof = toStringTagSupport ? classofRaw : function (it) {
    var O, tag, result;
    return it === undefined ? 'Undefined' : it === null ? 'Null'
      // @@toStringTag case
      : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$1)) == 'string' ? tag
      // builtinTag case
      : CORRECT_ARGUMENTS ? classofRaw(O)
      // ES3 arguments fallback
      : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
  };

  // `Object.prototype.toString` method implementation
  // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
  var objectToString = toStringTagSupport ? {}.toString : function toString() {
    return '[object ' + classof(this) + ']';
  };

  // `Object.prototype.toString` method
  // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
  if (!toStringTagSupport) {
    redefine(Object.prototype, 'toString', objectToString, { unsafe: true });
  }

  var nativePromiseConstructor = global_1.Promise;

  var redefineAll = function (target, src, options) {
    for (var key in src) redefine(target, key, src[key], options);
    return target;
  };

  var defineProperty$1 = objectDefineProperty.f;



  var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');

  var setToStringTag = function (it, TAG, STATIC) {
    if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG$2)) {
      defineProperty$1(it, TO_STRING_TAG$2, { configurable: true, value: TAG });
    }
  };

  var SPECIES$1 = wellKnownSymbol('species');

  var setSpecies = function (CONSTRUCTOR_NAME) {
    var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
    var defineProperty = objectDefineProperty.f;

    if (descriptors && Constructor && !Constructor[SPECIES$1]) {
      defineProperty(Constructor, SPECIES$1, {
        configurable: true,
        get: function () { return this; }
      });
    }
  };

  var anInstance = function (it, Constructor, name) {
    if (!(it instanceof Constructor)) {
      throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
    } return it;
  };

  var iterators = {};

  var ITERATOR = wellKnownSymbol('iterator');
  var ArrayPrototype = Array.prototype;

  // check on default Array iterator
  var isArrayIteratorMethod = function (it) {
    return it !== undefined && (iterators.Array === it || ArrayPrototype[ITERATOR] === it);
  };

  var ITERATOR$1 = wellKnownSymbol('iterator');

  var getIteratorMethod = function (it) {
    if (it != undefined) return it[ITERATOR$1]
      || it['@@iterator']
      || iterators[classof(it)];
  };

  // call something on iterator step with safe closing on error
  var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
    try {
      return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
    } catch (error) {
      var returnMethod = iterator['return'];
      if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
      throw error;
    }
  };

  var iterate_1 = createCommonjsModule(function (module) {
  var Result = function (stopped, result) {
    this.stopped = stopped;
    this.result = result;
  };

  var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
    var boundFunction = bindContext(fn, that, AS_ENTRIES ? 2 : 1);
    var iterator, iterFn, index, length, result, next, step;

    if (IS_ITERATOR) {
      iterator = iterable;
    } else {
      iterFn = getIteratorMethod(iterable);
      if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
      // optimisation for array iterators
      if (isArrayIteratorMethod(iterFn)) {
        for (index = 0, length = toLength(iterable.length); length > index; index++) {
          result = AS_ENTRIES
            ? boundFunction(anObject(step = iterable[index])[0], step[1])
            : boundFunction(iterable[index]);
          if (result && result instanceof Result) return result;
        } return new Result(false);
      }
      iterator = iterFn.call(iterable);
    }

    next = iterator.next;
    while (!(step = next.call(iterator)).done) {
      result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
      if (typeof result == 'object' && result && result instanceof Result) return result;
    } return new Result(false);
  };

  iterate.stop = function (result) {
    return new Result(true, result);
  };
  });

  var ITERATOR$2 = wellKnownSymbol('iterator');
  var SAFE_CLOSING = false;

  try {
    var called = 0;
    var iteratorWithReturn = {
      next: function () {
        return { done: !!called++ };
      },
      'return': function () {
        SAFE_CLOSING = true;
      }
    };
    iteratorWithReturn[ITERATOR$2] = function () {
      return this;
    };
    // eslint-disable-next-line no-throw-literal
    Array.from(iteratorWithReturn, function () { throw 2; });
  } catch (error) { /* empty */ }

  var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
    var ITERATION_SUPPORT = false;
    try {
      var object = {};
      object[ITERATOR$2] = function () {
        return {
          next: function () {
            return { done: ITERATION_SUPPORT = true };
          }
        };
      };
      exec(object);
    } catch (error) { /* empty */ }
    return ITERATION_SUPPORT;
  };

  var SPECIES$2 = wellKnownSymbol('species');

  // `SpeciesConstructor` abstract operation
  // https://tc39.github.io/ecma262/#sec-speciesconstructor
  var speciesConstructor = function (O, defaultConstructor) {
    var C = anObject(O).constructor;
    var S;
    return C === undefined || (S = anObject(C)[SPECIES$2]) == undefined ? defaultConstructor : aFunction$1(S);
  };

  var html = getBuiltIn('document', 'documentElement');

  var userAgent = getBuiltIn('navigator', 'userAgent') || '';

  var isIos = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);

  var location$1 = global_1.location;
  var set$1 = global_1.setImmediate;
  var clear = global_1.clearImmediate;
  var process$1 = global_1.process;
  var MessageChannel$1 = global_1.MessageChannel;
  var Dispatch = global_1.Dispatch;
  var counter = 0;
  var queue = {};
  var ONREADYSTATECHANGE = 'onreadystatechange';
  var defer, channel, port;

  var run = function (id) {
    // eslint-disable-next-line no-prototype-builtins
    if (queue.hasOwnProperty(id)) {
      var fn = queue[id];
      delete queue[id];
      fn();
    }
  };

  var runner = function (id) {
    return function () {
      run(id);
    };
  };

  var listener = function (event) {
    run(event.data);
  };

  var post = function (id) {
    // old engines have not location.origin
    global_1.postMessage(id + '', location$1.protocol + '//' + location$1.host);
  };

  // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
  if (!set$1 || !clear) {
    set$1 = function setImmediate(fn) {
      var args = [];
      var i = 1;
      while (arguments.length > i) args.push(arguments[i++]);
      queue[++counter] = function () {
        // eslint-disable-next-line no-new-func
        (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
      };
      defer(counter);
      return counter;
    };
    clear = function clearImmediate(id) {
      delete queue[id];
    };
    // Node.js 0.8-
    if (classofRaw(process$1) == 'process') {
      defer = function (id) {
        process$1.nextTick(runner(id));
      };
    // Sphere (JS game engine) Dispatch API
    } else if (Dispatch && Dispatch.now) {
      defer = function (id) {
        Dispatch.now(runner(id));
      };
    // Browsers with MessageChannel, includes WebWorkers
    // except iOS - https://github.com/zloirock/core-js/issues/624
    } else if (MessageChannel$1 && !isIos) {
      channel = new MessageChannel$1();
      port = channel.port2;
      channel.port1.onmessage = listener;
      defer = bindContext(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if (global_1.addEventListener && typeof postMessage == 'function' && !global_1.importScripts && !fails(post)) {
      defer = post;
      global_1.addEventListener('message', listener, false);
    // IE8-
    } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
      defer = function (id) {
        html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
          html.removeChild(this);
          run(id);
        };
      };
    // Rest old browsers
    } else {
      defer = function (id) {
        setTimeout(runner(id), 0);
      };
    }
  }

  var task = {
    set: set$1,
    clear: clear
  };

  var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;

  var macrotask = task.set;


  var MutationObserver = global_1.MutationObserver || global_1.WebKitMutationObserver;
  var process$2 = global_1.process;
  var Promise$1 = global_1.Promise;
  var IS_NODE = classofRaw(process$2) == 'process';
  // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
  var queueMicrotaskDescriptor = getOwnPropertyDescriptor$2(global_1, 'queueMicrotask');
  var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

  var flush, head, last, notify, toggle, node, promise, then;

  // modern engines have queueMicrotask method
  if (!queueMicrotask) {
    flush = function () {
      var parent, fn;
      if (IS_NODE && (parent = process$2.domain)) parent.exit();
      while (head) {
        fn = head.fn;
        head = head.next;
        try {
          fn();
        } catch (error) {
          if (head) notify();
          else last = undefined;
          throw error;
        }
      } last = undefined;
      if (parent) parent.enter();
    };

    // Node.js
    if (IS_NODE) {
      notify = function () {
        process$2.nextTick(flush);
      };
    // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
    } else if (MutationObserver && !isIos) {
      toggle = true;
      node = document.createTextNode('');
      new MutationObserver(flush).observe(node, { characterData: true });
      notify = function () {
        node.data = toggle = !toggle;
      };
    // environments with maybe non-completely correct, but existent Promise
    } else if (Promise$1 && Promise$1.resolve) {
      // Promise.resolve without an argument throws an error in LG WebOS 2
      promise = Promise$1.resolve(undefined);
      then = promise.then;
      notify = function () {
        then.call(promise, flush);
      };
    // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout
    } else {
      notify = function () {
        // strange IE + webpack dev server bug - use .call(global)
        macrotask.call(global_1, flush);
      };
    }
  }

  var microtask = queueMicrotask || function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };

  var PromiseCapability = function (C) {
    var resolve, reject;
    this.promise = new C(function ($$resolve, $$reject) {
      if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
      resolve = $$resolve;
      reject = $$reject;
    });
    this.resolve = aFunction$1(resolve);
    this.reject = aFunction$1(reject);
  };

  // 25.4.1.5 NewPromiseCapability(C)
  var f$5 = function (C) {
    return new PromiseCapability(C);
  };

  var newPromiseCapability = {
  	f: f$5
  };

  var promiseResolve = function (C, x) {
    anObject(C);
    if (isObject(x) && x.constructor === C) return x;
    var promiseCapability = newPromiseCapability.f(C);
    var resolve = promiseCapability.resolve;
    resolve(x);
    return promiseCapability.promise;
  };

  var hostReportErrors = function (a, b) {
    var console = global_1.console;
    if (console && console.error) {
      arguments.length === 1 ? console.error(a) : console.error(a, b);
    }
  };

  var perform = function (exec) {
    try {
      return { error: false, value: exec() };
    } catch (error) {
      return { error: true, value: error };
    }
  };

  var process$3 = global_1.process;
  var versions = process$3 && process$3.versions;
  var v8 = versions && versions.v8;
  var match, version;

  if (v8) {
    match = v8.split('.');
    version = match[0] + match[1];
  } else if (userAgent) {
    match = userAgent.match(/Edge\/(\d+)/);
    if (!match || match[1] >= 74) {
      match = userAgent.match(/Chrome\/(\d+)/);
      if (match) version = match[1];
    }
  }

  var v8Version = version && +version;

  var task$1 = task.set;










  var SPECIES$3 = wellKnownSymbol('species');
  var PROMISE = 'Promise';
  var getInternalState = internalState.get;
  var setInternalState = internalState.set;
  var getInternalPromiseState = internalState.getterFor(PROMISE);
  var PromiseConstructor = nativePromiseConstructor;
  var TypeError$1 = global_1.TypeError;
  var document$2 = global_1.document;
  var process$4 = global_1.process;
  var inspectSource = shared('inspectSource');
  var $fetch = getBuiltIn('fetch');
  var newPromiseCapability$1 = newPromiseCapability.f;
  var newGenericPromiseCapability = newPromiseCapability$1;
  var IS_NODE$1 = classofRaw(process$4) == 'process';
  var DISPATCH_EVENT = !!(document$2 && document$2.createEvent && global_1.dispatchEvent);
  var UNHANDLED_REJECTION = 'unhandledrejection';
  var REJECTION_HANDLED = 'rejectionhandled';
  var PENDING = 0;
  var FULFILLED = 1;
  var REJECTED = 2;
  var HANDLED = 1;
  var UNHANDLED = 2;
  var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

  var FORCED = isForced_1(PROMISE, function () {
    var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
    if (!GLOBAL_CORE_JS_PROMISE) {
      // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // We can't detect it synchronously, so just check versions
      if (v8Version === 66) return true;
      // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
      if (!IS_NODE$1 && typeof PromiseRejectionEvent != 'function') return true;
    }
    // We can't use @@species feature detection in V8 since it causes
    // deoptimization and performance degradation
    // https://github.com/zloirock/core-js/issues/679
    if (v8Version >= 51 && /native code/.test(PromiseConstructor)) return false;
    // Detect correctness of subclassing with @@species support
    var promise = PromiseConstructor.resolve(1);
    var FakePromise = function (exec) {
      exec(function () { /* empty */ }, function () { /* empty */ });
    };
    var constructor = promise.constructor = {};
    constructor[SPECIES$3] = FakePromise;
    return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
  });

  var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
    PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
  });

  // helpers
  var isThenable = function (it) {
    var then;
    return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
  };

  var notify$1 = function (promise, state, isReject) {
    if (state.notified) return;
    state.notified = true;
    var chain = state.reactions;
    microtask(function () {
      var value = state.value;
      var ok = state.state == FULFILLED;
      var index = 0;
      // variable length - can't use forEach
      while (chain.length > index) {
        var reaction = chain[index++];
        var handler = ok ? reaction.ok : reaction.fail;
        var resolve = reaction.resolve;
        var reject = reaction.reject;
        var domain = reaction.domain;
        var result, then, exited;
        try {
          if (handler) {
            if (!ok) {
              if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
              state.rejection = HANDLED;
            }
            if (handler === true) result = value;
            else {
              if (domain) domain.enter();
              result = handler(value); // can throw
              if (domain) {
                domain.exit();
                exited = true;
              }
            }
            if (result === reaction.promise) {
              reject(TypeError$1('Promise-chain cycle'));
            } else if (then = isThenable(result)) {
              then.call(result, resolve, reject);
            } else resolve(result);
          } else reject(value);
        } catch (error) {
          if (domain && !exited) domain.exit();
          reject(error);
        }
      }
      state.reactions = [];
      state.notified = false;
      if (isReject && !state.rejection) onUnhandled(promise, state);
    });
  };

  var dispatchEvent = function (name, promise, reason) {
    var event, handler;
    if (DISPATCH_EVENT) {
      event = document$2.createEvent('Event');
      event.promise = promise;
      event.reason = reason;
      event.initEvent(name, false, true);
      global_1.dispatchEvent(event);
    } else event = { promise: promise, reason: reason };
    if (handler = global_1['on' + name]) handler(event);
    else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
  };

  var onUnhandled = function (promise, state) {
    task$1.call(global_1, function () {
      var value = state.value;
      var IS_UNHANDLED = isUnhandled(state);
      var result;
      if (IS_UNHANDLED) {
        result = perform(function () {
          if (IS_NODE$1) {
            process$4.emit('unhandledRejection', value, promise);
          } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
        });
        // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
        state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
        if (result.error) throw result.value;
      }
    });
  };

  var isUnhandled = function (state) {
    return state.rejection !== HANDLED && !state.parent;
  };

  var onHandleUnhandled = function (promise, state) {
    task$1.call(global_1, function () {
      if (IS_NODE$1) {
        process$4.emit('rejectionHandled', promise);
      } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
    });
  };

  var bind = function (fn, promise, state, unwrap) {
    return function (value) {
      fn(promise, state, value, unwrap);
    };
  };

  var internalReject = function (promise, state, value, unwrap) {
    if (state.done) return;
    state.done = true;
    if (unwrap) state = unwrap;
    state.value = value;
    state.state = REJECTED;
    notify$1(promise, state, true);
  };

  var internalResolve = function (promise, state, value, unwrap) {
    if (state.done) return;
    state.done = true;
    if (unwrap) state = unwrap;
    try {
      if (promise === value) throw TypeError$1("Promise can't be resolved itself");
      var then = isThenable(value);
      if (then) {
        microtask(function () {
          var wrapper = { done: false };
          try {
            then.call(value,
              bind(internalResolve, promise, wrapper, state),
              bind(internalReject, promise, wrapper, state)
            );
          } catch (error) {
            internalReject(promise, wrapper, error, state);
          }
        });
      } else {
        state.value = value;
        state.state = FULFILLED;
        notify$1(promise, state, false);
      }
    } catch (error) {
      internalReject(promise, { done: false }, error, state);
    }
  };

  // constructor polyfill
  if (FORCED) {
    // 25.4.3.1 Promise(executor)
    PromiseConstructor = function Promise(executor) {
      anInstance(this, PromiseConstructor, PROMISE);
      aFunction$1(executor);
      Internal.call(this);
      var state = getInternalState(this);
      try {
        executor(bind(internalResolve, this, state), bind(internalReject, this, state));
      } catch (error) {
        internalReject(this, state, error);
      }
    };
    // eslint-disable-next-line no-unused-vars
    Internal = function Promise(executor) {
      setInternalState(this, {
        type: PROMISE,
        done: false,
        notified: false,
        parent: false,
        reactions: [],
        rejection: false,
        state: PENDING,
        value: undefined
      });
    };
    Internal.prototype = redefineAll(PromiseConstructor.prototype, {
      // `Promise.prototype.then` method
      // https://tc39.github.io/ecma262/#sec-promise.prototype.then
      then: function then(onFulfilled, onRejected) {
        var state = getInternalPromiseState(this);
        var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
        reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
        reaction.fail = typeof onRejected == 'function' && onRejected;
        reaction.domain = IS_NODE$1 ? process$4.domain : undefined;
        state.parent = true;
        state.reactions.push(reaction);
        if (state.state != PENDING) notify$1(this, state, false);
        return reaction.promise;
      },
      // `Promise.prototype.catch` method
      // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
      'catch': function (onRejected) {
        return this.then(undefined, onRejected);
      }
    });
    OwnPromiseCapability = function () {
      var promise = new Internal();
      var state = getInternalState(promise);
      this.promise = promise;
      this.resolve = bind(internalResolve, promise, state);
      this.reject = bind(internalReject, promise, state);
    };
    newPromiseCapability.f = newPromiseCapability$1 = function (C) {
      return C === PromiseConstructor || C === PromiseWrapper
        ? new OwnPromiseCapability(C)
        : newGenericPromiseCapability(C);
    };

    if ( typeof nativePromiseConstructor == 'function') {
      nativeThen = nativePromiseConstructor.prototype.then;

      // wrap native Promise#then for native async functions
      redefine(nativePromiseConstructor.prototype, 'then', function then(onFulfilled, onRejected) {
        var that = this;
        return new PromiseConstructor(function (resolve, reject) {
          nativeThen.call(that, resolve, reject);
        }).then(onFulfilled, onRejected);
      // https://github.com/zloirock/core-js/issues/640
      }, { unsafe: true });

      // wrap fetch result
      if (typeof $fetch == 'function') _export({ global: true, enumerable: true, forced: true }, {
        // eslint-disable-next-line no-unused-vars
        fetch: function fetch(input /* , init */) {
          return promiseResolve(PromiseConstructor, $fetch.apply(global_1, arguments));
        }
      });
    }
  }

  _export({ global: true, wrap: true, forced: FORCED }, {
    Promise: PromiseConstructor
  });

  setToStringTag(PromiseConstructor, PROMISE, false);
  setSpecies(PROMISE);

  PromiseWrapper = getBuiltIn(PROMISE);

  // statics
  _export({ target: PROMISE, stat: true, forced: FORCED }, {
    // `Promise.reject` method
    // https://tc39.github.io/ecma262/#sec-promise.reject
    reject: function reject(r) {
      var capability = newPromiseCapability$1(this);
      capability.reject.call(undefined, r);
      return capability.promise;
    }
  });

  _export({ target: PROMISE, stat: true, forced:  FORCED }, {
    // `Promise.resolve` method
    // https://tc39.github.io/ecma262/#sec-promise.resolve
    resolve: function resolve(x) {
      return promiseResolve( this, x);
    }
  });

  _export({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
    // `Promise.all` method
    // https://tc39.github.io/ecma262/#sec-promise.all
    all: function all(iterable) {
      var C = this;
      var capability = newPromiseCapability$1(C);
      var resolve = capability.resolve;
      var reject = capability.reject;
      var result = perform(function () {
        var $promiseResolve = aFunction$1(C.resolve);
        var values = [];
        var counter = 0;
        var remaining = 1;
        iterate_1(iterable, function (promise) {
          var index = counter++;
          var alreadyCalled = false;
          values.push(undefined);
          remaining++;
          $promiseResolve.call(C, promise).then(function (value) {
            if (alreadyCalled) return;
            alreadyCalled = true;
            values[index] = value;
            --remaining || resolve(values);
          }, reject);
        });
        --remaining || resolve(values);
      });
      if (result.error) reject(result.value);
      return capability.promise;
    },
    // `Promise.race` method
    // https://tc39.github.io/ecma262/#sec-promise.race
    race: function race(iterable) {
      var C = this;
      var capability = newPromiseCapability$1(C);
      var reject = capability.reject;
      var result = perform(function () {
        var $promiseResolve = aFunction$1(C.resolve);
        iterate_1(iterable, function (promise) {
          $promiseResolve.call(C, promise).then(capability.resolve, reject);
        });
      });
      if (result.error) reject(result.value);
      return capability.promise;
    }
  });

  var quot = /"/g;

  // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
  // https://tc39.github.io/ecma262/#sec-createhtml
  var createHtml = function (string, tag, attribute, value) {
    var S = String(requireObjectCoercible(string));
    var p1 = '<' + tag;
    if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
    return p1 + '>' + S + '</' + tag + '>';
  };

  // check the existence of a method, lowercase
  // of a tag and escaping quotes in arguments
  var forcedStringHtmlMethod = function (METHOD_NAME) {
    return fails(function () {
      var test = ''[METHOD_NAME]('"');
      return test !== test.toLowerCase() || test.split('"').length > 3;
    });
  };

  // `String.prototype.anchor` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.anchor
  _export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('anchor') }, {
    anchor: function anchor(name) {
      return createHtml(this, 'a', 'name', name);
    }
  });

  // iterable DOM collections
  // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
  var domIterables = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
  };

  for (var COLLECTION_NAME in domIterables) {
    var Collection = global_1[COLLECTION_NAME];
    var CollectionPrototype = Collection && Collection.prototype;
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {
      createNonEnumerableProperty(CollectionPrototype, 'forEach', arrayForEach);
    } catch (error) {
      CollectionPrototype.forEach = arrayForEach;
    }
  }

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
      return;
    }

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  var runtime_1 = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime = (function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype =
      Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] =
      GeneratorFunction.displayName = "GeneratorFunction";

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        prototype[method] = function(arg) {
          return this._invoke(method, arg);
        };
      });
    }

    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList)
      );

      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;

          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);

          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }

      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    Gp[toStringTagSymbol] = "Generator";

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function() {
      return this;
    };

    Gp.toString = function() {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;

    function doneResult() {
      return { value: undefined$1, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined$1;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !! caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;

  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
     module.exports 
  ));

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
  });

  var createProperty = function (object, key, value) {
    var propertyKey = toPrimitive(key);
    if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
    else object[propertyKey] = value;
  };

  var SPECIES$4 = wellKnownSymbol('species');

  var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
    // We can't use this feature detection in V8 since it causes
    // deoptimization and serious performance degradation
    // https://github.com/zloirock/core-js/issues/677
    return v8Version >= 51 || !fails(function () {
      var array = [];
      var constructor = array.constructor = {};
      constructor[SPECIES$4] = function () {
        return { foo: 1 };
      };
      return array[METHOD_NAME](Boolean).foo !== 1;
    });
  };

  var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
  var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
  var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/679
  var IS_CONCAT_SPREADABLE_SUPPORT = v8Version >= 51 || !fails(function () {
    var array = [];
    array[IS_CONCAT_SPREADABLE] = false;
    return array.concat()[0] !== array;
  });

  var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

  var isConcatSpreadable = function (O) {
    if (!isObject(O)) return false;
    var spreadable = O[IS_CONCAT_SPREADABLE];
    return spreadable !== undefined ? !!spreadable : isArray(O);
  };

  var FORCED$1 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

  // `Array.prototype.concat` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.concat
  // with adding support of @@isConcatSpreadable and @@species
  _export({ target: 'Array', proto: true, forced: FORCED$1 }, {
    concat: function concat(arg) { // eslint-disable-line no-unused-vars
      var O = toObject(this);
      var A = arraySpeciesCreate(O, 0);
      var n = 0;
      var i, k, length, len, E;
      for (i = -1, length = arguments.length; i < length; i++) {
        E = i === -1 ? O : arguments[i];
        if (isConcatSpreadable(E)) {
          len = toLength(E.length);
          if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
          for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
        } else {
          if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
          createProperty(A, n++, E);
        }
      }
      A.length = n;
      return A;
    }
  });

  var $filter = arrayIteration.filter;


  // `Array.prototype.filter` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
  // with adding support of @@species
  _export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('filter') }, {
    filter: function filter(callbackfn /* , thisArg */) {
      return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  // `Array.from` method implementation
  // https://tc39.github.io/ecma262/#sec-array.from
  var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var argumentsLength = arguments.length;
    var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iteratorMethod = getIteratorMethod(O);
    var length, result, step, iterator, next;
    if (mapping) mapfn = bindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
    // if the target is not iterable or it's an array with the default iterator - use a simple case
    if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
      iterator = iteratorMethod.call(O);
      next = iterator.next;
      result = new C();
      for (;!(step = next.call(iterator)).done; index++) {
        createProperty(result, index, mapping
          ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true)
          : step.value
        );
      }
    } else {
      length = toLength(O.length);
      result = new C(length);
      for (;length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  };

  var INCORRECT_ITERATION$1 = !checkCorrectnessOfIteration(function (iterable) {
    Array.from(iterable);
  });

  // `Array.from` method
  // https://tc39.github.io/ecma262/#sec-array.from
  _export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION$1 }, {
    from: arrayFrom
  });

  var $indexOf = arrayIncludes.indexOf;


  var nativeIndexOf = [].indexOf;

  var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
  var SLOPPY_METHOD = sloppyArrayMethod('indexOf');

  // `Array.prototype.indexOf` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
  _export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || SLOPPY_METHOD }, {
    indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
      return NEGATIVE_ZERO
        // convert -0 to +0
        ? nativeIndexOf.apply(this, arguments) || 0
        : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  // `Object.keys` method
  // https://tc39.github.io/ecma262/#sec-object.keys
  var objectKeys = Object.keys || function keys(O) {
    return objectKeysInternal(O, enumBugKeys);
  };

  // `Object.defineProperties` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperties
  var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var keys = objectKeys(Properties);
    var length = keys.length;
    var index = 0;
    var key;
    while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);
    return O;
  };

  var IE_PROTO = sharedKey('IE_PROTO');

  var PROTOTYPE = 'prototype';
  var Empty = function () { /* empty */ };

  // Create object with fake `null` prototype: use iframe Object with cleared prototype
  var createDict = function () {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = documentCreateElement('iframe');
    var length = enumBugKeys.length;
    var lt = '<';
    var script = 'script';
    var gt = '>';
    var js = 'java' + script + ':';
    var iframeDocument;
    iframe.style.display = 'none';
    html.appendChild(iframe);
    iframe.src = String(js);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while (length--) delete createDict[PROTOTYPE][enumBugKeys[length]];
    return createDict();
  };

  // `Object.create` method
  // https://tc39.github.io/ecma262/#sec-object.create
  var objectCreate = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      Empty[PROTOTYPE] = anObject(O);
      result = new Empty();
      Empty[PROTOTYPE] = null;
      // add "__proto__" for Object.getPrototypeOf polyfill
      result[IE_PROTO] = O;
    } else result = createDict();
    return Properties === undefined ? result : objectDefineProperties(result, Properties);
  };

  hiddenKeys[IE_PROTO] = true;

  var UNSCOPABLES = wellKnownSymbol('unscopables');
  var ArrayPrototype$1 = Array.prototype;

  // Array.prototype[@@unscopables]
  // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
  if (ArrayPrototype$1[UNSCOPABLES] == undefined) {
    createNonEnumerableProperty(ArrayPrototype$1, UNSCOPABLES, objectCreate(null));
  }

  // add a key to Array.prototype[@@unscopables]
  var addToUnscopables = function (key) {
    ArrayPrototype$1[UNSCOPABLES][key] = true;
  };

  var correctPrototypeGetter = !fails(function () {
    function F() { /* empty */ }
    F.prototype.constructor = null;
    return Object.getPrototypeOf(new F()) !== F.prototype;
  });

  var IE_PROTO$1 = sharedKey('IE_PROTO');
  var ObjectPrototype = Object.prototype;

  // `Object.getPrototypeOf` method
  // https://tc39.github.io/ecma262/#sec-object.getprototypeof
  var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
    O = toObject(O);
    if (has(O, IE_PROTO$1)) return O[IE_PROTO$1];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    } return O instanceof Object ? ObjectPrototype : null;
  };

  var ITERATOR$3 = wellKnownSymbol('iterator');
  var BUGGY_SAFARI_ITERATORS = false;

  var returnThis = function () { return this; };

  // `%IteratorPrototype%` object
  // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
  var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

  if ([].keys) {
    arrayIterator = [].keys();
    // Safari 8 has buggy iterators w/o `next`
    if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
    else {
      PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
      if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
    }
  }

  if (IteratorPrototype == undefined) IteratorPrototype = {};

  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  if ( !has(IteratorPrototype, ITERATOR$3)) {
    createNonEnumerableProperty(IteratorPrototype, ITERATOR$3, returnThis);
  }

  var iteratorsCore = {
    IteratorPrototype: IteratorPrototype,
    BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
  };

  var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





  var returnThis$1 = function () { return this; };

  var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
    var TO_STRING_TAG = NAME + ' Iterator';
    IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next) });
    setToStringTag(IteratorConstructor, TO_STRING_TAG, false);
    iterators[TO_STRING_TAG] = returnThis$1;
    return IteratorConstructor;
  };

  var aPossiblePrototype = function (it) {
    if (!isObject(it) && it !== null) {
      throw TypeError("Can't set " + String(it) + ' as a prototype');
    } return it;
  };

  // `Object.setPrototypeOf` method
  // https://tc39.github.io/ecma262/#sec-object.setprototypeof
  // Works with __proto__ only. Old v8 can't work with null proto objects.
  /* eslint-disable no-proto */
  var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
    var CORRECT_SETTER = false;
    var test = {};
    var setter;
    try {
      setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
      setter.call(test, []);
      CORRECT_SETTER = test instanceof Array;
    } catch (error) { /* empty */ }
    return function setPrototypeOf(O, proto) {
      anObject(O);
      aPossiblePrototype(proto);
      if (CORRECT_SETTER) setter.call(O, proto);
      else O.__proto__ = proto;
      return O;
    };
  }() : undefined);

  var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
  var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
  var ITERATOR$4 = wellKnownSymbol('iterator');
  var KEYS = 'keys';
  var VALUES = 'values';
  var ENTRIES = 'entries';

  var returnThis$2 = function () { return this; };

  var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
    createIteratorConstructor(IteratorConstructor, NAME, next);

    var getIterationMethod = function (KIND) {
      if (KIND === DEFAULT && defaultIterator) return defaultIterator;
      if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
      switch (KIND) {
        case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
        case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
        case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
      } return function () { return new IteratorConstructor(this); };
    };

    var TO_STRING_TAG = NAME + ' Iterator';
    var INCORRECT_VALUES_NAME = false;
    var IterablePrototype = Iterable.prototype;
    var nativeIterator = IterablePrototype[ITERATOR$4]
      || IterablePrototype['@@iterator']
      || DEFAULT && IterablePrototype[DEFAULT];
    var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
    var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
    var CurrentIteratorPrototype, methods, KEY;

    // fix native
    if (anyNativeIterator) {
      CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
      if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
        if ( objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
          if (objectSetPrototypeOf) {
            objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
          } else if (typeof CurrentIteratorPrototype[ITERATOR$4] != 'function') {
            createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR$4, returnThis$2);
          }
        }
        // Set @@toStringTag to native iterators
        setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);
      }
    }

    // fix Array#{values, @@iterator}.name in V8 / FF
    if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() { return nativeIterator.call(this); };
    }

    // define iterator
    if ( IterablePrototype[ITERATOR$4] !== defaultIterator) {
      createNonEnumerableProperty(IterablePrototype, ITERATOR$4, defaultIterator);
    }
    iterators[NAME] = defaultIterator;

    // export additional methods
    if (DEFAULT) {
      methods = {
        values: getIterationMethod(VALUES),
        keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
        entries: getIterationMethod(ENTRIES)
      };
      if (FORCED) for (KEY in methods) {
        if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
          redefine(IterablePrototype, KEY, methods[KEY]);
        }
      } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
    }

    return methods;
  };

  var ARRAY_ITERATOR = 'Array Iterator';
  var setInternalState$1 = internalState.set;
  var getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR);

  // `Array.prototype.entries` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.entries
  // `Array.prototype.keys` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.keys
  // `Array.prototype.values` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.values
  // `Array.prototype[@@iterator]` method
  // https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
  // `CreateArrayIterator` internal method
  // https://tc39.github.io/ecma262/#sec-createarrayiterator
  var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
    setInternalState$1(this, {
      type: ARRAY_ITERATOR,
      target: toIndexedObject(iterated), // target
      index: 0,                          // next index
      kind: kind                         // kind
    });
  // `%ArrayIteratorPrototype%.next` method
  // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
  }, function () {
    var state = getInternalState$1(this);
    var target = state.target;
    var kind = state.kind;
    var index = state.index++;
    if (!target || index >= target.length) {
      state.target = undefined;
      return { value: undefined, done: true };
    }
    if (kind == 'keys') return { value: index, done: false };
    if (kind == 'values') return { value: target[index], done: false };
    return { value: [index, target[index]], done: false };
  }, 'values');

  // argumentsList[@@iterator] is %ArrayProto_values%
  // https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
  // https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
  iterators.Arguments = iterators.Array;

  // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');

  var nativeJoin = [].join;

  var ES3_STRINGS = indexedObject != Object;
  var SLOPPY_METHOD$1 = sloppyArrayMethod('join', ',');

  // `Array.prototype.join` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.join
  _export({ target: 'Array', proto: true, forced: ES3_STRINGS || SLOPPY_METHOD$1 }, {
    join: function join(separator) {
      return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
    }
  });

  var $map = arrayIteration.map;


  // `Array.prototype.map` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.map
  // with adding support of @@species
  _export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('map') }, {
    map: function map(callbackfn /* , thisArg */) {
      return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var SPECIES$5 = wellKnownSymbol('species');
  var nativeSlice = [].slice;
  var max$1 = Math.max;

  // `Array.prototype.slice` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.slice
  // fallback for not array-like ES3 strings and DOM objects
  _export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('slice') }, {
    slice: function slice(start, end) {
      var O = toIndexedObject(this);
      var length = toLength(O.length);
      var k = toAbsoluteIndex(start, length);
      var fin = toAbsoluteIndex(end === undefined ? length : end, length);
      // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
      var Constructor, result, n;
      if (isArray(O)) {
        Constructor = O.constructor;
        // cross-realm fallback
        if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
          Constructor = undefined;
        } else if (isObject(Constructor)) {
          Constructor = Constructor[SPECIES$5];
          if (Constructor === null) Constructor = undefined;
        }
        if (Constructor === Array || Constructor === undefined) {
          return nativeSlice.call(O, k, fin);
        }
      }
      result = new (Constructor === undefined ? Array : Constructor)(max$1(fin - k, 0));
      for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
      result.length = n;
      return result;
    }
  });

  var max$2 = Math.max;
  var min$2 = Math.min;
  var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
  var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

  // `Array.prototype.splice` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.splice
  // with adding support of @@species
  _export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('splice') }, {
    splice: function splice(start, deleteCount /* , ...items */) {
      var O = toObject(this);
      var len = toLength(O.length);
      var actualStart = toAbsoluteIndex(start, len);
      var argumentsLength = arguments.length;
      var insertCount, actualDeleteCount, A, k, from, to;
      if (argumentsLength === 0) {
        insertCount = actualDeleteCount = 0;
      } else if (argumentsLength === 1) {
        insertCount = 0;
        actualDeleteCount = len - actualStart;
      } else {
        insertCount = argumentsLength - 2;
        actualDeleteCount = min$2(max$2(toInteger(deleteCount), 0), len - actualStart);
      }
      if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$1) {
        throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
      }
      A = arraySpeciesCreate(O, actualDeleteCount);
      for (k = 0; k < actualDeleteCount; k++) {
        from = actualStart + k;
        if (from in O) createProperty(A, k, O[from]);
      }
      A.length = actualDeleteCount;
      if (insertCount < actualDeleteCount) {
        for (k = actualStart; k < len - actualDeleteCount; k++) {
          from = k + actualDeleteCount;
          to = k + insertCount;
          if (from in O) O[to] = O[from];
          else delete O[to];
        }
        for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
      } else if (insertCount > actualDeleteCount) {
        for (k = len - actualDeleteCount; k > actualStart; k--) {
          from = k + actualDeleteCount - 1;
          to = k + insertCount - 1;
          if (from in O) O[to] = O[from];
          else delete O[to];
        }
      }
      for (k = 0; k < insertCount; k++) {
        O[k + actualStart] = arguments[k + 2];
      }
      O.length = len - actualDeleteCount + insertCount;
      return A;
    }
  });

  var DatePrototype = Date.prototype;
  var INVALID_DATE = 'Invalid Date';
  var TO_STRING = 'toString';
  var nativeDateToString = DatePrototype[TO_STRING];
  var getTime = DatePrototype.getTime;

  // `Date.prototype.toString` method
  // https://tc39.github.io/ecma262/#sec-date.prototype.tostring
  if (new Date(NaN) + '' != INVALID_DATE) {
    redefine(DatePrototype, TO_STRING, function toString() {
      var value = getTime.call(this);
      // eslint-disable-next-line no-self-compare
      return value === value ? nativeDateToString.call(this) : INVALID_DATE;
    });
  }

  var freezing = !fails(function () {
    return Object.isExtensible(Object.preventExtensions({}));
  });

  var internalMetadata = createCommonjsModule(function (module) {
  var defineProperty = objectDefineProperty.f;



  var METADATA = uid('meta');
  var id = 0;

  var isExtensible = Object.isExtensible || function () {
    return true;
  };

  var setMetadata = function (it) {
    defineProperty(it, METADATA, { value: {
      objectID: 'O' + ++id, // object ID
      weakData: {}          // weak collections IDs
    } });
  };

  var fastKey = function (it, create) {
    // return a primitive with prefix
    if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!has(it, METADATA)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return 'F';
      // not necessary to add metadata
      if (!create) return 'E';
      // add missing metadata
      setMetadata(it);
    // return object ID
    } return it[METADATA].objectID;
  };

  var getWeakData = function (it, create) {
    if (!has(it, METADATA)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return true;
      // not necessary to add metadata
      if (!create) return false;
      // add missing metadata
      setMetadata(it);
    // return the store of weak collections IDs
    } return it[METADATA].weakData;
  };

  // add metadata on freeze-family methods calling
  var onFreeze = function (it) {
    if (freezing && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
    return it;
  };

  var meta = module.exports = {
    REQUIRED: false,
    fastKey: fastKey,
    getWeakData: getWeakData,
    onFreeze: onFreeze
  };

  hiddenKeys[METADATA] = true;
  });
  var internalMetadata_1 = internalMetadata.REQUIRED;
  var internalMetadata_2 = internalMetadata.fastKey;
  var internalMetadata_3 = internalMetadata.getWeakData;
  var internalMetadata_4 = internalMetadata.onFreeze;

  // makes subclassing work correct for wrapped built-ins
  var inheritIfRequired = function ($this, dummy, Wrapper) {
    var NewTarget, NewTargetPrototype;
    if (
      // it can work only with native `setPrototypeOf`
      objectSetPrototypeOf &&
      // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
      typeof (NewTarget = dummy.constructor) == 'function' &&
      NewTarget !== Wrapper &&
      isObject(NewTargetPrototype = NewTarget.prototype) &&
      NewTargetPrototype !== Wrapper.prototype
    ) objectSetPrototypeOf($this, NewTargetPrototype);
    return $this;
  };

  var collection = function (CONSTRUCTOR_NAME, wrapper, common) {
    var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
    var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
    var ADDER = IS_MAP ? 'set' : 'add';
    var NativeConstructor = global_1[CONSTRUCTOR_NAME];
    var NativePrototype = NativeConstructor && NativeConstructor.prototype;
    var Constructor = NativeConstructor;
    var exported = {};

    var fixMethod = function (KEY) {
      var nativeMethod = NativePrototype[KEY];
      redefine(NativePrototype, KEY,
        KEY == 'add' ? function add(value) {
          nativeMethod.call(this, value === 0 ? 0 : value);
          return this;
        } : KEY == 'delete' ? function (key) {
          return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
        } : KEY == 'get' ? function get(key) {
          return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
        } : KEY == 'has' ? function has(key) {
          return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
        } : function set(key, value) {
          nativeMethod.call(this, key === 0 ? 0 : key, value);
          return this;
        }
      );
    };

    // eslint-disable-next-line max-len
    if (isForced_1(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
      new NativeConstructor().entries().next();
    })))) {
      // create collection constructor
      Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
      internalMetadata.REQUIRED = true;
    } else if (isForced_1(CONSTRUCTOR_NAME, true)) {
      var instance = new Constructor();
      // early implementations not supports chaining
      var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
      // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
      var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      // eslint-disable-next-line no-new
      var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
      // for early implementations -0 and +0 not the same
      var BUGGY_ZERO = !IS_WEAK && fails(function () {
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new NativeConstructor();
        var index = 5;
        while (index--) $instance[ADDER](index, index);
        return !$instance.has(-0);
      });

      if (!ACCEPT_ITERABLES) {
        Constructor = wrapper(function (dummy, iterable) {
          anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
          var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
          if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
          return that;
        });
        Constructor.prototype = NativePrototype;
        NativePrototype.constructor = Constructor;
      }

      if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
        fixMethod('delete');
        fixMethod('has');
        IS_MAP && fixMethod('get');
      }

      if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

      // weak collections should not contains .clear method
      if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
    }

    exported[CONSTRUCTOR_NAME] = Constructor;
    _export({ global: true, forced: Constructor != NativeConstructor }, exported);

    setToStringTag(Constructor, CONSTRUCTOR_NAME);

    if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

    return Constructor;
  };

  var defineProperty$2 = objectDefineProperty.f;








  var fastKey = internalMetadata.fastKey;


  var setInternalState$2 = internalState.set;
  var internalStateGetterFor = internalState.getterFor;

  var collectionStrong = {
    getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
      var C = wrapper(function (that, iterable) {
        anInstance(that, C, CONSTRUCTOR_NAME);
        setInternalState$2(that, {
          type: CONSTRUCTOR_NAME,
          index: objectCreate(null),
          first: undefined,
          last: undefined,
          size: 0
        });
        if (!descriptors) that.size = 0;
        if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
      });

      var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

      var define = function (that, key, value) {
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        var previous, index;
        // change existing entry
        if (entry) {
          entry.value = value;
        // create new entry
        } else {
          state.last = entry = {
            index: index = fastKey(key, true),
            key: key,
            value: value,
            previous: previous = state.last,
            next: undefined,
            removed: false
          };
          if (!state.first) state.first = entry;
          if (previous) previous.next = entry;
          if (descriptors) state.size++;
          else that.size++;
          // add to index
          if (index !== 'F') state.index[index] = entry;
        } return that;
      };

      var getEntry = function (that, key) {
        var state = getInternalState(that);
        // fast case
        var index = fastKey(key);
        var entry;
        if (index !== 'F') return state.index[index];
        // frozen object case
        for (entry = state.first; entry; entry = entry.next) {
          if (entry.key == key) return entry;
        }
      };

      redefineAll(C.prototype, {
        // 23.1.3.1 Map.prototype.clear()
        // 23.2.3.2 Set.prototype.clear()
        clear: function clear() {
          var that = this;
          var state = getInternalState(that);
          var data = state.index;
          var entry = state.first;
          while (entry) {
            entry.removed = true;
            if (entry.previous) entry.previous = entry.previous.next = undefined;
            delete data[entry.index];
            entry = entry.next;
          }
          state.first = state.last = undefined;
          if (descriptors) state.size = 0;
          else that.size = 0;
        },
        // 23.1.3.3 Map.prototype.delete(key)
        // 23.2.3.4 Set.prototype.delete(value)
        'delete': function (key) {
          var that = this;
          var state = getInternalState(that);
          var entry = getEntry(that, key);
          if (entry) {
            var next = entry.next;
            var prev = entry.previous;
            delete state.index[entry.index];
            entry.removed = true;
            if (prev) prev.next = next;
            if (next) next.previous = prev;
            if (state.first == entry) state.first = next;
            if (state.last == entry) state.last = prev;
            if (descriptors) state.size--;
            else that.size--;
          } return !!entry;
        },
        // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
        // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
        forEach: function forEach(callbackfn /* , that = undefined */) {
          var state = getInternalState(this);
          var boundFunction = bindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          var entry;
          while (entry = entry ? entry.next : state.first) {
            boundFunction(entry.value, entry.key, this);
            // revert to the last existing entry
            while (entry && entry.removed) entry = entry.previous;
          }
        },
        // 23.1.3.7 Map.prototype.has(key)
        // 23.2.3.7 Set.prototype.has(value)
        has: function has(key) {
          return !!getEntry(this, key);
        }
      });

      redefineAll(C.prototype, IS_MAP ? {
        // 23.1.3.6 Map.prototype.get(key)
        get: function get(key) {
          var entry = getEntry(this, key);
          return entry && entry.value;
        },
        // 23.1.3.9 Map.prototype.set(key, value)
        set: function set(key, value) {
          return define(this, key === 0 ? 0 : key, value);
        }
      } : {
        // 23.2.3.1 Set.prototype.add(value)
        add: function add(value) {
          return define(this, value = value === 0 ? 0 : value, value);
        }
      });
      if (descriptors) defineProperty$2(C.prototype, 'size', {
        get: function () {
          return getInternalState(this).size;
        }
      });
      return C;
    },
    setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
      var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
      var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
      var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
      // add .keys, .values, .entries, [@@iterator]
      // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
      defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
        setInternalState$2(this, {
          type: ITERATOR_NAME,
          target: iterated,
          state: getInternalCollectionState(iterated),
          kind: kind,
          last: undefined
        });
      }, function () {
        var state = getInternalIteratorState(this);
        var kind = state.kind;
        var entry = state.last;
        // revert to the last existing entry
        while (entry && entry.removed) entry = entry.previous;
        // get next entry
        if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
          // or finish the iteration
          state.target = undefined;
          return { value: undefined, done: true };
        }
        // return step by kind
        if (kind == 'keys') return { value: entry.key, done: false };
        if (kind == 'values') return { value: entry.value, done: false };
        return { value: [entry.key, entry.value], done: false };
      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

      // add [@@species], 23.1.2.2, 23.2.2.2
      setSpecies(CONSTRUCTOR_NAME);
    }
  };

  // `Map` constructor
  // https://tc39.github.io/ecma262/#sec-map-objects
  var es_map = collection('Map', function (init) {
    return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
  }, collectionStrong);

  var nativeAssign = Object.assign;

  // `Object.assign` method
  // https://tc39.github.io/ecma262/#sec-object.assign
  // should work with symbols and should have deterministic property order (V8 bug)
  var objectAssign = !nativeAssign || fails(function () {
    var A = {};
    var B = {};
    // eslint-disable-next-line no-undef
    var symbol = Symbol();
    var alphabet = 'abcdefghijklmnopqrst';
    A[symbol] = 7;
    alphabet.split('').forEach(function (chr) { B[chr] = chr; });
    return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
  }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
    var T = toObject(target);
    var argumentsLength = arguments.length;
    var index = 1;
    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
    var propertyIsEnumerable = objectPropertyIsEnumerable.f;
    while (argumentsLength > index) {
      var S = indexedObject(arguments[index++]);
      var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
      var length = keys.length;
      var j = 0;
      var key;
      while (length > j) {
        key = keys[j++];
        if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
      }
    } return T;
  } : nativeAssign;

  // `Object.assign` method
  // https://tc39.github.io/ecma262/#sec-object.assign
  _export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {
    assign: objectAssign
  });

  // `Object.getOwnPropertyDescriptors` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
  _export({ target: 'Object', stat: true, sham: !descriptors }, {
    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
      var O = toIndexedObject(object);
      var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
      var keys = ownKeys(O);
      var result = {};
      var index = 0;
      var key, descriptor;
      while (keys.length > index) {
        descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
        if (descriptor !== undefined) createProperty(result, key, descriptor);
      }
      return result;
    }
  });

  var FAILS_ON_PRIMITIVES = fails(function () { objectKeys(1); });

  // `Object.keys` method
  // https://tc39.github.io/ecma262/#sec-object.keys
  _export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
    keys: function keys(it) {
      return objectKeys(toObject(it));
    }
  });

  // `RegExp.prototype.flags` getter implementation
  // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
  var regexpFlags = function () {
    var that = anObject(this);
    var result = '';
    if (that.global) result += 'g';
    if (that.ignoreCase) result += 'i';
    if (that.multiline) result += 'm';
    if (that.dotAll) result += 's';
    if (that.unicode) result += 'u';
    if (that.sticky) result += 'y';
    return result;
  };

  var nativeExec = RegExp.prototype.exec;
  // This always refers to the native implementation, because the
  // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
  // which loads this file before patching the method.
  var nativeReplace = String.prototype.replace;

  var patchedExec = nativeExec;

  var UPDATES_LAST_INDEX_WRONG = (function () {
    var re1 = /a/;
    var re2 = /b*/g;
    nativeExec.call(re1, 'a');
    nativeExec.call(re2, 'a');
    return re1.lastIndex !== 0 || re2.lastIndex !== 0;
  })();

  // nonparticipating capturing group, copied from es5-shim's String#split patch.
  var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

  if (PATCH) {
    patchedExec = function exec(str) {
      var re = this;
      var lastIndex, reCopy, match, i;

      if (NPCG_INCLUDED) {
        reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
      }
      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

      match = nativeExec.call(re, str);

      if (UPDATES_LAST_INDEX_WRONG && match) {
        re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
      }
      if (NPCG_INCLUDED && match && match.length > 1) {
        // Fix browsers whose `exec` methods don't consistently return `undefined`
        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
        nativeReplace.call(match[0], reCopy, function () {
          for (i = 1; i < arguments.length - 2; i++) {
            if (arguments[i] === undefined) match[i] = undefined;
          }
        });
      }

      return match;
    };
  }

  var regexpExec = patchedExec;

  _export({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {
    exec: regexpExec
  });

  // `Set` constructor
  // https://tc39.github.io/ecma262/#sec-set-objects
  var es_set = collection('Set', function (init) {
    return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
  }, collectionStrong);

  // `String.prototype.{ codePointAt, at }` methods implementation
  var createMethod$2 = function (CONVERT_TO_STRING) {
    return function ($this, pos) {
      var S = String(requireObjectCoercible($this));
      var position = toInteger(pos);
      var size = S.length;
      var first, second;
      if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
      first = S.charCodeAt(position);
      return first < 0xD800 || first > 0xDBFF || position + 1 === size
        || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
          ? CONVERT_TO_STRING ? S.charAt(position) : first
          : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
    };
  };

  var stringMultibyte = {
    // `String.prototype.codePointAt` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
    codeAt: createMethod$2(false),
    // `String.prototype.at` method
    // https://github.com/mathiasbynens/String.prototype.at
    charAt: createMethod$2(true)
  };

  var charAt = stringMultibyte.charAt;



  var STRING_ITERATOR = 'String Iterator';
  var setInternalState$3 = internalState.set;
  var getInternalState$2 = internalState.getterFor(STRING_ITERATOR);

  // `String.prototype[@@iterator]` method
  // https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
  defineIterator(String, 'String', function (iterated) {
    setInternalState$3(this, {
      type: STRING_ITERATOR,
      string: String(iterated),
      index: 0
    });
  // `%StringIteratorPrototype%.next` method
  // https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
  }, function next() {
    var state = getInternalState$2(this);
    var string = state.string;
    var index = state.index;
    var point;
    if (index >= string.length) return { value: undefined, done: true };
    point = charAt(string, index);
    state.index += point.length;
    return { value: point, done: false };
  });

  var SPECIES$6 = wellKnownSymbol('species');

  var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
    // #replace needs built-in support for named groups.
    // #match works fine because it just return the exec results, even if it has
    // a "grops" property.
    var re = /./;
    re.exec = function () {
      var result = [];
      result.groups = { a: '7' };
      return result;
    };
    return ''.replace(re, '$<a>') !== '7';
  });

  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  // Weex JS has frozen built-in prototypes, so use try / catch wrapper
  var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
    var re = /(?:)/;
    var originalExec = re.exec;
    re.exec = function () { return originalExec.apply(this, arguments); };
    var result = 'ab'.split(re);
    return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
  });

  var fixRegexpWellKnownSymbolLogic = function (KEY, length, exec, sham) {
    var SYMBOL = wellKnownSymbol(KEY);

    var DELEGATES_TO_SYMBOL = !fails(function () {
      // String methods call symbol-named RegEp methods
      var O = {};
      O[SYMBOL] = function () { return 7; };
      return ''[KEY](O) != 7;
    });

    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
      // Symbol-named RegExp methods call .exec
      var execCalled = false;
      var re = /a/;

      if (KEY === 'split') {
        // We can't use real regex here since it causes deoptimization
        // and serious performance degradation in V8
        // https://github.com/zloirock/core-js/issues/306
        re = {};
        // RegExp[@@split] doesn't call the regex's exec method, but first creates
        // a new one. We need to return the patched regex when creating the new one.
        re.constructor = {};
        re.constructor[SPECIES$6] = function () { return re; };
        re.flags = '';
        re[SYMBOL] = /./[SYMBOL];
      }

      re.exec = function () { execCalled = true; return null; };

      re[SYMBOL]('');
      return !execCalled;
    });

    if (
      !DELEGATES_TO_SYMBOL ||
      !DELEGATES_TO_EXEC ||
      (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
      (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
    ) {
      var nativeRegExpMethod = /./[SYMBOL];
      var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      });
      var stringMethod = methods[0];
      var regexMethod = methods[1];

      redefine(String.prototype, KEY, stringMethod);
      redefine(RegExp.prototype, SYMBOL, length == 2
        // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
        // 21.2.5.11 RegExp.prototype[@@split](string, limit)
        ? function (string, arg) { return regexMethod.call(string, this, arg); }
        // 21.2.5.6 RegExp.prototype[@@match](string)
        // 21.2.5.9 RegExp.prototype[@@search](string)
        : function (string) { return regexMethod.call(string, this); }
      );
      if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
    }
  };

  var charAt$1 = stringMultibyte.charAt;

  // `AdvanceStringIndex` abstract operation
  // https://tc39.github.io/ecma262/#sec-advancestringindex
  var advanceStringIndex = function (S, index, unicode) {
    return index + (unicode ? charAt$1(S, index).length : 1);
  };

  // `RegExpExec` abstract operation
  // https://tc39.github.io/ecma262/#sec-regexpexec
  var regexpExecAbstract = function (R, S) {
    var exec = R.exec;
    if (typeof exec === 'function') {
      var result = exec.call(R, S);
      if (typeof result !== 'object') {
        throw TypeError('RegExp exec method returned something other than an Object or null');
      }
      return result;
    }

    if (classofRaw(R) !== 'RegExp') {
      throw TypeError('RegExp#exec called on incompatible receiver');
    }

    return regexpExec.call(R, S);
  };

  var max$3 = Math.max;
  var min$3 = Math.min;
  var floor$1 = Math.floor;
  var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

  var maybeToString = function (it) {
    return it === undefined ? it : String(it);
  };

  // @@replace logic
  fixRegexpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative) {
    return [
      // `String.prototype.replace` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.replace
      function replace(searchValue, replaceValue) {
        var O = requireObjectCoercible(this);
        var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
        return replacer !== undefined
          ? replacer.call(searchValue, O, replaceValue)
          : nativeReplace.call(String(O), searchValue, replaceValue);
      },
      // `RegExp.prototype[@@replace]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
      function (regexp, replaceValue) {
        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
        if (res.done) return res.value;

        var rx = anObject(regexp);
        var S = String(this);

        var functionalReplace = typeof replaceValue === 'function';
        if (!functionalReplace) replaceValue = String(replaceValue);

        var global = rx.global;
        if (global) {
          var fullUnicode = rx.unicode;
          rx.lastIndex = 0;
        }
        var results = [];
        while (true) {
          var result = regexpExecAbstract(rx, S);
          if (result === null) break;

          results.push(result);
          if (!global) break;

          var matchStr = String(result[0]);
          if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        }

        var accumulatedResult = '';
        var nextSourcePosition = 0;
        for (var i = 0; i < results.length; i++) {
          result = results[i];

          var matched = String(result[0]);
          var position = max$3(min$3(toInteger(result.index), S.length), 0);
          var captures = [];
          // NOTE: This is equivalent to
          //   captures = result.slice(1).map(maybeToString)
          // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
          // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
          // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
          for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
          var namedCaptures = result.groups;
          if (functionalReplace) {
            var replacerArgs = [matched].concat(captures, position, S);
            if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
            var replacement = String(replaceValue.apply(undefined, replacerArgs));
          } else {
            replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
          }
          if (position >= nextSourcePosition) {
            accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
            nextSourcePosition = position + matched.length;
          }
        }
        return accumulatedResult + S.slice(nextSourcePosition);
      }
    ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
    function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
      var tailPos = position + matched.length;
      var m = captures.length;
      var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
      if (namedCaptures !== undefined) {
        namedCaptures = toObject(namedCaptures);
        symbols = SUBSTITUTION_SYMBOLS;
      }
      return nativeReplace.call(replacement, symbols, function (match, ch) {
        var capture;
        switch (ch.charAt(0)) {
          case '$': return '$';
          case '&': return matched;
          case '`': return str.slice(0, position);
          case "'": return str.slice(tailPos);
          case '<':
            capture = namedCaptures[ch.slice(1, -1)];
            break;
          default: // \d\d?
            var n = +ch;
            if (n === 0) return match;
            if (n > m) {
              var f = floor$1(n / 10);
              if (f === 0) return match;
              if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
              return match;
            }
            capture = captures[n - 1];
        }
        return capture === undefined ? '' : capture;
      });
    }
  });

  var MATCH = wellKnownSymbol('match');

  // `IsRegExp` abstract operation
  // https://tc39.github.io/ecma262/#sec-isregexp
  var isRegexp = function (it) {
    var isRegExp;
    return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
  };

  var arrayPush = [].push;
  var min$4 = Math.min;
  var MAX_UINT32 = 0xFFFFFFFF;

  // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
  var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

  // @@split logic
  fixRegexpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
    var internalSplit;
    if (
      'abbc'.split(/(b)*/)[1] == 'c' ||
      'test'.split(/(?:)/, -1).length != 4 ||
      'ab'.split(/(?:ab)*/).length != 2 ||
      '.'.split(/(.?)(.?)/).length != 4 ||
      '.'.split(/()()/).length > 1 ||
      ''.split(/.?/).length
    ) {
      // based on es5-shim implementation, need to rework it
      internalSplit = function (separator, limit) {
        var string = String(requireObjectCoercible(this));
        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
        if (lim === 0) return [];
        if (separator === undefined) return [string];
        // If `separator` is not a regex, use native split
        if (!isRegexp(separator)) {
          return nativeSplit.call(string, separator, lim);
        }
        var output = [];
        var flags = (separator.ignoreCase ? 'i' : '') +
                    (separator.multiline ? 'm' : '') +
                    (separator.unicode ? 'u' : '') +
                    (separator.sticky ? 'y' : '');
        var lastLastIndex = 0;
        // Make `global` and avoid `lastIndex` issues by working with a copy
        var separatorCopy = new RegExp(separator.source, flags + 'g');
        var match, lastIndex, lastLength;
        while (match = regexpExec.call(separatorCopy, string)) {
          lastIndex = separatorCopy.lastIndex;
          if (lastIndex > lastLastIndex) {
            output.push(string.slice(lastLastIndex, match.index));
            if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
            lastLength = match[0].length;
            lastLastIndex = lastIndex;
            if (output.length >= lim) break;
          }
          if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
        }
        if (lastLastIndex === string.length) {
          if (lastLength || !separatorCopy.test('')) output.push('');
        } else output.push(string.slice(lastLastIndex));
        return output.length > lim ? output.slice(0, lim) : output;
      };
    // Chakra, V8
    } else if ('0'.split(undefined, 0).length) {
      internalSplit = function (separator, limit) {
        return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
      };
    } else internalSplit = nativeSplit;

    return [
      // `String.prototype.split` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.split
      function split(separator, limit) {
        var O = requireObjectCoercible(this);
        var splitter = separator == undefined ? undefined : separator[SPLIT];
        return splitter !== undefined
          ? splitter.call(separator, O, limit)
          : internalSplit.call(String(O), separator, limit);
      },
      // `RegExp.prototype[@@split]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
      //
      // NOTE: This cannot be properly polyfilled in engines that don't support
      // the 'y' flag.
      function (regexp, limit) {
        var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
        if (res.done) return res.value;

        var rx = anObject(regexp);
        var S = String(this);
        var C = speciesConstructor(rx, RegExp);

        var unicodeMatching = rx.unicode;
        var flags = (rx.ignoreCase ? 'i' : '') +
                    (rx.multiline ? 'm' : '') +
                    (rx.unicode ? 'u' : '') +
                    (SUPPORTS_Y ? 'y' : 'g');

        // ^(? + rx + ) is needed, in combination with some S slicing, to
        // simulate the 'y' flag.
        var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
        if (lim === 0) return [];
        if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];
        var p = 0;
        var q = 0;
        var A = [];
        while (q < S.length) {
          splitter.lastIndex = SUPPORTS_Y ? q : 0;
          var z = regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
          var e;
          if (
            z === null ||
            (e = min$4(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
          ) {
            q = advanceStringIndex(S, q, unicodeMatching);
          } else {
            A.push(S.slice(p, q));
            if (A.length === lim) return A;
            for (var i = 1; i <= z.length - 1; i++) {
              A.push(z[i]);
              if (A.length === lim) return A;
            }
            q = p = e;
          }
        }
        A.push(S.slice(p));
        return A;
      }
    ];
  }, !SUPPORTS_Y);

  var ITERATOR$5 = wellKnownSymbol('iterator');
  var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
  var ArrayValues = es_array_iterator.values;

  for (var COLLECTION_NAME$1 in domIterables) {
    var Collection$1 = global_1[COLLECTION_NAME$1];
    var CollectionPrototype$1 = Collection$1 && Collection$1.prototype;
    if (CollectionPrototype$1) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype$1[ITERATOR$5] !== ArrayValues) try {
        createNonEnumerableProperty(CollectionPrototype$1, ITERATOR$5, ArrayValues);
      } catch (error) {
        CollectionPrototype$1[ITERATOR$5] = ArrayValues;
      }
      if (!CollectionPrototype$1[TO_STRING_TAG$3]) {
        createNonEnumerableProperty(CollectionPrototype$1, TO_STRING_TAG$3, COLLECTION_NAME$1);
      }
      if (domIterables[COLLECTION_NAME$1]) for (var METHOD_NAME in es_array_iterator) {
        // some Chrome versions have non-configurable methods on DOMTokenList
        if (CollectionPrototype$1[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
          createNonEnumerableProperty(CollectionPrototype$1, METHOD_NAME, es_array_iterator[METHOD_NAME]);
        } catch (error) {
          CollectionPrototype$1[METHOD_NAME] = es_array_iterator[METHOD_NAME];
        }
      }
    }
  }

  function noop() {}

  function assign(tar, src) {
    // @ts-ignore
    for (var k in src) {
      tar[k] = src[k];
    }

    return tar;
  }

  function is_promise(value) {
    return value && _typeof(value) === 'object' && typeof value.then === 'function';
  }

  function add_location(element, file, line, column, char) {
    element.__svelte_meta = {
      loc: {
        file: file,
        line: line,
        column: column,
        char: char
      }
    };
  }

  function run$1(fn) {
    return fn();
  }

  function blank_object() {
    return Object.create(null);
  }

  function run_all(fns) {
    fns.forEach(run$1);
  }

  function is_function(thing) {
    return typeof thing === 'function';
  }

  function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || a && _typeof(a) === 'object' || typeof a === 'function';
  }

  function create_slot(definition, ctx, fn) {
    if (definition) {
      var slot_ctx = get_slot_context(definition, ctx, fn);
      return definition[0](slot_ctx);
    }
  }

  function get_slot_context(definition, ctx, fn) {
    return definition[1] ? assign({}, assign(ctx.$$scope.ctx, definition[1](fn ? fn(ctx) : {}))) : ctx.$$scope.ctx;
  }

  function get_slot_changes(definition, ctx, changed, fn) {
    return definition[1] ? assign({}, assign(ctx.$$scope.changed || {}, definition[1](fn ? fn(changed) : {}))) : ctx.$$scope.changed || {};
  }

  function null_to_empty(value) {
    return value == null ? '' : value;
  }

  function append(target, node) {
    target.appendChild(node);
  }

  function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
  }

  function detach(node) {
    node.parentNode.removeChild(node);
  }

  function element(name) {
    return document.createElement(name);
  }

  function text(data) {
    return document.createTextNode(data);
  }

  function space() {
    return text(' ');
  }

  function empty() {
    return text('');
  }

  function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return function () {
      return node.removeEventListener(event, handler, options);
    };
  }

  function prevent_default(fn) {
    return function (event) {
      event.preventDefault(); // @ts-ignore

      return fn.call(this, event);
    };
  }

  function attr(node, attribute, value) {
    if (value == null) node.removeAttribute(attribute);else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
  }

  function to_number(value) {
    return value === '' ? undefined : +value;
  }

  function children(element) {
    return Array.from(element.childNodes);
  }

  function set_input_value(input, value) {
    if (value != null || input.value) {
      input.value = value;
    }
  }

  function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
  }

  function custom_event(type, detail) {
    var e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
  }

  var current_component;

  function set_current_component(component) {
    current_component = component;
  }

  function get_current_component() {
    if (!current_component) throw new Error("Function called outside component initialization");
    return current_component;
  }

  function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
  }

  function createEventDispatcher() {
    var component = get_current_component();
    return function (type, detail) {
      var callbacks = component.$$.callbacks[type];

      if (callbacks) {
        // TODO are there situations where events could be dispatched
        // in a server (non-DOM) environment?
        var event = custom_event(type, detail);
        callbacks.slice().forEach(function (fn) {
          fn.call(component, event);
        });
      }
    };
  }

  var dirty_components = [];
  var binding_callbacks = [];
  var render_callbacks = [];
  var flush_callbacks = [];
  var resolved_promise = Promise.resolve();
  var update_scheduled = false;

  function schedule_update() {
    if (!update_scheduled) {
      update_scheduled = true;
      resolved_promise.then(flush$1);
    }
  }

  function add_render_callback(fn) {
    render_callbacks.push(fn);
  }

  function flush$1() {
    var seen_callbacks = new Set();

    do {
      // first, call beforeUpdate functions
      // and update components
      while (dirty_components.length) {
        var component = dirty_components.shift();
        set_current_component(component);
        update(component.$$);
      }

      while (binding_callbacks.length) {
        binding_callbacks.pop()();
      } // then, once components are updated, call
      // afterUpdate functions. This may cause
      // subsequent updates...


      for (var i = 0; i < render_callbacks.length; i += 1) {
        var callback = render_callbacks[i];

        if (!seen_callbacks.has(callback)) {
          callback(); // ...so guard against infinite loops

          seen_callbacks.add(callback);
        }
      }

      render_callbacks.length = 0;
    } while (dirty_components.length);

    while (flush_callbacks.length) {
      flush_callbacks.pop()();
    }

    update_scheduled = false;
  }

  function update($$) {
    if ($$.fragment !== null) {
      $$.update($$.dirty);
      run_all($$.before_update);
      $$.fragment && $$.fragment.p($$.dirty, $$.ctx);
      $$.dirty = null;
      $$.after_update.forEach(add_render_callback);
    }
  }

  var outroing = new Set();
  var outros;

  function group_outros() {
    outros = {
      r: 0,
      c: [],
      p: outros // parent group

    };
  }

  function check_outros() {
    if (!outros.r) {
      run_all(outros.c);
    }

    outros = outros.p;
  }

  function transition_in(block, local) {
    if (block && block.i) {
      outroing.delete(block);
      block.i(local);
    }
  }

  function transition_out(block, local, detach, callback) {
    if (block && block.o) {
      if (outroing.has(block)) return;
      outroing.add(block);
      outros.c.push(function () {
        outroing.delete(block);

        if (callback) {
          if (detach) block.d(1);
          callback();
        }
      });
      block.o(local);
    }
  }

  function handle_promise(promise, info) {
    var token = info.token = {};

    function update(type, index, key, value) {
      if (info.token !== token) return;
      info.resolved = key && _defineProperty({}, key, value);
      var child_ctx = assign(assign({}, info.ctx), info.resolved);
      var block = type && (info.current = type)(child_ctx);
      var needs_flush = false;

      if (info.block) {
        if (info.blocks) {
          info.blocks.forEach(function (block, i) {
            if (i !== index && block) {
              group_outros();
              transition_out(block, 1, 1, function () {
                info.blocks[i] = null;
              });
              check_outros();
            }
          });
        } else {
          info.block.d(1);
        }

        block.c();
        transition_in(block, 1);
        block.m(info.mount(), info.anchor);
        needs_flush = true;
      }

      info.block = block;
      if (info.blocks) info.blocks[index] = block;

      if (needs_flush) {
        flush$1();
      }
    }

    if (is_promise(promise)) {
      var _current_component = get_current_component();

      promise.then(function (value) {
        set_current_component(_current_component);
        update(info.then, 1, info.value, value);
        set_current_component(null);
      }, function (error) {
        set_current_component(_current_component);
        update(info.catch, 2, info.error, error);
        set_current_component(null);
      }); // if we previously had a then/catch block, destroy it

      if (info.current !== info.pending) {
        update(info.pending, 0);
        return true;
      }
    } else {
      if (info.current !== info.then) {
        update(info.then, 1, info.value, promise);
        return true;
      }

      info.resolved = _defineProperty({}, info.value, promise);
    }
  }

  var globals = typeof window !== 'undefined' ? window : global;

  function destroy_block(block, lookup) {
    block.d(1);
    lookup.delete(block.key);
  }

  function update_keyed_each(old_blocks, changed, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
    var o = old_blocks.length;
    var n = list.length;
    var i = o;
    var old_indexes = {};

    while (i--) {
      old_indexes[old_blocks[i].key] = i;
    }

    var new_blocks = [];
    var new_lookup = new Map();
    var deltas = new Map();
    i = n;

    while (i--) {
      var child_ctx = get_context(ctx, list, i);
      var key = get_key(child_ctx);
      var block = lookup.get(key);

      if (!block) {
        block = create_each_block(key, child_ctx);
        block.c();
      } else if (dynamic) {
        block.p(changed, child_ctx);
      }

      new_lookup.set(key, new_blocks[i] = block);
      if (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));
    }

    var will_move = new Set();
    var did_move = new Set();

    function insert(block) {
      transition_in(block, 1);
      block.m(node, next);
      lookup.set(block.key, block);
      next = block.first;
      n--;
    }

    while (o && n) {
      var new_block = new_blocks[n - 1];
      var old_block = old_blocks[o - 1];
      var new_key = new_block.key;
      var old_key = old_block.key;

      if (new_block === old_block) {
        // do nothing
        next = new_block.first;
        o--;
        n--;
      } else if (!new_lookup.has(old_key)) {
        // remove old block
        destroy(old_block, lookup);
        o--;
      } else if (!lookup.has(new_key) || will_move.has(new_key)) {
        insert(new_block);
      } else if (did_move.has(old_key)) {
        o--;
      } else if (deltas.get(new_key) > deltas.get(old_key)) {
        did_move.add(new_key);
        insert(new_block);
      } else {
        will_move.add(old_key);
        o--;
      }
    }

    while (o--) {
      var _old_block = old_blocks[o];
      if (!new_lookup.has(_old_block.key)) destroy(_old_block, lookup);
    }

    while (n) {
      insert(new_blocks[n - 1]);
    }

    return new_blocks;
  }

  function create_component(block) {
    block && block.c();
  }

  function mount_component(component, target, anchor) {
    var _component$$$ = component.$$,
        fragment = _component$$$.fragment,
        on_mount = _component$$$.on_mount,
        on_destroy = _component$$$.on_destroy,
        after_update = _component$$$.after_update;
    fragment && fragment.m(target, anchor); // onMount happens before the initial afterUpdate

    add_render_callback(function () {
      var new_on_destroy = on_mount.map(run$1).filter(is_function);

      if (on_destroy) {
        on_destroy.push.apply(on_destroy, _toConsumableArray(new_on_destroy));
      } else {
        // Edge case - component was destroyed immediately,
        // most likely as a result of a binding initialising
        run_all(new_on_destroy);
      }

      component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
  }

  function destroy_component(component, detaching) {
    var $$ = component.$$;

    if ($$.fragment !== null) {
      run_all($$.on_destroy);
      $$.fragment && $$.fragment.d(detaching); // TODO null out other refs, including component.$$ (but need to
      // preserve final state?)

      $$.on_destroy = $$.fragment = null;
      $$.ctx = {};
    }
  }

  function make_dirty(component, key) {
    if (!component.$$.dirty) {
      dirty_components.push(component);
      schedule_update();
      component.$$.dirty = blank_object();
    }

    component.$$.dirty[key] = true;
  }

  function init(component, options, instance, create_fragment, not_equal, props) {
    var parent_component = current_component;
    set_current_component(component);
    var prop_values = options.props || {};
    var $$ = component.$$ = {
      fragment: null,
      ctx: null,
      // state
      props: props,
      update: noop,
      not_equal: not_equal,
      bound: blank_object(),
      // lifecycle
      on_mount: [],
      on_destroy: [],
      before_update: [],
      after_update: [],
      context: new Map(parent_component ? parent_component.$$.context : []),
      // everything else
      callbacks: blank_object(),
      dirty: null
    };
    var ready = false;
    $$.ctx = instance ? instance(component, prop_values, function (key, ret) {
      var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ret;

      if ($$.ctx && not_equal($$.ctx[key], $$.ctx[key] = value)) {
        if ($$.bound[key]) $$.bound[key](value);
        if (ready) make_dirty(component, key);
      }

      return ret;
    }) : prop_values;
    $$.update();
    ready = true;
    run_all($$.before_update); // `false` as a special case of no DOM component

    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;

    if (options.target) {
      if (options.hydrate) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        $$.fragment && $$.fragment.l(children(options.target));
      } else {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        $$.fragment && $$.fragment.c();
      }

      if (options.intro) transition_in(component.$$.fragment);
      mount_component(component, options.target, options.anchor);
      flush$1();
    }

    set_current_component(parent_component);
  }

  var SvelteElement;

  if (typeof HTMLElement === 'function') {
    SvelteElement =
    /*#__PURE__*/
    function (_HTMLElement) {
      _inherits(SvelteElement, _HTMLElement);

      function SvelteElement() {
        var _this;

        _classCallCheck(this, SvelteElement);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(SvelteElement).call(this));

        _this.attachShadow({
          mode: 'open'
        });

        return _this;
      }

      _createClass(SvelteElement, [{
        key: "connectedCallback",
        value: function connectedCallback() {
          // @ts-ignore todo: improve typings
          for (var key in this.$$.slotted) {
            // @ts-ignore todo: improve typings
            this.appendChild(this.$$.slotted[key]);
          }
        }
      }, {
        key: "attributeChangedCallback",
        value: function attributeChangedCallback(attr, _oldValue, newValue) {
          this[attr] = newValue;
        }
      }, {
        key: "$destroy",
        value: function $destroy() {
          destroy_component(this, 1);
          this.$destroy = noop;
        }
      }, {
        key: "$on",
        value: function $on(type, callback) {
          // TODO should this delegate to addEventListener?
          var callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
          callbacks.push(callback);
          return function () {
            var index = callbacks.indexOf(callback);
            if (index !== -1) callbacks.splice(index, 1);
          };
        }
      }, {
        key: "$set",
        value: function $set() {// overridden by instance, if it has props
        }
      }]);

      return SvelteElement;
    }(_wrapNativeSuper(HTMLElement));
  }

  var SvelteComponent =
  /*#__PURE__*/
  function () {
    function SvelteComponent() {
      _classCallCheck(this, SvelteComponent);
    }

    _createClass(SvelteComponent, [{
      key: "$destroy",
      value: function $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
      }
    }, {
      key: "$on",
      value: function $on(type, callback) {
        var callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
        callbacks.push(callback);
        return function () {
          var index = callbacks.indexOf(callback);
          if (index !== -1) callbacks.splice(index, 1);
        };
      }
    }, {
      key: "$set",
      value: function $set() {// overridden by instance, if it has props
      }
    }]);

    return SvelteComponent;
  }();

  function dispatch_dev(type, detail) {
    document.dispatchEvent(custom_event(type, detail));
  }

  function append_dev(target, node) {
    dispatch_dev("SvelteDOMInsert", {
      target: target,
      node: node
    });
    append(target, node);
  }

  function insert_dev(target, node, anchor) {
    dispatch_dev("SvelteDOMInsert", {
      target: target,
      node: node,
      anchor: anchor
    });
    insert(target, node, anchor);
  }

  function detach_dev(node) {
    dispatch_dev("SvelteDOMRemove", {
      node: node
    });
    detach(node);
  }

  function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
    var modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
    if (has_prevent_default) modifiers.push('preventDefault');
    if (has_stop_propagation) modifiers.push('stopPropagation');
    dispatch_dev("SvelteDOMAddEventListener", {
      node: node,
      event: event,
      handler: handler,
      modifiers: modifiers
    });
    var dispose = listen(node, event, handler, options);
    return function () {
      dispatch_dev("SvelteDOMRemoveEventListener", {
        node: node,
        event: event,
        handler: handler,
        modifiers: modifiers
      });
      dispose();
    };
  }

  function attr_dev(node, attribute, value) {
    attr(node, attribute, value);
    if (value == null) dispatch_dev("SvelteDOMRemoveAttribute", {
      node: node,
      attribute: attribute
    });else dispatch_dev("SvelteDOMSetAttribute", {
      node: node,
      attribute: attribute,
      value: value
    });
  }

  function prop_dev(node, property, value) {
    node[property] = value;
    dispatch_dev("SvelteDOMSetProperty", {
      node: node,
      property: property,
      value: value
    });
  }

  function set_data_dev(text, data) {
    data = '' + data;
    if (text.data === data) return;
    dispatch_dev("SvelteDOMSetData", {
      node: text,
      data: data
    });
    text.data = data;
  }

  var SvelteComponentDev =
  /*#__PURE__*/
  function (_SvelteComponent) {
    _inherits(SvelteComponentDev, _SvelteComponent);

    function SvelteComponentDev(options) {
      _classCallCheck(this, SvelteComponentDev);

      if (!options || !options.target && !options.$$inline) {
        throw new Error("'target' is a required option");
      }

      return _possibleConstructorReturn(this, _getPrototypeOf(SvelteComponentDev).call(this));
    }

    _createClass(SvelteComponentDev, [{
      key: "$destroy",
      value: function $destroy() {
        _get(_getPrototypeOf(SvelteComponentDev.prototype), "$destroy", this).call(this);

        this.$destroy = function () {
          console.warn("Component was already destroyed"); // eslint-disable-line no-console
        };
      }
    }]);

    return SvelteComponentDev;
  }(SvelteComponent);

  // @@match logic
  fixRegexpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
    return [
      // `String.prototype.match` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.match
      function match(regexp) {
        var O = requireObjectCoercible(this);
        var matcher = regexp == undefined ? undefined : regexp[MATCH];
        return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
      },
      // `RegExp.prototype[@@match]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
      function (regexp) {
        var res = maybeCallNative(nativeMatch, regexp, this);
        if (res.done) return res.value;

        var rx = anObject(regexp);
        var S = String(this);

        if (!rx.global) return regexpExecAbstract(rx, S);

        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
        var A = [];
        var n = 0;
        var result;
        while ((result = regexpExecAbstract(rx, S)) !== null) {
          var matchStr = String(result[0]);
          A[n] = matchStr;
          if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
          n++;
        }
        return n === 0 ? null : A;
      }
    ];
  });

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };

  function __extends(d, b) {
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var __assign = function() {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };

  function __rest(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  }

  function __decorate(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  }

  function __param(paramIndex, decorator) {
      return function (target, key) { decorator(target, key, paramIndex); }
  }

  function __metadata(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  }

  function __awaiter(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  function __generator(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }

  function __exportStar(m, exports) {
      for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }

  function __values(o) {
      var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
      if (m) return m.call(o);
      return {
          next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
          }
      };
  }

  function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  }

  function __spread() {
      for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
      return ar;
  }

  function __spreadArrays() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  }
  function __await(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
  }

  function __asyncGenerator(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
      function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
      function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
      function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
      function fulfill(value) { resume("next", value); }
      function reject(value) { resume("throw", value); }
      function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
  }

  function __asyncDelegator(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
      function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
  }

  function __asyncValues(o) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
      function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
      function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
  }

  function __makeTemplateObject(cooked, raw) {
      if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
      return cooked;
  }
  function __importStar(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
      result.default = mod;
      return result;
  }

  function __importDefault(mod) {
      return (mod && mod.__esModule) ? mod : { default: mod };
  }

  var tslib_es6 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    __extends: __extends,
    get __assign () { return __assign; },
    __rest: __rest,
    __decorate: __decorate,
    __param: __param,
    __metadata: __metadata,
    __awaiter: __awaiter,
    __generator: __generator,
    __exportStar: __exportStar,
    __values: __values,
    __read: __read,
    __spread: __spread,
    __spreadArrays: __spreadArrays,
    __await: __await,
    __asyncGenerator: __asyncGenerator,
    __asyncDelegator: __asyncDelegator,
    __asyncValues: __asyncValues,
    __makeTemplateObject: __makeTemplateObject,
    __importStar: __importStar,
    __importDefault: __importDefault
  });

  var index_cjs = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, '__esModule', { value: true });



  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
   */
  var CONSTANTS = {
      /**
       * @define {boolean} Whether this is the client Node.js SDK.
       */
      NODE_CLIENT: false,
      /**
       * @define {boolean} Whether this is the Admin Node.js SDK.
       */
      NODE_ADMIN: false,
      /**
       * Firebase SDK Version
       */
      SDK_VERSION: '${JSCORE_VERSION}'
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Throws an error if the provided assertion is falsy
   */
  var assert = function (assertion, message) {
      if (!assertion) {
          throw assertionError(message);
      }
  };
  /**
   * Returns an Error object suitable for throwing.
   */
  var assertionError = function (message) {
      return new Error('Firebase Database (' +
          CONSTANTS.SDK_VERSION +
          ') INTERNAL ASSERT FAILED: ' +
          message);
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var stringToByteArray = function (str) {
      // TODO(user): Use native implementations if/when available
      var out = [];
      var p = 0;
      for (var i = 0; i < str.length; i++) {
          var c = str.charCodeAt(i);
          if (c < 128) {
              out[p++] = c;
          }
          else if (c < 2048) {
              out[p++] = (c >> 6) | 192;
              out[p++] = (c & 63) | 128;
          }
          else if ((c & 0xfc00) === 0xd800 &&
              i + 1 < str.length &&
              (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
              // Surrogate Pair
              c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
              out[p++] = (c >> 18) | 240;
              out[p++] = ((c >> 12) & 63) | 128;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
          }
          else {
              out[p++] = (c >> 12) | 224;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
          }
      }
      return out;
  };
  /**
   * Turns an array of numbers into the string given by the concatenation of the
   * characters to which the numbers correspond.
   * @param bytes Array of numbers representing characters.
   * @return Stringification of the array.
   */
  var byteArrayToString = function (bytes) {
      // TODO(user): Use native implementations if/when available
      var out = [];
      var pos = 0, c = 0;
      while (pos < bytes.length) {
          var c1 = bytes[pos++];
          if (c1 < 128) {
              out[c++] = String.fromCharCode(c1);
          }
          else if (c1 > 191 && c1 < 224) {
              var c2 = bytes[pos++];
              out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
          }
          else if (c1 > 239 && c1 < 365) {
              // Surrogate Pair
              var c2 = bytes[pos++];
              var c3 = bytes[pos++];
              var c4 = bytes[pos++];
              var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                  0x10000;
              out[c++] = String.fromCharCode(0xd800 + (u >> 10));
              out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
          }
          else {
              var c2 = bytes[pos++];
              var c3 = bytes[pos++];
              out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
          }
      }
      return out.join('');
  };
  // We define it as an object literal instead of a class because a class compiled down to es5 can't
  // be treeshaked. https://github.com/rollup/rollup/issues/1691
  // Static lookup maps, lazily populated by init_()
  var base64 = {
      /**
       * Maps bytes to characters.
       */
      byteToCharMap_: null,
      /**
       * Maps characters to bytes.
       */
      charToByteMap_: null,
      /**
       * Maps bytes to websafe characters.
       * @private
       */
      byteToCharMapWebSafe_: null,
      /**
       * Maps websafe characters to bytes.
       * @private
       */
      charToByteMapWebSafe_: null,
      /**
       * Our default alphabet, shared between
       * ENCODED_VALS and ENCODED_VALS_WEBSAFE
       */
      ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
      /**
       * Our default alphabet. Value 64 (=) is special; it means "nothing."
       */
      get ENCODED_VALS() {
          return this.ENCODED_VALS_BASE + '+/=';
      },
      /**
       * Our websafe alphabet.
       */
      get ENCODED_VALS_WEBSAFE() {
          return this.ENCODED_VALS_BASE + '-_.';
      },
      /**
       * Whether this browser supports the atob and btoa functions. This extension
       * started at Mozilla but is now implemented by many browsers. We use the
       * ASSUME_* variables to avoid pulling in the full useragent detection library
       * but still allowing the standard per-browser compilations.
       *
       */
      HAS_NATIVE_SUPPORT: typeof atob === 'function',
      /**
       * Base64-encode an array of bytes.
       *
       * @param input An array of bytes (numbers with
       *     value in [0, 255]) to encode.
       * @param webSafe Boolean indicating we should use the
       *     alternative alphabet.
       * @return The base64 encoded string.
       */
      encodeByteArray: function (input, webSafe) {
          if (!Array.isArray(input)) {
              throw Error('encodeByteArray takes an array as a parameter');
          }
          this.init_();
          var byteToCharMap = webSafe
              ? this.byteToCharMapWebSafe_
              : this.byteToCharMap_;
          var output = [];
          for (var i = 0; i < input.length; i += 3) {
              var byte1 = input[i];
              var haveByte2 = i + 1 < input.length;
              var byte2 = haveByte2 ? input[i + 1] : 0;
              var haveByte3 = i + 2 < input.length;
              var byte3 = haveByte3 ? input[i + 2] : 0;
              var outByte1 = byte1 >> 2;
              var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
              var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
              var outByte4 = byte3 & 0x3f;
              if (!haveByte3) {
                  outByte4 = 64;
                  if (!haveByte2) {
                      outByte3 = 64;
                  }
              }
              output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
          }
          return output.join('');
      },
      /**
       * Base64-encode a string.
       *
       * @param input A string to encode.
       * @param webSafe If true, we should use the
       *     alternative alphabet.
       * @return The base64 encoded string.
       */
      encodeString: function (input, webSafe) {
          // Shortcut for Mozilla browsers that implement
          // a native base64 encoder in the form of "btoa/atob"
          if (this.HAS_NATIVE_SUPPORT && !webSafe) {
              return btoa(input);
          }
          return this.encodeByteArray(stringToByteArray(input), webSafe);
      },
      /**
       * Base64-decode a string.
       *
       * @param input to decode.
       * @param webSafe True if we should use the
       *     alternative alphabet.
       * @return string representing the decoded value.
       */
      decodeString: function (input, webSafe) {
          // Shortcut for Mozilla browsers that implement
          // a native base64 encoder in the form of "btoa/atob"
          if (this.HAS_NATIVE_SUPPORT && !webSafe) {
              return atob(input);
          }
          return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
      },
      /**
       * Base64-decode a string.
       *
       * In base-64 decoding, groups of four characters are converted into three
       * bytes.  If the encoder did not apply padding, the input length may not
       * be a multiple of 4.
       *
       * In this case, the last group will have fewer than 4 characters, and
       * padding will be inferred.  If the group has one or two characters, it decodes
       * to one byte.  If the group has three characters, it decodes to two bytes.
       *
       * @param input Input to decode.
       * @param webSafe True if we should use the web-safe alphabet.
       * @return bytes representing the decoded value.
       */
      decodeStringToByteArray: function (input, webSafe) {
          this.init_();
          var charToByteMap = webSafe
              ? this.charToByteMapWebSafe_
              : this.charToByteMap_;
          var output = [];
          for (var i = 0; i < input.length;) {
              var byte1 = charToByteMap[input.charAt(i++)];
              var haveByte2 = i < input.length;
              var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
              ++i;
              var haveByte3 = i < input.length;
              var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
              ++i;
              var haveByte4 = i < input.length;
              var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
              ++i;
              if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                  throw Error();
              }
              var outByte1 = (byte1 << 2) | (byte2 >> 4);
              output.push(outByte1);
              if (byte3 !== 64) {
                  var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                  output.push(outByte2);
                  if (byte4 !== 64) {
                      var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                      output.push(outByte3);
                  }
              }
          }
          return output;
      },
      /**
       * Lazy static initialization function. Called before
       * accessing any of the static map variables.
       * @private
       */
      init_: function () {
          if (!this.byteToCharMap_) {
              this.byteToCharMap_ = {};
              this.charToByteMap_ = {};
              this.byteToCharMapWebSafe_ = {};
              this.charToByteMapWebSafe_ = {};
              // We want quick mappings back and forth, so we precompute two maps.
              for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                  this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                  this.charToByteMap_[this.byteToCharMap_[i]] = i;
                  this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                  this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                  // Be forgiving when decoding and correctly decode both encodings.
                  if (i >= this.ENCODED_VALS_BASE.length) {
                      this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                      this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                  }
              }
          }
      }
  };
  /**
   * URL-safe base64 encoding
   */
  var base64Encode = function (str) {
      var utf8Bytes = stringToByteArray(str);
      return base64.encodeByteArray(utf8Bytes, true);
  };
  /**
   * URL-safe base64 decoding
   *
   * NOTE: DO NOT use the global atob() function - it does NOT support the
   * base64Url variant encoding.
   *
   * @param str To be decoded
   * @return Decoded result, if possible
   */
  var base64Decode = function (str) {
      try {
          return base64.decodeString(str, true);
      }
      catch (e) {
          console.error('base64Decode failed: ', e);
      }
      return null;
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Do a deep-copy of basic JavaScript Objects or Arrays.
   */
  function deepCopy(value) {
      return deepExtend(undefined, value);
  }
  /**
   * Copy properties from source to target (recursively allows extension
   * of Objects and Arrays).  Scalar values in the target are over-written.
   * If target is undefined, an object of the appropriate type will be created
   * (and returned).
   *
   * We recursively copy all child properties of plain Objects in the source- so
   * that namespace- like dictionaries are merged.
   *
   * Note that the target can be a function, in which case the properties in
   * the source Object are copied onto it as static properties of the Function.
   */
  function deepExtend(target, source) {
      if (!(source instanceof Object)) {
          return source;
      }
      switch (source.constructor) {
          case Date:
              // Treat Dates like scalars; if the target date object had any child
              // properties - they will be lost!
              var dateValue = source;
              return new Date(dateValue.getTime());
          case Object:
              if (target === undefined) {
                  target = {};
              }
              break;
          case Array:
              // Always copy the array source and overwrite the target.
              target = [];
              break;
          default:
              // Not a plain Object - treat it as a scalar.
              return source;
      }
      for (var prop in source) {
          if (!source.hasOwnProperty(prop)) {
              continue;
          }
          target[prop] = deepExtend(target[prop], source[prop]);
      }
      return target;
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var Deferred = /** @class */ (function () {
      function Deferred() {
          var _this = this;
          this.reject = function () { };
          this.resolve = function () { };
          this.promise = new Promise(function (resolve, reject) {
              _this.resolve = resolve;
              _this.reject = reject;
          });
      }
      /**
       * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
       * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
       * and returns a node-style callback which will resolve or reject the Deferred's promise.
       */
      Deferred.prototype.wrapCallback = function (callback) {
          var _this = this;
          return function (error, value) {
              if (error) {
                  _this.reject(error);
              }
              else {
                  _this.resolve(value);
              }
              if (typeof callback === 'function') {
                  // Attaching noop handler just in case developer wasn't expecting
                  // promises
                  _this.promise.catch(function () { });
                  // Some of our callbacks don't expect a value and our own tests
                  // assert that the parameter length is 1
                  if (callback.length === 1) {
                      callback(error);
                  }
                  else {
                      callback(error, value);
                  }
              }
          };
      };
      return Deferred;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Returns navigator.userAgent string or '' if it's not defined.
   * @return user agent string
   */
  function getUA() {
      if (typeof navigator !== 'undefined' &&
          typeof navigator['userAgent'] === 'string') {
          return navigator['userAgent'];
      }
      else {
          return '';
      }
  }
  /**
   * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
   *
   * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
   * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
   * wait for a callback.
   */
  function isMobileCordova() {
      return (typeof window !== 'undefined' &&
          // @ts-ignore Setting up an broadly applicable index signature for Window
          // just to deal with this case would probably be a bad idea.
          !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
          /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
  }
  /**
   * Detect Node.js.
   *
   * @return true if Node.js environment is detected.
   */
  // Node detection logic from: https://github.com/iliakan/detect-node/
  function isNode() {
      try {
          return (Object.prototype.toString.call(commonjsGlobal.process) === '[object process]');
      }
      catch (e) {
          return false;
      }
  }
  /**
   * Detect Browser Environment
   */
  function isBrowser() {
      return typeof self === 'object' && self.self === self;
  }
  /**
   * Detect React Native.
   *
   * @return true if ReactNative environment is detected.
   */
  function isReactNative() {
      return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
  }
  /**
   * Detect whether the current SDK build is the Node version.
   *
   * @return true if it's the Node SDK build.
   */
  function isNodeSdk() {
      return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ERROR_NAME = 'FirebaseError';
  // Based on code from:
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
  var FirebaseError = /** @class */ (function (_super) {
      tslib_es6.__extends(FirebaseError, _super);
      function FirebaseError(code, message) {
          var _this = _super.call(this, message) || this;
          _this.code = code;
          _this.name = ERROR_NAME;
          // Fix For ES5
          // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
          Object.setPrototypeOf(_this, FirebaseError.prototype);
          // Maintains proper stack trace for where our error was thrown.
          // Only available on V8.
          if (Error.captureStackTrace) {
              Error.captureStackTrace(_this, ErrorFactory.prototype.create);
          }
          return _this;
      }
      return FirebaseError;
  }(Error));
  var ErrorFactory = /** @class */ (function () {
      function ErrorFactory(service, serviceName, errors) {
          this.service = service;
          this.serviceName = serviceName;
          this.errors = errors;
      }
      ErrorFactory.prototype.create = function (code) {
          var data = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              data[_i - 1] = arguments[_i];
          }
          var customData = data[0] || {};
          var fullCode = this.service + "/" + code;
          var template = this.errors[code];
          var message = template ? replaceTemplate(template, customData) : 'Error';
          // Service Name: Error message (service/code).
          var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
          var error = new FirebaseError(fullCode, fullMessage);
          // Keys with an underscore at the end of their name are not included in
          // error.data for some reason.
          // TODO: Replace with Object.entries when lib is updated to es2017.
          for (var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++) {
              var key = _b[_a];
              if (key.slice(-1) !== '_') {
                  if (key in error) {
                      console.warn("Overwriting FirebaseError base field \"" + key + "\" can cause unexpected behavior.");
                  }
                  error[key] = customData[key];
              }
          }
          return error;
      };
      return ErrorFactory;
  }());
  function replaceTemplate(template, data) {
      return template.replace(PATTERN, function (_, key) {
          var value = data[key];
          return value != null ? value.toString() : "<" + key + "?>";
      });
  }
  var PATTERN = /\{\$([^}]+)}/g;

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Evaluates a JSON string into a javascript object.
   *
   * @param {string} str A string containing JSON.
   * @return {*} The javascript object representing the specified JSON.
   */
  function jsonEval(str) {
      return JSON.parse(str);
  }
  /**
   * Returns JSON representing a javascript object.
   * @param {*} data Javascript object to be stringified.
   * @return {string} The JSON contents of the object.
   */
  function stringify(data) {
      return JSON.stringify(data);
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Decodes a Firebase auth. token into constituent parts.
   *
   * Notes:
   * - May return with invalid / incomplete claims if there's no native base64 decoding support.
   * - Doesn't check if the token is actually valid.
   */
  var decode = function (token) {
      var header = {}, claims = {}, data = {}, signature = '';
      try {
          var parts = token.split('.');
          header = jsonEval(base64Decode(parts[0]) || '');
          claims = jsonEval(base64Decode(parts[1]) || '');
          signature = parts[2];
          data = claims['d'] || {};
          delete claims['d'];
      }
      catch (e) { }
      return {
          header: header,
          claims: claims,
          data: data,
          signature: signature
      };
  };
  /**
   * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
   * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
   *
   * Notes:
   * - May return a false negative if there's no native base64 decoding support.
   * - Doesn't check if the token is actually valid.
   */
  var isValidTimestamp = function (token) {
      var claims = decode(token).claims;
      var now = Math.floor(new Date().getTime() / 1000);
      var validSince = 0, validUntil = 0;
      if (typeof claims === 'object') {
          if (claims.hasOwnProperty('nbf')) {
              validSince = claims['nbf'];
          }
          else if (claims.hasOwnProperty('iat')) {
              validSince = claims['iat'];
          }
          if (claims.hasOwnProperty('exp')) {
              validUntil = claims['exp'];
          }
          else {
              // token will expire after 24h by default
              validUntil = validSince + 86400;
          }
      }
      return (!!now &&
          !!validSince &&
          !!validUntil &&
          now >= validSince &&
          now <= validUntil);
  };
  /**
   * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
   *
   * Notes:
   * - May return null if there's no native base64 decoding support.
   * - Doesn't check if the token is actually valid.
   */
  var issuedAtTime = function (token) {
      var claims = decode(token).claims;
      if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
          return claims['iat'];
      }
      return null;
  };
  /**
   * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
   *
   * Notes:
   * - May return a false negative if there's no native base64 decoding support.
   * - Doesn't check if the token is actually valid.
   */
  var isValidFormat = function (token) {
      var decoded = decode(token), claims = decoded.claims;
      return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
  };
  /**
   * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
   *
   * Notes:
   * - May return a false negative if there's no native base64 decoding support.
   * - Doesn't check if the token is actually valid.
   */
  var isAdmin = function (token) {
      var claims = decode(token).claims;
      return typeof claims === 'object' && claims['admin'] === true;
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function contains(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
  }
  function safeGet(obj, key) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
          return obj[key];
      }
      else {
          return undefined;
      }
  }
  function isEmpty(obj) {
      for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
              return false;
          }
      }
      return true;
  }
  function map(obj, fn, contextObj) {
      var res = {};
      for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
              res[key] = fn.call(contextObj, obj[key], key, obj);
          }
      }
      return res;
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
   * params object (e.g. {arg: 'val', arg2: 'val2'})
   * Note: You must prepend it with ? when adding it to a URL.
   */
  function querystring(querystringParams) {
      var params = [];
      var _loop_1 = function (key, value) {
          if (Array.isArray(value)) {
              value.forEach(function (arrayVal) {
                  params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
              });
          }
          else {
              params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
          }
      };
      for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
          var _b = _a[_i], key = _b[0], value = _b[1];
          _loop_1(key, value);
      }
      return params.length ? '&' + params.join('&') : '';
  }
  /**
   * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
   * (e.g. {arg: 'val', arg2: 'val2'})
   */
  function querystringDecode(querystring) {
      var obj = {};
      var tokens = querystring.replace(/^\?/, '').split('&');
      tokens.forEach(function (token) {
          if (token) {
              var key = token.split('=');
              obj[key[0]] = key[1];
          }
      });
      return obj;
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @fileoverview SHA-1 cryptographic hash.
   * Variable names follow the notation in FIPS PUB 180-3:
   * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
   *
   * Usage:
   *   var sha1 = new sha1();
   *   sha1.update(bytes);
   *   var hash = sha1.digest();
   *
   * Performance:
   *   Chrome 23:   ~400 Mbit/s
   *   Firefox 16:  ~250 Mbit/s
   *
   */
  /**
   * SHA-1 cryptographic hash constructor.
   *
   * The properties declared here are discussed in the above algorithm document.
   * @constructor
   * @final
   * @struct
   */
  var Sha1 = /** @class */ (function () {
      function Sha1() {
          /**
           * Holds the previous values of accumulated variables a-e in the compress_
           * function.
           * @private
           */
          this.chain_ = [];
          /**
           * A buffer holding the partially computed hash result.
           * @private
           */
          this.buf_ = [];
          /**
           * An array of 80 bytes, each a part of the message to be hashed.  Referred to
           * as the message schedule in the docs.
           * @private
           */
          this.W_ = [];
          /**
           * Contains data needed to pad messages less than 64 bytes.
           * @private
           */
          this.pad_ = [];
          /**
           * @private {number}
           */
          this.inbuf_ = 0;
          /**
           * @private {number}
           */
          this.total_ = 0;
          this.blockSize = 512 / 8;
          this.pad_[0] = 128;
          for (var i = 1; i < this.blockSize; ++i) {
              this.pad_[i] = 0;
          }
          this.reset();
      }
      Sha1.prototype.reset = function () {
          this.chain_[0] = 0x67452301;
          this.chain_[1] = 0xefcdab89;
          this.chain_[2] = 0x98badcfe;
          this.chain_[3] = 0x10325476;
          this.chain_[4] = 0xc3d2e1f0;
          this.inbuf_ = 0;
          this.total_ = 0;
      };
      /**
       * Internal compress helper function.
       * @param buf Block to compress.
       * @param offset Offset of the block in the buffer.
       * @private
       */
      Sha1.prototype.compress_ = function (buf, offset) {
          if (!offset) {
              offset = 0;
          }
          var W = this.W_;
          // get 16 big endian words
          if (typeof buf === 'string') {
              for (var i = 0; i < 16; i++) {
                  // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                  // have a bug that turns the post-increment ++ operator into pre-increment
                  // during JIT compilation.  We have code that depends heavily on SHA-1 for
                  // correctness and which is affected by this bug, so I've removed all uses
                  // of post-increment ++ in which the result value is used.  We can revert
                  // this change once the Safari bug
                  // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                  // most clients have been updated.
                  W[i] =
                      (buf.charCodeAt(offset) << 24) |
                          (buf.charCodeAt(offset + 1) << 16) |
                          (buf.charCodeAt(offset + 2) << 8) |
                          buf.charCodeAt(offset + 3);
                  offset += 4;
              }
          }
          else {
              for (var i = 0; i < 16; i++) {
                  W[i] =
                      (buf[offset] << 24) |
                          (buf[offset + 1] << 16) |
                          (buf[offset + 2] << 8) |
                          buf[offset + 3];
                  offset += 4;
              }
          }
          // expand to 80 words
          for (var i = 16; i < 80; i++) {
              var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
              W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
          }
          var a = this.chain_[0];
          var b = this.chain_[1];
          var c = this.chain_[2];
          var d = this.chain_[3];
          var e = this.chain_[4];
          var f, k;
          // TODO(user): Try to unroll this loop to speed up the computation.
          for (var i = 0; i < 80; i++) {
              if (i < 40) {
                  if (i < 20) {
                      f = d ^ (b & (c ^ d));
                      k = 0x5a827999;
                  }
                  else {
                      f = b ^ c ^ d;
                      k = 0x6ed9eba1;
                  }
              }
              else {
                  if (i < 60) {
                      f = (b & c) | (d & (b | c));
                      k = 0x8f1bbcdc;
                  }
                  else {
                      f = b ^ c ^ d;
                      k = 0xca62c1d6;
                  }
              }
              var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
              e = d;
              d = c;
              c = ((b << 30) | (b >>> 2)) & 0xffffffff;
              b = a;
              a = t;
          }
          this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
          this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
          this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
          this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
          this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
      };
      Sha1.prototype.update = function (bytes, length) {
          // TODO(johnlenz): tighten the function signature and remove this check
          if (bytes == null) {
              return;
          }
          if (length === undefined) {
              length = bytes.length;
          }
          var lengthMinusBlock = length - this.blockSize;
          var n = 0;
          // Using local instead of member variables gives ~5% speedup on Firefox 16.
          var buf = this.buf_;
          var inbuf = this.inbuf_;
          // The outer while loop should execute at most twice.
          while (n < length) {
              // When we have no data in the block to top up, we can directly process the
              // input buffer (assuming it contains sufficient data). This gives ~25%
              // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
              // the data is provided in large chunks (or in multiples of 64 bytes).
              if (inbuf === 0) {
                  while (n <= lengthMinusBlock) {
                      this.compress_(bytes, n);
                      n += this.blockSize;
                  }
              }
              if (typeof bytes === 'string') {
                  while (n < length) {
                      buf[inbuf] = bytes.charCodeAt(n);
                      ++inbuf;
                      ++n;
                      if (inbuf === this.blockSize) {
                          this.compress_(buf);
                          inbuf = 0;
                          // Jump to the outer loop so we use the full-block optimization.
                          break;
                      }
                  }
              }
              else {
                  while (n < length) {
                      buf[inbuf] = bytes[n];
                      ++inbuf;
                      ++n;
                      if (inbuf === this.blockSize) {
                          this.compress_(buf);
                          inbuf = 0;
                          // Jump to the outer loop so we use the full-block optimization.
                          break;
                      }
                  }
              }
          }
          this.inbuf_ = inbuf;
          this.total_ += length;
      };
      /** @override */
      Sha1.prototype.digest = function () {
          var digest = [];
          var totalBits = this.total_ * 8;
          // Add pad 0x80 0x00*.
          if (this.inbuf_ < 56) {
              this.update(this.pad_, 56 - this.inbuf_);
          }
          else {
              this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
          }
          // Add # bits.
          for (var i = this.blockSize - 1; i >= 56; i--) {
              this.buf_[i] = totalBits & 255;
              totalBits /= 256; // Don't use bit-shifting here!
          }
          this.compress_(this.buf_);
          var n = 0;
          for (var i = 0; i < 5; i++) {
              for (var j = 24; j >= 0; j -= 8) {
                  digest[n] = (this.chain_[i] >> j) & 255;
                  ++n;
              }
          }
          return digest;
      };
      return Sha1;
  }());

  /**
   * Helper to make a Subscribe function (just like Promise helps make a
   * Thenable).
   *
   * @param executor Function which can make calls to a single Observer
   *     as a proxy.
   * @param onNoObservers Callback when count of Observers goes to zero.
   */
  function createSubscribe(executor, onNoObservers) {
      var proxy = new ObserverProxy(executor, onNoObservers);
      return proxy.subscribe.bind(proxy);
  }
  /**
   * Implement fan-out for any number of Observers attached via a subscribe
   * function.
   */
  var ObserverProxy = /** @class */ (function () {
      /**
       * @param executor Function which can make calls to a single Observer
       *     as a proxy.
       * @param onNoObservers Callback when count of Observers goes to zero.
       */
      function ObserverProxy(executor, onNoObservers) {
          var _this = this;
          this.observers = [];
          this.unsubscribes = [];
          this.observerCount = 0;
          // Micro-task scheduling by calling task.then().
          this.task = Promise.resolve();
          this.finalized = false;
          this.onNoObservers = onNoObservers;
          // Call the executor asynchronously so subscribers that are called
          // synchronously after the creation of the subscribe function
          // can still receive the very first value generated in the executor.
          this.task
              .then(function () {
              executor(_this);
          })
              .catch(function (e) {
              _this.error(e);
          });
      }
      ObserverProxy.prototype.next = function (value) {
          this.forEachObserver(function (observer) {
              observer.next(value);
          });
      };
      ObserverProxy.prototype.error = function (error) {
          this.forEachObserver(function (observer) {
              observer.error(error);
          });
          this.close(error);
      };
      ObserverProxy.prototype.complete = function () {
          this.forEachObserver(function (observer) {
              observer.complete();
          });
          this.close();
      };
      /**
       * Subscribe function that can be used to add an Observer to the fan-out list.
       *
       * - We require that no event is sent to a subscriber sychronously to their
       *   call to subscribe().
       */
      ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
          var _this = this;
          var observer;
          if (nextOrObserver === undefined &&
              error === undefined &&
              complete === undefined) {
              throw new Error('Missing Observer.');
          }
          // Assemble an Observer object when passed as callback functions.
          if (implementsAnyMethods(nextOrObserver, [
              'next',
              'error',
              'complete'
          ])) {
              observer = nextOrObserver;
          }
          else {
              observer = {
                  next: nextOrObserver,
                  error: error,
                  complete: complete
              };
          }
          if (observer.next === undefined) {
              observer.next = noop;
          }
          if (observer.error === undefined) {
              observer.error = noop;
          }
          if (observer.complete === undefined) {
              observer.complete = noop;
          }
          var unsub = this.unsubscribeOne.bind(this, this.observers.length);
          // Attempt to subscribe to a terminated Observable - we
          // just respond to the Observer with the final error or complete
          // event.
          if (this.finalized) {
              // eslint-disable-next-line @typescript-eslint/no-floating-promises
              this.task.then(function () {
                  try {
                      if (_this.finalError) {
                          observer.error(_this.finalError);
                      }
                      else {
                          observer.complete();
                      }
                  }
                  catch (e) {
                      // nothing
                  }
                  return;
              });
          }
          this.observers.push(observer);
          return unsub;
      };
      // Unsubscribe is synchronous - we guarantee that no events are sent to
      // any unsubscribed Observer.
      ObserverProxy.prototype.unsubscribeOne = function (i) {
          if (this.observers === undefined || this.observers[i] === undefined) {
              return;
          }
          delete this.observers[i];
          this.observerCount -= 1;
          if (this.observerCount === 0 && this.onNoObservers !== undefined) {
              this.onNoObservers(this);
          }
      };
      ObserverProxy.prototype.forEachObserver = function (fn) {
          if (this.finalized) {
              // Already closed by previous event....just eat the additional values.
              return;
          }
          // Since sendOne calls asynchronously - there is no chance that
          // this.observers will become undefined.
          for (var i = 0; i < this.observers.length; i++) {
              this.sendOne(i, fn);
          }
      };
      // Call the Observer via one of it's callback function. We are careful to
      // confirm that the observe has not been unsubscribed since this asynchronous
      // function had been queued.
      ObserverProxy.prototype.sendOne = function (i, fn) {
          var _this = this;
          // Execute the callback asynchronously
          // eslint-disable-next-line @typescript-eslint/no-floating-promises
          this.task.then(function () {
              if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                  try {
                      fn(_this.observers[i]);
                  }
                  catch (e) {
                      // Ignore exceptions raised in Observers or missing methods of an
                      // Observer.
                      // Log error to console. b/31404806
                      if (typeof console !== 'undefined' && console.error) {
                          console.error(e);
                      }
                  }
              }
          });
      };
      ObserverProxy.prototype.close = function (err) {
          var _this = this;
          if (this.finalized) {
              return;
          }
          this.finalized = true;
          if (err !== undefined) {
              this.finalError = err;
          }
          // Proxy is no longer needed - garbage collect references
          // eslint-disable-next-line @typescript-eslint/no-floating-promises
          this.task.then(function () {
              _this.observers = undefined;
              _this.onNoObservers = undefined;
          });
      };
      return ObserverProxy;
  }());
  /** Turn synchronous function into one called asynchronously. */
  function async(fn, onError) {
      return function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          Promise.resolve(true)
              .then(function () {
              fn.apply(void 0, args);
          })
              .catch(function (error) {
              if (onError) {
                  onError(error);
              }
          });
      };
  }
  /**
   * Return true if the object passed in implements any of the named methods.
   */
  function implementsAnyMethods(obj, methods) {
      if (typeof obj !== 'object' || obj === null) {
          return false;
      }
      for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
          var method = methods_1[_i];
          if (method in obj && typeof obj[method] === 'function') {
              return true;
          }
      }
      return false;
  }
  function noop() {
      // do nothing
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Check to make sure the appropriate number of arguments are provided for a public function.
   * Throws an error if it fails.
   *
   * @param fnName The function name
   * @param minCount The minimum number of arguments to allow for the function call
   * @param maxCount The maximum number of argument to allow for the function call
   * @param argCount The actual number of arguments provided.
   */
  var validateArgCount = function (fnName, minCount, maxCount, argCount) {
      var argError;
      if (argCount < minCount) {
          argError = 'at least ' + minCount;
      }
      else if (argCount > maxCount) {
          argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
      }
      if (argError) {
          var error = fnName +
              ' failed: Was called with ' +
              argCount +
              (argCount === 1 ? ' argument.' : ' arguments.') +
              ' Expects ' +
              argError +
              '.';
          throw new Error(error);
      }
  };
  /**
   * Generates a string to prefix an error message about failed argument validation
   *
   * @param fnName The function name
   * @param argumentNumber The index of the argument
   * @param optional Whether or not the argument is optional
   * @return The prefix to add to the error thrown for validation.
   */
  function errorPrefix(fnName, argumentNumber, optional) {
      var argName = '';
      switch (argumentNumber) {
          case 1:
              argName = optional ? 'first' : 'First';
              break;
          case 2:
              argName = optional ? 'second' : 'Second';
              break;
          case 3:
              argName = optional ? 'third' : 'Third';
              break;
          case 4:
              argName = optional ? 'fourth' : 'Fourth';
              break;
          default:
              throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
      }
      var error = fnName + ' failed: ';
      error += argName + ' argument ';
      return error;
  }
  /**
   * @param fnName
   * @param argumentNumber
   * @param namespace
   * @param optional
   */
  function validateNamespace(fnName, argumentNumber, namespace, optional) {
      if (optional && !namespace) {
          return;
      }
      if (typeof namespace !== 'string') {
          //TODO: I should do more validation here. We only allow certain chars in namespaces.
          throw new Error(errorPrefix(fnName, argumentNumber, optional) +
              'must be a valid firebase namespace.');
      }
  }
  function validateCallback(fnName, argumentNumber, callback, optional) {
      if (optional && !callback) {
          return;
      }
      if (typeof callback !== 'function') {
          throw new Error(errorPrefix(fnName, argumentNumber, optional) +
              'must be a valid function.');
      }
  }
  function validateContextObject(fnName, argumentNumber, context, optional) {
      if (optional && !context) {
          return;
      }
      if (typeof context !== 'object' || context === null) {
          throw new Error(errorPrefix(fnName, argumentNumber, optional) +
              'must be a valid context object.');
      }
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
  // automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
  // so it's been modified.
  // Note that not all Unicode characters appear as single characters in JavaScript strings.
  // fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
  // use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
  // character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
  // pair).
  // See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
  /**
   * @param {string} str
   * @return {Array}
   */
  var stringToByteArray$1 = function (str) {
      var out = [];
      var p = 0;
      for (var i = 0; i < str.length; i++) {
          var c = str.charCodeAt(i);
          // Is this the lead surrogate in a surrogate pair?
          if (c >= 0xd800 && c <= 0xdbff) {
              var high = c - 0xd800; // the high 10 bits.
              i++;
              assert(i < str.length, 'Surrogate pair missing trail surrogate.');
              var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
              c = 0x10000 + (high << 10) + low;
          }
          if (c < 128) {
              out[p++] = c;
          }
          else if (c < 2048) {
              out[p++] = (c >> 6) | 192;
              out[p++] = (c & 63) | 128;
          }
          else if (c < 65536) {
              out[p++] = (c >> 12) | 224;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
          }
          else {
              out[p++] = (c >> 18) | 240;
              out[p++] = ((c >> 12) & 63) | 128;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
          }
      }
      return out;
  };
  /**
   * Calculate length without actually converting; useful for doing cheaper validation.
   * @param {string} str
   * @return {number}
   */
  var stringLength = function (str) {
      var p = 0;
      for (var i = 0; i < str.length; i++) {
          var c = str.charCodeAt(i);
          if (c < 128) {
              p++;
          }
          else if (c < 2048) {
              p += 2;
          }
          else if (c >= 0xd800 && c <= 0xdbff) {
              // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
              p += 4;
              i++; // skip trail surrogate.
          }
          else {
              p += 3;
          }
      }
      return p;
  };

  exports.CONSTANTS = CONSTANTS;
  exports.Deferred = Deferred;
  exports.ErrorFactory = ErrorFactory;
  exports.FirebaseError = FirebaseError;
  exports.Sha1 = Sha1;
  exports.assert = assert;
  exports.assertionError = assertionError;
  exports.async = async;
  exports.base64 = base64;
  exports.base64Decode = base64Decode;
  exports.base64Encode = base64Encode;
  exports.contains = contains;
  exports.createSubscribe = createSubscribe;
  exports.decode = decode;
  exports.deepCopy = deepCopy;
  exports.deepExtend = deepExtend;
  exports.errorPrefix = errorPrefix;
  exports.getUA = getUA;
  exports.isAdmin = isAdmin;
  exports.isBrowser = isBrowser;
  exports.isEmpty = isEmpty;
  exports.isMobileCordova = isMobileCordova;
  exports.isNode = isNode;
  exports.isNodeSdk = isNodeSdk;
  exports.isReactNative = isReactNative;
  exports.isValidFormat = isValidFormat;
  exports.isValidTimestamp = isValidTimestamp;
  exports.issuedAtTime = issuedAtTime;
  exports.jsonEval = jsonEval;
  exports.map = map;
  exports.querystring = querystring;
  exports.querystringDecode = querystringDecode;
  exports.safeGet = safeGet;
  exports.stringLength = stringLength;
  exports.stringToByteArray = stringToByteArray$1;
  exports.stringify = stringify;
  exports.validateArgCount = validateArgCount;
  exports.validateCallback = validateCallback;
  exports.validateContextObject = validateContextObject;
  exports.validateNamespace = validateNamespace;
  //# sourceMappingURL=index.cjs.js.map
  });

  unwrapExports(index_cjs);
  var index_cjs_1 = index_cjs.CONSTANTS;
  var index_cjs_2 = index_cjs.Deferred;
  var index_cjs_3 = index_cjs.ErrorFactory;
  var index_cjs_4 = index_cjs.FirebaseError;
  var index_cjs_5 = index_cjs.Sha1;
  var index_cjs_6 = index_cjs.assert;
  var index_cjs_7 = index_cjs.assertionError;
  var index_cjs_8 = index_cjs.async;
  var index_cjs_9 = index_cjs.base64;
  var index_cjs_10 = index_cjs.base64Decode;
  var index_cjs_11 = index_cjs.base64Encode;
  var index_cjs_12 = index_cjs.contains;
  var index_cjs_13 = index_cjs.createSubscribe;
  var index_cjs_14 = index_cjs.decode;
  var index_cjs_15 = index_cjs.deepCopy;
  var index_cjs_16 = index_cjs.deepExtend;
  var index_cjs_17 = index_cjs.errorPrefix;
  var index_cjs_18 = index_cjs.getUA;
  var index_cjs_19 = index_cjs.isAdmin;
  var index_cjs_20 = index_cjs.isBrowser;
  var index_cjs_21 = index_cjs.isEmpty;
  var index_cjs_22 = index_cjs.isMobileCordova;
  var index_cjs_23 = index_cjs.isNode;
  var index_cjs_24 = index_cjs.isNodeSdk;
  var index_cjs_25 = index_cjs.isReactNative;
  var index_cjs_26 = index_cjs.isValidFormat;
  var index_cjs_27 = index_cjs.isValidTimestamp;
  var index_cjs_28 = index_cjs.issuedAtTime;
  var index_cjs_29 = index_cjs.jsonEval;
  var index_cjs_30 = index_cjs.map;
  var index_cjs_31 = index_cjs.querystring;
  var index_cjs_32 = index_cjs.querystringDecode;
  var index_cjs_33 = index_cjs.safeGet;
  var index_cjs_34 = index_cjs.stringLength;
  var index_cjs_35 = index_cjs.stringToByteArray;
  var index_cjs_36 = index_cjs.stringify;
  var index_cjs_37 = index_cjs.validateArgCount;
  var index_cjs_38 = index_cjs.validateCallback;
  var index_cjs_39 = index_cjs.validateContextObject;
  var index_cjs_40 = index_cjs.validateNamespace;

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */

  function __spreadArrays$1() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A container for all of the Logger instances
   */
  var instances = [];
  /**
   * The JS SDK supports 5 log levels and also allows a user the ability to
   * silence the logs altogether.
   *
   * The order is a follows:
   * DEBUG < VERBOSE < INFO < WARN < ERROR
   *
   * All of the log types above the current log level will be captured (i.e. if
   * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
   * `VERBOSE` logs will not)
   */
  var LogLevel;
  (function (LogLevel) {
      LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
      LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
      LogLevel[LogLevel["INFO"] = 2] = "INFO";
      LogLevel[LogLevel["WARN"] = 3] = "WARN";
      LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
      LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
  })(LogLevel || (LogLevel = {}));
  /**
   * The default log level
   */
  var defaultLogLevel = LogLevel.INFO;
  /**
   * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
   * messages on to their corresponding console counterparts (if the log method
   * is supported by the current log level)
   */
  var defaultLogHandler = function (instance, logType) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
      }
      if (logType < instance.logLevel) {
          return;
      }
      var now = new Date().toISOString();
      switch (logType) {
          /**
           * By default, `console.debug` is not displayed in the developer console (in
           * chrome). To avoid forcing users to have to opt-in to these logs twice
           * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
           * logs to the `console.log` function.
           */
          case LogLevel.DEBUG:
              console.log.apply(console, __spreadArrays$1(["[" + now + "]  " + instance.name + ":"], args));
              break;
          case LogLevel.VERBOSE:
              console.log.apply(console, __spreadArrays$1(["[" + now + "]  " + instance.name + ":"], args));
              break;
          case LogLevel.INFO:
              console.info.apply(console, __spreadArrays$1(["[" + now + "]  " + instance.name + ":"], args));
              break;
          case LogLevel.WARN:
              console.warn.apply(console, __spreadArrays$1(["[" + now + "]  " + instance.name + ":"], args));
              break;
          case LogLevel.ERROR:
              console.error.apply(console, __spreadArrays$1(["[" + now + "]  " + instance.name + ":"], args));
              break;
          default:
              throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
      }
  };
  var Logger = /** @class */ (function () {
      /**
       * Gives you an instance of a Logger to capture messages according to
       * Firebase's logging scheme.
       *
       * @param name The name that the logs will be associated with
       */
      function Logger(name) {
          this.name = name;
          /**
           * The log level of the given Logger instance.
           */
          this._logLevel = defaultLogLevel;
          /**
           * The log handler for the Logger instance.
           */
          this._logHandler = defaultLogHandler;
          /**
           * Capture the current instance for later use
           */
          instances.push(this);
      }
      Object.defineProperty(Logger.prototype, "logLevel", {
          get: function () {
              return this._logLevel;
          },
          set: function (val) {
              if (!(val in LogLevel)) {
                  throw new TypeError('Invalid value assigned to `logLevel`');
              }
              this._logLevel = val;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Logger.prototype, "logHandler", {
          get: function () {
              return this._logHandler;
          },
          set: function (val) {
              if (typeof val !== 'function') {
                  throw new TypeError('Value assigned to `logHandler` must be a function');
              }
              this._logHandler = val;
          },
          enumerable: true,
          configurable: true
      });
      /**
       * The functions below are all based on the `console` interface
       */
      Logger.prototype.debug = function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
      };
      Logger.prototype.log = function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
      };
      Logger.prototype.info = function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
      };
      Logger.prototype.warn = function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
      };
      Logger.prototype.error = function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
      };
      return Logger;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function setLogLevel(level) {
      instances.forEach(function (inst) {
          inst.logLevel = level;
      });
  }
  //# sourceMappingURL=index.esm.js.map

  var index_esm = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get LogLevel () { return LogLevel; },
    Logger: Logger,
    setLogLevel: setLogLevel
  });

  var index_cjs$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, '__esModule', { value: true });





  /**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var _a;
  var ERRORS = (_a = {},
      _a["no-app" /* NO_APP */] = "No Firebase App '{$appName}' has been created - " +
          'call Firebase App.initializeApp()',
      _a["bad-app-name" /* BAD_APP_NAME */] = "Illegal App name: '{$appName}",
      _a["duplicate-app" /* DUPLICATE_APP */] = "Firebase App named '{$appName}' already exists",
      _a["app-deleted" /* APP_DELETED */] = "Firebase App named '{$appName}' already deleted",
      _a["invalid-app-argument" /* INVALID_APP_ARGUMENT */] = 'firebase.{$appName}() takes either no argument or a ' +
          'Firebase App instance.',
      _a);
  var ERROR_FACTORY = new index_cjs.ErrorFactory('app', 'Firebase', ERRORS);

  /**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var DEFAULT_ENTRY_NAME = '[DEFAULT]';

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Global context object for a collection of services using
   * a shared authentication state.
   */
  var FirebaseAppImpl = /** @class */ (function () {
      function FirebaseAppImpl(options, config, firebase_) {
          var _this = this;
          this.firebase_ = firebase_;
          this.isDeleted_ = false;
          this.services_ = {};
          // An array to capture listeners before the true auth functions exist
          this.tokenListeners_ = [];
          // An array to capture requests to send events before analytics component loads. Use type any to make using function.apply easier
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this.analyticsEventRequests_ = [];
          this.name_ = config.name;
          this.automaticDataCollectionEnabled_ =
              config.automaticDataCollectionEnabled || false;
          this.options_ = index_cjs.deepCopy(options);
          var self = this;
          this.INTERNAL = {
              getUid: function () { return null; },
              getToken: function () { return Promise.resolve(null); },
              addAuthTokenListener: function (callback) {
                  _this.tokenListeners_.push(callback);
                  // Make sure callback is called, asynchronously, in the absence of the auth module
                  setTimeout(function () { return callback(null); }, 0);
              },
              removeAuthTokenListener: function (callback) {
                  _this.tokenListeners_ = _this.tokenListeners_.filter(function (listener) { return listener !== callback; });
              },
              analytics: {
                  logEvent: function () {
                      self.analyticsEventRequests_.push(arguments);
                  }
              }
          };
      }
      Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
          get: function () {
              this.checkDestroyed_();
              return this.automaticDataCollectionEnabled_;
          },
          set: function (val) {
              this.checkDestroyed_();
              this.automaticDataCollectionEnabled_ = val;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(FirebaseAppImpl.prototype, "name", {
          get: function () {
              this.checkDestroyed_();
              return this.name_;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(FirebaseAppImpl.prototype, "options", {
          get: function () {
              this.checkDestroyed_();
              return this.options_;
          },
          enumerable: true,
          configurable: true
      });
      FirebaseAppImpl.prototype.delete = function () {
          var _this = this;
          return new Promise(function (resolve) {
              _this.checkDestroyed_();
              resolve();
          })
              .then(function () {
              _this.firebase_.INTERNAL.removeApp(_this.name_);
              var services = [];
              for (var _i = 0, _a = Object.keys(_this.services_); _i < _a.length; _i++) {
                  var serviceKey = _a[_i];
                  for (var _b = 0, _c = Object.keys(_this.services_[serviceKey]); _b < _c.length; _b++) {
                      var instanceKey = _c[_b];
                      services.push(_this.services_[serviceKey][instanceKey]);
                  }
              }
              return Promise.all(services
                  .filter(function (service) { return 'INTERNAL' in service; })
                  .map(function (service) { return service.INTERNAL.delete(); }));
          })
              .then(function () {
              _this.isDeleted_ = true;
              _this.services_ = {};
          });
      };
      /**
       * Return a service instance associated with this app (creating it
       * on demand), identified by the passed instanceIdentifier.
       *
       * NOTE: Currently storage and functions are the only ones that are leveraging this
       * functionality. They invoke it by calling:
       *
       * ```javascript
       * firebase.app().storage('STORAGE BUCKET ID')
       * ```
       *
       * The service name is passed to this already
       * @internal
       */
      FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
          if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
          this.checkDestroyed_();
          if (!this.services_[name]) {
              this.services_[name] = {};
          }
          if (!this.services_[name][instanceIdentifier]) {
              /**
               * If a custom instance has been defined (i.e. not '[DEFAULT]')
               * then we will pass that instance on, otherwise we pass `null`
               */
              var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME
                  ? instanceIdentifier
                  : undefined;
              var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);
              this.services_[name][instanceIdentifier] = service;
          }
          return this.services_[name][instanceIdentifier];
      };
      /**
       * Remove a service instance from the cache, so we will create a new instance for this service
       * when people try to get this service again.
       *
       * NOTE: currently only firestore is using this functionality to support firestore shutdown.
       *
       * @param name The service name
       * @param instanceIdentifier instance identifier in case multiple instances are allowed
       * @internal
       */
      FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {
          if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
          if (this.services_[name] && this.services_[name][instanceIdentifier]) {
              delete this.services_[name][instanceIdentifier];
          }
      };
      /**
       * Callback function used to extend an App instance at the time
       * of service instance creation.
       */
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      FirebaseAppImpl.prototype.extendApp = function (props) {
          // Copy the object onto the FirebaseAppImpl prototype
          index_cjs.deepExtend(this, props);
          if (props.INTERNAL) {
              /**
               * If the app has overwritten the addAuthTokenListener stub, forward
               * the active token listeners on to the true fxn.
               *
               * TODO: This function is required due to our current module
               * structure. Once we are able to rely strictly upon a single module
               * implementation, this code should be refactored and Auth should
               * provide these stubs and the upgrade logic
               */
              if (props.INTERNAL.addAuthTokenListener) {
                  for (var _i = 0, _a = this.tokenListeners_; _i < _a.length; _i++) {
                      var listener = _a[_i];
                      this.INTERNAL.addAuthTokenListener(listener);
                  }
                  this.tokenListeners_ = [];
              }
              if (props.INTERNAL.analytics) {
                  for (var _b = 0, _c = this.analyticsEventRequests_; _b < _c.length; _b++) {
                      var request = _c[_b];
                      // logEvent is the actual implementation at this point.
                      // We forward the queued events to it.
                      this.INTERNAL.analytics.logEvent.apply(undefined, request);
                  }
                  this.analyticsEventRequests_ = [];
              }
          }
      };
      /**
       * This function will throw an Error if the App has already been deleted -
       * use before performing API actions on the App.
       */
      FirebaseAppImpl.prototype.checkDestroyed_ = function () {
          if (this.isDeleted_) {
              throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */, { appName: this.name_ });
          }
      };
      return FirebaseAppImpl;
  }());
  // Prevent dead-code elimination of these methods w/o invalid property
  // copying.
  (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
      FirebaseAppImpl.prototype.delete ||
      console.log('dc');

  var version = "7.5.0";

  /**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var logger = new index_esm.Logger('@firebase/app');

  /**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Because auth can't share code with other components, we attach the utility functions
   * in an internal namespace to share code.
   * This function return a firebase namespace object without
   * any utility functions, so it can be shared between the regular firebaseNamespace and
   * the lite version.
   */
  function createFirebaseNamespaceCore(firebaseAppImpl) {
      var apps = {};
      var factories = {};
      var appHooks = {};
      // A namespace is a plain JavaScript Object.
      var namespace = {
          // Hack to prevent Babel from modifying the object returned
          // as the firebase namespace.
          // @ts-ignore
          __esModule: true,
          initializeApp: initializeApp,
          // @ts-ignore
          app: app,
          // @ts-ignore
          apps: null,
          SDK_VERSION: version,
          INTERNAL: {
              registerService: registerService,
              removeApp: removeApp,
              factories: factories,
              useAsService: useAsService
          }
      };
      // Inject a circular default export to allow Babel users who were previously
      // using:
      //
      //   import firebase from 'firebase';
      //   which becomes: var firebase = require('firebase').default;
      //
      // instead of
      //
      //   import * as firebase from 'firebase';
      //   which becomes: var firebase = require('firebase');
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      namespace['default'] = namespace;
      // firebase.apps is a read-only getter.
      Object.defineProperty(namespace, 'apps', {
          get: getApps
      });
      /**
       * Called by App.delete() - but before any services associated with the App
       * are deleted.
       */
      function removeApp(name) {
          var app = apps[name];
          callAppHooks(app, 'delete');
          delete apps[name];
      }
      /**
       * Get the App object for a given name (or DEFAULT).
       */
      function app(name) {
          name = name || DEFAULT_ENTRY_NAME;
          if (!index_cjs.contains(apps, name)) {
              throw ERROR_FACTORY.create("no-app" /* NO_APP */, { appName: name });
          }
          return apps[name];
      }
      // @ts-ignore
      app['App'] = firebaseAppImpl;
      function initializeApp(options, rawConfig) {
          if (rawConfig === void 0) { rawConfig = {}; }
          if (typeof rawConfig !== 'object' || rawConfig === null) {
              var name_1 = rawConfig;
              rawConfig = { name: name_1 };
          }
          var config = rawConfig;
          if (config.name === undefined) {
              config.name = DEFAULT_ENTRY_NAME;
          }
          var name = config.name;
          if (typeof name !== 'string' || !name) {
              throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */, {
                  appName: String(name)
              });
          }
          if (index_cjs.contains(apps, name)) {
              throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */, { appName: name });
          }
          var app = new firebaseAppImpl(options, config, namespace);
          apps[name] = app;
          callAppHooks(app, 'create');
          return app;
      }
      /*
       * Return an array of all the non-deleted FirebaseApps.
       */
      function getApps() {
          // Make a copy so caller cannot mutate the apps list.
          return Object.keys(apps).map(function (name) { return apps[name]; });
      }
      /*
       * Register a Firebase Service.
       *
       * firebase.INTERNAL.registerService()
       *
       * TODO: Implement serviceProperties.
       */
      function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {
          if (allowMultipleInstances === void 0) { allowMultipleInstances = false; }
          // If re-registering a service that already exists, return existing service
          if (factories[name]) {
              logger.debug("There were multiple attempts to register service " + name + ".");
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              return namespace[name];
          }
          // Capture the service factory for later service instantiation
          factories[name] = createService;
          // Capture the appHook, if passed
          if (appHook) {
              appHooks[name] = appHook;
              // Run the **new** app hook on all existing apps
              getApps().forEach(function (app) {
                  appHook('create', app);
              });
          }
          // The Service namespace is an accessor function ...
          function serviceNamespace(appArg) {
              if (appArg === void 0) { appArg = app(); }
              // @ts-ignore
              if (typeof appArg[name] !== 'function') {
                  // Invalid argument.
                  // This happens in the following case: firebase.storage('gs:/')
                  throw ERROR_FACTORY.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */, {
                      appName: name
                  });
              }
              // Forward service instance lookup to the FirebaseApp.
              // @ts-ignore
              return appArg[name]();
          }
          // ... and a container for service-level properties.
          if (serviceProperties !== undefined) {
              index_cjs.deepExtend(serviceNamespace, serviceProperties);
          }
          // Monkey-patch the serviceNamespace onto the firebase namespace
          // @ts-ignore
          namespace[name] = serviceNamespace;
          // Patch the FirebaseAppImpl prototype
          // @ts-ignore
          firebaseAppImpl.prototype[name] =
              // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
              // option added to the no-explicit-any rule when ESlint releases it.
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              function () {
                  var args = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                      args[_i] = arguments[_i];
                  }
                  var serviceFxn = this._getService.bind(this, name);
                  return serviceFxn.apply(this, allowMultipleInstances ? args : []);
              };
          return serviceNamespace;
      }
      function callAppHooks(app, eventName) {
          for (var _i = 0, _a = Object.keys(factories); _i < _a.length; _i++) {
              var serviceName = _a[_i];
              // Ignore virtual services
              var factoryName = useAsService(app, serviceName);
              if (factoryName === null) {
                  return;
              }
              if (appHooks[factoryName]) {
                  appHooks[factoryName](eventName, app);
              }
          }
      }
      // Map the requested service to a registered service name
      // (used to map auth to serverAuth service when needed).
      function useAsService(app, name) {
          if (name === 'serverAuth') {
              return null;
          }
          var useService = name;
          return useService;
      }
      return namespace;
  }

  /**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Return a firebase namespace object.
   *
   * In production, this will be called exactly once and the result
   * assigned to the 'firebase' global.  It may be called multiple times
   * in unit tests.
   */
  function createFirebaseNamespace() {
      var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
      namespace.INTERNAL = tslib_es6.__assign(tslib_es6.__assign({}, namespace.INTERNAL), { createFirebaseNamespace: createFirebaseNamespace,
          extendNamespace: extendNamespace,
          createSubscribe: index_cjs.createSubscribe,
          ErrorFactory: index_cjs.ErrorFactory,
          deepExtend: index_cjs.deepExtend });
      /**
       * Patch the top-level firebase namespace with additional properties.
       *
       * firebase.INTERNAL.extendNamespace()
       */
      function extendNamespace(props) {
          index_cjs.deepExtend(namespace, props);
      }
      return namespace;
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Firebase Lite detection
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  if (index_cjs.isBrowser() && self.firebase !== undefined) {
      logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
      // eslint-disable-next-line
      var sdkVersion = self.firebase.SDK_VERSION;
      if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
          logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
      }
  }
  var firebaseNamespace = createFirebaseNamespace();
  var initializeApp = firebaseNamespace.initializeApp;
  // TODO: This disable can be removed and the 'ignoreRestArgs' option added to
  // the no-explicit-any rule when ESlint releases it.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  firebaseNamespace.initializeApp = function () {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      // Environment check before initializing app
      // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
      // in @firebase/logger
      if (index_cjs.isNode()) {
          logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      ");
      }
      return initializeApp.apply(undefined, args);
  };
  var firebase = firebaseNamespace;

  exports.default = firebase;
  exports.firebase = firebase;
  //# sourceMappingURL=index.cjs.js.map
  });

  var firebase = unwrapExports(index_cjs$1);
  var index_cjs_1$1 = index_cjs$1.firebase;

  function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

  var firebase$1 = _interopDefault(index_cjs$1);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  var index_cjs$2 = firebase$1;

  var index_cjs$3 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, '__esModule', { value: true });

  function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

  var firebase = _interopDefault(index_cjs$1);




  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Wraps a DOM Storage object and:
   * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
   * - prefixes names with "firebase:" to avoid collisions with app data.
   *
   * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
   * and one for localStorage.
   *
   * @constructor
   */
  var DOMStorageWrapper = /** @class */ (function () {
      /**
       * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)
       */
      function DOMStorageWrapper(domStorage_) {
          this.domStorage_ = domStorage_;
          // Use a prefix to avoid collisions with other stuff saved by the app.
          this.prefix_ = 'firebase:';
      }
      /**
       * @param {string} key The key to save the value under
       * @param {?Object} value The value being stored, or null to remove the key.
       */
      DOMStorageWrapper.prototype.set = function (key, value) {
          if (value == null) {
              this.domStorage_.removeItem(this.prefixedName_(key));
          }
          else {
              this.domStorage_.setItem(this.prefixedName_(key), index_cjs.stringify(value));
          }
      };
      /**
       * @param {string} key
       * @return {*} The value that was stored under this key, or null
       */
      DOMStorageWrapper.prototype.get = function (key) {
          var storedVal = this.domStorage_.getItem(this.prefixedName_(key));
          if (storedVal == null) {
              return null;
          }
          else {
              return index_cjs.jsonEval(storedVal);
          }
      };
      /**
       * @param {string} key
       */
      DOMStorageWrapper.prototype.remove = function (key) {
          this.domStorage_.removeItem(this.prefixedName_(key));
      };
      /**
       * @param {string} name
       * @return {string}
       */
      DOMStorageWrapper.prototype.prefixedName_ = function (name) {
          return this.prefix_ + name;
      };
      DOMStorageWrapper.prototype.toString = function () {
          return this.domStorage_.toString();
      };
      return DOMStorageWrapper;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An in-memory storage implementation that matches the API of DOMStorageWrapper
   * (TODO: create interface for both to implement).
   *
   * @constructor
   */
  var MemoryStorage = /** @class */ (function () {
      function MemoryStorage() {
          this.cache_ = {};
          this.isInMemoryStorage = true;
      }
      MemoryStorage.prototype.set = function (key, value) {
          if (value == null) {
              delete this.cache_[key];
          }
          else {
              this.cache_[key] = value;
          }
      };
      MemoryStorage.prototype.get = function (key) {
          if (index_cjs.contains(this.cache_, key)) {
              return this.cache_[key];
          }
          return null;
      };
      MemoryStorage.prototype.remove = function (key) {
          delete this.cache_[key];
      };
      return MemoryStorage;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
   * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
   * to reflect this type
   *
   * @param {string} domStorageName Name of the underlying storage object
   *   (e.g. 'localStorage' or 'sessionStorage').
   * @return {?} Turning off type information until a common interface is defined.
   */
  var createStoragefor = function (domStorageName) {
      try {
          // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
          // so it must be inside the try/catch.
          if (typeof window !== 'undefined' &&
              typeof window[domStorageName] !== 'undefined') {
              // Need to test cache. Just because it's here doesn't mean it works
              var domStorage = window[domStorageName];
              domStorage.setItem('firebase:sentinel', 'cache');
              domStorage.removeItem('firebase:sentinel');
              return new DOMStorageWrapper(domStorage);
          }
      }
      catch (e) { }
      // Failed to create wrapper.  Just return in-memory storage.
      // TODO: log?
      return new MemoryStorage();
  };
  /** A storage object that lasts across sessions */
  var PersistentStorage = createStoragefor('localStorage');
  /** A storage object that only lasts one session */
  var SessionStorage = createStoragefor('sessionStorage');

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var logClient = new index_esm.Logger('@firebase/database');
  /**
   * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
   * @type {function(): number} Generated ID.
   */
  var LUIDGenerator = (function () {
      var id = 1;
      return function () {
          return id++;
      };
  })();
  /**
   * Sha1 hash of the input string
   * @param {!string} str The string to hash
   * @return {!string} The resulting hash
   */
  var sha1 = function (str) {
      var utf8Bytes = index_cjs.stringToByteArray(str);
      var sha1 = new index_cjs.Sha1();
      sha1.update(utf8Bytes);
      var sha1Bytes = sha1.digest();
      return index_cjs.base64.encodeByteArray(sha1Bytes);
  };
  /**
   * @param {...*} var_args
   * @return {string}
   * @private
   */
  var buildLogMessage_ = function () {
      var var_args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          var_args[_i] = arguments[_i];
      }
      var message = '';
      for (var i = 0; i < var_args.length; i++) {
          if (Array.isArray(var_args[i]) ||
              (var_args[i] &&
                  typeof var_args[i] === 'object' &&
                  typeof var_args[i].length === 'number')) {
              message += buildLogMessage_.apply(null, var_args[i]);
          }
          else if (typeof var_args[i] === 'object') {
              message += index_cjs.stringify(var_args[i]);
          }
          else {
              message += var_args[i];
          }
          message += ' ';
      }
      return message;
  };
  /**
   * Use this for all debug messages in Firebase.
   * @type {?function(string)}
   */
  var logger = null;
  /**
   * Flag to check for log availability on first log message
   * @type {boolean}
   * @private
   */
  var firstLog_ = true;
  /**
   * The implementation of Firebase.enableLogging (defined here to break dependencies)
   * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger
   * @param {boolean=} persistent Whether or not to persist logging settings across refreshes
   */
  var enableLogging = function (logger_, persistent) {
      index_cjs.assert(!persistent || logger_ === true || logger_ === false, "Can't turn on custom loggers persistently.");
      if (logger_ === true) {
          logClient.logLevel = index_esm.LogLevel.VERBOSE;
          logger = logClient.log.bind(logClient);
          if (persistent)
              SessionStorage.set('logging_enabled', true);
      }
      else if (typeof logger_ === 'function') {
          logger = logger_;
      }
      else {
          logger = null;
          SessionStorage.remove('logging_enabled');
      }
  };
  /**
   *
   * @param {...(string|Arguments)} var_args
   */
  var log = function () {
      var var_args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          var_args[_i] = arguments[_i];
      }
      if (firstLog_ === true) {
          firstLog_ = false;
          if (logger === null && SessionStorage.get('logging_enabled') === true)
              enableLogging(true);
      }
      if (logger) {
          var message = buildLogMessage_.apply(null, var_args);
          logger(message);
      }
  };
  /**
   * @param {!string} prefix
   * @return {function(...[*])}
   */
  var logWrapper = function (prefix) {
      return function () {
          var var_args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              var_args[_i] = arguments[_i];
          }
          log.apply(void 0, tslib_es6.__spread([prefix], var_args));
      };
  };
  /**
   * @param {...string} var_args
   */
  var error = function () {
      var var_args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          var_args[_i] = arguments[_i];
      }
      var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, tslib_es6.__spread(var_args));
      logClient.error(message);
  };
  /**
   * @param {...string} var_args
   */
  var fatal = function () {
      var var_args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          var_args[_i] = arguments[_i];
      }
      var message = "FIREBASE FATAL ERROR: " + buildLogMessage_.apply(void 0, tslib_es6.__spread(var_args));
      logClient.error(message);
      throw new Error(message);
  };
  /**
   * @param {...*} var_args
   */
  var warn = function () {
      var var_args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          var_args[_i] = arguments[_i];
      }
      var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, tslib_es6.__spread(var_args));
      logClient.warn(message);
  };
  /**
   * Logs a warning if the containing page uses https. Called when a call to new Firebase
   * does not use https.
   */
  var warnIfPageIsSecure = function () {
      // Be very careful accessing browser globals. Who knows what may or may not exist.
      if (typeof window !== 'undefined' &&
          window.location &&
          window.location.protocol &&
          window.location.protocol.indexOf('https:') !== -1) {
          warn('Insecure Firebase access from a secure page. ' +
              'Please use https in calls to new Firebase().');
      }
  };
  /**
   * Returns true if data is NaN, or +/- Infinity.
   * @param {*} data
   * @return {boolean}
   */
  var isInvalidJSONNumber = function (data) {
      return (typeof data === 'number' &&
          (data != data || // NaN
              data == Number.POSITIVE_INFINITY ||
              data == Number.NEGATIVE_INFINITY));
  };
  /**
   * @param {function()} fn
   */
  var executeWhenDOMReady = function (fn) {
      if (index_cjs.isNodeSdk() || document.readyState === 'complete') {
          fn();
      }
      else {
          // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
          // fire before onload), but fall back to onload.
          var called_1 = false;
          var wrappedFn_1 = function () {
              if (!document.body) {
                  setTimeout(wrappedFn_1, Math.floor(10));
                  return;
              }
              if (!called_1) {
                  called_1 = true;
                  fn();
              }
          };
          if (document.addEventListener) {
              document.addEventListener('DOMContentLoaded', wrappedFn_1, false);
              // fallback to onload.
              window.addEventListener('load', wrappedFn_1, false);
          }
          else if (document.attachEvent) {
              // IE.
              document.attachEvent('onreadystatechange', function () {
                  if (document.readyState === 'complete')
                      wrappedFn_1();
              });
              // fallback to onload.
              window.attachEvent('onload', wrappedFn_1);
              // jQuery has an extra hack for IE that we could employ (based on
              // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
              // I'm hoping we don't need it.
          }
      }
  };
  /**
   * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
   * @type {!string}
   */
  var MIN_NAME = '[MIN_NAME]';
  /**
   * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
   * @type {!string}
   */
  var MAX_NAME = '[MAX_NAME]';
  /**
   * Compares valid Firebase key names, plus min and max name
   * @param {!string} a
   * @param {!string} b
   * @return {!number}
   */
  var nameCompare = function (a, b) {
      if (a === b) {
          return 0;
      }
      else if (a === MIN_NAME || b === MAX_NAME) {
          return -1;
      }
      else if (b === MIN_NAME || a === MAX_NAME) {
          return 1;
      }
      else {
          var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);
          if (aAsInt !== null) {
              if (bAsInt !== null) {
                  return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;
              }
              else {
                  return -1;
              }
          }
          else if (bAsInt !== null) {
              return 1;
          }
          else {
              return a < b ? -1 : 1;
          }
      }
  };
  /**
   * @param {!string} a
   * @param {!string} b
   * @return {!number} comparison result.
   */
  var stringCompare = function (a, b) {
      if (a === b) {
          return 0;
      }
      else if (a < b) {
          return -1;
      }
      else {
          return 1;
      }
  };
  /**
   * @param {string} key
   * @param {Object} obj
   * @return {*}
   */
  var requireKey = function (key, obj) {
      if (obj && key in obj) {
          return obj[key];
      }
      else {
          throw new Error('Missing required key (' + key + ') in object: ' + index_cjs.stringify(obj));
      }
  };
  /**
   * @param {*} obj
   * @return {string}
   */
  var ObjectToUniqueKey = function (obj) {
      if (typeof obj !== 'object' || obj === null)
          return index_cjs.stringify(obj);
      var keys = [];
      for (var k in obj) {
          keys.push(k);
      }
      // Export as json, but with the keys sorted.
      keys.sort();
      var key = '{';
      for (var i = 0; i < keys.length; i++) {
          if (i !== 0)
              key += ',';
          key += index_cjs.stringify(keys[i]);
          key += ':';
          key += ObjectToUniqueKey(obj[keys[i]]);
      }
      key += '}';
      return key;
  };
  /**
   * Splits a string into a number of smaller segments of maximum size
   * @param {!string} str The string
   * @param {!number} segsize The maximum number of chars in the string.
   * @return {Array.<string>} The string, split into appropriately-sized chunks
   */
  var splitStringBySize = function (str, segsize) {
      var len = str.length;
      if (len <= segsize) {
          return [str];
      }
      var dataSegs = [];
      for (var c = 0; c < len; c += segsize) {
          if (c + segsize > len) {
              dataSegs.push(str.substring(c, len));
          }
          else {
              dataSegs.push(str.substring(c, c + segsize));
          }
      }
      return dataSegs;
  };
  /**
   * Apply a function to each (key, value) pair in an object or
   * apply a function to each (index, value) pair in an array
   * @param obj The object or array to iterate over
   * @param fn The function to apply
   */
  function each(obj, fn) {
      for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
              fn(key, obj[key]);
          }
      }
  }
  /**
   * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
   * I made one modification at the end and removed the NaN / Infinity
   * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
   * @param {!number} v A double
   * @return {string}
   */
  var doubleToIEEE754String = function (v) {
      index_cjs.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL
      var ebits = 11, fbits = 52;
      var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str;
      // Compute sign, exponent, fraction
      // Skip NaN / Infinity handling --MJL.
      if (v === 0) {
          e = 0;
          f = 0;
          s = 1 / v === -Infinity ? 1 : 0;
      }
      else {
          s = v < 0;
          v = Math.abs(v);
          if (v >= Math.pow(2, 1 - bias)) {
              // Normalized
              ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
              e = ln + bias;
              f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
          }
          else {
              // Denormalized
              e = 0;
              f = Math.round(v / Math.pow(2, 1 - bias - fbits));
          }
      }
      // Pack sign, exponent, fraction
      bits = [];
      for (i = fbits; i; i -= 1) {
          bits.push(f % 2 ? 1 : 0);
          f = Math.floor(f / 2);
      }
      for (i = ebits; i; i -= 1) {
          bits.push(e % 2 ? 1 : 0);
          e = Math.floor(e / 2);
      }
      bits.push(s ? 1 : 0);
      bits.reverse();
      str = bits.join('');
      // Return the data as a hex string. --MJL
      var hexByteString = '';
      for (i = 0; i < 64; i += 8) {
          var hexByte = parseInt(str.substr(i, 8), 2).toString(16);
          if (hexByte.length === 1)
              hexByte = '0' + hexByte;
          hexByteString = hexByteString + hexByte;
      }
      return hexByteString.toLowerCase();
  };
  /**
   * Used to detect if we're in a Chrome content script (which executes in an
   * isolated environment where long-polling doesn't work).
   * @return {boolean}
   */
  var isChromeExtensionContentScript = function () {
      return !!(typeof window === 'object' &&
          window['chrome'] &&
          window['chrome']['extension'] &&
          !/^chrome/.test(window.location.href));
  };
  /**
   * Used to detect if we're in a Windows 8 Store app.
   * @return {boolean}
   */
  var isWindowsStoreApp = function () {
      // Check for the presence of a couple WinRT globals
      return typeof Windows === 'object' && typeof Windows.UI === 'object';
  };
  /**
   * Converts a server error code to a Javascript Error
   * @param {!string} code
   * @param {!Query} query
   * @return {Error}
   */
  var errorForServerCode = function (code, query) {
      var reason = 'Unknown Error';
      if (code === 'too_big') {
          reason =
              'The data requested exceeds the maximum size ' +
                  'that can be accessed with a single request.';
      }
      else if (code == 'permission_denied') {
          reason = "Client doesn't have permission to access the desired data.";
      }
      else if (code == 'unavailable') {
          reason = 'The service is unavailable';
      }
      var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);
      error.code = code.toUpperCase();
      return error;
  };
  /**
   * Used to test for integer-looking strings
   * @type {RegExp}
   * @private
   */
  var INTEGER_REGEXP_ = new RegExp('^-?(0*)\\d{1,10}$');
  /**
   * If the string contains a 32-bit integer, return it.  Else return null.
   * @param {!string} str
   * @return {?number}
   */
  var tryParseInt = function (str) {
      if (INTEGER_REGEXP_.test(str)) {
          var intVal = Number(str);
          if (intVal >= -2147483648 && intVal <= 2147483647) {
              return intVal;
          }
      }
      return null;
  };
  /**
   * Helper to run some code but catch any exceptions and re-throw them later.
   * Useful for preventing user callbacks from breaking internal code.
   *
   * Re-throwing the exception from a setTimeout is a little evil, but it's very
   * convenient (we don't have to try to figure out when is a safe point to
   * re-throw it), and the behavior seems reasonable:
   *
   * * If you aren't pausing on exceptions, you get an error in the console with
   *   the correct stack trace.
   * * If you're pausing on all exceptions, the debugger will pause on your
   *   exception and then again when we rethrow it.
   * * If you're only pausing on uncaught exceptions, the debugger will only pause
   *   on us re-throwing it.
   *
   * @param {!function()} fn The code to guard.
   */
  var exceptionGuard = function (fn) {
      try {
          fn();
      }
      catch (e) {
          // Re-throw exception when it's safe.
          setTimeout(function () {
              // It used to be that "throw e" would result in a good console error with
              // relevant context, but as of Chrome 39, you just get the firebase.js
              // file/line number where we re-throw it, which is useless. So we log
              // e.stack explicitly.
              var stack = e.stack || '';
              warn('Exception was thrown by user callback.', stack);
              throw e;
          }, Math.floor(0));
      }
  };
  /**
   * @return {boolean} true if we think we're currently being crawled.
   */
  var beingCrawled = function () {
      var userAgent = (typeof window === 'object' &&
          window['navigator'] &&
          window['navigator']['userAgent']) ||
          '';
      // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
      // believe to support JavaScript/AJAX rendering.
      // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
      // would have seen the page" is flaky if we don't treat it as a crawler.
      return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);
  };
  /**
   * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
   *
   * It is removed with clearTimeout() as normal.
   *
   * @param {Function} fn Function to run.
   * @param {number} time Milliseconds to wait before running.
   * @return {number|Object} The setTimeout() return value.
   */
  var setTimeoutNonBlocking = function (fn, time) {
      var timeout = setTimeout(fn, time);
      if (typeof timeout === 'object' && timeout['unref']) {
          timeout['unref']();
      }
      return timeout;
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An immutable object representing a parsed path.  It's immutable so that you
   * can pass them around to other functions without worrying about them changing
   * it.
   */
  var Path = /** @class */ (function () {
      /**
       * @param {string|Array.<string>} pathOrString Path string to parse,
       *      or another path, or the raw tokens array
       * @param {number=} pieceNum
       */
      function Path(pathOrString, pieceNum) {
          if (pieceNum === void 0) {
              this.pieces_ = pathOrString.split('/');
              // Remove empty pieces.
              var copyTo = 0;
              for (var i = 0; i < this.pieces_.length; i++) {
                  if (this.pieces_[i].length > 0) {
                      this.pieces_[copyTo] = this.pieces_[i];
                      copyTo++;
                  }
              }
              this.pieces_.length = copyTo;
              this.pieceNum_ = 0;
          }
          else {
              this.pieces_ = pathOrString;
              this.pieceNum_ = pieceNum;
          }
      }
      Object.defineProperty(Path, "Empty", {
          /**
           * Singleton to represent an empty path
           *
           * @const
           */
          get: function () {
              return new Path('');
          },
          enumerable: true,
          configurable: true
      });
      Path.prototype.getFront = function () {
          if (this.pieceNum_ >= this.pieces_.length)
              return null;
          return this.pieces_[this.pieceNum_];
      };
      /**
       * @return {number} The number of segments in this path
       */
      Path.prototype.getLength = function () {
          return this.pieces_.length - this.pieceNum_;
      };
      /**
       * @return {!Path}
       */
      Path.prototype.popFront = function () {
          var pieceNum = this.pieceNum_;
          if (pieceNum < this.pieces_.length) {
              pieceNum++;
          }
          return new Path(this.pieces_, pieceNum);
      };
      /**
       * @return {?string}
       */
      Path.prototype.getBack = function () {
          if (this.pieceNum_ < this.pieces_.length)
              return this.pieces_[this.pieces_.length - 1];
          return null;
      };
      Path.prototype.toString = function () {
          var pathString = '';
          for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
              if (this.pieces_[i] !== '')
                  pathString += '/' + this.pieces_[i];
          }
          return pathString || '/';
      };
      Path.prototype.toUrlEncodedString = function () {
          var pathString = '';
          for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
              if (this.pieces_[i] !== '')
                  pathString += '/' + encodeURIComponent(String(this.pieces_[i]));
          }
          return pathString || '/';
      };
      /**
       * Shallow copy of the parts of the path.
       *
       * @param {number=} begin
       * @return {!Array<string>}
       */
      Path.prototype.slice = function (begin) {
          if (begin === void 0) { begin = 0; }
          return this.pieces_.slice(this.pieceNum_ + begin);
      };
      /**
       * @return {?Path}
       */
      Path.prototype.parent = function () {
          if (this.pieceNum_ >= this.pieces_.length)
              return null;
          var pieces = [];
          for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++)
              pieces.push(this.pieces_[i]);
          return new Path(pieces, 0);
      };
      /**
       * @param {string|!Path} childPathObj
       * @return {!Path}
       */
      Path.prototype.child = function (childPathObj) {
          var pieces = [];
          for (var i = this.pieceNum_; i < this.pieces_.length; i++)
              pieces.push(this.pieces_[i]);
          if (childPathObj instanceof Path) {
              for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
                  pieces.push(childPathObj.pieces_[i]);
              }
          }
          else {
              var childPieces = childPathObj.split('/');
              for (var i = 0; i < childPieces.length; i++) {
                  if (childPieces[i].length > 0)
                      pieces.push(childPieces[i]);
              }
          }
          return new Path(pieces, 0);
      };
      /**
       * @return {boolean} True if there are no segments in this path
       */
      Path.prototype.isEmpty = function () {
          return this.pieceNum_ >= this.pieces_.length;
      };
      /**
       * @param {!Path} outerPath
       * @param {!Path} innerPath
       * @return {!Path} The path from outerPath to innerPath
       */
      Path.relativePath = function (outerPath, innerPath) {
          var outer = outerPath.getFront(), inner = innerPath.getFront();
          if (outer === null) {
              return innerPath;
          }
          else if (outer === inner) {
              return Path.relativePath(outerPath.popFront(), innerPath.popFront());
          }
          else {
              throw new Error('INTERNAL ERROR: innerPath (' +
                  innerPath +
                  ') is not within ' +
                  'outerPath (' +
                  outerPath +
                  ')');
          }
      };
      /**
       * @param {!Path} left
       * @param {!Path} right
       * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.
       */
      Path.comparePaths = function (left, right) {
          var leftKeys = left.slice();
          var rightKeys = right.slice();
          for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
              var cmp = nameCompare(leftKeys[i], rightKeys[i]);
              if (cmp !== 0)
                  return cmp;
          }
          if (leftKeys.length === rightKeys.length)
              return 0;
          return leftKeys.length < rightKeys.length ? -1 : 1;
      };
      /**
       *
       * @param {Path} other
       * @return {boolean} true if paths are the same.
       */
      Path.prototype.equals = function (other) {
          if (this.getLength() !== other.getLength()) {
              return false;
          }
          for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {
              if (this.pieces_[i] !== other.pieces_[j]) {
                  return false;
              }
          }
          return true;
      };
      /**
       *
       * @param {!Path} other
       * @return {boolean} True if this path is a parent (or the same as) other
       */
      Path.prototype.contains = function (other) {
          var i = this.pieceNum_;
          var j = other.pieceNum_;
          if (this.getLength() > other.getLength()) {
              return false;
          }
          while (i < this.pieces_.length) {
              if (this.pieces_[i] !== other.pieces_[j]) {
                  return false;
              }
              ++i;
              ++j;
          }
          return true;
      };
      return Path;
  }()); // end Path
  /**
   * Dynamic (mutable) path used to count path lengths.
   *
   * This class is used to efficiently check paths for valid
   * length (in UTF8 bytes) and depth (used in path validation).
   *
   * Throws Error exception if path is ever invalid.
   *
   * The definition of a path always begins with '/'.
   */
  var ValidationPath = /** @class */ (function () {
      /**
       * @param {!Path} path Initial Path.
       * @param {string} errorPrefix_ Prefix for any error messages.
       */
      function ValidationPath(path, errorPrefix_) {
          this.errorPrefix_ = errorPrefix_;
          /** @type {!Array<string>} */
          this.parts_ = path.slice();
          /** @type {number} Initialize to number of '/' chars needed in path. */
          this.byteLength_ = Math.max(1, this.parts_.length);
          for (var i = 0; i < this.parts_.length; i++) {
              this.byteLength_ += index_cjs.stringLength(this.parts_[i]);
          }
          this.checkValid_();
      }
      Object.defineProperty(ValidationPath, "MAX_PATH_DEPTH", {
          /** @const {number} Maximum key depth. */
          get: function () {
              return 32;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(ValidationPath, "MAX_PATH_LENGTH_BYTES", {
          /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */
          get: function () {
              return 768;
          },
          enumerable: true,
          configurable: true
      });
      /** @param {string} child */
      ValidationPath.prototype.push = function (child) {
          // Count the needed '/'
          if (this.parts_.length > 0) {
              this.byteLength_ += 1;
          }
          this.parts_.push(child);
          this.byteLength_ += index_cjs.stringLength(child);
          this.checkValid_();
      };
      ValidationPath.prototype.pop = function () {
          var last = this.parts_.pop();
          this.byteLength_ -= index_cjs.stringLength(last);
          // Un-count the previous '/'
          if (this.parts_.length > 0) {
              this.byteLength_ -= 1;
          }
      };
      ValidationPath.prototype.checkValid_ = function () {
          if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {
              throw new Error(this.errorPrefix_ +
                  'has a key path longer than ' +
                  ValidationPath.MAX_PATH_LENGTH_BYTES +
                  ' bytes (' +
                  this.byteLength_ +
                  ').');
          }
          if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {
              throw new Error(this.errorPrefix_ +
                  'path specified exceeds the maximum depth that can be written (' +
                  ValidationPath.MAX_PATH_DEPTH +
                  ') or object contains a cycle ' +
                  this.toErrorString());
          }
      };
      /**
       * String for use in error messages - uses '.' notation for path.
       *
       * @return {string}
       */
      ValidationPath.prototype.toErrorString = function () {
          if (this.parts_.length == 0) {
              return '';
          }
          return "in property '" + this.parts_.join('.') + "'";
      };
      return ValidationPath;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var PROTOCOL_VERSION = '5';
  var VERSION_PARAM = 'v';
  var TRANSPORT_SESSION_PARAM = 's';
  var REFERER_PARAM = 'r';
  var FORGE_REF = 'f';
  var FORGE_DOMAIN = 'firebaseio.com';
  var LAST_SESSION_PARAM = 'ls';
  var WEBSOCKET = 'websocket';
  var LONG_POLLING = 'long_polling';

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A class that holds metadata about a Repo object
   *
   * @constructor
   */
  var RepoInfo = /** @class */ (function () {
      /**
       * @param {string} host Hostname portion of the url for the repo
       * @param {boolean} secure Whether or not this repo is accessed over ssl
       * @param {string} namespace The namespace represented by the repo
       * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).
       * @param {string=} persistenceKey Override the default session persistence storage key
       */
      function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey, includeNamespaceInQueryParams) {
          if (persistenceKey === void 0) { persistenceKey = ''; }
          if (includeNamespaceInQueryParams === void 0) { includeNamespaceInQueryParams = false; }
          this.secure = secure;
          this.namespace = namespace;
          this.webSocketOnly = webSocketOnly;
          this.persistenceKey = persistenceKey;
          this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
          this.host = host.toLowerCase();
          this.domain = this.host.substr(this.host.indexOf('.') + 1);
          this.internalHost = PersistentStorage.get('host:' + host) || this.host;
      }
      RepoInfo.prototype.needsQueryParam = function () {
          return (this.host !== this.internalHost ||
              this.isCustomHost() ||
              this.includeNamespaceInQueryParams);
      };
      RepoInfo.prototype.isCacheableHost = function () {
          return this.internalHost.substr(0, 2) === 's-';
      };
      RepoInfo.prototype.isDemoHost = function () {
          return this.domain === 'firebaseio-demo.com';
      };
      RepoInfo.prototype.isCustomHost = function () {
          return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');
      };
      RepoInfo.prototype.updateHost = function (newHost) {
          if (newHost !== this.internalHost) {
              this.internalHost = newHost;
              if (this.isCacheableHost()) {
                  PersistentStorage.set('host:' + this.host, this.internalHost);
              }
          }
      };
      /**
       * Returns the websocket URL for this repo
       * @param {string} type of connection
       * @param {Object} params list
       * @return {string} The URL for this repo
       */
      RepoInfo.prototype.connectionURL = function (type, params) {
          index_cjs.assert(typeof type === 'string', 'typeof type must == string');
          index_cjs.assert(typeof params === 'object', 'typeof params must == object');
          var connURL;
          if (type === WEBSOCKET) {
              connURL =
                  (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';
          }
          else if (type === LONG_POLLING) {
              connURL =
                  (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';
          }
          else {
              throw new Error('Unknown connection type: ' + type);
          }
          if (this.needsQueryParam()) {
              params['ns'] = this.namespace;
          }
          var pairs = [];
          each(params, function (key, value) {
              pairs.push(key + '=' + value);
          });
          return connURL + pairs.join('&');
      };
      /** @return {string} */
      RepoInfo.prototype.toString = function () {
          var str = this.toURLString();
          if (this.persistenceKey) {
              str += '<' + this.persistenceKey + '>';
          }
          return str;
      };
      /** @return {string} */
      RepoInfo.prototype.toURLString = function () {
          return (this.secure ? 'https://' : 'http://') + this.host;
      };
      return RepoInfo;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @param {!string} pathString
   * @return {string}
   */
  function decodePath(pathString) {
      var pathStringDecoded = '';
      var pieces = pathString.split('/');
      for (var i = 0; i < pieces.length; i++) {
          if (pieces[i].length > 0) {
              var piece = pieces[i];
              try {
                  piece = decodeURIComponent(piece.replace(/\+/g, ' '));
              }
              catch (e) { }
              pathStringDecoded += '/' + piece;
          }
      }
      return pathStringDecoded;
  }
  /**
   * @param {!string} queryString
   * @return {!{[key:string]:string}} key value hash
   */
  function decodeQuery(queryString) {
      var e_1, _a;
      var results = {};
      if (queryString.charAt(0) === '?') {
          queryString = queryString.substring(1);
      }
      try {
          for (var _b = tslib_es6.__values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {
              var segment = _c.value;
              if (segment.length === 0) {
                  continue;
              }
              var kv = segment.split('=');
              if (kv.length === 2) {
                  results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
              }
              else {
                  warn("Invalid query segment '" + segment + "' in query '" + queryString + "'");
              }
          }
      }
      catch (e_1_1) { e_1 = { error: e_1_1 }; }
      finally {
          try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          }
          finally { if (e_1) throw e_1.error; }
      }
      return results;
  }
  /**
   *
   * @param {!string} dataURL
   * @return {{repoInfo: !RepoInfo, path: !Path}}
   */
  var parseRepoInfo = function (dataURL) {
      var parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;
      if (parsedUrl.domain === 'firebase') {
          fatal(parsedUrl.host +
              ' is no longer supported. ' +
              'Please use <YOUR FIREBASE>.firebaseio.com instead');
      }
      // Catch common error of uninitialized namespace value.
      if ((!namespace || namespace == 'undefined') &&
          parsedUrl.domain !== 'localhost') {
          fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
      }
      if (!parsedUrl.secure) {
          warnIfPageIsSecure();
      }
      var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
      return {
          repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, 
          /*persistenceKey=*/ '', 
          /*includeNamespaceInQueryParams=*/ namespace != parsedUrl.subdomain),
          path: new Path(parsedUrl.pathString)
      };
  };
  /**
   *
   * @param {!string} dataURL
   * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}
   */
  var parseDatabaseURL = function (dataURL) {
      // Default to empty strings in the event of a malformed string.
      var host = '', domain = '', subdomain = '', pathString = '', namespace = '';
      // Always default to SSL, unless otherwise specified.
      var secure = true, scheme = 'https', port = 443;
      // Don't do any validation here. The caller is responsible for validating the result of parsing.
      if (typeof dataURL === 'string') {
          // Parse scheme.
          var colonInd = dataURL.indexOf('//');
          if (colonInd >= 0) {
              scheme = dataURL.substring(0, colonInd - 1);
              dataURL = dataURL.substring(colonInd + 2);
          }
          // Parse host, path, and query string.
          var slashInd = dataURL.indexOf('/');
          if (slashInd === -1) {
              slashInd = dataURL.length;
          }
          var questionMarkInd = dataURL.indexOf('?');
          if (questionMarkInd === -1) {
              questionMarkInd = dataURL.length;
          }
          host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
          if (slashInd < questionMarkInd) {
              // For pathString, questionMarkInd will always come after slashInd
              pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
          }
          var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
          // If we have a port, use scheme for determining if it's secure.
          colonInd = host.indexOf(':');
          if (colonInd >= 0) {
              secure = scheme === 'https' || scheme === 'wss';
              port = parseInt(host.substring(colonInd + 1), 10);
          }
          else {
              colonInd = dataURL.length;
          }
          var parts = host.split('.');
          if (parts.length === 3) {
              // Normalize namespaces to lowercase to share storage / connection.
              domain = parts[1];
              subdomain = parts[0].toLowerCase();
              // We interpret the subdomain of a 3 component URL as the namespace name.
              namespace = subdomain;
          }
          else if (parts.length === 2) {
              domain = parts[0];
          }
          else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {
              domain = 'localhost';
          }
          // Always treat the value of the `ns` as the namespace name if it is present.
          if ('ns' in queryParams) {
              namespace = queryParams['ns'];
          }
      }
      return {
          host: host,
          port: port,
          domain: domain,
          subdomain: subdomain,
          secure: secure,
          scheme: scheme,
          pathString: pathString,
          namespace: namespace
      };
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * True for invalid Firebase keys
   * @type {RegExp}
   * @private
   */
  var INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
  /**
   * True for invalid Firebase paths.
   * Allows '/' in paths.
   * @type {RegExp}
   * @private
   */
  var INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
  /**
   * Maximum number of characters to allow in leaf value
   * @type {number}
   * @private
   */
  var MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
  /**
   * @param {*} key
   * @return {boolean}
   */
  var isValidKey = function (key) {
      return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));
  };
  /**
   * @param {string} pathString
   * @return {boolean}
   */
  var isValidPathString = function (pathString) {
      return (typeof pathString === 'string' &&
          pathString.length !== 0 &&
          !INVALID_PATH_REGEX_.test(pathString));
  };
  /**
   * @param {string} pathString
   * @return {boolean}
   */
  var isValidRootPathString = function (pathString) {
      if (pathString) {
          // Allow '/.info/' at the beginning.
          pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
      }
      return isValidPathString(pathString);
  };
  /**
   * @param {*} priority
   * @return {boolean}
   */
  var isValidPriority = function (priority) {
      return (priority === null ||
          typeof priority === 'string' ||
          (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||
          (priority && typeof priority === 'object' && index_cjs.contains(priority, '.sv')));
  };
  /**
   * Pre-validate a datum passed as an argument to Firebase function.
   *
   * @param {string} fnName
   * @param {number} argumentNumber
   * @param {*} data
   * @param {!Path} path
   * @param {boolean} optional
   */
  var validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {
      if (optional && data === undefined)
          return;
      validateFirebaseData(index_cjs.errorPrefix(fnName, argumentNumber, optional), data, path);
  };
  /**
   * Validate a data object client-side before sending to server.
   *
   * @param {string} errorPrefix
   * @param {*} data
   * @param {!Path|!ValidationPath} path_
   */
  var validateFirebaseData = function (errorPrefix, data, path_) {
      var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;
      if (data === undefined) {
          throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());
      }
      if (typeof data === 'function') {
          throw new Error(errorPrefix +
              'contains a function ' +
              path.toErrorString() +
              ' with contents = ' +
              data.toString());
      }
      if (isInvalidJSONNumber(data)) {
          throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());
      }
      // Check max leaf size, but try to avoid the utf8 conversion if we can.
      if (typeof data === 'string' &&
          data.length > MAX_LEAF_SIZE_ / 3 &&
          index_cjs.stringLength(data) > MAX_LEAF_SIZE_) {
          throw new Error(errorPrefix +
              'contains a string greater than ' +
              MAX_LEAF_SIZE_ +
              ' utf8 bytes ' +
              path.toErrorString() +
              " ('" +
              data.substring(0, 50) +
              "...')");
      }
      // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
      // to save extra walking of large objects.
      if (data && typeof data === 'object') {
          var hasDotValue_1 = false;
          var hasActualChild_1 = false;
          each(data, function (key, value) {
              if (key === '.value') {
                  hasDotValue_1 = true;
              }
              else if (key !== '.priority' && key !== '.sv') {
                  hasActualChild_1 = true;
                  if (!isValidKey(key)) {
                      throw new Error(errorPrefix +
                          ' contains an invalid key (' +
                          key +
                          ') ' +
                          path.toErrorString() +
                          '.  Keys must be non-empty strings ' +
                          'and can\'t contain ".", "#", "$", "/", "[", or "]"');
                  }
              }
              path.push(key);
              validateFirebaseData(errorPrefix, value, path);
              path.pop();
          });
          if (hasDotValue_1 && hasActualChild_1) {
              throw new Error(errorPrefix +
                  ' contains ".value" child ' +
                  path.toErrorString() +
                  ' in addition to actual children.');
          }
      }
  };
  /**
   * Pre-validate paths passed in the firebase function.
   *
   * @param {string} errorPrefix
   * @param {Array<!Path>} mergePaths
   */
  var validateFirebaseMergePaths = function (errorPrefix, mergePaths) {
      var i, curPath;
      for (i = 0; i < mergePaths.length; i++) {
          curPath = mergePaths[i];
          var keys = curPath.slice();
          for (var j = 0; j < keys.length; j++) {
              if (keys[j] === '.priority' && j === keys.length - 1) ;
              else if (!isValidKey(keys[j])) {
                  throw new Error(errorPrefix +
                      'contains an invalid key (' +
                      keys[j] +
                      ') in path ' +
                      curPath.toString() +
                      '. Keys must be non-empty strings ' +
                      'and can\'t contain ".", "#", "$", "/", "[", or "]"');
              }
          }
      }
      // Check that update keys are not descendants of each other.
      // We rely on the property that sorting guarantees that ancestors come
      // right before descendants.
      mergePaths.sort(Path.comparePaths);
      var prevPath = null;
      for (i = 0; i < mergePaths.length; i++) {
          curPath = mergePaths[i];
          if (prevPath !== null && prevPath.contains(curPath)) {
              throw new Error(errorPrefix +
                  'contains a path ' +
                  prevPath.toString() +
                  ' that is ancestor of another path ' +
                  curPath.toString());
          }
          prevPath = curPath;
      }
  };
  /**
   * pre-validate an object passed as an argument to firebase function (
   * must be an object - e.g. for firebase.update()).
   *
   * @param {string} fnName
   * @param {number} argumentNumber
   * @param {*} data
   * @param {!Path} path
   * @param {boolean} optional
   */
  var validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {
      if (optional && data === undefined)
          return;
      var errorPrefix = index_cjs.errorPrefix(fnName, argumentNumber, optional);
      if (!(data && typeof data === 'object') || Array.isArray(data)) {
          throw new Error(errorPrefix + ' must be an object containing the children to replace.');
      }
      var mergePaths = [];
      each(data, function (key, value) {
          var curPath = new Path(key);
          validateFirebaseData(errorPrefix, value, path.child(curPath));
          if (curPath.getBack() === '.priority') {
              if (!isValidPriority(value)) {
                  throw new Error(errorPrefix +
                      "contains an invalid value for '" +
                      curPath.toString() +
                      "', which must be a valid " +
                      'Firebase priority (a string, finite number, server value, or null).');
              }
          }
          mergePaths.push(curPath);
      });
      validateFirebaseMergePaths(errorPrefix, mergePaths);
  };
  var validatePriority = function (fnName, argumentNumber, priority, optional) {
      if (optional && priority === undefined)
          return;
      if (isInvalidJSONNumber(priority))
          throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
              'is ' +
              priority.toString() +
              ', but must be a valid Firebase priority (a string, finite number, ' +
              'server value, or null).');
      // Special case to allow importing data with a .sv.
      if (!isValidPriority(priority))
          throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
              'must be a valid Firebase priority ' +
              '(a string, finite number, server value, or null).');
  };
  var validateEventType = function (fnName, argumentNumber, eventType, optional) {
      if (optional && eventType === undefined)
          return;
      switch (eventType) {
          case 'value':
          case 'child_added':
          case 'child_removed':
          case 'child_changed':
          case 'child_moved':
              break;
          default:
              throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
                  'must be a valid event type = "value", "child_added", "child_removed", ' +
                  '"child_changed", or "child_moved".');
      }
  };
  var validateKey = function (fnName, argumentNumber, key, optional) {
      if (optional && key === undefined)
          return;
      if (!isValidKey(key))
          throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
              'was an invalid key = "' +
              key +
              '".  Firebase keys must be non-empty strings and ' +
              'can\'t contain ".", "#", "$", "/", "[", or "]").');
  };
  var validatePathString = function (fnName, argumentNumber, pathString, optional) {
      if (optional && pathString === undefined)
          return;
      if (!isValidPathString(pathString))
          throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
              'was an invalid path = "' +
              pathString +
              '". Paths must be non-empty strings and ' +
              'can\'t contain ".", "#", "$", "[", or "]"');
  };
  var validateRootPathString = function (fnName, argumentNumber, pathString, optional) {
      if (pathString) {
          // Allow '/.info/' at the beginning.
          pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
      }
      validatePathString(fnName, argumentNumber, pathString, optional);
  };
  var validateWritablePath = function (fnName, path) {
      if (path.getFront() === '.info') {
          throw new Error(fnName + " failed = Can't modify data under /.info/");
      }
  };
  var validateUrl = function (fnName, argumentNumber, parsedUrl) {
      // TODO = Validate server better.
      var pathString = parsedUrl.path.toString();
      if (!(typeof parsedUrl.repoInfo.host === 'string') ||
          parsedUrl.repoInfo.host.length === 0 ||
          (!isValidKey(parsedUrl.repoInfo.namespace) &&
              parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||
          (pathString.length !== 0 && !isValidRootPathString(pathString))) {
          throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, false) +
              'must be a valid firebase URL and ' +
              'the path can\'t contain ".", "#", "$", "[", or "]".');
      }
  };
  var validateBoolean = function (fnName, argumentNumber, bool, optional) {
      if (optional && bool === undefined)
          return;
      if (typeof bool !== 'boolean')
          throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @constructor
   */
  var OnDisconnect = /** @class */ (function () {
      /**
       * @param {!Repo} repo_
       * @param {!Path} path_
       */
      function OnDisconnect(repo_, path_) {
          this.repo_ = repo_;
          this.path_ = path_;
      }
      /**
       * @param {function(?Error)=} onComplete
       * @return {!firebase.Promise}
       */
      OnDisconnect.prototype.cancel = function (onComplete) {
          index_cjs.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);
          index_cjs.validateCallback('OnDisconnect.cancel', 1, onComplete, true);
          var deferred = new index_cjs.Deferred();
          this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));
          return deferred.promise;
      };
      /**
       * @param {function(?Error)=} onComplete
       * @return {!firebase.Promise}
       */
      OnDisconnect.prototype.remove = function (onComplete) {
          index_cjs.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);
          validateWritablePath('OnDisconnect.remove', this.path_);
          index_cjs.validateCallback('OnDisconnect.remove', 1, onComplete, true);
          var deferred = new index_cjs.Deferred();
          this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));
          return deferred.promise;
      };
      /**
       * @param {*} value
       * @param {function(?Error)=} onComplete
       * @return {!firebase.Promise}
       */
      OnDisconnect.prototype.set = function (value, onComplete) {
          index_cjs.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);
          validateWritablePath('OnDisconnect.set', this.path_);
          validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);
          index_cjs.validateCallback('OnDisconnect.set', 2, onComplete, true);
          var deferred = new index_cjs.Deferred();
          this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));
          return deferred.promise;
      };
      /**
       * @param {*} value
       * @param {number|string|null} priority
       * @param {function(?Error)=} onComplete
       * @return {!firebase.Promise}
       */
      OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {
          index_cjs.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);
          validateWritablePath('OnDisconnect.setWithPriority', this.path_);
          validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);
          validatePriority('OnDisconnect.setWithPriority', 2, priority, false);
          index_cjs.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);
          var deferred = new index_cjs.Deferred();
          this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));
          return deferred.promise;
      };
      /**
       * @param {!Object} objectToMerge
       * @param {function(?Error)=} onComplete
       * @return {!firebase.Promise}
       */
      OnDisconnect.prototype.update = function (objectToMerge, onComplete) {
          index_cjs.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);
          validateWritablePath('OnDisconnect.update', this.path_);
          if (Array.isArray(objectToMerge)) {
              var newObjectToMerge = {};
              for (var i = 0; i < objectToMerge.length; ++i) {
                  newObjectToMerge['' + i] = objectToMerge[i];
              }
              objectToMerge = newObjectToMerge;
              warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +
                  'existing data, or an Object with integer keys if you really do want to only update some of the children.');
          }
          validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);
          index_cjs.validateCallback('OnDisconnect.update', 2, onComplete, true);
          var deferred = new index_cjs.Deferred();
          this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));
          return deferred.promise;
      };
      return OnDisconnect;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TransactionResult = /** @class */ (function () {
      /**
       * A type for the resolve value of Firebase.transaction.
       * @constructor
       * @dict
       * @param {boolean} committed
       * @param {DataSnapshot} snapshot
       */
      function TransactionResult(committed, snapshot) {
          this.committed = committed;
          this.snapshot = snapshot;
      }
      // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
      // for end-users
      TransactionResult.prototype.toJSON = function () {
          index_cjs.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);
          return { committed: this.committed, snapshot: this.snapshot.toJSON() };
      };
      return TransactionResult;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Fancy ID generator that creates 20-character string identifiers with the
   * following properties:
   *
   * 1. They're based on timestamp so that they sort *after* any existing ids.
   * 2. They contain 72-bits of random data after the timestamp so that IDs won't
   *    collide with other clients' IDs.
   * 3. They sort *lexicographically* (so the timestamp is converted to characters
   *    that will sort properly).
   * 4. They're monotonically increasing. Even if you generate more than one in
   *    the same timestamp, the latter ones will sort after the former ones. We do
   *    this by using the previous random bits but "incrementing" them by 1 (only
   *    in the case of a timestamp collision).
   */
  var nextPushId = (function () {
      // Modeled after base64 web-safe chars, but ordered by ASCII.
      var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
      // Timestamp of last push, used to prevent local collisions if you push twice
      // in one ms.
      var lastPushTime = 0;
      // We generate 72-bits of randomness which get turned into 12 characters and
      // appended to the timestamp to prevent collisions with other clients. We
      // store the last characters we generated because in the event of a collision,
      // we'll use those same characters except "incremented" by one.
      var lastRandChars = [];
      return function (now) {
          var duplicateTime = now === lastPushTime;
          lastPushTime = now;
          var i;
          var timeStampChars = new Array(8);
          for (i = 7; i >= 0; i--) {
              timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
              // NOTE: Can't use << here because javascript will convert to int and lose
              // the upper bits.
              now = Math.floor(now / 64);
          }
          index_cjs.assert(now === 0, 'Cannot push at time == 0');
          var id = timeStampChars.join('');
          if (!duplicateTime) {
              for (i = 0; i < 12; i++) {
                  lastRandChars[i] = Math.floor(Math.random() * 64);
              }
          }
          else {
              // If the timestamp hasn't changed since last push, use the same random
              // number, except incremented by 1.
              for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
                  lastRandChars[i] = 0;
              }
              lastRandChars[i]++;
          }
          for (i = 0; i < 12; i++) {
              id += PUSH_CHARS.charAt(lastRandChars[i]);
          }
          index_cjs.assert(id.length === 20, 'nextPushId: Length should be 20.');
          return id;
      };
  })();

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   *
   * @param {!string} name
   * @param {!Node} node
   * @constructor
   * @struct
   */
  var NamedNode = /** @class */ (function () {
      function NamedNode(name, node) {
          this.name = name;
          this.node = node;
      }
      /**
       *
       * @param {!string} name
       * @param {!Node} node
       * @return {NamedNode}
       */
      NamedNode.Wrap = function (name, node) {
          return new NamedNode(name, node);
      };
      return NamedNode;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   *
   * @constructor
   */
  var Index = /** @class */ (function () {
      function Index() {
      }
      /**
       * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for
       * this index
       */
      Index.prototype.getCompare = function () {
          return this.compare.bind(this);
      };
      /**
       * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
       * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
       *
       * @param {!Node} oldNode
       * @param {!Node} newNode
       * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode
       */
      Index.prototype.indexedValueChanged = function (oldNode, newNode) {
          var oldWrapped = new NamedNode(MIN_NAME, oldNode);
          var newWrapped = new NamedNode(MIN_NAME, newNode);
          return this.compare(oldWrapped, newWrapped) !== 0;
      };
      /**
       * @return {!NamedNode} a node wrapper that will sort equal to or less than
       * any other node wrapper, using this index
       */
      Index.prototype.minPost = function () {
          return NamedNode.MIN;
      };
      return Index;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var __EMPTY_NODE;
  var KeyIndex = /** @class */ (function (_super) {
      tslib_es6.__extends(KeyIndex, _super);
      function KeyIndex() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      Object.defineProperty(KeyIndex, "__EMPTY_NODE", {
          get: function () {
              return __EMPTY_NODE;
          },
          set: function (val) {
              __EMPTY_NODE = val;
          },
          enumerable: true,
          configurable: true
      });
      /**
       * @inheritDoc
       */
      KeyIndex.prototype.compare = function (a, b) {
          return nameCompare(a.name, b.name);
      };
      /**
       * @inheritDoc
       */
      KeyIndex.prototype.isDefinedOn = function (node) {
          // We could probably return true here (since every node has a key), but it's never called
          // so just leaving unimplemented for now.
          throw index_cjs.assertionError('KeyIndex.isDefinedOn not expected to be called.');
      };
      /**
       * @inheritDoc
       */
      KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
          return false; // The key for a node never changes.
      };
      /**
       * @inheritDoc
       */
      KeyIndex.prototype.minPost = function () {
          return NamedNode.MIN;
      };
      /**
       * @inheritDoc
       */
      KeyIndex.prototype.maxPost = function () {
          // TODO: This should really be created once and cached in a static property, but
          // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
          return new NamedNode(MAX_NAME, __EMPTY_NODE);
      };
      /**
       * @param {*} indexValue
       * @param {string} name
       * @return {!NamedNode}
       */
      KeyIndex.prototype.makePost = function (indexValue, name) {
          index_cjs.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
          // We just use empty node, but it'll never be compared, since our comparator only looks at name.
          return new NamedNode(indexValue, __EMPTY_NODE);
      };
      /**
       * @return {!string} String representation for inclusion in a query spec
       */
      KeyIndex.prototype.toString = function () {
          return '.key';
      };
      return KeyIndex;
  }(Index));
  var KEY_INDEX = new KeyIndex();

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var MAX_NODE;
  function setMaxNode(val) {
      MAX_NODE = val;
  }
  /**
   * @param {(!string|!number)} priority
   * @return {!string}
   */
  var priorityHashText = function (priority) {
      if (typeof priority === 'number')
          return 'number:' + doubleToIEEE754String(priority);
      else
          return 'string:' + priority;
  };
  /**
   * Validates that a priority snapshot Node is valid.
   *
   * @param {!Node} priorityNode
   */
  var validatePriorityNode = function (priorityNode) {
      if (priorityNode.isLeafNode()) {
          var val = priorityNode.val();
          index_cjs.assert(typeof val === 'string' ||
              typeof val === 'number' ||
              (typeof val === 'object' &&
                  index_cjs.contains(val, '.sv')), 'Priority must be a string or number.');
      }
      else {
          index_cjs.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');
      }
      // Don't call getPriority() on MAX_NODE to avoid hitting assertion.
      index_cjs.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var __childrenNodeConstructor;
  /**
   * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
   * implements Node and stores the value of the node (a string,
   * number, or boolean) accessible via getValue().
   */
  var LeafNode = /** @class */ (function () {
      /**
       * @implements {Node}
       * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.
       *                                         The object type is possible in the event of a deferred value
       * @param {!Node=} priorityNode_ The priority of this node.
       */
      function LeafNode(value_, priorityNode_) {
          if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }
          this.value_ = value_;
          this.priorityNode_ = priorityNode_;
          this.lazyHash_ = null;
          index_cjs.assert(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
          validatePriorityNode(this.priorityNode_);
      }
      Object.defineProperty(LeafNode, "__childrenNodeConstructor", {
          get: function () {
              return __childrenNodeConstructor;
          },
          set: function (val) {
              __childrenNodeConstructor = val;
          },
          enumerable: true,
          configurable: true
      });
      /** @inheritDoc */
      LeafNode.prototype.isLeafNode = function () {
          return true;
      };
      /** @inheritDoc */
      LeafNode.prototype.getPriority = function () {
          return this.priorityNode_;
      };
      /** @inheritDoc */
      LeafNode.prototype.updatePriority = function (newPriorityNode) {
          return new LeafNode(this.value_, newPriorityNode);
      };
      /** @inheritDoc */
      LeafNode.prototype.getImmediateChild = function (childName) {
          // Hack to treat priority as a regular child
          if (childName === '.priority') {
              return this.priorityNode_;
          }
          else {
              return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
          }
      };
      /** @inheritDoc */
      LeafNode.prototype.getChild = function (path) {
          if (path.isEmpty()) {
              return this;
          }
          else if (path.getFront() === '.priority') {
              return this.priorityNode_;
          }
          else {
              return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
          }
      };
      /**
       * @inheritDoc
       */
      LeafNode.prototype.hasChild = function () {
          return false;
      };
      /** @inheritDoc */
      LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {
          return null;
      };
      /** @inheritDoc */
      LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {
          if (childName === '.priority') {
              return this.updatePriority(newChildNode);
          }
          else if (newChildNode.isEmpty() && childName !== '.priority') {
              return this;
          }
          else {
              return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
          }
      };
      /** @inheritDoc */
      LeafNode.prototype.updateChild = function (path, newChildNode) {
          var front = path.getFront();
          if (front === null) {
              return newChildNode;
          }
          else if (newChildNode.isEmpty() && front !== '.priority') {
              return this;
          }
          else {
              index_cjs.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
              return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));
          }
      };
      /** @inheritDoc */
      LeafNode.prototype.isEmpty = function () {
          return false;
      };
      /** @inheritDoc */
      LeafNode.prototype.numChildren = function () {
          return 0;
      };
      /** @inheritDoc */
      LeafNode.prototype.forEachChild = function (index, action) {
          return false;
      };
      /**
       * @inheritDoc
       */
      LeafNode.prototype.val = function (exportFormat) {
          if (exportFormat && !this.getPriority().isEmpty())
              return {
                  '.value': this.getValue(),
                  '.priority': this.getPriority().val()
              };
          else
              return this.getValue();
      };
      /** @inheritDoc */
      LeafNode.prototype.hash = function () {
          if (this.lazyHash_ === null) {
              var toHash = '';
              if (!this.priorityNode_.isEmpty())
                  toHash +=
                      'priority:' +
                          priorityHashText(this.priorityNode_.val()) +
                          ':';
              var type = typeof this.value_;
              toHash += type + ':';
              if (type === 'number') {
                  toHash += doubleToIEEE754String(this.value_);
              }
              else {
                  toHash += this.value_;
              }
              this.lazyHash_ = sha1(toHash);
          }
          return this.lazyHash_;
      };
      /**
       * Returns the value of the leaf node.
       * @return {Object|string|number|boolean} The value of the node.
       */
      LeafNode.prototype.getValue = function () {
          return this.value_;
      };
      /**
       * @inheritDoc
       */
      LeafNode.prototype.compareTo = function (other) {
          if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
              return 1;
          }
          else if (other instanceof LeafNode.__childrenNodeConstructor) {
              return -1;
          }
          else {
              index_cjs.assert(other.isLeafNode(), 'Unknown node type');
              return this.compareToLeafNode_(other);
          }
      };
      /**
       * Comparison specifically for two leaf nodes
       * @param {!LeafNode} otherLeaf
       * @return {!number}
       * @private
       */
      LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {
          var otherLeafType = typeof otherLeaf.value_;
          var thisLeafType = typeof this.value_;
          var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
          var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
          index_cjs.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
          index_cjs.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);
          if (otherIndex === thisIndex) {
              // Same type, compare values
              if (thisLeafType === 'object') {
                  // Deferred value nodes are all equal, but we should also never get to this point...
                  return 0;
              }
              else {
                  // Note that this works because true > false, all others are number or string comparisons
                  if (this.value_ < otherLeaf.value_) {
                      return -1;
                  }
                  else if (this.value_ === otherLeaf.value_) {
                      return 0;
                  }
                  else {
                      return 1;
                  }
              }
          }
          else {
              return thisIndex - otherIndex;
          }
      };
      /**
       * @inheritDoc
       */
      LeafNode.prototype.withIndex = function () {
          return this;
      };
      /**
       * @inheritDoc
       */
      LeafNode.prototype.isIndexed = function () {
          return true;
      };
      /**
       * @inheritDoc
       */
      LeafNode.prototype.equals = function (other) {
          /**
           * @inheritDoc
           */
          if (other === this) {
              return true;
          }
          else if (other.isLeafNode()) {
              var otherLeaf = other;
              return (this.value_ === otherLeaf.value_ &&
                  this.priorityNode_.equals(otherLeaf.priorityNode_));
          }
          else {
              return false;
          }
      };
      /**
       * The sort order for comparing leaf nodes of different types. If two leaf nodes have
       * the same type, the comparison falls back to their value
       * @type {Array.<!string>}
       * @const
       */
      LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];
      return LeafNode;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var nodeFromJSON;
  var MAX_NODE$1;
  function setNodeFromJSON(val) {
      nodeFromJSON = val;
  }
  function setMaxNode$1(val) {
      MAX_NODE$1 = val;
  }
  /**
   * @constructor
   * @extends {Index}
   * @private
   */
  var PriorityIndex = /** @class */ (function (_super) {
      tslib_es6.__extends(PriorityIndex, _super);
      function PriorityIndex() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      /**
       * @inheritDoc
       */
      PriorityIndex.prototype.compare = function (a, b) {
          var aPriority = a.node.getPriority();
          var bPriority = b.node.getPriority();
          var indexCmp = aPriority.compareTo(bPriority);
          if (indexCmp === 0) {
              return nameCompare(a.name, b.name);
          }
          else {
              return indexCmp;
          }
      };
      /**
       * @inheritDoc
       */
      PriorityIndex.prototype.isDefinedOn = function (node) {
          return !node.getPriority().isEmpty();
      };
      /**
       * @inheritDoc
       */
      PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
          return !oldNode.getPriority().equals(newNode.getPriority());
      };
      /**
       * @inheritDoc
       */
      PriorityIndex.prototype.minPost = function () {
          return NamedNode.MIN;
      };
      /**
       * @inheritDoc
       */
      PriorityIndex.prototype.maxPost = function () {
          return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));
      };
      /**
       * @param {*} indexValue
       * @param {string} name
       * @return {!NamedNode}
       */
      PriorityIndex.prototype.makePost = function (indexValue, name) {
          var priorityNode = nodeFromJSON(indexValue);
          return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));
      };
      /**
       * @return {!string} String representation for inclusion in a query spec
       */
      PriorityIndex.prototype.toString = function () {
          return '.priority';
      };
      return PriorityIndex;
  }(Index));
  var PRIORITY_INDEX = new PriorityIndex();

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An iterator over an LLRBNode.
   */
  var SortedMapIterator = /** @class */ (function () {
      /**
       * @template K, V, T
       * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.
       * @param {?K} startKey
       * @param {function(K, K): number} comparator
       * @param {boolean} isReverse_ Whether or not to iterate in reverse
       * @param {(function(K, V):T)=} resultGenerator_
       */
      function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {
          if (resultGenerator_ === void 0) { resultGenerator_ = null; }
          this.isReverse_ = isReverse_;
          this.resultGenerator_ = resultGenerator_;
          /** @private
           * @type {Array.<!LLRBNode>}
           */
          this.nodeStack_ = [];
          var cmp = 1;
          while (!node.isEmpty()) {
              node = node;
              cmp = startKey ? comparator(node.key, startKey) : 1;
              // flip the comparison if we're going in reverse
              if (isReverse_)
                  cmp *= -1;
              if (cmp < 0) {
                  // This node is less than our start key. ignore it
                  if (this.isReverse_) {
                      node = node.left;
                  }
                  else {
                      node = node.right;
                  }
              }
              else if (cmp === 0) {
                  // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
                  this.nodeStack_.push(node);
                  break;
              }
              else {
                  // This node is greater than our start key, add it to the stack and move to the next one
                  this.nodeStack_.push(node);
                  if (this.isReverse_) {
                      node = node.right;
                  }
                  else {
                      node = node.left;
                  }
              }
          }
      }
      SortedMapIterator.prototype.getNext = function () {
          if (this.nodeStack_.length === 0)
              return null;
          var node = this.nodeStack_.pop();
          var result;
          if (this.resultGenerator_)
              result = this.resultGenerator_(node.key, node.value);
          else
              result = { key: node.key, value: node.value };
          if (this.isReverse_) {
              node = node.left;
              while (!node.isEmpty()) {
                  this.nodeStack_.push(node);
                  node = node.right;
              }
          }
          else {
              node = node.right;
              while (!node.isEmpty()) {
                  this.nodeStack_.push(node);
                  node = node.left;
              }
          }
          return result;
      };
      SortedMapIterator.prototype.hasNext = function () {
          return this.nodeStack_.length > 0;
      };
      SortedMapIterator.prototype.peek = function () {
          if (this.nodeStack_.length === 0)
              return null;
          var node = this.nodeStack_[this.nodeStack_.length - 1];
          if (this.resultGenerator_) {
              return this.resultGenerator_(node.key, node.value);
          }
          else {
              return { key: node.key, value: node.value };
          }
      };
      return SortedMapIterator;
  }());
  /**
   * Represents a node in a Left-leaning Red-Black tree.
   */
  var LLRBNode = /** @class */ (function () {
      /**
       * @template K, V
       * @param {!K} key Key associated with this node.
       * @param {!V} value Value associated with this node.
       * @param {?boolean} color Whether this node is red.
       * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.
       * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.
       */
      function LLRBNode(key, value, color, left, right) {
          this.key = key;
          this.value = value;
          this.color = color != null ? color : LLRBNode.RED;
          this.left =
              left != null ? left : SortedMap.EMPTY_NODE;
          this.right =
              right != null ? right : SortedMap.EMPTY_NODE;
      }
      /**
       * Returns a copy of the current node, optionally replacing pieces of it.
       *
       * @param {?K} key New key for the node, or null.
       * @param {?V} value New value for the node, or null.
       * @param {?boolean} color New color for the node, or null.
       * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.
       * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.
       * @return {!LLRBNode} The node copy.
       */
      LLRBNode.prototype.copy = function (key, value, color, left, right) {
          return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
      };
      /**
       * @return {number} The total number of nodes in the tree.
       */
      LLRBNode.prototype.count = function () {
          return this.left.count() + 1 + this.right.count();
      };
      /**
       * @return {boolean} True if the tree is empty.
       */
      LLRBNode.prototype.isEmpty = function () {
          return false;
      };
      /**
       * Traverses the tree in key order and calls the specified action function
       * for each node.
       *
       * @param {function(!K, !V):*} action Callback function to be called for each
       *   node.  If it returns true, traversal is aborted.
       * @return {*} The first truthy value returned by action, or the last falsey
       *   value returned by action
       */
      LLRBNode.prototype.inorderTraversal = function (action) {
          return (this.left.inorderTraversal(action) ||
              action(this.key, this.value) ||
              this.right.inorderTraversal(action));
      };
      /**
       * Traverses the tree in reverse key order and calls the specified action function
       * for each node.
       *
       * @param {function(!Object, !Object)} action Callback function to be called for each
       * node.  If it returns true, traversal is aborted.
       * @return {*} True if traversal was aborted.
       */
      LLRBNode.prototype.reverseTraversal = function (action) {
          return (this.right.reverseTraversal(action) ||
              action(this.key, this.value) ||
              this.left.reverseTraversal(action));
      };
      /**
       * @return {!Object} The minimum node in the tree.
       * @private
       */
      LLRBNode.prototype.min_ = function () {
          if (this.left.isEmpty()) {
              return this;
          }
          else {
              return this.left.min_();
          }
      };
      /**
       * @return {!K} The maximum key in the tree.
       */
      LLRBNode.prototype.minKey = function () {
          return this.min_().key;
      };
      /**
       * @return {!K} The maximum key in the tree.
       */
      LLRBNode.prototype.maxKey = function () {
          if (this.right.isEmpty()) {
              return this.key;
          }
          else {
              return this.right.maxKey();
          }
      };
      /**
       *
       * @param {!Object} key Key to insert.
       * @param {!Object} value Value to insert.
       * @param {Comparator} comparator Comparator.
       * @return {!LLRBNode} New tree, with the key/value added.
       */
      LLRBNode.prototype.insert = function (key, value, comparator) {
          var cmp, n;
          n = this;
          cmp = comparator(key, n.key);
          if (cmp < 0) {
              n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
          }
          else if (cmp === 0) {
              n = n.copy(null, value, null, null, null);
          }
          else {
              n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
          }
          return n.fixUp_();
      };
      /**
       * @private
       * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.
       */
      LLRBNode.prototype.removeMin_ = function () {
          if (this.left.isEmpty()) {
              return SortedMap.EMPTY_NODE;
          }
          var n = this;
          if (!n.left.isRed_() && !n.left.left.isRed_())
              n = n.moveRedLeft_();
          n = n.copy(null, null, null, n.left.removeMin_(), null);
          return n.fixUp_();
      };
      /**
       * @param {!Object} key The key of the item to remove.
       * @param {Comparator} comparator Comparator.
       * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.
       */
      LLRBNode.prototype.remove = function (key, comparator) {
          var n, smallest;
          n = this;
          if (comparator(key, n.key) < 0) {
              if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
                  n = n.moveRedLeft_();
              }
              n = n.copy(null, null, null, n.left.remove(key, comparator), null);
          }
          else {
              if (n.left.isRed_())
                  n = n.rotateRight_();
              if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
                  n = n.moveRedRight_();
              }
              if (comparator(key, n.key) === 0) {
                  if (n.right.isEmpty()) {
                      return SortedMap.EMPTY_NODE;
                  }
                  else {
                      smallest = n.right.min_();
                      n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
                  }
              }
              n = n.copy(null, null, null, null, n.right.remove(key, comparator));
          }
          return n.fixUp_();
      };
      /**
       * @private
       * @return {boolean} Whether this is a RED node.
       */
      LLRBNode.prototype.isRed_ = function () {
          return this.color;
      };
      /**
       * @private
       * @return {!LLRBNode} New tree after performing any needed rotations.
       */
      LLRBNode.prototype.fixUp_ = function () {
          var n = this;
          if (n.right.isRed_() && !n.left.isRed_())
              n = n.rotateLeft_();
          if (n.left.isRed_() && n.left.left.isRed_())
              n = n.rotateRight_();
          if (n.left.isRed_() && n.right.isRed_())
              n = n.colorFlip_();
          return n;
      };
      /**
       * @private
       * @return {!LLRBNode} New tree, after moveRedLeft.
       */
      LLRBNode.prototype.moveRedLeft_ = function () {
          var n = this.colorFlip_();
          if (n.right.left.isRed_()) {
              n = n.copy(null, null, null, null, n.right.rotateRight_());
              n = n.rotateLeft_();
              n = n.colorFlip_();
          }
          return n;
      };
      /**
       * @private
       * @return {!LLRBNode} New tree, after moveRedRight.
       */
      LLRBNode.prototype.moveRedRight_ = function () {
          var n = this.colorFlip_();
          if (n.left.left.isRed_()) {
              n = n.rotateRight_();
              n = n.colorFlip_();
          }
          return n;
      };
      /**
       * @private
       * @return {!LLRBNode} New tree, after rotateLeft.
       */
      LLRBNode.prototype.rotateLeft_ = function () {
          var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
          return this.right.copy(null, null, this.color, nl, null);
      };
      /**
       * @private
       * @return {!LLRBNode} New tree, after rotateRight.
       */
      LLRBNode.prototype.rotateRight_ = function () {
          var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
          return this.left.copy(null, null, this.color, null, nr);
      };
      /**
       * @private
       * @return {!LLRBNode} New tree, after colorFlip.
       */
      LLRBNode.prototype.colorFlip_ = function () {
          var left = this.left.copy(null, null, !this.left.color, null, null);
          var right = this.right.copy(null, null, !this.right.color, null, null);
          return this.copy(null, null, !this.color, left, right);
      };
      /**
       * For testing.
       *
       * @private
       * @return {boolean} True if all is well.
       */
      LLRBNode.prototype.checkMaxDepth_ = function () {
          var blackDepth = this.check_();
          return Math.pow(2.0, blackDepth) <= this.count() + 1;
      };
      /**
       * @private
       * @return {number} Not sure what this returns exactly. :-).
       */
      LLRBNode.prototype.check_ = function () {
          var blackDepth;
          if (this.isRed_() && this.left.isRed_()) {
              throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
          }
          if (this.right.isRed_()) {
              throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
          }
          blackDepth = this.left.check_();
          if (blackDepth !== this.right.check_()) {
              throw new Error('Black depths differ');
          }
          else {
              return blackDepth + (this.isRed_() ? 0 : 1);
          }
      };
      LLRBNode.RED = true;
      LLRBNode.BLACK = false;
      return LLRBNode;
  }());
  /**
   * Represents an empty node (a leaf node in the Red-Black Tree).
   */
  var LLRBEmptyNode = /** @class */ (function () {
      function LLRBEmptyNode() {
      }
      /**
       * Returns a copy of the current node.
       *
       * @return {!LLRBEmptyNode} The node copy.
       */
      LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
          return this;
      };
      /**
       * Returns a copy of the tree, with the specified key/value added.
       *
       * @param {!K} key Key to be added.
       * @param {!V} value Value to be added.
       * @param {Comparator} comparator Comparator.
       * @return {!LLRBNode} New tree, with item added.
       */
      LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
          return new LLRBNode(key, value, null);
      };
      /**
       * Returns a copy of the tree, with the specified key removed.
       *
       * @param {!K} key The key to remove.
       * @param {Comparator} comparator Comparator.
       * @return {!LLRBEmptyNode} New tree, with item removed.
       */
      LLRBEmptyNode.prototype.remove = function (key, comparator) {
          return this;
      };
      /**
       * @return {number} The total number of nodes in the tree.
       */
      LLRBEmptyNode.prototype.count = function () {
          return 0;
      };
      /**
       * @return {boolean} True if the tree is empty.
       */
      LLRBEmptyNode.prototype.isEmpty = function () {
          return true;
      };
      /**
       * Traverses the tree in key order and calls the specified action function
       * for each node.
       *
       * @param {function(!K, !V):*} action Callback function to be called for each
       * node.  If it returns true, traversal is aborted.
       * @return {boolean} True if traversal was aborted.
       */
      LLRBEmptyNode.prototype.inorderTraversal = function (action) {
          return false;
      };
      /**
       * Traverses the tree in reverse key order and calls the specified action function
       * for each node.
       *
       * @param {function(!K, !V)} action Callback function to be called for each
       * node.  If it returns true, traversal is aborted.
       * @return {boolean} True if traversal was aborted.
       */
      LLRBEmptyNode.prototype.reverseTraversal = function (action) {
          return false;
      };
      /**
       * @return {null}
       */
      LLRBEmptyNode.prototype.minKey = function () {
          return null;
      };
      /**
       * @return {null}
       */
      LLRBEmptyNode.prototype.maxKey = function () {
          return null;
      };
      /**
       * @private
       * @return {number} Not sure what this returns exactly. :-).
       */
      LLRBEmptyNode.prototype.check_ = function () {
          return 0;
      };
      /**
       * @private
       * @return {boolean} Whether this node is red.
       */
      LLRBEmptyNode.prototype.isRed_ = function () {
          return false;
      };
      return LLRBEmptyNode;
  }());
  /**
   * An immutable sorted map implementation, based on a Left-leaning Red-Black
   * tree.
   */
  var SortedMap = /** @class */ (function () {
      /**
       * @template K, V
       * @param {function(K, K):number} comparator_ Key comparator.
       * @param {LLRBNode=} root_ (Optional) Root node for the map.
       */
      function SortedMap(comparator_, root_) {
          if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }
          this.comparator_ = comparator_;
          this.root_ = root_;
      }
      /**
       * Returns a copy of the map, with the specified key/value added or replaced.
       * (TODO: We should perhaps rename this method to 'put')
       *
       * @param {!K} key Key to be added.
       * @param {!V} value Value to be added.
       * @return {!SortedMap.<K, V>} New map, with item added.
       */
      SortedMap.prototype.insert = function (key, value) {
          return new SortedMap(this.comparator_, this.root_
              .insert(key, value, this.comparator_)
              .copy(null, null, LLRBNode.BLACK, null, null));
      };
      /**
       * Returns a copy of the map, with the specified key removed.
       *
       * @param {!K} key The key to remove.
       * @return {!SortedMap.<K, V>} New map, with item removed.
       */
      SortedMap.prototype.remove = function (key) {
          return new SortedMap(this.comparator_, this.root_
              .remove(key, this.comparator_)
              .copy(null, null, LLRBNode.BLACK, null, null));
      };
      /**
       * Returns the value of the node with the given key, or null.
       *
       * @param {!K} key The key to look up.
       * @return {?V} The value of the node with the given key, or null if the
       * key doesn't exist.
       */
      SortedMap.prototype.get = function (key) {
          var cmp;
          var node = this.root_;
          while (!node.isEmpty()) {
              cmp = this.comparator_(key, node.key);
              if (cmp === 0) {
                  return node.value;
              }
              else if (cmp < 0) {
                  node = node.left;
              }
              else if (cmp > 0) {
                  node = node.right;
              }
          }
          return null;
      };
      /**
       * Returns the key of the item *before* the specified key, or null if key is the first item.
       * @param {K} key The key to find the predecessor of
       * @return {?K} The predecessor key.
       */
      SortedMap.prototype.getPredecessorKey = function (key) {
          var cmp, node = this.root_, rightParent = null;
          while (!node.isEmpty()) {
              cmp = this.comparator_(key, node.key);
              if (cmp === 0) {
                  if (!node.left.isEmpty()) {
                      node = node.left;
                      while (!node.right.isEmpty())
                          node = node.right;
                      return node.key;
                  }
                  else if (rightParent) {
                      return rightParent.key;
                  }
                  else {
                      return null; // first item.
                  }
              }
              else if (cmp < 0) {
                  node = node.left;
              }
              else if (cmp > 0) {
                  rightParent = node;
                  node = node.right;
              }
          }
          throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
      };
      /**
       * @return {boolean} True if the map is empty.
       */
      SortedMap.prototype.isEmpty = function () {
          return this.root_.isEmpty();
      };
      /**
       * @return {number} The total number of nodes in the map.
       */
      SortedMap.prototype.count = function () {
          return this.root_.count();
      };
      /**
       * @return {?K} The minimum key in the map.
       */
      SortedMap.prototype.minKey = function () {
          return this.root_.minKey();
      };
      /**
       * @return {?K} The maximum key in the map.
       */
      SortedMap.prototype.maxKey = function () {
          return this.root_.maxKey();
      };
      /**
       * Traverses the map in key order and calls the specified action function
       * for each key/value pair.
       *
       * @param {function(!K, !V):*} action Callback function to be called
       * for each key/value pair.  If action returns true, traversal is aborted.
       * @return {*} The first truthy value returned by action, or the last falsey
       *   value returned by action
       */
      SortedMap.prototype.inorderTraversal = function (action) {
          return this.root_.inorderTraversal(action);
      };
      /**
       * Traverses the map in reverse key order and calls the specified action function
       * for each key/value pair.
       *
       * @param {function(!Object, !Object)} action Callback function to be called
       * for each key/value pair.  If action returns true, traversal is aborted.
       * @return {*} True if the traversal was aborted.
       */
      SortedMap.prototype.reverseTraversal = function (action) {
          return this.root_.reverseTraversal(action);
      };
      /**
       * Returns an iterator over the SortedMap.
       * @template T
       * @param {(function(K, V):T)=} resultGenerator
       * @return {SortedMapIterator.<K, V, T>} The iterator.
       */
      SortedMap.prototype.getIterator = function (resultGenerator) {
          return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
      };
      SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {
          return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
      };
      SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {
          return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
      };
      SortedMap.prototype.getReverseIterator = function (resultGenerator) {
          return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
      };
      /**
       * Always use the same empty node, to reduce memory.
       * @const
       */
      SortedMap.EMPTY_NODE = new LLRBEmptyNode();
      return SortedMap;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var LOG_2 = Math.log(2);
  /**
   * @constructor
   */
  var Base12Num = /** @class */ (function () {
      /**
       * @param {number} length
       */
      function Base12Num(length) {
          var logBase2 = function (num) {
              return parseInt((Math.log(num) / LOG_2), 10);
          };
          var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };
          this.count = logBase2(length + 1);
          this.current_ = this.count - 1;
          var mask = bitMask(this.count);
          this.bits_ = (length + 1) & mask;
      }
      /**
       * @return {boolean}
       */
      Base12Num.prototype.nextBitIsOne = function () {
          //noinspection JSBitwiseOperatorUsage
          var result = !(this.bits_ & (0x1 << this.current_));
          this.current_--;
          return result;
      };
      return Base12Num;
  }());
  /**
   * Takes a list of child nodes and constructs a SortedSet using the given comparison
   * function
   *
   * Uses the algorithm described in the paper linked here:
   * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
   *
   * @template K, V
   * @param {Array.<!NamedNode>} childList Unsorted list of children
   * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used
   * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's
   *                                                        type is not NamedNode
   * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map
   * @return {SortedMap.<K, V>}
   */
  var buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
      childList.sort(cmp);
      var buildBalancedTree = function (low, high) {
          var length = high - low;
          var namedNode;
          var key;
          if (length == 0) {
              return null;
          }
          else if (length == 1) {
              namedNode = childList[low];
              key = keyFn ? keyFn(namedNode) : namedNode;
              return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
          }
          else {
              var middle = parseInt((length / 2), 10) + low;
              var left = buildBalancedTree(low, middle);
              var right = buildBalancedTree(middle + 1, high);
              namedNode = childList[middle];
              key = keyFn ? keyFn(namedNode) : namedNode;
              return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
          }
      };
      var buildFrom12Array = function (base12) {
          var node = null;
          var root = null;
          var index = childList.length;
          var buildPennant = function (chunkSize, color) {
              var low = index - chunkSize;
              var high = index;
              index -= chunkSize;
              var childTree = buildBalancedTree(low + 1, high);
              var namedNode = childList[low];
              var key = keyFn ? keyFn(namedNode) : namedNode;
              attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
          };
          var attachPennant = function (pennant) {
              if (node) {
                  node.left = pennant;
                  node = pennant;
              }
              else {
                  root = pennant;
                  node = pennant;
              }
          };
          for (var i = 0; i < base12.count; ++i) {
              var isOne = base12.nextBitIsOne();
              // The number of nodes taken in each slice is 2^(arr.length - (i + 1))
              var chunkSize = Math.pow(2, base12.count - (i + 1));
              if (isOne) {
                  buildPennant(chunkSize, LLRBNode.BLACK);
              }
              else {
                  // current == 2
                  buildPennant(chunkSize, LLRBNode.BLACK);
                  buildPennant(chunkSize, LLRBNode.RED);
              }
          }
          return root;
      };
      var base12 = new Base12Num(childList.length);
      var root = buildFrom12Array(base12);
      return new SortedMap(mapSortFn || cmp, root);
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var _defaultIndexMap;
  var fallbackObject = {};
  var IndexMap = /** @class */ (function () {
      function IndexMap(indexes_, indexSet_) {
          this.indexes_ = indexes_;
          this.indexSet_ = indexSet_;
      }
      Object.defineProperty(IndexMap, "Default", {
          /**
           * The default IndexMap for nodes without a priority
           */
          get: function () {
              index_cjs.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
              _defaultIndexMap =
                  _defaultIndexMap ||
                      new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });
              return _defaultIndexMap;
          },
          enumerable: true,
          configurable: true
      });
      IndexMap.prototype.get = function (indexKey) {
          var sortedMap = index_cjs.safeGet(this.indexes_, indexKey);
          if (!sortedMap)
              throw new Error('No index defined for ' + indexKey);
          if (sortedMap instanceof SortedMap) {
              return sortedMap;
          }
          else {
              // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
              // regular child map
              return null;
          }
      };
      IndexMap.prototype.hasIndex = function (indexDefinition) {
          return index_cjs.contains(this.indexSet_, indexDefinition.toString());
      };
      IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {
          index_cjs.assert(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
          var childList = [];
          var sawIndexedValue = false;
          var iter = existingChildren.getIterator(NamedNode.Wrap);
          var next = iter.getNext();
          while (next) {
              sawIndexedValue =
                  sawIndexedValue || indexDefinition.isDefinedOn(next.node);
              childList.push(next);
              next = iter.getNext();
          }
          var newIndex;
          if (sawIndexedValue) {
              newIndex = buildChildSet(childList, indexDefinition.getCompare());
          }
          else {
              newIndex = fallbackObject;
          }
          var indexName = indexDefinition.toString();
          var newIndexSet = tslib_es6.__assign({}, this.indexSet_);
          newIndexSet[indexName] = indexDefinition;
          var newIndexes = tslib_es6.__assign({}, this.indexes_);
          newIndexes[indexName] = newIndex;
          return new IndexMap(newIndexes, newIndexSet);
      };
      /**
       * Ensure that this node is properly tracked in any indexes that we're maintaining
       */
      IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {
          var _this = this;
          var newIndexes = index_cjs.map(this.indexes_, function (indexedChildren, indexName) {
              var index = index_cjs.safeGet(_this.indexSet_, indexName);
              index_cjs.assert(index, 'Missing index implementation for ' + indexName);
              if (indexedChildren === fallbackObject) {
                  // Check to see if we need to index everything
                  if (index.isDefinedOn(namedNode.node)) {
                      // We need to build this index
                      var childList = [];
                      var iter = existingChildren.getIterator(NamedNode.Wrap);
                      var next = iter.getNext();
                      while (next) {
                          if (next.name != namedNode.name) {
                              childList.push(next);
                          }
                          next = iter.getNext();
                      }
                      childList.push(namedNode);
                      return buildChildSet(childList, index.getCompare());
                  }
                  else {
                      // No change, this remains a fallback
                      return fallbackObject;
                  }
              }
              else {
                  var existingSnap = existingChildren.get(namedNode.name);
                  var newChildren = indexedChildren;
                  if (existingSnap) {
                      newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
                  }
                  return newChildren.insert(namedNode, namedNode.node);
              }
          });
          return new IndexMap(newIndexes, this.indexSet_);
      };
      /**
       * Create a new IndexMap instance with the given value removed
       */
      IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {
          var newIndexes = index_cjs.map(this.indexes_, function (indexedChildren) {
              if (indexedChildren === fallbackObject) {
                  // This is the fallback. Just return it, nothing to do in this case
                  return indexedChildren;
              }
              else {
                  var existingSnap = existingChildren.get(namedNode.name);
                  if (existingSnap) {
                      return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
                  }
                  else {
                      // No record of this child
                      return indexedChildren;
                  }
              }
          });
          return new IndexMap(newIndexes, this.indexSet_);
      };
      return IndexMap;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function NAME_ONLY_COMPARATOR(left, right) {
      return nameCompare(left.name, right.name);
  }
  function NAME_COMPARATOR(left, right) {
      return nameCompare(left, right);
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // TODO: For memory savings, don't store priorityNode_ if it's empty.
  var EMPTY_NODE;
  /**
   * ChildrenNode is a class for storing internal nodes in a DataSnapshot
   * (i.e. nodes with children).  It implements Node and stores the
   * list of children in the children property, sorted by child name.
   *
   * @constructor
   * @implements {Node}
   */
  var ChildrenNode = /** @class */ (function () {
      /**
       *
       * @param {!SortedMap.<string, !Node>} children_ List of children
       * of this node..
       * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).
       * @param {!IndexMap} indexMap_
       */
      function ChildrenNode(children_, priorityNode_, indexMap_) {
          this.children_ = children_;
          this.priorityNode_ = priorityNode_;
          this.indexMap_ = indexMap_;
          this.lazyHash_ = null;
          /**
           * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
           * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
           * class instead of an empty ChildrenNode.
           */
          if (this.priorityNode_) {
              validatePriorityNode(this.priorityNode_);
          }
          if (this.children_.isEmpty()) {
              index_cjs.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
          }
      }
      Object.defineProperty(ChildrenNode, "EMPTY_NODE", {
          get: function () {
              return (EMPTY_NODE ||
                  (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));
          },
          enumerable: true,
          configurable: true
      });
      /** @inheritDoc */
      ChildrenNode.prototype.isLeafNode = function () {
          return false;
      };
      /** @inheritDoc */
      ChildrenNode.prototype.getPriority = function () {
          return this.priorityNode_ || EMPTY_NODE;
      };
      /** @inheritDoc */
      ChildrenNode.prototype.updatePriority = function (newPriorityNode) {
          if (this.children_.isEmpty()) {
              // Don't allow priorities on empty nodes
              return this;
          }
          else {
              return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
          }
      };
      /** @inheritDoc */
      ChildrenNode.prototype.getImmediateChild = function (childName) {
          // Hack to treat priority as a regular child
          if (childName === '.priority') {
              return this.getPriority();
          }
          else {
              var child = this.children_.get(childName);
              return child === null ? EMPTY_NODE : child;
          }
      };
      /** @inheritDoc */
      ChildrenNode.prototype.getChild = function (path) {
          var front = path.getFront();
          if (front === null)
              return this;
          return this.getImmediateChild(front).getChild(path.popFront());
      };
      /** @inheritDoc */
      ChildrenNode.prototype.hasChild = function (childName) {
          return this.children_.get(childName) !== null;
      };
      /** @inheritDoc */
      ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {
          index_cjs.assert(newChildNode, 'We should always be passing snapshot nodes');
          if (childName === '.priority') {
              return this.updatePriority(newChildNode);
          }
          else {
              var namedNode = new NamedNode(childName, newChildNode);
              var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;
              if (newChildNode.isEmpty()) {
                  newChildren = this.children_.remove(childName);
                  newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
              }
              else {
                  newChildren = this.children_.insert(childName, newChildNode);
                  newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
              }
              newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;
              return new ChildrenNode(newChildren, newPriority, newIndexMap);
          }
      };
      /** @inheritDoc */
      ChildrenNode.prototype.updateChild = function (path, newChildNode) {
          var front = path.getFront();
          if (front === null) {
              return newChildNode;
          }
          else {
              index_cjs.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
              var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);
              return this.updateImmediateChild(front, newImmediateChild);
          }
      };
      /** @inheritDoc */
      ChildrenNode.prototype.isEmpty = function () {
          return this.children_.isEmpty();
      };
      /** @inheritDoc */
      ChildrenNode.prototype.numChildren = function () {
          return this.children_.count();
      };
      /** @inheritDoc */
      ChildrenNode.prototype.val = function (exportFormat) {
          if (this.isEmpty())
              return null;
          var obj = {};
          var numKeys = 0, maxKey = 0, allIntegerKeys = true;
          this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
              obj[key] = childNode.val(exportFormat);
              numKeys++;
              if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
                  maxKey = Math.max(maxKey, Number(key));
              }
              else {
                  allIntegerKeys = false;
              }
          });
          if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
              // convert to array.
              var array = [];
              for (var key in obj)
                  array[key] = obj[key];
              return array;
          }
          else {
              if (exportFormat && !this.getPriority().isEmpty()) {
                  obj['.priority'] = this.getPriority().val();
              }
              return obj;
          }
      };
      /** @inheritDoc */
      ChildrenNode.prototype.hash = function () {
          if (this.lazyHash_ === null) {
              var toHash_1 = '';
              if (!this.getPriority().isEmpty())
                  toHash_1 +=
                      'priority:' +
                          priorityHashText(this.getPriority().val()) +
                          ':';
              this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                  var childHash = childNode.hash();
                  if (childHash !== '')
                      toHash_1 += ':' + key + ':' + childHash;
              });
              this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);
          }
          return this.lazyHash_;
      };
      /** @inheritDoc */
      ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {
          var idx = this.resolveIndex_(index);
          if (idx) {
              var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));
              return predecessor ? predecessor.name : null;
          }
          else {
              return this.children_.getPredecessorKey(childName);
          }
      };
      /**
       * @param {!Index} indexDefinition
       * @return {?string}
       */
      ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {
          var idx = this.resolveIndex_(indexDefinition);
          if (idx) {
              var minKey = idx.minKey();
              return minKey && minKey.name;
          }
          else {
              return this.children_.minKey();
          }
      };
      /**
       * @param {!Index} indexDefinition
       * @return {?NamedNode}
       */
      ChildrenNode.prototype.getFirstChild = function (indexDefinition) {
          var minKey = this.getFirstChildName(indexDefinition);
          if (minKey) {
              return new NamedNode(minKey, this.children_.get(minKey));
          }
          else {
              return null;
          }
      };
      /**
       * Given an index, return the key name of the largest value we have, according to that index
       * @param {!Index} indexDefinition
       * @return {?string}
       */
      ChildrenNode.prototype.getLastChildName = function (indexDefinition) {
          var idx = this.resolveIndex_(indexDefinition);
          if (idx) {
              var maxKey = idx.maxKey();
              return maxKey && maxKey.name;
          }
          else {
              return this.children_.maxKey();
          }
      };
      /**
       * @param {!Index} indexDefinition
       * @return {?NamedNode}
       */
      ChildrenNode.prototype.getLastChild = function (indexDefinition) {
          var maxKey = this.getLastChildName(indexDefinition);
          if (maxKey) {
              return new NamedNode(maxKey, this.children_.get(maxKey));
          }
          else {
              return null;
          }
      };
      /**
       * @inheritDoc
       */
      ChildrenNode.prototype.forEachChild = function (index, action) {
          var idx = this.resolveIndex_(index);
          if (idx) {
              return idx.inorderTraversal(function (wrappedNode) {
                  return action(wrappedNode.name, wrappedNode.node);
              });
          }
          else {
              return this.children_.inorderTraversal(action);
          }
      };
      /**
       * @param {!Index} indexDefinition
       * @return {SortedMapIterator}
       */
      ChildrenNode.prototype.getIterator = function (indexDefinition) {
          return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
      };
      /**
       *
       * @param {!NamedNode} startPost
       * @param {!Index} indexDefinition
       * @return {!SortedMapIterator}
       */
      ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {
          var idx = this.resolveIndex_(indexDefinition);
          if (idx) {
              return idx.getIteratorFrom(startPost, function (key) { return key; });
          }
          else {
              var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
              var next = iterator.peek();
              while (next != null && indexDefinition.compare(next, startPost) < 0) {
                  iterator.getNext();
                  next = iterator.peek();
              }
              return iterator;
          }
      };
      /**
       * @param {!Index} indexDefinition
       * @return {!SortedMapIterator}
       */
      ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {
          return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
      };
      /**
       * @param {!NamedNode} endPost
       * @param {!Index} indexDefinition
       * @return {!SortedMapIterator}
       */
      ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {
          var idx = this.resolveIndex_(indexDefinition);
          if (idx) {
              return idx.getReverseIteratorFrom(endPost, function (key) {
                  return key;
              });
          }
          else {
              var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
              var next = iterator.peek();
              while (next != null && indexDefinition.compare(next, endPost) > 0) {
                  iterator.getNext();
                  next = iterator.peek();
              }
              return iterator;
          }
      };
      /**
       * @inheritDoc
       */
      ChildrenNode.prototype.compareTo = function (other) {
          if (this.isEmpty()) {
              if (other.isEmpty()) {
                  return 0;
              }
              else {
                  return -1;
              }
          }
          else if (other.isLeafNode() || other.isEmpty()) {
              return 1;
          }
          else if (other === MAX_NODE$2) {
              return -1;
          }
          else {
              // Must be another node with children.
              return 0;
          }
      };
      /**
       * @inheritDoc
       */
      ChildrenNode.prototype.withIndex = function (indexDefinition) {
          if (indexDefinition === KEY_INDEX ||
              this.indexMap_.hasIndex(indexDefinition)) {
              return this;
          }
          else {
              var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
              return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
          }
      };
      /**
       * @inheritDoc
       */
      ChildrenNode.prototype.isIndexed = function (index) {
          return index === KEY_INDEX || this.indexMap_.hasIndex(index);
      };
      /**
       * @inheritDoc
       */
      ChildrenNode.prototype.equals = function (other) {
          if (other === this) {
              return true;
          }
          else if (other.isLeafNode()) {
              return false;
          }
          else {
              var otherChildrenNode = other;
              if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
                  return false;
              }
              else if (this.children_.count() === otherChildrenNode.children_.count()) {
                  var thisIter = this.getIterator(PRIORITY_INDEX);
                  var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
                  var thisCurrent = thisIter.getNext();
                  var otherCurrent = otherIter.getNext();
                  while (thisCurrent && otherCurrent) {
                      if (thisCurrent.name !== otherCurrent.name ||
                          !thisCurrent.node.equals(otherCurrent.node)) {
                          return false;
                      }
                      thisCurrent = thisIter.getNext();
                      otherCurrent = otherIter.getNext();
                  }
                  return thisCurrent === null && otherCurrent === null;
              }
              else {
                  return false;
              }
          }
      };
      /**
       * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
       * instead.
       *
       * @private
       * @param {!Index} indexDefinition
       * @return {?SortedMap.<NamedNode, Node>}
       */
      ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {
          if (indexDefinition === KEY_INDEX) {
              return null;
          }
          else {
              return this.indexMap_.get(indexDefinition.toString());
          }
      };
      /**
       * @private
       * @type {RegExp}
       */
      ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
      return ChildrenNode;
  }());
  /**
   * @constructor
   * @extends {ChildrenNode}
   * @private
   */
  var MaxNode = /** @class */ (function (_super) {
      tslib_es6.__extends(MaxNode, _super);
      function MaxNode() {
          return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;
      }
      MaxNode.prototype.compareTo = function (other) {
          if (other === this) {
              return 0;
          }
          else {
              return 1;
          }
      };
      MaxNode.prototype.equals = function (other) {
          // Not that we every compare it, but MAX_NODE is only ever equal to itself
          return other === this;
      };
      MaxNode.prototype.getPriority = function () {
          return this;
      };
      MaxNode.prototype.getImmediateChild = function (childName) {
          return ChildrenNode.EMPTY_NODE;
      };
      MaxNode.prototype.isEmpty = function () {
          return false;
      };
      return MaxNode;
  }(ChildrenNode));
  /**
   * Marker that will sort higher than any other snapshot.
   * @type {!MAX_NODE}
   * @const
   */
  var MAX_NODE$2 = new MaxNode();
  Object.defineProperties(NamedNode, {
      MIN: {
          value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
      },
      MAX: {
          value: new NamedNode(MAX_NAME, MAX_NODE$2)
      }
  });
  /**
   * Reference Extensions
   */
  KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
  LeafNode.__childrenNodeConstructor = ChildrenNode;
  setMaxNode(MAX_NODE$2);
  setMaxNode$1(MAX_NODE$2);

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var USE_HINZE = true;
  /**
   * Constructs a snapshot node representing the passed JSON and returns it.
   * @param {*} json JSON to create a node for.
   * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the
   * passed JSON contains a .priority property.
   * @return {!Node}
   */
  function nodeFromJSON$1(json, priority) {
      if (priority === void 0) { priority = null; }
      if (json === null) {
          return ChildrenNode.EMPTY_NODE;
      }
      if (typeof json === 'object' && '.priority' in json) {
          priority = json['.priority'];
      }
      index_cjs.assert(priority === null ||
          typeof priority === 'string' ||
          typeof priority === 'number' ||
          (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);
      if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {
          json = json['.value'];
      }
      // Valid leaf nodes include non-objects or server-value wrapper objects
      if (typeof json !== 'object' || '.sv' in json) {
          var jsonLeaf = json;
          return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));
      }
      if (!(json instanceof Array) && USE_HINZE) {
          var children_1 = [];
          var childrenHavePriority_1 = false;
          var hinzeJsonObj = json;
          each(hinzeJsonObj, function (key, child) {
              if (key.substring(0, 1) !== '.') {
                  // Ignore metadata nodes
                  var childNode = nodeFromJSON$1(child);
                  if (!childNode.isEmpty()) {
                      childrenHavePriority_1 =
                          childrenHavePriority_1 || !childNode.getPriority().isEmpty();
                      children_1.push(new NamedNode(key, childNode));
                  }
              }
          });
          if (children_1.length == 0) {
              return ChildrenNode.EMPTY_NODE;
          }
          var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);
          if (childrenHavePriority_1) {
              var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());
              return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));
          }
          else {
              return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);
          }
      }
      else {
          var node_1 = ChildrenNode.EMPTY_NODE;
          each(json, function (key, childData) {
              if (index_cjs.contains(json, key)) {
                  if (key.substring(0, 1) !== '.') {
                      // ignore metadata nodes.
                      var childNode = nodeFromJSON$1(childData);
                      if (childNode.isLeafNode() || !childNode.isEmpty())
                          node_1 = node_1.updateImmediateChild(key, childNode);
                  }
              }
          });
          return node_1.updatePriority(nodeFromJSON$1(priority));
      }
  }
  setNodeFromJSON(nodeFromJSON$1);

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @constructor
   * @extends {Index}
   * @private
   */
  var ValueIndex = /** @class */ (function (_super) {
      tslib_es6.__extends(ValueIndex, _super);
      function ValueIndex() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      /**
       * @inheritDoc
       */
      ValueIndex.prototype.compare = function (a, b) {
          var indexCmp = a.node.compareTo(b.node);
          if (indexCmp === 0) {
              return nameCompare(a.name, b.name);
          }
          else {
              return indexCmp;
          }
      };
      /**
       * @inheritDoc
       */
      ValueIndex.prototype.isDefinedOn = function (node) {
          return true;
      };
      /**
       * @inheritDoc
       */
      ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
          return !oldNode.equals(newNode);
      };
      /**
       * @inheritDoc
       */
      ValueIndex.prototype.minPost = function () {
          return NamedNode.MIN;
      };
      /**
       * @inheritDoc
       */
      ValueIndex.prototype.maxPost = function () {
          return NamedNode.MAX;
      };
      /**
       * @param {*} indexValue
       * @param {string} name
       * @return {!NamedNode}
       */
      ValueIndex.prototype.makePost = function (indexValue, name) {
          var valueNode = nodeFromJSON$1(indexValue);
          return new NamedNode(name, valueNode);
      };
      /**
       * @return {!string} String representation for inclusion in a query spec
       */
      ValueIndex.prototype.toString = function () {
          return '.value';
      };
      return ValueIndex;
  }(Index));
  var VALUE_INDEX = new ValueIndex();

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @param {!Path} indexPath
   * @constructor
   * @extends {Index}
   */
  var PathIndex = /** @class */ (function (_super) {
      tslib_es6.__extends(PathIndex, _super);
      function PathIndex(indexPath_) {
          var _this = _super.call(this) || this;
          _this.indexPath_ = indexPath_;
          index_cjs.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', "Can't create PathIndex with empty path or .priority key");
          return _this;
      }
      /**
       * @param {!Node} snap
       * @return {!Node}
       * @protected
       */
      PathIndex.prototype.extractChild = function (snap) {
          return snap.getChild(this.indexPath_);
      };
      /**
       * @inheritDoc
       */
      PathIndex.prototype.isDefinedOn = function (node) {
          return !node.getChild(this.indexPath_).isEmpty();
      };
      /**
       * @inheritDoc
       */
      PathIndex.prototype.compare = function (a, b) {
          var aChild = this.extractChild(a.node);
          var bChild = this.extractChild(b.node);
          var indexCmp = aChild.compareTo(bChild);
          if (indexCmp === 0) {
              return nameCompare(a.name, b.name);
          }
          else {
              return indexCmp;
          }
      };
      /**
       * @inheritDoc
       */
      PathIndex.prototype.makePost = function (indexValue, name) {
          var valueNode = nodeFromJSON$1(indexValue);
          var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
          return new NamedNode(name, node);
      };
      /**
       * @inheritDoc
       */
      PathIndex.prototype.maxPost = function () {
          var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);
          return new NamedNode(MAX_NAME, node);
      };
      /**
       * @inheritDoc
       */
      PathIndex.prototype.toString = function () {
          return this.indexPath_.slice().join('/');
      };
      return PathIndex;
  }(Index));

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Class representing a firebase data snapshot.  It wraps a SnapshotNode and
   * surfaces the public methods (val, forEach, etc.) we want to expose.
   */
  var DataSnapshot = /** @class */ (function () {
      /**
       * @param {!Node} node_ A SnapshotNode to wrap.
       * @param {!Reference} ref_ The ref of the location this snapshot came from.
       * @param {!Index} index_ The iteration order for this snapshot
       */
      function DataSnapshot(node_, ref_, index_) {
          this.node_ = node_;
          this.ref_ = ref_;
          this.index_ = index_;
      }
      /**
       * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is
       * empty.
       *
       * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
       */
      DataSnapshot.prototype.val = function () {
          index_cjs.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);
          return this.node_.val();
      };
      /**
       * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting
       * the entire node contents.
       * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
       */
      DataSnapshot.prototype.exportVal = function () {
          index_cjs.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);
          return this.node_.val(true);
      };
      // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
      // for end-users
      DataSnapshot.prototype.toJSON = function () {
          // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content
          index_cjs.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);
          return this.exportVal();
      };
      /**
       * Returns whether the snapshot contains a non-null value.
       *
       * @return {boolean} Whether the snapshot contains a non-null value, or is empty.
       */
      DataSnapshot.prototype.exists = function () {
          index_cjs.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);
          return !this.node_.isEmpty();
      };
      /**
       * Returns a DataSnapshot of the specified child node's contents.
       *
       * @param {!string} childPathString Path to a child.
       * @return {!DataSnapshot} DataSnapshot for child node.
       */
      DataSnapshot.prototype.child = function (childPathString) {
          index_cjs.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);
          // Ensure the childPath is a string (can be a number)
          childPathString = String(childPathString);
          validatePathString('DataSnapshot.child', 1, childPathString, false);
          var childPath = new Path(childPathString);
          var childRef = this.ref_.child(childPath);
          return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);
      };
      /**
       * Returns whether the snapshot contains a child at the specified path.
       *
       * @param {!string} childPathString Path to a child.
       * @return {boolean} Whether the child exists.
       */
      DataSnapshot.prototype.hasChild = function (childPathString) {
          index_cjs.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);
          validatePathString('DataSnapshot.hasChild', 1, childPathString, false);
          var childPath = new Path(childPathString);
          return !this.node_.getChild(childPath).isEmpty();
      };
      /**
       * Returns the priority of the object, or null if no priority was set.
       *
       * @return {string|number|null} The priority.
       */
      DataSnapshot.prototype.getPriority = function () {
          index_cjs.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);
          // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
          return this.node_.getPriority().val();
      };
      /**
       * Iterates through child nodes and calls the specified action for each one.
       *
       * @param {function(!DataSnapshot)} action Callback function to be called
       * for each child.
       * @return {boolean} True if forEach was canceled by action returning true for
       * one of the child nodes.
       */
      DataSnapshot.prototype.forEach = function (action) {
          var _this = this;
          index_cjs.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);
          index_cjs.validateCallback('DataSnapshot.forEach', 1, action, false);
          if (this.node_.isLeafNode())
              return false;
          var childrenNode = this.node_;
          // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
          return !!childrenNode.forEachChild(this.index_, function (key, node) {
              return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));
          });
      };
      /**
       * Returns whether this DataSnapshot has children.
       * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.
       */
      DataSnapshot.prototype.hasChildren = function () {
          index_cjs.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);
          if (this.node_.isLeafNode())
              return false;
          else
              return !this.node_.isEmpty();
      };
      Object.defineProperty(DataSnapshot.prototype, "key", {
          get: function () {
              return this.ref_.getKey();
          },
          enumerable: true,
          configurable: true
      });
      /**
       * Returns the number of children for this DataSnapshot.
       * @return {number} The number of children that this DataSnapshot contains.
       */
      DataSnapshot.prototype.numChildren = function () {
          index_cjs.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);
          return this.node_.numChildren();
      };
      /**
       * @return {Reference} The Firebase reference for the location this snapshot's data came from.
       */
      DataSnapshot.prototype.getRef = function () {
          index_cjs.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);
          return this.ref_;
      };
      Object.defineProperty(DataSnapshot.prototype, "ref", {
          get: function () {
              return this.getRef();
          },
          enumerable: true,
          configurable: true
      });
      return DataSnapshot;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Encapsulates the data needed to raise an event
   * @implements {Event}
   */
  var DataEvent = /** @class */ (function () {
      /**
       * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed
       * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided
       * @param {!DataSnapshot} snapshot The data backing the event
       * @param {?string=} prevName Optional, the name of the previous child for child_* events.
       */
      function DataEvent(eventType, eventRegistration, snapshot, prevName) {
          this.eventType = eventType;
          this.eventRegistration = eventRegistration;
          this.snapshot = snapshot;
          this.prevName = prevName;
      }
      /**
       * @inheritDoc
       */
      DataEvent.prototype.getPath = function () {
          var ref = this.snapshot.getRef();
          if (this.eventType === 'value') {
              return ref.path;
          }
          else {
              return ref.getParent().path;
          }
      };
      /**
       * @inheritDoc
       */
      DataEvent.prototype.getEventType = function () {
          return this.eventType;
      };
      /**
       * @inheritDoc
       */
      DataEvent.prototype.getEventRunner = function () {
          return this.eventRegistration.getEventRunner(this);
      };
      /**
       * @inheritDoc
       */
      DataEvent.prototype.toString = function () {
          return (this.getPath().toString() +
              ':' +
              this.eventType +
              ':' +
              index_cjs.stringify(this.snapshot.exportVal()));
      };
      return DataEvent;
  }());
  var CancelEvent = /** @class */ (function () {
      /**
       * @param {EventRegistration} eventRegistration
       * @param {Error} error
       * @param {!Path} path
       */
      function CancelEvent(eventRegistration, error, path) {
          this.eventRegistration = eventRegistration;
          this.error = error;
          this.path = path;
      }
      /**
       * @inheritDoc
       */
      CancelEvent.prototype.getPath = function () {
          return this.path;
      };
      /**
       * @inheritDoc
       */
      CancelEvent.prototype.getEventType = function () {
          return 'cancel';
      };
      /**
       * @inheritDoc
       */
      CancelEvent.prototype.getEventRunner = function () {
          return this.eventRegistration.getEventRunner(this);
      };
      /**
       * @inheritDoc
       */
      CancelEvent.prototype.toString = function () {
          return this.path.toString() + ':cancel';
      };
      return CancelEvent;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Represents registration for 'value' events.
   */
  var ValueEventRegistration = /** @class */ (function () {
      /**
       * @param {?function(!DataSnapshot)} callback_
       * @param {?function(Error)} cancelCallback_
       * @param {?Object} context_
       */
      function ValueEventRegistration(callback_, cancelCallback_, context_) {
          this.callback_ = callback_;
          this.cancelCallback_ = cancelCallback_;
          this.context_ = context_;
      }
      /**
       * @inheritDoc
       */
      ValueEventRegistration.prototype.respondsTo = function (eventType) {
          return eventType === 'value';
      };
      /**
       * @inheritDoc
       */
      ValueEventRegistration.prototype.createEvent = function (change, query) {
          var index = query.getQueryParams().getIndex();
          return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));
      };
      /**
       * @inheritDoc
       */
      ValueEventRegistration.prototype.getEventRunner = function (eventData) {
          var ctx = this.context_;
          if (eventData.getEventType() === 'cancel') {
              index_cjs.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
              var cancelCB_1 = this.cancelCallback_;
              return function () {
                  // We know that error exists, we checked above that this is a cancel event
                  cancelCB_1.call(ctx, eventData.error);
              };
          }
          else {
              var cb_1 = this.callback_;
              return function () {
                  cb_1.call(ctx, eventData.snapshot);
              };
          }
      };
      /**
       * @inheritDoc
       */
      ValueEventRegistration.prototype.createCancelEvent = function (error, path) {
          if (this.cancelCallback_) {
              return new CancelEvent(this, error, path);
          }
          else {
              return null;
          }
      };
      /**
       * @inheritDoc
       */
      ValueEventRegistration.prototype.matches = function (other) {
          if (!(other instanceof ValueEventRegistration)) {
              return false;
          }
          else if (!other.callback_ || !this.callback_) {
              // If no callback specified, we consider it to match any callback.
              return true;
          }
          else {
              return (other.callback_ === this.callback_ && other.context_ === this.context_);
          }
      };
      /**
       * @inheritDoc
       */
      ValueEventRegistration.prototype.hasAnyCallback = function () {
          return this.callback_ !== null;
      };
      return ValueEventRegistration;
  }());
  /**
   * Represents the registration of 1 or more child_xxx events.
   *
   * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you
   * register a group of callbacks together in the future.
   *
   * @constructor
   * @implements {EventRegistration}
   */
  var ChildEventRegistration = /** @class */ (function () {
      /**
       * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_
       * @param {?function(Error)} cancelCallback_
       * @param {Object=} context_
       */
      function ChildEventRegistration(callbacks_, cancelCallback_, context_) {
          this.callbacks_ = callbacks_;
          this.cancelCallback_ = cancelCallback_;
          this.context_ = context_;
      }
      /**
       * @inheritDoc
       */
      ChildEventRegistration.prototype.respondsTo = function (eventType) {
          var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;
          eventToCheck =
              eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;
          return index_cjs.contains(this.callbacks_, eventToCheck);
      };
      /**
       * @inheritDoc
       */
      ChildEventRegistration.prototype.createCancelEvent = function (error, path) {
          if (this.cancelCallback_) {
              return new CancelEvent(this, error, path);
          }
          else {
              return null;
          }
      };
      /**
       * @inheritDoc
       */
      ChildEventRegistration.prototype.createEvent = function (change, query) {
          index_cjs.assert(change.childName != null, 'Child events should have a childName.');
          var ref = query.getRef().child(/** @type {!string} */ change.childName);
          var index = query.getQueryParams().getIndex();
          return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);
      };
      /**
       * @inheritDoc
       */
      ChildEventRegistration.prototype.getEventRunner = function (eventData) {
          var ctx = this.context_;
          if (eventData.getEventType() === 'cancel') {
              index_cjs.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
              var cancelCB_2 = this.cancelCallback_;
              return function () {
                  // We know that error exists, we checked above that this is a cancel event
                  cancelCB_2.call(ctx, eventData.error);
              };
          }
          else {
              var cb_2 = this.callbacks_[eventData.eventType];
              return function () {
                  cb_2.call(ctx, eventData.snapshot, eventData.prevName);
              };
          }
      };
      /**
       * @inheritDoc
       */
      ChildEventRegistration.prototype.matches = function (other) {
          var _this = this;
          if (other instanceof ChildEventRegistration) {
              if (!this.callbacks_ || !other.callbacks_) {
                  return true;
              }
              else if (this.context_ === other.context_) {
                  var otherKeys = Object.keys(other.callbacks_);
                  var thisKeys = Object.keys(this.callbacks_);
                  var otherCount = otherKeys.length;
                  var thisCount = thisKeys.length;
                  if (otherCount === thisCount) {
                      // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.
                      // If event types don't match, not a match
                      // If count is not 1, exact match across all
                      if (otherCount === 1) {
                          var otherKey = otherKeys[0];
                          var thisKey = thisKeys[0];
                          return (thisKey === otherKey &&
                              (!other.callbacks_[otherKey] ||
                                  !this.callbacks_[thisKey] ||
                                  other.callbacks_[otherKey] === this.callbacks_[thisKey]));
                      }
                      else {
                          // Exact match on each key.
                          return thisKeys.every(function (eventType) {
                              return other.callbacks_[eventType] === _this.callbacks_[eventType];
                          });
                      }
                  }
              }
          }
          return false;
      };
      /**
       * @inheritDoc
       */
      ChildEventRegistration.prototype.hasAnyCallback = function () {
          return this.callbacks_ !== null;
      };
      return ChildEventRegistration;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var __referenceConstructor;
  /**
   * A Query represents a filter to be applied to a firebase location.  This object purely represents the
   * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.
   *
   * Since every Firebase reference is a query, Firebase inherits from this object.
   */
  var Query = /** @class */ (function () {
      function Query(repo, path, queryParams_, orderByCalled_) {
          this.repo = repo;
          this.path = path;
          this.queryParams_ = queryParams_;
          this.orderByCalled_ = orderByCalled_;
      }
      Object.defineProperty(Query, "__referenceConstructor", {
          get: function () {
              index_cjs.assert(__referenceConstructor, 'Reference.ts has not been loaded');
              return __referenceConstructor;
          },
          set: function (val) {
              __referenceConstructor = val;
          },
          enumerable: true,
          configurable: true
      });
      /**
       * Validates start/end values for queries.
       * @param {!QueryParams} params
       * @private
       */
      Query.validateQueryEndpoints_ = function (params) {
          var startNode = null;
          var endNode = null;
          if (params.hasStart()) {
              startNode = params.getIndexStartValue();
          }
          if (params.hasEnd()) {
              endNode = params.getIndexEndValue();
          }
          if (params.getIndex() === KEY_INDEX) {
              var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +
                  'startAt(), endAt(), or equalTo().';
              var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +
                  'or equalTo() must be a string.';
              if (params.hasStart()) {
                  var startName = params.getIndexStartName();
                  if (startName != MIN_NAME) {
                      throw new Error(tooManyArgsError);
                  }
                  else if (typeof startNode !== 'string') {
                      throw new Error(wrongArgTypeError);
                  }
              }
              if (params.hasEnd()) {
                  var endName = params.getIndexEndName();
                  if (endName != MAX_NAME) {
                      throw new Error(tooManyArgsError);
                  }
                  else if (typeof endNode !== 'string') {
                      throw new Error(wrongArgTypeError);
                  }
              }
          }
          else if (params.getIndex() === PRIORITY_INDEX) {
              if ((startNode != null && !isValidPriority(startNode)) ||
                  (endNode != null && !isValidPriority(endNode))) {
                  throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +
                      'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');
              }
          }
          else {
              index_cjs.assert(params.getIndex() instanceof PathIndex ||
                  params.getIndex() === VALUE_INDEX, 'unknown index type.');
              if ((startNode != null && typeof startNode === 'object') ||
                  (endNode != null && typeof endNode === 'object')) {
                  throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +
                      'an object.');
              }
          }
      };
      /**
       * Validates that limit* has been called with the correct combination of parameters
       * @param {!QueryParams} params
       * @private
       */
      Query.validateLimit_ = function (params) {
          if (params.hasStart() &&
              params.hasEnd() &&
              params.hasLimit() &&
              !params.hasAnchoredLimit()) {
              throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");
          }
      };
      /**
       * Validates that no other order by call has been made
       * @param {!string} fnName
       * @private
       */
      Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {
          if (this.orderByCalled_ === true) {
              throw new Error(fnName + ": You can't combine multiple orderBy calls.");
          }
      };
      /**
       * @return {!QueryParams}
       */
      Query.prototype.getQueryParams = function () {
          return this.queryParams_;
      };
      /**
       * @return {!Reference}
       */
      Query.prototype.getRef = function () {
          index_cjs.validateArgCount('Query.ref', 0, 0, arguments.length);
          // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.
          // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this
          // method gets called.
          return new Query.__referenceConstructor(this.repo, this.path);
      };
      /**
       * @param {!string} eventType
       * @param {!function(DataSnapshot, string=)} callback
       * @param {(function(Error)|Object)=} cancelCallbackOrContext
       * @param {Object=} context
       * @return {!function(DataSnapshot, string=)}
       */
      Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {
          index_cjs.validateArgCount('Query.on', 2, 4, arguments.length);
          validateEventType('Query.on', 1, eventType, false);
          index_cjs.validateCallback('Query.on', 2, callback, false);
          var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);
          if (eventType === 'value') {
              this.onValueEvent(callback, ret.cancel, ret.context);
          }
          else {
              var callbacks = {};
              callbacks[eventType] = callback;
              this.onChildEvent(callbacks, ret.cancel, ret.context);
          }
          return callback;
      };
      /**
       * @param {!function(!DataSnapshot)} callback
       * @param {?function(Error)} cancelCallback
       * @param {?Object} context
       * @protected
       */
      Query.prototype.onValueEvent = function (callback, cancelCallback, context) {
          var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);
          this.repo.addEventCallbackForQuery(this, container);
      };
      /**
       * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks
       * @param {?function(Error)} cancelCallback
       * @param {?Object} context
       * @protected
       */
      Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {
          var container = new ChildEventRegistration(callbacks, cancelCallback, context);
          this.repo.addEventCallbackForQuery(this, container);
      };
      /**
       * @param {string=} eventType
       * @param {(function(!DataSnapshot, ?string=))=} callback
       * @param {Object=} context
       */
      Query.prototype.off = function (eventType, callback, context) {
          index_cjs.validateArgCount('Query.off', 0, 3, arguments.length);
          validateEventType('Query.off', 1, eventType, true);
          index_cjs.validateCallback('Query.off', 2, callback, true);
          index_cjs.validateContextObject('Query.off', 3, context, true);
          var container = null;
          var callbacks = null;
          if (eventType === 'value') {
              var valueCallback = callback || null;
              container = new ValueEventRegistration(valueCallback, null, context || null);
          }
          else if (eventType) {
              if (callback) {
                  callbacks = {};
                  callbacks[eventType] = callback;
              }
              container = new ChildEventRegistration(callbacks, null, context || null);
          }
          this.repo.removeEventCallbackForQuery(this, container);
      };
      /**
       * Attaches a listener, waits for the first event, and then removes the listener
       * @param {!string} eventType
       * @param {!function(!DataSnapshot, string=)} userCallback
       * @param failureCallbackOrContext
       * @param context
       * @return {!firebase.Promise}
       */
      Query.prototype.once = function (eventType, userCallback, failureCallbackOrContext, context) {
          var _this = this;
          index_cjs.validateArgCount('Query.once', 1, 4, arguments.length);
          validateEventType('Query.once', 1, eventType, false);
          index_cjs.validateCallback('Query.once', 2, userCallback, true);
          var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);
          // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)
          // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change
          // because the API currently expects callbacks will be called synchronously if the data is cached, but this is
          // against the Promise specification.
          var firstCall = true;
          var deferred = new index_cjs.Deferred();
          // A dummy error handler in case a user wasn't expecting promises
          deferred.promise.catch(function () { });
          var onceCallback = function (snapshot) {
              // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)
              // triggers multiple events (e.g. child_added or child_changed).
              if (firstCall) {
                  firstCall = false;
                  _this.off(eventType, onceCallback);
                  if (userCallback) {
                      userCallback.bind(ret.context)(snapshot);
                  }
                  deferred.resolve(snapshot);
              }
          };
          this.on(eventType, onceCallback, 
          /*cancel=*/ function (err) {
              _this.off(eventType, onceCallback);
              if (ret.cancel)
                  ret.cancel.bind(ret.context)(err);
              deferred.reject(err);
          });
          return deferred.promise;
      };
      /**
       * Set a limit and anchor it to the start of the window.
       * @param {!number} limit
       * @return {!Query}
       */
      Query.prototype.limitToFirst = function (limit) {
          index_cjs.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);
          if (typeof limit !== 'number' ||
              Math.floor(limit) !== limit ||
              limit <= 0) {
              throw new Error('Query.limitToFirst: First argument must be a positive integer.');
          }
          if (this.queryParams_.hasLimit()) {
              throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +
                  'limitToFirst, or limitToLast).');
          }
          return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);
      };
      /**
       * Set a limit and anchor it to the end of the window.
       * @param {!number} limit
       * @return {!Query}
       */
      Query.prototype.limitToLast = function (limit) {
          index_cjs.validateArgCount('Query.limitToLast', 1, 1, arguments.length);
          if (typeof limit !== 'number' ||
              Math.floor(limit) !== limit ||
              limit <= 0) {
              throw new Error('Query.limitToLast: First argument must be a positive integer.');
          }
          if (this.queryParams_.hasLimit()) {
              throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +
                  'limitToFirst, or limitToLast).');
          }
          return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);
      };
      /**
       * Given a child path, return a new query ordered by the specified grandchild path.
       * @param {!string} path
       * @return {!Query}
       */
      Query.prototype.orderByChild = function (path) {
          index_cjs.validateArgCount('Query.orderByChild', 1, 1, arguments.length);
          if (path === '$key') {
              throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');
          }
          else if (path === '$priority') {
              throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');
          }
          else if (path === '$value') {
              throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');
          }
          validatePathString('Query.orderByChild', 1, path, false);
          this.validateNoPreviousOrderByCall_('Query.orderByChild');
          var parsedPath = new Path(path);
          if (parsedPath.isEmpty()) {
              throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');
          }
          var index = new PathIndex(parsedPath);
          var newParams = this.queryParams_.orderBy(index);
          Query.validateQueryEndpoints_(newParams);
          return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
      };
      /**
       * Return a new query ordered by the KeyIndex
       * @return {!Query}
       */
      Query.prototype.orderByKey = function () {
          index_cjs.validateArgCount('Query.orderByKey', 0, 0, arguments.length);
          this.validateNoPreviousOrderByCall_('Query.orderByKey');
          var newParams = this.queryParams_.orderBy(KEY_INDEX);
          Query.validateQueryEndpoints_(newParams);
          return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
      };
      /**
       * Return a new query ordered by the PriorityIndex
       * @return {!Query}
       */
      Query.prototype.orderByPriority = function () {
          index_cjs.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);
          this.validateNoPreviousOrderByCall_('Query.orderByPriority');
          var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);
          Query.validateQueryEndpoints_(newParams);
          return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
      };
      /**
       * Return a new query ordered by the ValueIndex
       * @return {!Query}
       */
      Query.prototype.orderByValue = function () {
          index_cjs.validateArgCount('Query.orderByValue', 0, 0, arguments.length);
          this.validateNoPreviousOrderByCall_('Query.orderByValue');
          var newParams = this.queryParams_.orderBy(VALUE_INDEX);
          Query.validateQueryEndpoints_(newParams);
          return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
      };
      /**
       * @param {number|string|boolean|null} value
       * @param {?string=} name
       * @return {!Query}
       */
      Query.prototype.startAt = function (value, name) {
          if (value === void 0) { value = null; }
          index_cjs.validateArgCount('Query.startAt', 0, 2, arguments.length);
          validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);
          validateKey('Query.startAt', 2, name, true);
          var newParams = this.queryParams_.startAt(value, name);
          Query.validateLimit_(newParams);
          Query.validateQueryEndpoints_(newParams);
          if (this.queryParams_.hasStart()) {
              throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +
                  'or equalTo).');
          }
          // Calling with no params tells us to start at the beginning.
          if (value === undefined) {
              value = null;
              name = null;
          }
          return new Query(this.repo, this.path, newParams, this.orderByCalled_);
      };
      /**
       * @param {number|string|boolean|null} value
       * @param {?string=} name
       * @return {!Query}
       */
      Query.prototype.endAt = function (value, name) {
          if (value === void 0) { value = null; }
          index_cjs.validateArgCount('Query.endAt', 0, 2, arguments.length);
          validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);
          validateKey('Query.endAt', 2, name, true);
          var newParams = this.queryParams_.endAt(value, name);
          Query.validateLimit_(newParams);
          Query.validateQueryEndpoints_(newParams);
          if (this.queryParams_.hasEnd()) {
              throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +
                  'equalTo).');
          }
          return new Query(this.repo, this.path, newParams, this.orderByCalled_);
      };
      /**
       * Load the selection of children with exactly the specified value, and, optionally,
       * the specified name.
       * @param {number|string|boolean|null} value
       * @param {string=} name
       * @return {!Query}
       */
      Query.prototype.equalTo = function (value, name) {
          index_cjs.validateArgCount('Query.equalTo', 1, 2, arguments.length);
          validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);
          validateKey('Query.equalTo', 2, name, true);
          if (this.queryParams_.hasStart()) {
              throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +
                  'equalTo).');
          }
          if (this.queryParams_.hasEnd()) {
              throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +
                  'equalTo).');
          }
          return this.startAt(value, name).endAt(value, name);
      };
      /**
       * @return {!string} URL for this location.
       */
      Query.prototype.toString = function () {
          index_cjs.validateArgCount('Query.toString', 0, 0, arguments.length);
          return this.repo.toString() + this.path.toUrlEncodedString();
      };
      // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
      // for end-users.
      Query.prototype.toJSON = function () {
          // An optional spacer argument is unnecessary for a string.
          index_cjs.validateArgCount('Query.toJSON', 0, 1, arguments.length);
          return this.toString();
      };
      /**
       * An object representation of the query parameters used by this Query.
       * @return {!Object}
       */
      Query.prototype.queryObject = function () {
          return this.queryParams_.getQueryObject();
      };
      /**
       * @return {!string}
       */
      Query.prototype.queryIdentifier = function () {
          var obj = this.queryObject();
          var id = ObjectToUniqueKey(obj);
          return id === '{}' ? 'default' : id;
      };
      /**
       * Return true if this query and the provided query are equivalent; otherwise, return false.
       * @param {Query} other
       * @return {boolean}
       */
      Query.prototype.isEqual = function (other) {
          index_cjs.validateArgCount('Query.isEqual', 1, 1, arguments.length);
          if (!(other instanceof Query)) {
              var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';
              throw new Error(error);
          }
          var sameRepo = this.repo === other.repo;
          var samePath = this.path.equals(other.path);
          var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();
          return sameRepo && samePath && sameQueryIdentifier;
      };
      /**
       * Helper used by .on and .once to extract the context and or cancel arguments.
       * @param {!string} fnName The function name (on or once)
       * @param {(function(Error)|Object)=} cancelOrContext
       * @param {Object=} context
       * @return {{cancel: ?function(Error), context: ?Object}}
       * @private
       */
      Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {
          var ret = { cancel: null, context: null };
          if (cancelOrContext && context) {
              ret.cancel = cancelOrContext;
              index_cjs.validateCallback(fnName, 3, ret.cancel, true);
              ret.context = context;
              index_cjs.validateContextObject(fnName, 4, ret.context, true);
          }
          else if (cancelOrContext) {
              // we have either a cancel callback or a context.
              if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {
                  // it's a context!
                  ret.context = cancelOrContext;
              }
              else if (typeof cancelOrContext === 'function') {
                  ret.cancel = cancelOrContext;
              }
              else {
                  throw new Error(index_cjs.errorPrefix(fnName, 3, true) +
                      ' must either be a cancel callback or a context object.');
              }
          }
          return ret;
      };
      Object.defineProperty(Query.prototype, "ref", {
          get: function () {
              return this.getRef();
          },
          enumerable: true,
          configurable: true
      });
      return Query;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Helper class to store a sparse set of snapshots.
   */
  var SparseSnapshotTree = /** @class */ (function () {
      function SparseSnapshotTree() {
          this.value = null;
          this.children = new Map();
      }
      /**
       * Gets the node stored at the given path if one exists.
       *
       * @param path Path to look up snapshot for.
       * @return The retrieved node, or null.
       */
      SparseSnapshotTree.prototype.find = function (path) {
          if (this.value != null) {
              return this.value.getChild(path);
          }
          else if (!path.isEmpty() && this.children.size > 0) {
              var childKey = path.getFront();
              path = path.popFront();
              if (this.children.has(childKey)) {
                  var childTree = this.children.get(childKey);
                  return childTree.find(path);
              }
              else {
                  return null;
              }
          }
          else {
              return null;
          }
      };
      /**
       * Stores the given node at the specified path. If there is already a node
       * at a shallower path, it merges the new data into that snapshot node.
       *
       * @param path Path to look up snapshot for.
       * @param data The new data, or null.
       */
      SparseSnapshotTree.prototype.remember = function (path, data) {
          if (path.isEmpty()) {
              this.value = data;
              this.children.clear();
          }
          else if (this.value !== null) {
              this.value = this.value.updateChild(path, data);
          }
          else {
              var childKey = path.getFront();
              if (!this.children.has(childKey)) {
                  this.children.set(childKey, new SparseSnapshotTree());
              }
              var child = this.children.get(childKey);
              path = path.popFront();
              child.remember(path, data);
          }
      };
      /**
       * Purge the data at path from the cache.
       *
       * @param path Path to look up snapshot for.
       * @return True if this node should now be removed.
       */
      SparseSnapshotTree.prototype.forget = function (path) {
          if (path.isEmpty()) {
              this.value = null;
              this.children.clear();
              return true;
          }
          else {
              if (this.value !== null) {
                  if (this.value.isLeafNode()) {
                      // We're trying to forget a node that doesn't exist
                      return false;
                  }
                  else {
                      var value = this.value;
                      this.value = null;
                      var self_1 = this;
                      value.forEachChild(PRIORITY_INDEX, function (key, tree) {
                          self_1.remember(new Path(key), tree);
                      });
                      return this.forget(path);
                  }
              }
              else if (this.children.size > 0) {
                  var childKey = path.getFront();
                  path = path.popFront();
                  if (this.children.has(childKey)) {
                      var safeToRemove = this.children.get(childKey).forget(path);
                      if (safeToRemove) {
                          this.children.delete(childKey);
                      }
                  }
                  return this.children.size === 0;
              }
              else {
                  return true;
              }
          }
      };
      /**
       * Recursively iterates through all of the stored tree and calls the
       * callback on each one.
       *
       * @param prefixPath Path to look up node for.
       * @param func The function to invoke for each tree.
       */
      SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {
          if (this.value !== null) {
              func(prefixPath, this.value);
          }
          else {
              this.forEachChild(function (key, tree) {
                  var path = new Path(prefixPath.toString() + '/' + key);
                  tree.forEachTree(path, func);
              });
          }
      };
      /**
       * Iterates through each immediate child and triggers the callback.
       *
       * @param func The function to invoke for each child.
       */
      SparseSnapshotTree.prototype.forEachChild = function (func) {
          this.children.forEach(function (tree, key) {
              func(key, tree);
          });
      };
      return SparseSnapshotTree;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Generate placeholders for deferred values.
   * @param {?Object} values
   * @return {!Object}
   */
  var generateWithValues = function (values) {
      values = values || {};
      values['timestamp'] = values['timestamp'] || new Date().getTime();
      return values;
  };
  /**
   * Value to use when firing local events. When writing server values, fire
   * local events with an approximate value, otherwise return value as-is.
   * @param {(Object|string|number|boolean)} value
   * @param {!Object} serverValues
   * @return {!(string|number|boolean)}
   */
  var resolveDeferredValue = function (value, existing, serverValues) {
      if (!value || typeof value !== 'object') {
          return value;
      }
      index_cjs.assert('.sv' in value, 'Unexpected leaf node or priority contents');
      if (typeof value['.sv'] === 'string') {
          return resolveScalarDeferredValue(value['.sv'], existing, serverValues);
      }
      else if (typeof value['.sv'] === 'object') {
          return resolveComplexDeferredValue(value['.sv'], existing);
      }
      else {
          index_cjs.assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));
      }
  };
  var resolveScalarDeferredValue = function (op, existing, serverValues) {
      switch (op) {
          case 'timestamp':
              return serverValues['timestamp'];
          default:
              index_cjs.assert(false, 'Unexpected server value: ' + op);
      }
  };
  var resolveComplexDeferredValue = function (op, existing, unused) {
      if (!op.hasOwnProperty('increment')) {
          index_cjs.assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));
      }
      var delta = op['increment'];
      if (typeof delta !== 'number') {
          index_cjs.assert(false, 'Unexpected increment value: ' + delta);
      }
      // Incrementing a non-number sets the value to the incremented amount
      if (!existing.isLeafNode()) {
          return delta;
      }
      var leaf = existing;
      var existingVal = leaf.getValue();
      if (typeof existingVal !== 'number') {
          return delta;
      }
      // No need to do over/underflow arithmetic here because JS only handles floats under the covers
      return existingVal + delta;
  };
  /**
   * Recursively replace all deferred values and priorities in the tree with the
   * specified generated replacement values.
   * @param {!SparseSnapshotTree} tree
   * @param {!Object} serverValues
   * @return {!SparseSnapshotTree}
   */
  var resolveDeferredValueTree = function (tree, syncTree, serverValues) {
      var resolvedTree = new SparseSnapshotTree();
      tree.forEachTree(new Path(''), function (path, node) {
          var existing = syncTree.calcCompleteEventCache(path);
          index_cjs.assert(existing !== null && typeof existing !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');
          resolvedTree.remember(path, resolveDeferredValueSnapshot(node, existing, serverValues));
      });
      return resolvedTree;
  };
  /**
   * Recursively replace all deferred values and priorities in the node with the
   * specified generated replacement values.  If there are no server values in the node,
   * it'll be returned as-is.
   * @param {!Node} node
   * @param {!Object} serverValues
   * @return {!Node}
   */
  var resolveDeferredValueSnapshot = function (node, existing, serverValues) {
      var rawPri = node.getPriority().val();
      var priority = resolveDeferredValue(rawPri, existing.getPriority(), serverValues);
      var newNode;
      if (node.isLeafNode()) {
          var leafNode = node;
          var value = resolveDeferredValue(leafNode.getValue(), existing, serverValues);
          if (value !== leafNode.getValue() ||
              priority !== leafNode.getPriority().val()) {
              return new LeafNode(value, nodeFromJSON$1(priority));
          }
          else {
              return node;
          }
      }
      else {
          var childrenNode = node;
          newNode = childrenNode;
          if (priority !== childrenNode.getPriority().val()) {
              newNode = newNode.updatePriority(new LeafNode(priority));
          }
          childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
              var newChildNode = resolveDeferredValueSnapshot(childNode, existing.getImmediateChild(childName), serverValues);
              if (newChildNode !== childNode) {
                  newNode = newNode.updateImmediateChild(childName, newChildNode);
              }
          });
          return newNode;
      }
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   *
   * @enum
   */
  var OperationType;
  (function (OperationType) {
      OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
      OperationType[OperationType["MERGE"] = 1] = "MERGE";
      OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
      OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
  })(OperationType || (OperationType = {}));
  /**
   * @param {boolean} fromUser
   * @param {boolean} fromServer
   * @param {?string} queryId
   * @param {boolean} tagged
   * @constructor
   */
  var OperationSource = /** @class */ (function () {
      function OperationSource(fromUser, fromServer, queryId, tagged) {
          this.fromUser = fromUser;
          this.fromServer = fromServer;
          this.queryId = queryId;
          this.tagged = tagged;
          index_cjs.assert(!tagged || fromServer, 'Tagged queries must be from server.');
      }
      /**
       * @const
       * @type {!OperationSource}
       */
      OperationSource.User = new OperationSource(
      /*fromUser=*/ true, false, null, 
      /*tagged=*/ false);
      /**
       * @const
       * @type {!OperationSource}
       */
      OperationSource.Server = new OperationSource(false, 
      /*fromServer=*/ true, null, 
      /*tagged=*/ false);
      /**
       * @param {string} queryId
       * @return {!OperationSource}
       */
      OperationSource.forServerTaggedQuery = function (queryId) {
          return new OperationSource(false, 
          /*fromServer=*/ true, queryId, 
          /*tagged=*/ true);
      };
      return OperationSource;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var AckUserWrite = /** @class */ (function () {
      /**
       *
       * @param {!Path} path
       * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.
       * @param {!boolean} revert
       */
      function AckUserWrite(
      /**@inheritDoc */ path, 
      /**@inheritDoc */ affectedTree, 
      /**@inheritDoc */ revert) {
          this.path = path;
          this.affectedTree = affectedTree;
          this.revert = revert;
          /** @inheritDoc */
          this.type = OperationType.ACK_USER_WRITE;
          /** @inheritDoc */
          this.source = OperationSource.User;
      }
      /**
       * @inheritDoc
       */
      AckUserWrite.prototype.operationForChild = function (childName) {
          if (!this.path.isEmpty()) {
              index_cjs.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');
              return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);
          }
          else if (this.affectedTree.value != null) {
              index_cjs.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
              // All child locations are affected as well; just return same operation.
              return this;
          }
          else {
              var childTree = this.affectedTree.subtree(new Path(childName));
              return new AckUserWrite(Path.Empty, childTree, this.revert);
          }
      };
      return AckUserWrite;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var emptyChildrenSingleton;
  /**
   * Singleton empty children collection.
   *
   * @const
   * @type {!SortedMap.<string, !ImmutableTree.<?>>}
   */
  var EmptyChildren = function () {
      if (!emptyChildrenSingleton) {
          emptyChildrenSingleton = new SortedMap(stringCompare);
      }
      return emptyChildrenSingleton;
  };
  /**
   * A tree with immutable elements.
   */
  var ImmutableTree = /** @class */ (function () {
      /**
       * @template T
       * @param {?T} value
       * @param {SortedMap.<string, !ImmutableTree.<T>>=} children
       */
      function ImmutableTree(value, children) {
          if (children === void 0) { children = EmptyChildren(); }
          this.value = value;
          this.children = children;
      }
      /**
       * @template T
       * @param {!Object.<string, !T>} obj
       * @return {!ImmutableTree.<!T>}
       */
      ImmutableTree.fromObject = function (obj) {
          var tree = ImmutableTree.Empty;
          each(obj, function (childPath, childSnap) {
              tree = tree.set(new Path(childPath), childSnap);
          });
          return tree;
      };
      /**
       * True if the value is empty and there are no children
       * @return {boolean}
       */
      ImmutableTree.prototype.isEmpty = function () {
          return this.value === null && this.children.isEmpty();
      };
      /**
       * Given a path and predicate, return the first node and the path to that node
       * where the predicate returns true.
       *
       * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects
       * on the way back out, it may be better to pass down a pathSoFar obj.
       *
       * @param {!Path} relativePath The remainder of the path
       * @param {function(T):boolean} predicate The predicate to satisfy to return a
       *   node
       * @return {?{path:!Path, value:!T}}
       */
      ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {
          if (this.value != null && predicate(this.value)) {
              return { path: Path.Empty, value: this.value };
          }
          else {
              if (relativePath.isEmpty()) {
                  return null;
              }
              else {
                  var front = relativePath.getFront();
                  var child = this.children.get(front);
                  if (child !== null) {
                      var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);
                      if (childExistingPathAndValue != null) {
                          var fullPath = new Path(front).child(childExistingPathAndValue.path);
                          return { path: fullPath, value: childExistingPathAndValue.value };
                      }
                      else {
                          return null;
                      }
                  }
                  else {
                      return null;
                  }
              }
          }
      };
      /**
       * Find, if it exists, the shortest subpath of the given path that points a defined
       * value in the tree
       * @param {!Path} relativePath
       * @return {?{path: !Path, value: !T}}
       */
      ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {
          return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });
      };
      /**
       * @param {!Path} relativePath
       * @return {!ImmutableTree.<T>} The subtree at the given path
       */
      ImmutableTree.prototype.subtree = function (relativePath) {
          if (relativePath.isEmpty()) {
              return this;
          }
          else {
              var front = relativePath.getFront();
              var childTree = this.children.get(front);
              if (childTree !== null) {
                  return childTree.subtree(relativePath.popFront());
              }
              else {
                  return ImmutableTree.Empty;
              }
          }
      };
      /**
       * Sets a value at the specified path.
       *
       * @param {!Path} relativePath Path to set value at.
       * @param {?T} toSet Value to set.
       * @return {!ImmutableTree.<T>} Resulting tree.
       */
      ImmutableTree.prototype.set = function (relativePath, toSet) {
          if (relativePath.isEmpty()) {
              return new ImmutableTree(toSet, this.children);
          }
          else {
              var front = relativePath.getFront();
              var child = this.children.get(front) || ImmutableTree.Empty;
              var newChild = child.set(relativePath.popFront(), toSet);
              var newChildren = this.children.insert(front, newChild);
              return new ImmutableTree(this.value, newChildren);
          }
      };
      /**
       * Removes the value at the specified path.
       *
       * @param {!Path} relativePath Path to value to remove.
       * @return {!ImmutableTree.<T>} Resulting tree.
       */
      ImmutableTree.prototype.remove = function (relativePath) {
          if (relativePath.isEmpty()) {
              if (this.children.isEmpty()) {
                  return ImmutableTree.Empty;
              }
              else {
                  return new ImmutableTree(null, this.children);
              }
          }
          else {
              var front = relativePath.getFront();
              var child = this.children.get(front);
              if (child) {
                  var newChild = child.remove(relativePath.popFront());
                  var newChildren = void 0;
                  if (newChild.isEmpty()) {
                      newChildren = this.children.remove(front);
                  }
                  else {
                      newChildren = this.children.insert(front, newChild);
                  }
                  if (this.value === null && newChildren.isEmpty()) {
                      return ImmutableTree.Empty;
                  }
                  else {
                      return new ImmutableTree(this.value, newChildren);
                  }
              }
              else {
                  return this;
              }
          }
      };
      /**
       * Gets a value from the tree.
       *
       * @param {!Path} relativePath Path to get value for.
       * @return {?T} Value at path, or null.
       */
      ImmutableTree.prototype.get = function (relativePath) {
          if (relativePath.isEmpty()) {
              return this.value;
          }
          else {
              var front = relativePath.getFront();
              var child = this.children.get(front);
              if (child) {
                  return child.get(relativePath.popFront());
              }
              else {
                  return null;
              }
          }
      };
      /**
       * Replace the subtree at the specified path with the given new tree.
       *
       * @param {!Path} relativePath Path to replace subtree for.
       * @param {!ImmutableTree} newTree New tree.
       * @return {!ImmutableTree} Resulting tree.
       */
      ImmutableTree.prototype.setTree = function (relativePath, newTree) {
          if (relativePath.isEmpty()) {
              return newTree;
          }
          else {
              var front = relativePath.getFront();
              var child = this.children.get(front) || ImmutableTree.Empty;
              var newChild = child.setTree(relativePath.popFront(), newTree);
              var newChildren = void 0;
              if (newChild.isEmpty()) {
                  newChildren = this.children.remove(front);
              }
              else {
                  newChildren = this.children.insert(front, newChild);
              }
              return new ImmutableTree(this.value, newChildren);
          }
      };
      /**
       * Performs a depth first fold on this tree. Transforms a tree into a single
       * value, given a function that operates on the path to a node, an optional
       * current value, and a map of child names to folded subtrees
       * @template V
       * @param {function(Path, ?T, Object.<string, V>):V} fn
       * @return {V}
       */
      ImmutableTree.prototype.fold = function (fn) {
          return this.fold_(Path.Empty, fn);
      };
      /**
       * Recursive helper for public-facing fold() method
       * @template V
       * @param {!Path} pathSoFar
       * @param {function(Path, ?T, Object.<string, V>):V} fn
       * @return {V}
       * @private
       */
      ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {
          var accum = {};
          this.children.inorderTraversal(function (childKey, childTree) {
              accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);
          });
          return fn(pathSoFar, this.value, accum);
      };
      /**
       * Find the first matching value on the given path. Return the result of applying f to it.
       * @template V
       * @param {!Path} path
       * @param {!function(!Path, !T):?V} f
       * @return {?V}
       */
      ImmutableTree.prototype.findOnPath = function (path, f) {
          return this.findOnPath_(path, Path.Empty, f);
      };
      ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {
          var result = this.value ? f(pathSoFar, this.value) : false;
          if (result) {
              return result;
          }
          else {
              if (pathToFollow.isEmpty()) {
                  return null;
              }
              else {
                  var front = pathToFollow.getFront();
                  var nextChild = this.children.get(front);
                  if (nextChild) {
                      return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);
                  }
                  else {
                      return null;
                  }
              }
          }
      };
      /**
       *
       * @param {!Path} path
       * @param {!function(!Path, !T)} f
       * @returns {!ImmutableTree.<T>}
       */
      ImmutableTree.prototype.foreachOnPath = function (path, f) {
          return this.foreachOnPath_(path, Path.Empty, f);
      };
      ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {
          if (pathToFollow.isEmpty()) {
              return this;
          }
          else {
              if (this.value) {
                  f(currentRelativePath, this.value);
              }
              var front = pathToFollow.getFront();
              var nextChild = this.children.get(front);
              if (nextChild) {
                  return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);
              }
              else {
                  return ImmutableTree.Empty;
              }
          }
      };
      /**
       * Calls the given function for each node in the tree that has a value.
       *
       * @param {function(!Path, !T)} f A function to be called with
       *   the path from the root of the tree to a node, and the value at that node.
       *   Called in depth-first order.
       */
      ImmutableTree.prototype.foreach = function (f) {
          this.foreach_(Path.Empty, f);
      };
      ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {
          this.children.inorderTraversal(function (childName, childTree) {
              childTree.foreach_(currentRelativePath.child(childName), f);
          });
          if (this.value) {
              f(currentRelativePath, this.value);
          }
      };
      /**
       *
       * @param {function(string, !T)} f
       */
      ImmutableTree.prototype.foreachChild = function (f) {
          this.children.inorderTraversal(function (childName, childTree) {
              if (childTree.value) {
                  f(childName, childTree.value);
              }
          });
      };
      ImmutableTree.Empty = new ImmutableTree(null);
      return ImmutableTree;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @param {!OperationSource} source
   * @param {!Path} path
   * @constructor
   * @implements {Operation}
   */
  var ListenComplete = /** @class */ (function () {
      function ListenComplete(source, path) {
          this.source = source;
          this.path = path;
          /** @inheritDoc */
          this.type = OperationType.LISTEN_COMPLETE;
      }
      ListenComplete.prototype.operationForChild = function (childName) {
          if (this.path.isEmpty()) {
              return new ListenComplete(this.source, Path.Empty);
          }
          else {
              return new ListenComplete(this.source, this.path.popFront());
          }
      };
      return ListenComplete;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @param {!OperationSource} source
   * @param {!Path} path
   * @param {!Node} snap
   * @constructor
   * @implements {Operation}
   */
  var Overwrite = /** @class */ (function () {
      function Overwrite(source, path, snap) {
          this.source = source;
          this.path = path;
          this.snap = snap;
          /** @inheritDoc */
          this.type = OperationType.OVERWRITE;
      }
      Overwrite.prototype.operationForChild = function (childName) {
          if (this.path.isEmpty()) {
              return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));
          }
          else {
              return new Overwrite(this.source, this.path.popFront(), this.snap);
          }
      };
      return Overwrite;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @param {!OperationSource} source
   * @param {!Path} path
   * @param {!ImmutableTree.<!Node>} children
   * @constructor
   * @implements {Operation}
   */
  var Merge = /** @class */ (function () {
      function Merge(
      /**@inheritDoc */ source, 
      /**@inheritDoc */ path, 
      /**@inheritDoc */ children) {
          this.source = source;
          this.path = path;
          this.children = children;
          /** @inheritDoc */
          this.type = OperationType.MERGE;
      }
      /**
       * @inheritDoc
       */
      Merge.prototype.operationForChild = function (childName) {
          if (this.path.isEmpty()) {
              var childTree = this.children.subtree(new Path(childName));
              if (childTree.isEmpty()) {
                  // This child is unaffected
                  return null;
              }
              else if (childTree.value) {
                  // We have a snapshot for the child in question.  This becomes an overwrite of the child.
                  return new Overwrite(this.source, Path.Empty, childTree.value);
              }
              else {
                  // This is a merge at a deeper level
                  return new Merge(this.source, Path.Empty, childTree);
              }
          }
          else {
              index_cjs.assert(this.path.getFront() === childName, "Can't get a merge for a child not on the path of the operation");
              return new Merge(this.source, this.path.popFront(), this.children);
          }
      };
      /**
       * @inheritDoc
       */
      Merge.prototype.toString = function () {
          return ('Operation(' +
              this.path +
              ': ' +
              this.source.toString() +
              ' merge: ' +
              this.children.toString() +
              ')');
      };
      return Merge;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
   * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
   * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
   * whether a node potentially had children removed due to a filter.
   */
  var CacheNode = /** @class */ (function () {
      /**
       * @param {!Node} node_
       * @param {boolean} fullyInitialized_
       * @param {boolean} filtered_
       */
      function CacheNode(node_, fullyInitialized_, filtered_) {
          this.node_ = node_;
          this.fullyInitialized_ = fullyInitialized_;
          this.filtered_ = filtered_;
      }
      /**
       * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
       * @return {boolean}
       */
      CacheNode.prototype.isFullyInitialized = function () {
          return this.fullyInitialized_;
      };
      /**
       * Returns whether this node is potentially missing children due to a filter applied to the node
       * @return {boolean}
       */
      CacheNode.prototype.isFiltered = function () {
          return this.filtered_;
      };
      /**
       * @param {!Path} path
       * @return {boolean}
       */
      CacheNode.prototype.isCompleteForPath = function (path) {
          if (path.isEmpty()) {
              return this.isFullyInitialized() && !this.filtered_;
          }
          var childKey = path.getFront();
          return this.isCompleteForChild(childKey);
      };
      /**
       * @param {!string} key
       * @return {boolean}
       */
      CacheNode.prototype.isCompleteForChild = function (key) {
          return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));
      };
      /**
       * @return {!Node}
       */
      CacheNode.prototype.getNode = function () {
          return this.node_;
      };
      return CacheNode;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Stores the data we have cached for a view.
   *
   * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).
   *
   * @constructor
   */
  var ViewCache = /** @class */ (function () {
      /**
       *
       * @param {!CacheNode} eventCache_
       * @param {!CacheNode} serverCache_
       */
      function ViewCache(eventCache_, serverCache_) {
          this.eventCache_ = eventCache_;
          this.serverCache_ = serverCache_;
      }
      /**
       * @param {!Node} eventSnap
       * @param {boolean} complete
       * @param {boolean} filtered
       * @return {!ViewCache}
       */
      ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {
          return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);
      };
      /**
       * @param {!Node} serverSnap
       * @param {boolean} complete
       * @param {boolean} filtered
       * @return {!ViewCache}
       */
      ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {
          return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));
      };
      /**
       * @return {!CacheNode}
       */
      ViewCache.prototype.getEventCache = function () {
          return this.eventCache_;
      };
      /**
       * @return {?Node}
       */
      ViewCache.prototype.getCompleteEventSnap = function () {
          return this.eventCache_.isFullyInitialized()
              ? this.eventCache_.getNode()
              : null;
      };
      /**
       * @return {!CacheNode}
       */
      ViewCache.prototype.getServerCache = function () {
          return this.serverCache_;
      };
      /**
       * @return {?Node}
       */
      ViewCache.prototype.getCompleteServerSnap = function () {
          return this.serverCache_.isFullyInitialized()
              ? this.serverCache_.getNode()
              : null;
      };
      /**
       * @const
       * @type {ViewCache}
       */
      ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, 
      /*fullyInitialized=*/ false, 
      /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, 
      /*fullyInitialized=*/ false, 
      /*filtered=*/ false));
      return ViewCache;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @constructor
   * @struct
   * @param {!string} type The event type
   * @param {!Node} snapshotNode The data
   * @param {string=} childName The name for this child, if it's a child event
   * @param {Node=} oldSnap Used for intermediate processing of child changed events
   * @param {string=} prevName The name for the previous child, if applicable
   */
  var Change = /** @class */ (function () {
      function Change(type, snapshotNode, childName, oldSnap, prevName) {
          this.type = type;
          this.snapshotNode = snapshotNode;
          this.childName = childName;
          this.oldSnap = oldSnap;
          this.prevName = prevName;
      }
      /**
       * @param {!Node} snapshot
       * @return {!Change}
       */
      Change.valueChange = function (snapshot) {
          return new Change(Change.VALUE, snapshot);
      };
      /**
       * @param {string} childKey
       * @param {!Node} snapshot
       * @return {!Change}
       */
      Change.childAddedChange = function (childKey, snapshot) {
          return new Change(Change.CHILD_ADDED, snapshot, childKey);
      };
      /**
       * @param {string} childKey
       * @param {!Node} snapshot
       * @return {!Change}
       */
      Change.childRemovedChange = function (childKey, snapshot) {
          return new Change(Change.CHILD_REMOVED, snapshot, childKey);
      };
      /**
       * @param {string} childKey
       * @param {!Node} newSnapshot
       * @param {!Node} oldSnapshot
       * @return {!Change}
       */
      Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {
          return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);
      };
      /**
       * @param {string} childKey
       * @param {!Node} snapshot
       * @return {!Change}
       */
      Change.childMovedChange = function (childKey, snapshot) {
          return new Change(Change.CHILD_MOVED, snapshot, childKey);
      };
      //event types
      /** Event type for a child added */
      Change.CHILD_ADDED = 'child_added';
      /** Event type for a child removed */
      Change.CHILD_REMOVED = 'child_removed';
      /** Event type for a child changed */
      Change.CHILD_CHANGED = 'child_changed';
      /** Event type for a child moved */
      Change.CHILD_MOVED = 'child_moved';
      /** Event type for a value change */
      Change.VALUE = 'value';
      return Change;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
   *
   * @constructor
   * @implements {NodeFilter}
   * @param {!Index} index
   */
  var IndexedFilter = /** @class */ (function () {
      function IndexedFilter(index_) {
          this.index_ = index_;
      }
      IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
          index_cjs.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
          var oldChild = snap.getImmediateChild(key);
          // Check if anything actually changed.
          if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
              // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
              // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
              // to avoid treating these cases as "nothing changed."
              if (oldChild.isEmpty() == newChild.isEmpty()) {
                  // Nothing changed.
                  // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
                  //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
                  return snap;
              }
          }
          if (optChangeAccumulator != null) {
              if (newChild.isEmpty()) {
                  if (snap.hasChild(key)) {
                      optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));
                  }
                  else {
                      index_cjs.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
                  }
              }
              else if (oldChild.isEmpty()) {
                  optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));
              }
              else {
                  optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));
              }
          }
          if (snap.isLeafNode() && newChild.isEmpty()) {
              return snap;
          }
          else {
              // Make sure the node is indexed
              return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
          }
      };
      /**
       * @inheritDoc
       */
      IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
          if (optChangeAccumulator != null) {
              if (!oldSnap.isLeafNode()) {
                  oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                      if (!newSnap.hasChild(key)) {
                          optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));
                      }
                  });
              }
              if (!newSnap.isLeafNode()) {
                  newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                      if (oldSnap.hasChild(key)) {
                          var oldChild = oldSnap.getImmediateChild(key);
                          if (!oldChild.equals(childNode)) {
                              optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));
                          }
                      }
                      else {
                          optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));
                      }
                  });
              }
          }
          return newSnap.withIndex(this.index_);
      };
      /**
       * @inheritDoc
       */
      IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
          if (oldSnap.isEmpty()) {
              return ChildrenNode.EMPTY_NODE;
          }
          else {
              return oldSnap.updatePriority(newPriority);
          }
      };
      /**
       * @inheritDoc
       */
      IndexedFilter.prototype.filtersNodes = function () {
          return false;
      };
      /**
       * @inheritDoc
       */
      IndexedFilter.prototype.getIndexedFilter = function () {
          return this;
      };
      /**
       * @inheritDoc
       */
      IndexedFilter.prototype.getIndex = function () {
          return this.index_;
      };
      return IndexedFilter;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ChildChangeAccumulator = /** @class */ (function () {
      function ChildChangeAccumulator() {
          this.changeMap = new Map();
      }
      ChildChangeAccumulator.prototype.trackChildChange = function (change) {
          var type = change.type;
          var childKey = change.childName;
          index_cjs.assert(type == Change.CHILD_ADDED ||
              type == Change.CHILD_CHANGED ||
              type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');
          index_cjs.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
          var oldChange = this.changeMap.get(childKey);
          if (oldChange) {
              var oldType = oldChange.type;
              if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {
                  this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode));
              }
              else if (type == Change.CHILD_REMOVED &&
                  oldType == Change.CHILD_ADDED) {
                  this.changeMap.delete(childKey);
              }
              else if (type == Change.CHILD_REMOVED &&
                  oldType == Change.CHILD_CHANGED) {
                  this.changeMap.set(childKey, Change.childRemovedChange(childKey, oldChange.oldSnap));
              }
              else if (type == Change.CHILD_CHANGED &&
                  oldType == Change.CHILD_ADDED) {
                  this.changeMap.set(childKey, Change.childAddedChange(childKey, change.snapshotNode));
              }
              else if (type == Change.CHILD_CHANGED &&
                  oldType == Change.CHILD_CHANGED) {
                  this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap));
              }
              else {
                  throw index_cjs.assertionError('Illegal combination of changes: ' +
                      change +
                      ' occurred after ' +
                      oldChange);
              }
          }
          else {
              this.changeMap.set(childKey, change);
          }
      };
      ChildChangeAccumulator.prototype.getChanges = function () {
          return Array.from(this.changeMap.values());
      };
      return ChildChangeAccumulator;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An implementation of CompleteChildSource that never returns any additional children
   *
   * @private
   * @constructor
   * @implements CompleteChildSource
   */
  var NoCompleteChildSource_ = /** @class */ (function () {
      function NoCompleteChildSource_() {
      }
      /**
       * @inheritDoc
       */
      NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {
          return null;
      };
      /**
       * @inheritDoc
       */
      NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {
          return null;
      };
      return NoCompleteChildSource_;
  }());
  /**
   * Singleton instance.
   * @const
   * @type {!CompleteChildSource}
   */
  var NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
  /**
   * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
   * old event caches available to calculate complete children.
   *
   *
   * @implements CompleteChildSource
   */
  var WriteTreeCompleteChildSource = /** @class */ (function () {
      /**
       * @param {!WriteTreeRef} writes_
       * @param {!ViewCache} viewCache_
       * @param {?Node} optCompleteServerCache_
       */
      function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {
          if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }
          this.writes_ = writes_;
          this.viewCache_ = viewCache_;
          this.optCompleteServerCache_ = optCompleteServerCache_;
      }
      /**
       * @inheritDoc
       */
      WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {
          var node = this.viewCache_.getEventCache();
          if (node.isCompleteForChild(childKey)) {
              return node.getNode().getImmediateChild(childKey);
          }
          else {
              var serverNode = this.optCompleteServerCache_ != null
                  ? new CacheNode(this.optCompleteServerCache_, true, false)
                  : this.viewCache_.getServerCache();
              return this.writes_.calcCompleteChild(childKey, serverNode);
          }
      };
      /**
       * @inheritDoc
       */
      WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {
          var completeServerData = this.optCompleteServerCache_ != null
              ? this.optCompleteServerCache_
              : this.viewCache_.getCompleteServerSnap();
          var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);
          if (nodes.length === 0) {
              return null;
          }
          else {
              return nodes[0];
          }
      };
      return WriteTreeCompleteChildSource;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @constructor
   * @struct
   */
  var ProcessorResult = /** @class */ (function () {
      /**
       * @param {!ViewCache} viewCache
       * @param {!Array.<!Change>} changes
       */
      function ProcessorResult(viewCache, changes) {
          this.viewCache = viewCache;
          this.changes = changes;
      }
      return ProcessorResult;
  }());
  /**
   * @constructor
   */
  var ViewProcessor = /** @class */ (function () {
      /**
       * @param {!NodeFilter} filter_
       */
      function ViewProcessor(filter_) {
          this.filter_ = filter_;
      }
      /**
       * @param {!ViewCache} viewCache
       */
      ViewProcessor.prototype.assertIndexed = function (viewCache) {
          index_cjs.assert(viewCache
              .getEventCache()
              .getNode()
              .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');
          index_cjs.assert(viewCache
              .getServerCache()
              .getNode()
              .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');
      };
      /**
       * @param {!ViewCache} oldViewCache
       * @param {!Operation} operation
       * @param {!WriteTreeRef} writesCache
       * @param {?Node} completeCache
       * @return {!ProcessorResult}
       */
      ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {
          var accumulator = new ChildChangeAccumulator();
          var newViewCache, filterServerNode;
          if (operation.type === OperationType.OVERWRITE) {
              var overwrite = operation;
              if (overwrite.source.fromUser) {
                  newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
              }
              else {
                  index_cjs.assert(overwrite.source.fromServer, 'Unknown source.');
                  // We filter the node if it's a tagged update or the node has been previously filtered  and the
                  // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
                  // again
                  filterServerNode =
                      overwrite.source.tagged ||
                          (oldViewCache.getServerCache().isFiltered() &&
                              !overwrite.path.isEmpty());
                  newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
              }
          }
          else if (operation.type === OperationType.MERGE) {
              var merge = operation;
              if (merge.source.fromUser) {
                  newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
              }
              else {
                  index_cjs.assert(merge.source.fromServer, 'Unknown source.');
                  // We filter the node if it's a tagged update or the node has been previously filtered
                  filterServerNode =
                      merge.source.tagged || oldViewCache.getServerCache().isFiltered();
                  newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
              }
          }
          else if (operation.type === OperationType.ACK_USER_WRITE) {
              var ackUserWrite = operation;
              if (!ackUserWrite.revert) {
                  newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
              }
              else {
                  newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
              }
          }
          else if (operation.type === OperationType.LISTEN_COMPLETE) {
              newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);
          }
          else {
              throw index_cjs.assertionError('Unknown operation type: ' + operation.type);
          }
          var changes = accumulator.getChanges();
          ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);
          return new ProcessorResult(newViewCache, changes);
      };
      /**
       * @param {!ViewCache} oldViewCache
       * @param {!ViewCache} newViewCache
       * @param {!Array.<!Change>} accumulator
       * @private
       */
      ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {
          var eventSnap = newViewCache.getEventCache();
          if (eventSnap.isFullyInitialized()) {
              var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
              var oldCompleteSnap = oldViewCache.getCompleteEventSnap();
              if (accumulator.length > 0 ||
                  !oldViewCache.getEventCache().isFullyInitialized() ||
                  (isLeafOrEmpty &&
                      !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||
                  !eventSnap
                      .getNode()
                      .getPriority()
                      .equals(oldCompleteSnap.getPriority())) {
                  accumulator.push(Change.valueChange(
                  /** @type {!Node} */ newViewCache.getCompleteEventSnap()));
              }
          }
      };
      /**
       * @param {!ViewCache} viewCache
       * @param {!Path} changePath
       * @param {!WriteTreeRef} writesCache
       * @param {!CompleteChildSource} source
       * @param {!ChildChangeAccumulator} accumulator
       * @return {!ViewCache}
       * @private
       */
      ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {
          var oldEventSnap = viewCache.getEventCache();
          if (writesCache.shadowingWrite(changePath) != null) {
              // we have a shadowing write, ignore changes
              return viewCache;
          }
          else {
              var newEventCache = void 0, serverNode = void 0;
              if (changePath.isEmpty()) {
                  // TODO: figure out how this plays with "sliding ack windows"
                  index_cjs.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');
                  if (viewCache.getServerCache().isFiltered()) {
                      // We need to special case this, because we need to only apply writes to complete children, or
                      // we might end up raising events for incomplete children. If the server data is filtered deep
                      // writes cannot be guaranteed to be complete
                      var serverCache = viewCache.getCompleteServerSnap();
                      var completeChildren = serverCache instanceof ChildrenNode
                          ? serverCache
                          : ChildrenNode.EMPTY_NODE;
                      var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);
                      newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);
                  }
                  else {
                      var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                      newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);
                  }
              }
              else {
                  var childKey = changePath.getFront();
                  if (childKey == '.priority') {
                      index_cjs.assert(changePath.getLength() == 1, "Can't have a priority with additional path components");
                      var oldEventNode = oldEventSnap.getNode();
                      serverNode = viewCache.getServerCache().getNode();
                      // we might have overwrites for this priority
                      var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);
                      if (updatedPriority != null) {
                          newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);
                      }
                      else {
                          // priority didn't change, keep old node
                          newEventCache = oldEventSnap.getNode();
                      }
                  }
                  else {
                      var childChangePath = changePath.popFront();
                      // update child
                      var newEventChild = void 0;
                      if (oldEventSnap.isCompleteForChild(childKey)) {
                          serverNode = viewCache.getServerCache().getNode();
                          var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);
                          if (eventChildUpdate != null) {
                              newEventChild = oldEventSnap
                                  .getNode()
                                  .getImmediateChild(childKey)
                                  .updateChild(childChangePath, eventChildUpdate);
                          }
                          else {
                              // Nothing changed, just keep the old child
                              newEventChild = oldEventSnap
                                  .getNode()
                                  .getImmediateChild(childKey);
                          }
                      }
                      else {
                          newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
                      }
                      if (newEventChild != null) {
                          newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
                      }
                      else {
                          // no complete child available or no change
                          newEventCache = oldEventSnap.getNode();
                      }
                  }
              }
              return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());
          }
      };
      /**
       * @param {!ViewCache} oldViewCache
       * @param {!Path} changePath
       * @param {!Node} changedSnap
       * @param {!WriteTreeRef} writesCache
       * @param {?Node} completeCache
       * @param {boolean} filterServerNode
       * @param {!ChildChangeAccumulator} accumulator
       * @return {!ViewCache}
       * @private
       */
      ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
          var oldServerSnap = oldViewCache.getServerCache();
          var newServerCache;
          var serverFilter = filterServerNode
              ? this.filter_
              : this.filter_.getIndexedFilter();
          if (changePath.isEmpty()) {
              newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
          }
          else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
              // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
              var newServerNode = oldServerSnap
                  .getNode()
                  .updateChild(changePath, changedSnap);
              newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
          }
          else {
              var childKey = changePath.getFront();
              if (!oldServerSnap.isCompleteForPath(changePath) &&
                  changePath.getLength() > 1) {
                  // We don't update incomplete nodes with updates intended for other listeners
                  return oldViewCache;
              }
              var childChangePath = changePath.popFront();
              var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
              var newChildNode = childNode.updateChild(childChangePath, changedSnap);
              if (childKey == '.priority') {
                  newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
              }
              else {
                  newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
              }
          }
          var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());
          var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
          return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);
      };
      /**
       * @param {!ViewCache} oldViewCache
       * @param {!Path} changePath
       * @param {!Node} changedSnap
       * @param {!WriteTreeRef} writesCache
       * @param {?Node} completeCache
       * @param {!ChildChangeAccumulator} accumulator
       * @return {!ViewCache}
       * @private
       */
      ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
          var oldEventSnap = oldViewCache.getEventCache();
          var newViewCache, newEventCache;
          var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
          if (changePath.isEmpty()) {
              newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);
              newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());
          }
          else {
              var childKey = changePath.getFront();
              if (childKey === '.priority') {
                  newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);
                  newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
              }
              else {
                  var childChangePath = changePath.popFront();
                  var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
                  var newChild = void 0;
                  if (childChangePath.isEmpty()) {
                      // Child overwrite, we can replace the child
                      newChild = changedSnap;
                  }
                  else {
                      var childNode = source.getCompleteChild(childKey);
                      if (childNode != null) {
                          if (childChangePath.getBack() === '.priority' &&
                              childNode.getChild(childChangePath.parent()).isEmpty()) {
                              // This is a priority update on an empty node. If this node exists on the server, the
                              // server will send down the priority in the update, so ignore for now
                              newChild = childNode;
                          }
                          else {
                              newChild = childNode.updateChild(childChangePath, changedSnap);
                          }
                      }
                      else {
                          // There is no complete child node available
                          newChild = ChildrenNode.EMPTY_NODE;
                      }
                  }
                  if (!oldChild.equals(newChild)) {
                      var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
                      newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());
                  }
                  else {
                      newViewCache = oldViewCache;
                  }
              }
          }
          return newViewCache;
      };
      /**
       * @param {!ViewCache} viewCache
       * @param {string} childKey
       * @return {boolean}
       * @private
       */
      ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {
          return viewCache.getEventCache().isCompleteForChild(childKey);
      };
      /**
       * @param {!ViewCache} viewCache
       * @param {!Path} path
       * @param {ImmutableTree.<!Node>} changedChildren
       * @param {!WriteTreeRef} writesCache
       * @param {?Node} serverCache
       * @param {!ChildChangeAccumulator} accumulator
       * @return {!ViewCache}
       * @private
       */
      ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
          var _this = this;
          // HACK: In the case of a limit query, there may be some changes that bump things out of the
          // window leaving room for new items.  It's important we process these changes first, so we
          // iterate the changes twice, first processing any that affect items currently in view.
          // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
          // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
          // not the other.
          var curViewCache = viewCache;
          changedChildren.foreach(function (relativePath, childNode) {
              var writePath = path.child(relativePath);
              if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
                  curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
              }
          });
          changedChildren.foreach(function (relativePath, childNode) {
              var writePath = path.child(relativePath);
              if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
                  curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
              }
          });
          return curViewCache;
      };
      /**
       * @param {!Node} node
       * @param {ImmutableTree.<!Node>} merge
       * @return {!Node}
       * @private
       */
      ViewProcessor.prototype.applyMerge_ = function (node, merge) {
          merge.foreach(function (relativePath, childNode) {
              node = node.updateChild(relativePath, childNode);
          });
          return node;
      };
      /**
       * @param {!ViewCache} viewCache
       * @param {!Path} path
       * @param {!ImmutableTree.<!Node>} changedChildren
       * @param {!WriteTreeRef} writesCache
       * @param {?Node} serverCache
       * @param {boolean} filterServerNode
       * @param {!ChildChangeAccumulator} accumulator
       * @return {!ViewCache}
       * @private
       */
      ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
          var _this = this;
          // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
          // wait for the complete data update coming soon.
          if (viewCache
              .getServerCache()
              .getNode()
              .isEmpty() &&
              !viewCache.getServerCache().isFullyInitialized()) {
              return viewCache;
          }
          // HACK: In the case of a limit query, there may be some changes that bump things out of the
          // window leaving room for new items.  It's important we process these changes first, so we
          // iterate the changes twice, first processing any that affect items currently in view.
          // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
          // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
          // not the other.
          var curViewCache = viewCache;
          var viewMergeTree;
          if (path.isEmpty()) {
              viewMergeTree = changedChildren;
          }
          else {
              viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);
          }
          var serverNode = viewCache.getServerCache().getNode();
          viewMergeTree.children.inorderTraversal(function (childKey, childTree) {
              if (serverNode.hasChild(childKey)) {
                  var serverChild = viewCache
                      .getServerCache()
                      .getNode()
                      .getImmediateChild(childKey);
                  var newChild = _this.applyMerge_(serverChild, childTree);
                  curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
              }
          });
          viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {
              var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&
                  childMergeTree.value == null;
              if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
                  var serverChild = viewCache
                      .getServerCache()
                      .getNode()
                      .getImmediateChild(childKey);
                  var newChild = _this.applyMerge_(serverChild, childMergeTree);
                  curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
              }
          });
          return curViewCache;
      };
      /**
       * @param {!ViewCache} viewCache
       * @param {!Path} ackPath
       * @param {!ImmutableTree<!boolean>} affectedTree
       * @param {!WriteTreeRef} writesCache
       * @param {?Node} completeCache
       * @param {!ChildChangeAccumulator} accumulator
       * @return {!ViewCache}
       * @private
       */
      ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
          if (writesCache.shadowingWrite(ackPath) != null) {
              return viewCache;
          }
          // Only filter server node if it is currently filtered
          var filterServerNode = viewCache.getServerCache().isFiltered();
          // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
          // now that it won't be shadowed.
          var serverCache = viewCache.getServerCache();
          if (affectedTree.value != null) {
              // This is an overwrite.
              if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||
                  serverCache.isCompleteForPath(ackPath)) {
                  return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
              }
              else if (ackPath.isEmpty()) {
                  // This is a goofy edge case where we are acking data at this location but don't have full data.  We
                  // should just re-apply whatever we have in our cache as a merge.
                  var changedChildren_1 = ImmutableTree.Empty;
                  serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {
                      changedChildren_1 = changedChildren_1.set(new Path(name), node);
                  });
                  return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
              }
              else {
                  return viewCache;
              }
          }
          else {
              // This is a merge.
              var changedChildren_2 = ImmutableTree.Empty;
              affectedTree.foreach(function (mergePath, value) {
                  var serverCachePath = ackPath.child(mergePath);
                  if (serverCache.isCompleteForPath(serverCachePath)) {
                      changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
                  }
              });
              return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
          }
      };
      /**
       * @param {!ViewCache} viewCache
       * @param {!Path} path
       * @param {!WriteTreeRef} writesCache
       * @param {!ChildChangeAccumulator} accumulator
       * @return {!ViewCache}
       * @private
       */
      ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {
          var oldServerNode = viewCache.getServerCache();
          var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());
          return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
      };
      /**
       * @param {!ViewCache} viewCache
       * @param {!Path} path
       * @param {!WriteTreeRef} writesCache
       * @param {?Node} completeServerCache
       * @param {!ChildChangeAccumulator} accumulator
       * @return {!ViewCache}
       * @private
       */
      ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {
          var complete;
          if (writesCache.shadowingWrite(path) != null) {
              return viewCache;
          }
          else {
              var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
              var oldEventCache = viewCache.getEventCache().getNode();
              var newEventCache = void 0;
              if (path.isEmpty() || path.getFront() === '.priority') {
                  var newNode = void 0;
                  if (viewCache.getServerCache().isFullyInitialized()) {
                      newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                  }
                  else {
                      var serverChildren = viewCache.getServerCache().getNode();
                      index_cjs.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');
                      newNode = writesCache.calcCompleteEventChildren(serverChildren);
                  }
                  newNode = newNode;
                  newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);
              }
              else {
                  var childKey = path.getFront();
                  var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
                  if (newChild == null &&
                      viewCache.getServerCache().isCompleteForChild(childKey)) {
                      newChild = oldEventCache.getImmediateChild(childKey);
                  }
                  if (newChild != null) {
                      newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);
                  }
                  else if (viewCache
                      .getEventCache()
                      .getNode()
                      .hasChild(childKey)) {
                      // No complete child available, delete the existing one, if any
                      newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);
                  }
                  else {
                      newEventCache = oldEventCache;
                  }
                  if (newEventCache.isEmpty() &&
                      viewCache.getServerCache().isFullyInitialized()) {
                      // We might have reverted all child writes. Maybe the old event was a leaf node
                      complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                      if (complete.isLeafNode()) {
                          newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);
                      }
                  }
              }
              complete =
                  viewCache.getServerCache().isFullyInitialized() ||
                      writesCache.shadowingWrite(Path.Empty) != null;
              return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());
          }
      };
      return ViewProcessor;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An EventGenerator is used to convert "raw" changes (Change) as computed by the
   * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
   * for details.
   *
   * @constructor
   */
  var EventGenerator = /** @class */ (function () {
      /**
       *
       * @param {!Query} query_
       */
      function EventGenerator(query_) {
          this.query_ = query_;
          /**
           * @private
           * @type {!Index}
           */
          this.index_ = this.query_.getQueryParams().getIndex();
      }
      /**
       * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
       * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
       *
       * Notes:
       *  - child_moved events will be synthesized at this time for any child_changed events that affect
       *    our index.
       *  - prevName will be calculated based on the index ordering.
       *
       * @param {!Array.<!Change>} changes
       * @param {!Node} eventCache
       * @param {!Array.<!EventRegistration>} eventRegistrations
       * @return {!Array.<!Event>}
       */
      EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {
          var _this = this;
          var events = [];
          var moves = [];
          changes.forEach(function (change) {
              if (change.type === Change.CHILD_CHANGED &&
                  _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
                  moves.push(Change.childMovedChange(change.childName, change.snapshotNode));
              }
          });
          this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);
          this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);
          this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);
          this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);
          this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);
          return events;
      };
      /**
       * Given changes of a single change type, generate the corresponding events.
       *
       * @param {!Array.<!Event>} events
       * @param {!string} eventType
       * @param {!Array.<!Change>} changes
       * @param {!Array.<!EventRegistration>} registrations
       * @param {!Node} eventCache
       * @private
       */
      EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {
          var _this = this;
          var filteredChanges = changes.filter(function (change) { return change.type === eventType; });
          filteredChanges.sort(this.compareChanges_.bind(this));
          filteredChanges.forEach(function (change) {
              var materializedChange = _this.materializeSingleChange_(change, eventCache);
              registrations.forEach(function (registration) {
                  if (registration.respondsTo(change.type)) {
                      events.push(registration.createEvent(materializedChange, _this.query_));
                  }
              });
          });
      };
      /**
       * @param {!Change} change
       * @param {!Node} eventCache
       * @return {!Change}
       * @private
       */
      EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {
          if (change.type === 'value' || change.type === 'child_removed') {
              return change;
          }
          else {
              change.prevName = eventCache.getPredecessorChildName(
              /** @type {!string} */
              change.childName, change.snapshotNode, this.index_);
              return change;
          }
      };
      /**
       * @param {!Change} a
       * @param {!Change} b
       * @return {number}
       * @private
       */
      EventGenerator.prototype.compareChanges_ = function (a, b) {
          if (a.childName == null || b.childName == null) {
              throw index_cjs.assertionError('Should only compare child_ events.');
          }
          var aWrapped = new NamedNode(a.childName, a.snapshotNode);
          var bWrapped = new NamedNode(b.childName, b.snapshotNode);
          return this.index_.compare(aWrapped, bWrapped);
      };
      return EventGenerator;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A view represents a specific location and query that has 1 or more event registrations.
   *
   * It does several things:
   *  - Maintains the list of event registrations for this location/query.
   *  - Maintains a cache of the data visible for this location/query.
   *  - Applies new operations (via applyOperation), updates the cache, and based on the event
   *    registrations returns the set of events to be raised.
   * @constructor
   */
  var View = /** @class */ (function () {
      /**
       *
       * @param {!Query} query_
       * @param {!ViewCache} initialViewCache
       */
      function View(query_, initialViewCache) {
          this.query_ = query_;
          this.eventRegistrations_ = [];
          var params = this.query_.getQueryParams();
          var indexFilter = new IndexedFilter(params.getIndex());
          var filter = params.getNodeFilter();
          /**
           * @type {ViewProcessor}
           * @private
           */
          this.processor_ = new ViewProcessor(filter);
          var initialServerCache = initialViewCache.getServerCache();
          var initialEventCache = initialViewCache.getEventCache();
          // Don't filter server node with other filter than index, wait for tagged listen
          var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
          var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
          var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
          var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
          /**
           * @type {!ViewCache}
           * @private
           */
          this.viewCache_ = new ViewCache(newEventCache, newServerCache);
          /**
           * @type {!EventGenerator}
           * @private
           */
          this.eventGenerator_ = new EventGenerator(this.query_);
      }
      /**
       * @return {!Query}
       */
      View.prototype.getQuery = function () {
          return this.query_;
      };
      /**
       * @return {?Node}
       */
      View.prototype.getServerCache = function () {
          return this.viewCache_.getServerCache().getNode();
      };
      /**
       * @param {!Path} path
       * @return {?Node}
       */
      View.prototype.getCompleteServerCache = function (path) {
          var cache = this.viewCache_.getCompleteServerSnap();
          if (cache) {
              // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
              // we need to see if it contains the child we're interested in.
              if (this.query_.getQueryParams().loadsAllData() ||
                  (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {
                  return cache.getChild(path);
              }
          }
          return null;
      };
      /**
       * @return {boolean}
       */
      View.prototype.isEmpty = function () {
          return this.eventRegistrations_.length === 0;
      };
      /**
       * @param {!EventRegistration} eventRegistration
       */
      View.prototype.addEventRegistration = function (eventRegistration) {
          this.eventRegistrations_.push(eventRegistration);
      };
      /**
       * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
       * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
       * @return {!Array.<!Event>} Cancel events, if cancelError was provided.
       */
      View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {
          var cancelEvents = [];
          if (cancelError) {
              index_cjs.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');
              var path_1 = this.query_.path;
              this.eventRegistrations_.forEach(function (registration) {
                  cancelError /** @type {!Error} */ = cancelError;
                  var maybeEvent = registration.createCancelEvent(cancelError, path_1);
                  if (maybeEvent) {
                      cancelEvents.push(maybeEvent);
                  }
              });
          }
          if (eventRegistration) {
              var remaining = [];
              for (var i = 0; i < this.eventRegistrations_.length; ++i) {
                  var existing = this.eventRegistrations_[i];
                  if (!existing.matches(eventRegistration)) {
                      remaining.push(existing);
                  }
                  else if (eventRegistration.hasAnyCallback()) {
                      // We're removing just this one
                      remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));
                      break;
                  }
              }
              this.eventRegistrations_ = remaining;
          }
          else {
              this.eventRegistrations_ = [];
          }
          return cancelEvents;
      };
      /**
       * Applies the given Operation, updates our cache, and returns the appropriate events.
       *
       * @param {!Operation} operation
       * @param {!WriteTreeRef} writesCache
       * @param {?Node} completeServerCache
       * @return {!Array.<!Event>}
       */
      View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {
          if (operation.type === OperationType.MERGE &&
              operation.source.queryId !== null) {
              index_cjs.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');
              index_cjs.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');
          }
          var oldViewCache = this.viewCache_;
          var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);
          this.processor_.assertIndexed(result.viewCache);
          index_cjs.assert(result.viewCache.getServerCache().isFullyInitialized() ||
              !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');
          this.viewCache_ = result.viewCache;
          return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);
      };
      /**
       * @param {!EventRegistration} registration
       * @return {!Array.<!Event>}
       */
      View.prototype.getInitialEvents = function (registration) {
          var eventSnap = this.viewCache_.getEventCache();
          var initialChanges = [];
          if (!eventSnap.getNode().isLeafNode()) {
              var eventNode = eventSnap.getNode();
              eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {
                  initialChanges.push(Change.childAddedChange(key, childNode));
              });
          }
          if (eventSnap.isFullyInitialized()) {
              initialChanges.push(Change.valueChange(eventSnap.getNode()));
          }
          return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);
      };
      /**
       * @private
       * @param {!Array.<!Change>} changes
       * @param {!Node} eventCache
       * @param {EventRegistration=} eventRegistration
       * @return {!Array.<!Event>}
       */
      View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {
          var registrations = eventRegistration
              ? [eventRegistration]
              : this.eventRegistrations_;
          return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);
      };
      return View;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var __referenceConstructor$1;
  /**
   * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
   * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
   * and user writes (set, transaction, update).
   *
   * It's responsible for:
   *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
   *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
   *    applyUserOverwrite, etc.)
   */
  var SyncPoint = /** @class */ (function () {
      function SyncPoint() {
          /**
           * The Views being tracked at this location in the tree, stored as a map where the key is a
           * queryId and the value is the View for that query.
           *
           * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
           */
          this.views = new Map();
      }
      Object.defineProperty(SyncPoint, "__referenceConstructor", {
          get: function () {
              index_cjs.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');
              return __referenceConstructor$1;
          },
          set: function (val) {
              index_cjs.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');
              __referenceConstructor$1 = val;
          },
          enumerable: true,
          configurable: true
      });
      SyncPoint.prototype.isEmpty = function () {
          return this.views.size === 0;
      };
      SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {
          var e_1, _a;
          var queryId = operation.source.queryId;
          if (queryId !== null) {
              var view = this.views.get(queryId);
              index_cjs.assert(view != null, 'SyncTree gave us an op for an invalid query.');
              return view.applyOperation(operation, writesCache, optCompleteServerCache);
          }
          else {
              var events = [];
              try {
                  for (var _b = tslib_es6.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                      var view = _c.value;
                      events = events.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));
                  }
              }
              catch (e_1_1) { e_1 = { error: e_1_1 }; }
              finally {
                  try {
                      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                  }
                  finally { if (e_1) throw e_1.error; }
              }
              return events;
          }
      };
      /**
       * Add an event callback for the specified query.
       *
       * @param {!Query} query
       * @param {!EventRegistration} eventRegistration
       * @param {!WriteTreeRef} writesCache
       * @param {?Node} serverCache Complete server cache, if we have it.
       * @param {boolean} serverCacheComplete
       * @return {!Array.<!Event>} Events to raise.
       */
      SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
          var queryId = query.queryIdentifier();
          var view = this.views.get(queryId);
          if (!view) {
              // TODO: make writesCache take flag for complete server node
              var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);
              var eventCacheComplete = false;
              if (eventCache) {
                  eventCacheComplete = true;
              }
              else if (serverCache instanceof ChildrenNode) {
                  eventCache = writesCache.calcCompleteEventChildren(serverCache);
                  eventCacheComplete = false;
              }
              else {
                  eventCache = ChildrenNode.EMPTY_NODE;
                  eventCacheComplete = false;
              }
              var viewCache = new ViewCache(new CacheNode(
              /** @type {!Node} */ eventCache, eventCacheComplete, false), new CacheNode(
              /** @type {!Node} */ serverCache, serverCacheComplete, false));
              view = new View(query, viewCache);
              this.views.set(queryId, view);
          }
          // This is guaranteed to exist now, we just created anything that was missing
          view.addEventRegistration(eventRegistration);
          return view.getInitialEvents(eventRegistration);
      };
      /**
       * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
       *
       * If query is the default query, we'll check all views for the specified eventRegistration.
       * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
       *
       * @param {!Query} query
       * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
       * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
       * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events
       */
      SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
          var e_2, _a;
          var queryId = query.queryIdentifier();
          var removed = [];
          var cancelEvents = [];
          var hadCompleteView = this.hasCompleteView();
          if (queryId === 'default') {
              try {
                  // When you do ref.off(...), we search all views for the registration to remove.
                  for (var _b = tslib_es6.__values(this.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                      var _d = tslib_es6.__read(_c.value, 2), viewQueryId = _d[0], view = _d[1];
                      cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
                      if (view.isEmpty()) {
                          this.views.delete(viewQueryId);
                          // We'll deal with complete views later.
                          if (!view
                              .getQuery()
                              .getQueryParams()
                              .loadsAllData()) {
                              removed.push(view.getQuery());
                          }
                      }
                  }
              }
              catch (e_2_1) { e_2 = { error: e_2_1 }; }
              finally {
                  try {
                      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                  }
                  finally { if (e_2) throw e_2.error; }
              }
          }
          else {
              // remove the callback from the specific view.
              var view = this.views.get(queryId);
              if (view) {
                  cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
                  if (view.isEmpty()) {
                      this.views.delete(queryId);
                      // We'll deal with complete views later.
                      if (!view
                          .getQuery()
                          .getQueryParams()
                          .loadsAllData()) {
                          removed.push(view.getQuery());
                      }
                  }
              }
          }
          if (hadCompleteView && !this.hasCompleteView()) {
              // We removed our last complete view.
              removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));
          }
          return { removed: removed, events: cancelEvents };
      };
      SyncPoint.prototype.getQueryViews = function () {
          var e_3, _a;
          var result = [];
          try {
              for (var _b = tslib_es6.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var view = _c.value;
                  if (!view
                      .getQuery()
                      .getQueryParams()
                      .loadsAllData()) {
                      result.push(view);
                  }
              }
          }
          catch (e_3_1) { e_3 = { error: e_3_1 }; }
          finally {
              try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              }
              finally { if (e_3) throw e_3.error; }
          }
          return result;
      };
      /**
       * @param path The path to the desired complete snapshot
       * @return A complete cache, if it exists
       */
      SyncPoint.prototype.getCompleteServerCache = function (path) {
          var e_4, _a;
          var serverCache = null;
          try {
              for (var _b = tslib_es6.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var view = _c.value;
                  serverCache = serverCache || view.getCompleteServerCache(path);
              }
          }
          catch (e_4_1) { e_4 = { error: e_4_1 }; }
          finally {
              try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              }
              finally { if (e_4) throw e_4.error; }
          }
          return serverCache;
      };
      SyncPoint.prototype.viewForQuery = function (query) {
          var params = query.getQueryParams();
          if (params.loadsAllData()) {
              return this.getCompleteView();
          }
          else {
              var queryId = query.queryIdentifier();
              return this.views.get(queryId);
          }
      };
      SyncPoint.prototype.viewExistsForQuery = function (query) {
          return this.viewForQuery(query) != null;
      };
      SyncPoint.prototype.hasCompleteView = function () {
          return this.getCompleteView() != null;
      };
      SyncPoint.prototype.getCompleteView = function () {
          var e_5, _a;
          try {
              for (var _b = tslib_es6.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var view = _c.value;
                  if (view
                      .getQuery()
                      .getQueryParams()
                      .loadsAllData()) {
                      return view;
                  }
              }
          }
          catch (e_5_1) { e_5 = { error: e_5_1 }; }
          finally {
              try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              }
              finally { if (e_5) throw e_5.error; }
          }
          return null;
      };
      return SyncPoint;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
   * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
   * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
   * to reflect the write added.
   */
  var CompoundWrite = /** @class */ (function () {
      function CompoundWrite(writeTree_) {
          this.writeTree_ = writeTree_;
      }
      CompoundWrite.prototype.addWrite = function (path, node) {
          if (path.isEmpty()) {
              return new CompoundWrite(new ImmutableTree(node));
          }
          else {
              var rootmost = this.writeTree_.findRootMostValueAndPath(path);
              if (rootmost != null) {
                  var rootMostPath = rootmost.path;
                  var value = rootmost.value;
                  var relativePath = Path.relativePath(rootMostPath, path);
                  value = value.updateChild(relativePath, node);
                  return new CompoundWrite(this.writeTree_.set(rootMostPath, value));
              }
              else {
                  var subtree = new ImmutableTree(node);
                  var newWriteTree = this.writeTree_.setTree(path, subtree);
                  return new CompoundWrite(newWriteTree);
              }
          }
      };
      CompoundWrite.prototype.addWrites = function (path, updates) {
          var newWrite = this;
          each(updates, function (childKey, node) {
              newWrite = newWrite.addWrite(path.child(childKey), node);
          });
          return newWrite;
      };
      /**
       * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
       * location, which must be removed by calling this method with that path.
       *
       * @param path The path at which a write and all deeper writes should be removed
       * @return {!CompoundWrite} The new CompoundWrite with the removed path
       */
      CompoundWrite.prototype.removeWrite = function (path) {
          if (path.isEmpty()) {
              return CompoundWrite.Empty;
          }
          else {
              var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);
              return new CompoundWrite(newWriteTree);
          }
      };
      /**
       * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
       * considered "complete".
       *
       * @param path The path to check for
       * @return Whether there is a complete write at that path
       */
      CompoundWrite.prototype.hasCompleteWrite = function (path) {
          return this.getCompleteNode(path) != null;
      };
      /**
       * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
       * writes from deeper paths, but will return child nodes from a more shallow path.
       *
       * @param path The path to get a complete write
       * @return The node if complete at that path, or null otherwise.
       */
      CompoundWrite.prototype.getCompleteNode = function (path) {
          var rootmost = this.writeTree_.findRootMostValueAndPath(path);
          if (rootmost != null) {
              return this.writeTree_
                  .get(rootmost.path)
                  .getChild(Path.relativePath(rootmost.path, path));
          }
          else {
              return null;
          }
      };
      /**
       * Returns all children that are guaranteed to be a complete overwrite.
       *
       * @return A list of all complete children.
       */
      CompoundWrite.prototype.getCompleteChildren = function () {
          var children = [];
          var node = this.writeTree_.value;
          if (node != null) {
              // If it's a leaf node, it has no children; so nothing to do.
              if (!node.isLeafNode()) {
                  node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
                      children.push(new NamedNode(childName, childNode));
                  });
              }
          }
          else {
              this.writeTree_.children.inorderTraversal(function (childName, childTree) {
                  if (childTree.value != null) {
                      children.push(new NamedNode(childName, childTree.value));
                  }
              });
          }
          return children;
      };
      CompoundWrite.prototype.childCompoundWrite = function (path) {
          if (path.isEmpty()) {
              return this;
          }
          else {
              var shadowingNode = this.getCompleteNode(path);
              if (shadowingNode != null) {
                  return new CompoundWrite(new ImmutableTree(shadowingNode));
              }
              else {
                  return new CompoundWrite(this.writeTree_.subtree(path));
              }
          }
      };
      /**
       * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
       * @return Whether this CompoundWrite is empty
       */
      CompoundWrite.prototype.isEmpty = function () {
          return this.writeTree_.isEmpty();
      };
      /**
       * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
       * node
       * @param node The node to apply this CompoundWrite to
       * @return The node with all writes applied
       */
      CompoundWrite.prototype.apply = function (node) {
          return applySubtreeWrite(Path.Empty, this.writeTree_, node);
      };
      CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));
      return CompoundWrite;
  }());
  function applySubtreeWrite(relativePath, writeTree, node) {
      if (writeTree.value != null) {
          // Since there a write is always a leaf, we're done here
          return node.updateChild(relativePath, writeTree.value);
      }
      else {
          var priorityWrite_1 = null;
          writeTree.children.inorderTraversal(function (childKey, childTree) {
              if (childKey === '.priority') {
                  // Apply priorities at the end so we don't update priorities for either empty nodes or forget
                  // to apply priorities to empty nodes that are later filled
                  index_cjs.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');
                  priorityWrite_1 = childTree.value;
              }
              else {
                  node = applySubtreeWrite(relativePath.child(childKey), childTree, node);
              }
          });
          // If there was a priority write, we only apply it if the node is not empty
          if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {
              node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);
          }
          return node;
      }
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them
   * with underlying server data (to create "event cache" data).  Pending writes are added with addOverwrite()
   * and addMerge(), and removed with removeWrite().
   *
   * @constructor
   */
  var WriteTree = /** @class */ (function () {
      function WriteTree() {
          /**
           * A tree tracking the result of applying all visible writes.  This does not include transactions with
           * applyLocally=false or writes that are completely shadowed by other writes.
           *
           * @type {!CompoundWrite}
           * @private
           */
          this.visibleWrites_ = CompoundWrite.Empty;
          /**
           * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary
           * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also
           * used by transactions).
           *
           * @type {!Array.<!WriteRecord>}
           * @private
           */
          this.allWrites_ = [];
          this.lastWriteId_ = -1;
      }
      /**
       * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
       *
       * @param {!Path} path
       * @return {!WriteTreeRef}
       */
      WriteTree.prototype.childWrites = function (path) {
          return new WriteTreeRef(path, this);
      };
      /**
       * Record a new overwrite from user code.
       *
       * @param {!Path} path
       * @param {!Node} snap
       * @param {!number} writeId
       * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches
       */
      WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {
          index_cjs.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');
          if (visible === undefined) {
              visible = true;
          }
          this.allWrites_.push({
              path: path,
              snap: snap,
              writeId: writeId,
              visible: visible
          });
          if (visible) {
              this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);
          }
          this.lastWriteId_ = writeId;
      };
      /**
       * Record a new merge from user code.
       *
       * @param {!Path} path
       * @param {!Object.<string, !Node>} changedChildren
       * @param {!number} writeId
       */
      WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {
          index_cjs.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');
          this.allWrites_.push({
              path: path,
              children: changedChildren,
              writeId: writeId,
              visible: true
          });
          this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);
          this.lastWriteId_ = writeId;
      };
      /**
       * @param {!number} writeId
       * @return {?WriteRecord}
       */
      WriteTree.prototype.getWrite = function (writeId) {
          for (var i = 0; i < this.allWrites_.length; i++) {
              var record = this.allWrites_[i];
              if (record.writeId === writeId) {
                  return record;
              }
          }
          return null;
      };
      /**
       * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
       * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
       *
       * @param {!number} writeId
       * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise
       * events as a result).
       */
      WriteTree.prototype.removeWrite = function (writeId) {
          // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
          // out of order.
          //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
          //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
          var _this = this;
          var idx = this.allWrites_.findIndex(function (s) {
              return s.writeId === writeId;
          });
          index_cjs.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');
          var writeToRemove = this.allWrites_[idx];
          this.allWrites_.splice(idx, 1);
          var removedWriteWasVisible = writeToRemove.visible;
          var removedWriteOverlapsWithOtherWrites = false;
          var i = this.allWrites_.length - 1;
          while (removedWriteWasVisible && i >= 0) {
              var currentWrite = this.allWrites_[i];
              if (currentWrite.visible) {
                  if (i >= idx &&
                      this.recordContainsPath_(currentWrite, writeToRemove.path)) {
                      // The removed write was completely shadowed by a subsequent write.
                      removedWriteWasVisible = false;
                  }
                  else if (writeToRemove.path.contains(currentWrite.path)) {
                      // Either we're covering some writes or they're covering part of us (depending on which came first).
                      removedWriteOverlapsWithOtherWrites = true;
                  }
              }
              i--;
          }
          if (!removedWriteWasVisible) {
              return false;
          }
          else if (removedWriteOverlapsWithOtherWrites) {
              // There's some shadowing going on. Just rebuild the visible writes from scratch.
              this.resetTree_();
              return true;
          }
          else {
              // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
              if (writeToRemove.snap) {
                  this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);
              }
              else {
                  var children = writeToRemove.children;
                  each(children, function (childName) {
                      _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));
                  });
              }
              return true;
          }
      };
      /**
       * Return a complete snapshot for the given path if there's visible write data at that path, else null.
       * No server data is considered.
       *
       * @param {!Path} path
       * @return {?Node}
       */
      WriteTree.prototype.getCompleteWriteData = function (path) {
          return this.visibleWrites_.getCompleteNode(path);
      };
      /**
       * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
       * writes), attempt to calculate a complete snapshot for the given path
       *
       * @param {!Path} treePath
       * @param {?Node} completeServerCache
       * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded
       * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
       * @return {?Node}
       */
      WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
          if (!writeIdsToExclude && !includeHiddenWrites) {
              var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);
              if (shadowingNode != null) {
                  return shadowingNode;
              }
              else {
                  var subMerge = this.visibleWrites_.childCompoundWrite(treePath);
                  if (subMerge.isEmpty()) {
                      return completeServerCache;
                  }
                  else if (completeServerCache == null &&
                      !subMerge.hasCompleteWrite(Path.Empty)) {
                      // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
                      return null;
                  }
                  else {
                      var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                      return subMerge.apply(layeredCache);
                  }
              }
          }
          else {
              var merge = this.visibleWrites_.childCompoundWrite(treePath);
              if (!includeHiddenWrites && merge.isEmpty()) {
                  return completeServerCache;
              }
              else {
                  // If the server cache is null, and we don't have a complete cache, we need to return null
                  if (!includeHiddenWrites &&
                      completeServerCache == null &&
                      !merge.hasCompleteWrite(Path.Empty)) {
                      return null;
                  }
                  else {
                      var filter = function (write) {
                          return ((write.visible || includeHiddenWrites) &&
                              (!writeIdsToExclude ||
                                  !~writeIdsToExclude.indexOf(write.writeId)) &&
                              (write.path.contains(treePath) || treePath.contains(write.path)));
                      };
                      var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);
                      var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                      return mergeAtPath.apply(layeredCache);
                  }
              }
          }
      };
      /**
       * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
       * Used when creating new views, to pre-fill their complete event children snapshot.
       *
       * @param {!Path} treePath
       * @param {?ChildrenNode} completeServerChildren
       * @return {!ChildrenNode}
       */
      WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {
          var completeChildren = ChildrenNode.EMPTY_NODE;
          var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);
          if (topLevelSet) {
              if (!topLevelSet.isLeafNode()) {
                  // we're shadowing everything. Return the children.
                  topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {
                      completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
                  });
              }
              return completeChildren;
          }
          else if (completeServerChildren) {
              // Layer any children we have on top of this
              // We know we don't have a top-level set, so just enumerate existing children
              var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);
              completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
                  var node = merge_1
                      .childCompoundWrite(new Path(childName))
                      .apply(childNode);
                  completeChildren = completeChildren.updateImmediateChild(childName, node);
              });
              // Add any complete children we have from the set
              merge_1.getCompleteChildren().forEach(function (namedNode) {
                  completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
              });
              return completeChildren;
          }
          else {
              // We don't have anything to layer on top of. Layer on any children we have
              // Note that we can return an empty snap if we have a defined delete
              var merge = this.visibleWrites_.childCompoundWrite(treePath);
              merge.getCompleteChildren().forEach(function (namedNode) {
                  completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
              });
              return completeChildren;
          }
      };
      /**
       * Given that the underlying server data has updated, determine what, if anything, needs to be
       * applied to the event cache.
       *
       * Possibilities:
       *
       * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
       *
       * 2. Some write is completely shadowing. No events to be raised
       *
       * 3. Is partially shadowed. Events
       *
       * Either existingEventSnap or existingServerSnap must exist
       *
       * @param {!Path} treePath
       * @param {!Path} childPath
       * @param {?Node} existingEventSnap
       * @param {?Node} existingServerSnap
       * @return {?Node}
       */
      WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {
          index_cjs.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
          var path = treePath.child(childPath);
          if (this.visibleWrites_.hasCompleteWrite(path)) {
              // At this point we can probably guarantee that we're in case 2, meaning no events
              // May need to check visibility while doing the findRootMostValueAndPath call
              return null;
          }
          else {
              // No complete shadowing. We're either partially shadowing or not shadowing at all.
              var childMerge = this.visibleWrites_.childCompoundWrite(path);
              if (childMerge.isEmpty()) {
                  // We're not shadowing at all. Case 1
                  return existingServerSnap.getChild(childPath);
              }
              else {
                  // This could be more efficient if the serverNode + updates doesn't change the eventSnap
                  // However this is tricky to find out, since user updates don't necessary change the server
                  // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
                  // adds nodes, but doesn't change any existing writes. It is therefore not enough to
                  // only check if the updates change the serverNode.
                  // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
                  return childMerge.apply(existingServerSnap.getChild(childPath));
              }
          }
      };
      /**
       * Returns a complete child for a given server snap after applying all user writes or null if there is no
       * complete child for this ChildKey.
       *
       * @param {!Path} treePath
       * @param {!string} childKey
       * @param {!CacheNode} existingServerSnap
       * @return {?Node}
       */
      WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {
          var path = treePath.child(childKey);
          var shadowingNode = this.visibleWrites_.getCompleteNode(path);
          if (shadowingNode != null) {
              return shadowingNode;
          }
          else {
              if (existingServerSnap.isCompleteForChild(childKey)) {
                  var childMerge = this.visibleWrites_.childCompoundWrite(path);
                  return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));
              }
              else {
                  return null;
              }
          }
      };
      /**
       * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
       * a higher path, this will return the child of that write relative to the write and this path.
       * Returns null if there is no write at this path.
       */
      WriteTree.prototype.shadowingWrite = function (path) {
          return this.visibleWrites_.getCompleteNode(path);
      };
      /**
       * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
       * the window, but may now be in the window.
       */
      WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {
          var toIterate;
          var merge = this.visibleWrites_.childCompoundWrite(treePath);
          var shadowingNode = merge.getCompleteNode(Path.Empty);
          if (shadowingNode != null) {
              toIterate = shadowingNode;
          }
          else if (completeServerData != null) {
              toIterate = merge.apply(completeServerData);
          }
          else {
              // no children to iterate on
              return [];
          }
          toIterate = toIterate.withIndex(index);
          if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
              var nodes = [];
              var cmp = index.getCompare();
              var iter = reverse
                  ? toIterate.getReverseIteratorFrom(startPost, index)
                  : toIterate.getIteratorFrom(startPost, index);
              var next = iter.getNext();
              while (next && nodes.length < count) {
                  if (cmp(next, startPost) !== 0) {
                      nodes.push(next);
                  }
                  next = iter.getNext();
              }
              return nodes;
          }
          else {
              return [];
          }
      };
      WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {
          if (writeRecord.snap) {
              return writeRecord.path.contains(path);
          }
          else {
              for (var childName in writeRecord.children) {
                  if (writeRecord.children.hasOwnProperty(childName) &&
                      writeRecord.path.child(childName).contains(path)) {
                      return true;
                  }
              }
              return false;
          }
      };
      /**
       * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
       */
      WriteTree.prototype.resetTree_ = function () {
          this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);
          if (this.allWrites_.length > 0) {
              this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;
          }
          else {
              this.lastWriteId_ = -1;
          }
      };
      /**
       * The default filter used when constructing the tree. Keep everything that's visible.
       */
      WriteTree.DefaultFilter_ = function (write) {
          return write.visible;
      };
      /**
       * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
       * event data at that path.
       */
      WriteTree.layerTree_ = function (writes, filter, treeRoot) {
          var compoundWrite = CompoundWrite.Empty;
          for (var i = 0; i < writes.length; ++i) {
              var write = writes[i];
              // Theory, a later set will either:
              // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
              // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
              if (filter(write)) {
                  var writePath = write.path;
                  var relativePath = void 0;
                  if (write.snap) {
                      if (treeRoot.contains(writePath)) {
                          relativePath = Path.relativePath(treeRoot, writePath);
                          compoundWrite = compoundWrite.addWrite(relativePath, write.snap);
                      }
                      else if (writePath.contains(treeRoot)) {
                          relativePath = Path.relativePath(writePath, treeRoot);
                          compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));
                      }
                  }
                  else if (write.children) {
                      if (treeRoot.contains(writePath)) {
                          relativePath = Path.relativePath(treeRoot, writePath);
                          compoundWrite = compoundWrite.addWrites(relativePath, write.children);
                      }
                      else if (writePath.contains(treeRoot)) {
                          relativePath = Path.relativePath(writePath, treeRoot);
                          if (relativePath.isEmpty()) {
                              compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);
                          }
                          else {
                              var child = index_cjs.safeGet(write.children, relativePath.getFront());
                              if (child) {
                                  // There exists a child in this node that matches the root path
                                  var deepNode = child.getChild(relativePath.popFront());
                                  compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);
                              }
                          }
                      }
                  }
                  else {
                      throw index_cjs.assertionError('WriteRecord should have .snap or .children');
                  }
              }
          }
          return compoundWrite;
      };
      return WriteTree;
  }());
  /**
   * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods
   * just proxy to the underlying WriteTree.
   *
   * @constructor
   */
  var WriteTreeRef = /** @class */ (function () {
      /**
       * @param {!Path} path
       * @param {!WriteTree} writeTree
       */
      function WriteTreeRef(path, writeTree) {
          this.treePath_ = path;
          this.writeTree_ = writeTree;
      }
      /**
       * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
       * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
       * can lead to a more expensive calculation.
       *
       * @param {?Node} completeServerCache
       * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.
       * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
       * @return {?Node}
       */
      WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {
          return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);
      };
      /**
       * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
       * mix of the given server data and write data.
       *
       * @param {?ChildrenNode} completeServerChildren
       * @return {!ChildrenNode}
       */
      WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {
          return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);
      };
      /**
       * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
       * if anything, needs to be applied to the event cache.
       *
       * Possibilities:
       *
       * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
       *
       * 2. Some write is completely shadowing. No events to be raised
       *
       * 3. Is partially shadowed. Events should be raised
       *
       * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
       *
       * @param {!Path} path
       * @param {?Node} existingEventSnap
       * @param {?Node} existingServerSnap
       * @return {?Node}
       */
      WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {
          return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);
      };
      /**
       * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
       * a higher path, this will return the child of that write relative to the write and this path.
       * Returns null if there is no write at this path.
       *
       * @param {!Path} path
       * @return {?Node}
       */
      WriteTreeRef.prototype.shadowingWrite = function (path) {
          return this.writeTree_.shadowingWrite(this.treePath_.child(path));
      };
      /**
       * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
       * the window, but may now be in the window
       *
       * @param {?Node} completeServerData
       * @param {!NamedNode} startPost
       * @param {!number} count
       * @param {boolean} reverse
       * @param {!Index} index
       * @return {!Array.<!NamedNode>}
       */
      WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {
          return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);
      };
      /**
       * Returns a complete child for a given server snap after applying all user writes or null if there is no
       * complete child for this ChildKey.
       *
       * @param {!string} childKey
       * @param {!CacheNode} existingServerCache
       * @return {?Node}
       */
      WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {
          return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);
      };
      /**
       * Return a WriteTreeRef for a child.
       *
       * @param {string} childName
       * @return {!WriteTreeRef}
       */
      WriteTreeRef.prototype.child = function (childName) {
          return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);
      };
      return WriteTreeRef;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * SyncTree is the central class for managing event callback registration, data caching, views
   * (query processing), and event generation.  There are typically two SyncTree instances for
   * each Repo, one for the normal Firebase data, and one for the .info data.
   *
   * It has a number of responsibilities, including:
   *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
   *  - Applying and caching data changes for user set(), transaction(), and update() calls
   *    (applyUserOverwrite(), applyUserMerge()).
   *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
   *    applyServerMerge()).
   *  - Generating user-facing events for server and user changes (all of the apply* methods
   *    return the set of events that need to be raised as a result).
   *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
   *    to the correct set of paths and queries to satisfy the current set of user event
   *    callbacks (listens are started/stopped using the provided listenProvider).
   *
   * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
   * events are returned to the caller rather than raised synchronously.
   *
   * @constructor
   */
  var SyncTree = /** @class */ (function () {
      /**
       * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening
       *   to server data.
       */
      function SyncTree(listenProvider_) {
          this.listenProvider_ = listenProvider_;
          /**
           * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
           */
          this.syncPointTree_ = ImmutableTree.Empty;
          /**
           * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
           */
          this.pendingWriteTree_ = new WriteTree();
          this.tagToQueryMap = new Map();
          this.queryToTagMap = new Map();
      }
      /**
       * Apply the data changes for a user-generated set() or transaction() call.
       *
       * @return Events to raise.
       */
      SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {
          // Record pending write.
          this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);
          if (!visible) {
              return [];
          }
          else {
              return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));
          }
      };
      /**
       * Apply the data from a user-generated update() call
       *
       * @return Events to raise.
       */
      SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {
          // Record pending merge.
          this.pendingWriteTree_.addMerge(path, changedChildren, writeId);
          var changeTree = ImmutableTree.fromObject(changedChildren);
          return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));
      };
      /**
       * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
       *
       * @param revert True if the given write failed and needs to be reverted
       * @return Events to raise.
       */
      SyncTree.prototype.ackUserWrite = function (writeId, revert) {
          if (revert === void 0) { revert = false; }
          var write = this.pendingWriteTree_.getWrite(writeId);
          var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);
          if (!needToReevaluate) {
              return [];
          }
          else {
              var affectedTree_1 = ImmutableTree.Empty;
              if (write.snap != null) {
                  // overwrite
                  affectedTree_1 = affectedTree_1.set(Path.Empty, true);
              }
              else {
                  each(write.children, function (pathString, node) {
                      affectedTree_1 = affectedTree_1.set(new Path(pathString), node);
                  });
              }
              return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));
          }
      };
      /**
       * Apply new server data for the specified path..
       *
       * @return Events to raise.
       */
      SyncTree.prototype.applyServerOverwrite = function (path, newData) {
          return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));
      };
      /**
       * Apply new server data to be merged in at the specified path.
       *
       * @return Events to raise.
       */
      SyncTree.prototype.applyServerMerge = function (path, changedChildren) {
          var changeTree = ImmutableTree.fromObject(changedChildren);
          return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));
      };
      /**
       * Apply a listen complete for a query
       *
       * @return Events to raise.
       */
      SyncTree.prototype.applyListenComplete = function (path) {
          return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));
      };
      /**
       * Apply new server data for the specified tagged query.
       *
       * @return Events to raise.
       */
      SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {
          var queryKey = this.queryKeyForTag_(tag);
          if (queryKey != null) {
              var r = SyncTree.parseQueryKey_(queryKey);
              var queryPath = r.path, queryId = r.queryId;
              var relativePath = Path.relativePath(queryPath, path);
              var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);
              return this.applyTaggedOperation_(queryPath, op);
          }
          else {
              // Query must have been removed already
              return [];
          }
      };
      /**
       * Apply server data to be merged in for the specified tagged query.
       *
       * @return Events to raise.
       */
      SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {
          var queryKey = this.queryKeyForTag_(tag);
          if (queryKey) {
              var r = SyncTree.parseQueryKey_(queryKey);
              var queryPath = r.path, queryId = r.queryId;
              var relativePath = Path.relativePath(queryPath, path);
              var changeTree = ImmutableTree.fromObject(changedChildren);
              var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);
              return this.applyTaggedOperation_(queryPath, op);
          }
          else {
              // We've already removed the query. No big deal, ignore the update
              return [];
          }
      };
      /**
       * Apply a listen complete for a tagged query
       *
       * @return Events to raise.
       */
      SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {
          var queryKey = this.queryKeyForTag_(tag);
          if (queryKey) {
              var r = SyncTree.parseQueryKey_(queryKey);
              var queryPath = r.path, queryId = r.queryId;
              var relativePath = Path.relativePath(queryPath, path);
              var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);
              return this.applyTaggedOperation_(queryPath, op);
          }
          else {
              // We've already removed the query. No big deal, ignore the update
              return [];
          }
      };
      /**
       * Add an event callback for the specified query.
       *
       * @return Events to raise.
       */
      SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {
          var path = query.path;
          var serverCache = null;
          var foundAncestorDefaultView = false;
          // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
          // Consider optimizing this once there's a better understanding of what actual behavior will be.
          this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {
              var relativePath = Path.relativePath(pathToSyncPoint, path);
              serverCache = serverCache || sp.getCompleteServerCache(relativePath);
              foundAncestorDefaultView =
                  foundAncestorDefaultView || sp.hasCompleteView();
          });
          var syncPoint = this.syncPointTree_.get(path);
          if (!syncPoint) {
              syncPoint = new SyncPoint();
              this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);
          }
          else {
              foundAncestorDefaultView =
                  foundAncestorDefaultView || syncPoint.hasCompleteView();
              serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);
          }
          var serverCacheComplete;
          if (serverCache != null) {
              serverCacheComplete = true;
          }
          else {
              serverCacheComplete = false;
              serverCache = ChildrenNode.EMPTY_NODE;
              var subtree = this.syncPointTree_.subtree(path);
              subtree.foreachChild(function (childName, childSyncPoint) {
                  var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);
                  if (completeCache) {
                      serverCache = serverCache.updateImmediateChild(childName, completeCache);
                  }
              });
          }
          var viewAlreadyExists = syncPoint.viewExistsForQuery(query);
          if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {
              // We need to track a tag for this query
              var queryKey = SyncTree.makeQueryKey_(query);
              index_cjs.assert(!this.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');
              var tag = SyncTree.getNextQueryTag_();
              this.queryToTagMap.set(queryKey, tag);
              this.tagToQueryMap.set(tag, queryKey);
          }
          var writesCache = this.pendingWriteTree_.childWrites(path);
          var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);
          if (!viewAlreadyExists && !foundAncestorDefaultView) {
              var view /** @type !View */ = syncPoint.viewForQuery(query);
              events = events.concat(this.setupListener_(query, view));
          }
          return events;
      };
      /**
       * Remove event callback(s).
       *
       * If query is the default query, we'll check all queries for the specified eventRegistration.
       * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
       *
       * @param eventRegistration If null, all callbacks are removed.
       * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.
       * @return Cancel events, if cancelError was provided.
       */
      SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
          var _this = this;
          // Find the syncPoint first. Then deal with whether or not it has matching listeners
          var path = query.path;
          var maybeSyncPoint = this.syncPointTree_.get(path);
          var cancelEvents = [];
          // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
          // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
          // not loadsAllData().
          if (maybeSyncPoint &&
              (query.queryIdentifier() === 'default' ||
                  maybeSyncPoint.viewExistsForQuery(query))) {
              /**
               * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}
               */
              var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);
              if (maybeSyncPoint.isEmpty()) {
                  this.syncPointTree_ = this.syncPointTree_.remove(path);
              }
              var removed = removedAndEvents.removed;
              cancelEvents = removedAndEvents.events;
              // We may have just removed one of many listeners and can short-circuit this whole process
              // We may also not have removed a default listener, in which case all of the descendant listeners should already be
              // properly set up.
              //
              // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
              // queryId === 'default'
              var removingDefault = -1 !==
                  removed.findIndex(function (query) {
                      return query.getQueryParams().loadsAllData();
                  });
              var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {
                  return parentSyncPoint.hasCompleteView();
              });
              if (removingDefault && !covered) {
                  var subtree = this.syncPointTree_.subtree(path);
                  // There are potentially child listeners. Determine what if any listens we need to send before executing the
                  // removal
                  if (!subtree.isEmpty()) {
                      // We need to fold over our subtree and collect the listeners to send
                      var newViews = this.collectDistinctViewsForSubTree_(subtree);
                      // Ok, we've collected all the listens we need. Set them up.
                      for (var i = 0; i < newViews.length; ++i) {
                          var view = newViews[i], newQuery = view.getQuery();
                          var listener = this.createListenerForView_(view);
                          this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);
                      }
                  }
              }
              // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
              // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
              // Also, note that if we have a cancelError, it's already been removed at the provider level.
              if (!covered && removed.length > 0 && !cancelError) {
                  // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
                  // default. Otherwise, we need to iterate through and cancel each individual query
                  if (removingDefault) {
                      // We don't tag default listeners
                      var defaultTag = null;
                      this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);
                  }
                  else {
                      removed.forEach(function (queryToRemove) {
                          var tagToRemove = _this.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));
                          _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);
                      });
                  }
              }
              // Now, clear all of the tags we're tracking for the removed listens
              this.removeTags_(removed);
          }
          return cancelEvents;
      };
      /**
       * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
       * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
       * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
       *     <incremented total> as the write is applied locally and then acknowledged at the server.
       *
       * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
       *
       * @param path The path to the data we want
       * @param writeIdsToExclude A specific set to be excluded
       */
      SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {
          var includeHiddenSets = true;
          var writeTree = this.pendingWriteTree_;
          var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {
              var relativePath = Path.relativePath(pathSoFar, path);
              var serverCache = syncPoint.getCompleteServerCache(relativePath);
              if (serverCache) {
                  return serverCache;
              }
          });
          return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);
      };
      /**
       * This collapses multiple unfiltered views into a single view, since we only need a single
       * listener for them.
       */
      SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {
          return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
              if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {
                  var completeView = maybeChildSyncPoint.getCompleteView();
                  return [completeView];
              }
              else {
                  // No complete view here, flatten any deeper listens into an array
                  var views_1 = [];
                  if (maybeChildSyncPoint) {
                      views_1 = maybeChildSyncPoint.getQueryViews();
                  }
                  each(childMap, function (_key, childViews) {
                      views_1 = views_1.concat(childViews);
                  });
                  return views_1;
              }
          });
      };
      SyncTree.prototype.removeTags_ = function (queries) {
          for (var j = 0; j < queries.length; ++j) {
              var removedQuery = queries[j];
              if (!removedQuery.getQueryParams().loadsAllData()) {
                  // We should have a tag for this
                  var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);
                  var removedQueryTag = this.queryToTagMap.get(removedQueryKey);
                  this.queryToTagMap.delete(removedQueryKey);
                  this.tagToQueryMap.delete(removedQueryTag);
              }
          }
      };
      /**
       * Normalizes a query to a query we send the server for listening
       *
       * @return The normalized query
       */
      SyncTree.queryForListening_ = function (query) {
          if (query.getQueryParams().loadsAllData() &&
              !query.getQueryParams().isDefault()) {
              // We treat queries that load all data as default queries
              // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
              // from Query
              return query.getRef();
          }
          else {
              return query;
          }
      };
      /**
       * For a given new listen, manage the de-duplication of outstanding subscriptions.
       *
       * @return This method can return events to support synchronous data sources
       */
      SyncTree.prototype.setupListener_ = function (query, view) {
          var path = query.path;
          var tag = this.tagForQuery_(query);
          var listener = this.createListenerForView_(view);
          var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);
          var subtree = this.syncPointTree_.subtree(path);
          // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
          // may need to shadow other listens as well.
          if (tag) {
              index_cjs.assert(!subtree.value.hasCompleteView(), "If we're adding a query, it shouldn't be shadowed");
          }
          else {
              // Shadow everything at or below this location, this is a default listener.
              var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
                  if (!relativePath.isEmpty() &&
                      maybeChildSyncPoint &&
                      maybeChildSyncPoint.hasCompleteView()) {
                      return [maybeChildSyncPoint.getCompleteView().getQuery()];
                  }
                  else {
                      // No default listener here, flatten any deeper queries into an array
                      var queries_1 = [];
                      if (maybeChildSyncPoint) {
                          queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));
                      }
                      each(childMap, function (_key, childQueries) {
                          queries_1 = queries_1.concat(childQueries);
                      });
                      return queries_1;
                  }
              });
              for (var i = 0; i < queriesToStop.length; ++i) {
                  var queryToStop = queriesToStop[i];
                  this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));
              }
          }
          return events;
      };
      SyncTree.prototype.createListenerForView_ = function (view) {
          var _this = this;
          var query = view.getQuery();
          var tag = this.tagForQuery_(query);
          return {
              hashFn: function () {
                  var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;
                  return cache.hash();
              },
              onComplete: function (status) {
                  if (status === 'ok') {
                      if (tag) {
                          return _this.applyTaggedListenComplete(query.path, tag);
                      }
                      else {
                          return _this.applyListenComplete(query.path);
                      }
                  }
                  else {
                      // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
                      // Note that this may need to be scoped to just this listener if we change permissions on filtered children
                      var error = errorForServerCode(status, query);
                      return _this.removeEventRegistration(query, 
                      /*eventRegistration*/ null, error);
                  }
              }
          };
      };
      /**
       * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
       */
      SyncTree.makeQueryKey_ = function (query) {
          return query.path.toString() + '$' + query.queryIdentifier();
      };
      /**
       * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
       */
      SyncTree.parseQueryKey_ = function (queryKey) {
          var splitIndex = queryKey.indexOf('$');
          index_cjs.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
          return {
              queryId: queryKey.substr(splitIndex + 1),
              path: new Path(queryKey.substr(0, splitIndex))
          };
      };
      /**
       * Return the query associated with the given tag, if we have one
       */
      SyncTree.prototype.queryKeyForTag_ = function (tag) {
          return this.tagToQueryMap.get(tag);
      };
      /**
       * Return the tag associated with the given query.
       */
      SyncTree.prototype.tagForQuery_ = function (query) {
          var queryKey = SyncTree.makeQueryKey_(query);
          return this.queryToTagMap.get(queryKey);
      };
      /**
       * Static accessor for query tags.
       */
      SyncTree.getNextQueryTag_ = function () {
          return SyncTree.nextQueryTag_++;
      };
      /**
       * A helper method to apply tagged operations
       */
      SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {
          var syncPoint = this.syncPointTree_.get(queryPath);
          index_cjs.assert(syncPoint, "Missing sync point for query tag that we're tracking");
          var writesCache = this.pendingWriteTree_.childWrites(queryPath);
          return syncPoint.applyOperation(operation, writesCache, 
          /*serverCache=*/ null);
      };
      /**
       * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
       *
       * NOTES:
       * - Descendant SyncPoints will be visited first (since we raise events depth-first).
    
       * - We call applyOperation() on each SyncPoint passing three things:
       *   1. A version of the Operation that has been made relative to the SyncPoint location.
       *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
       *   3. A snapshot Node with cached server data, if we have it.
    
       * - We concatenate all of the events returned by each SyncPoint and return the result.
       */
      SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {
          return this.applyOperationHelper_(operation, this.syncPointTree_, 
          /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));
      };
      /**
       * Recursive helper for applyOperationToSyncPoints_
       */
      SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
          if (operation.path.isEmpty()) {
              return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
          }
          else {
              var syncPoint = syncPointTree.get(Path.Empty);
              // If we don't have cached server data, see if we can get it from this SyncPoint.
              if (serverCache == null && syncPoint != null) {
                  serverCache = syncPoint.getCompleteServerCache(Path.Empty);
              }
              var events = [];
              var childName = operation.path.getFront();
              var childOperation = operation.operationForChild(childName);
              var childTree = syncPointTree.children.get(childName);
              if (childTree && childOperation) {
                  var childServerCache = serverCache
                      ? serverCache.getImmediateChild(childName)
                      : null;
                  var childWritesCache = writesCache.child(childName);
                  events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
              }
              if (syncPoint) {
                  events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
              }
              return events;
          }
      };
      /**
       * Recursive helper for applyOperationToSyncPoints_
       */
      SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
          var _this = this;
          var syncPoint = syncPointTree.get(Path.Empty);
          // If we don't have cached server data, see if we can get it from this SyncPoint.
          if (serverCache == null && syncPoint != null) {
              serverCache = syncPoint.getCompleteServerCache(Path.Empty);
          }
          var events = [];
          syncPointTree.children.inorderTraversal(function (childName, childTree) {
              var childServerCache = serverCache
                  ? serverCache.getImmediateChild(childName)
                  : null;
              var childWritesCache = writesCache.child(childName);
              var childOperation = operation.operationForChild(childName);
              if (childOperation) {
                  events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
              }
          });
          if (syncPoint) {
              events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
          }
          return events;
      };
      /**
       * Static tracker for next query tag.
       */
      SyncTree.nextQueryTag_ = 1;
      return SyncTree;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
   *
   * @constructor
   */
  var SnapshotHolder = /** @class */ (function () {
      function SnapshotHolder() {
          this.rootNode_ = ChildrenNode.EMPTY_NODE;
      }
      SnapshotHolder.prototype.getNode = function (path) {
          return this.rootNode_.getChild(path);
      };
      SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {
          this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
      };
      return SnapshotHolder;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Abstraction around FirebaseApp's token fetching capabilities.
   */
  var AuthTokenProvider = /** @class */ (function () {
      /**
       * @param {!FirebaseApp} app_
       */
      function AuthTokenProvider(app_) {
          this.app_ = app_;
      }
      /**
       * @param {boolean} forceRefresh
       * @return {!Promise<FirebaseAuthTokenData>}
       */
      AuthTokenProvider.prototype.getToken = function (forceRefresh) {
          return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, 
          // .catch
          function (error) {
              // TODO: Need to figure out all the cases this is raised and whether
              // this makes sense.
              if (error && error.code === 'auth/token-not-initialized') {
                  log('Got auth/token-not-initialized error.  Treating as null token.');
                  return null;
              }
              else {
                  return Promise.reject(error);
              }
          });
      };
      AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {
          // TODO: We might want to wrap the listener and call it with no args to
          // avoid a leaky abstraction, but that makes removing the listener harder.
          this.app_['INTERNAL']['addAuthTokenListener'](listener);
      };
      AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {
          this.app_['INTERNAL']['removeAuthTokenListener'](listener);
      };
      AuthTokenProvider.prototype.notifyForInvalidToken = function () {
          var errorMessage = 'Provided authentication credentials for the app named "' +
              this.app_.name +
              '" are invalid. This usually indicates your app was not ' +
              'initialized correctly. ';
          if ('credential' in this.app_.options) {
              errorMessage +=
                  'Make sure the "credential" property provided to initializeApp() ' +
                      'is authorized to access the specified "databaseURL" and is from the correct ' +
                      'project.';
          }
          else if ('serviceAccount' in this.app_.options) {
              errorMessage +=
                  'Make sure the "serviceAccount" property provided to initializeApp() ' +
                      'is authorized to access the specified "databaseURL" and is from the correct ' +
                      'project.';
          }
          else {
              errorMessage +=
                  'Make sure the "apiKey" and "databaseURL" properties provided to ' +
                      'initializeApp() match the values provided for your app at ' +
                      'https://console.firebase.google.com/.';
          }
          warn(errorMessage);
      };
      return AuthTokenProvider;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Tracks a collection of stats.
   *
   * @constructor
   */
  var StatsCollection = /** @class */ (function () {
      function StatsCollection() {
          this.counters_ = {};
      }
      StatsCollection.prototype.incrementCounter = function (name, amount) {
          if (amount === void 0) { amount = 1; }
          if (!index_cjs.contains(this.counters_, name))
              this.counters_[name] = 0;
          this.counters_[name] += amount;
      };
      StatsCollection.prototype.get = function () {
          return index_cjs.deepCopy(this.counters_);
      };
      return StatsCollection;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var StatsManager = /** @class */ (function () {
      function StatsManager() {
      }
      StatsManager.getCollection = function (repoInfo) {
          var hashString = repoInfo.toString();
          if (!this.collections_[hashString]) {
              this.collections_[hashString] = new StatsCollection();
          }
          return this.collections_[hashString];
      };
      StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {
          var hashString = repoInfo.toString();
          if (!this.reporters_[hashString]) {
              this.reporters_[hashString] = creatorFunction();
          }
          return this.reporters_[hashString];
      };
      StatsManager.collections_ = {};
      StatsManager.reporters_ = {};
      return StatsManager;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Returns the delta from the previous call to get stats.
   *
   * @param collection_ The collection to "listen" to.
   * @constructor
   */
  var StatsListener = /** @class */ (function () {
      function StatsListener(collection_) {
          this.collection_ = collection_;
          this.last_ = null;
      }
      StatsListener.prototype.get = function () {
          var newStats = this.collection_.get();
          var delta = tslib_es6.__assign({}, newStats);
          if (this.last_) {
              each(this.last_, function (stat, value) {
                  delta[stat] = delta[stat] - value;
              });
          }
          this.last_ = newStats;
          return delta;
      };
      return StatsListener;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
  // happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
  // seconds to try to ensure the Firebase connection is established / settled.
  var FIRST_STATS_MIN_TIME = 10 * 1000;
  var FIRST_STATS_MAX_TIME = 30 * 1000;
  // We'll continue to report stats on average every 5 minutes.
  var REPORT_STATS_INTERVAL = 5 * 60 * 1000;
  /**
   * @constructor
   */
  var StatsReporter = /** @class */ (function () {
      /**
       * @param collection
       * @param server_
       */
      function StatsReporter(collection, server_) {
          this.server_ = server_;
          this.statsToReport_ = {};
          this.statsListener_ = new StatsListener(collection);
          var timeout = FIRST_STATS_MIN_TIME +
              (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
          setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
      }
      StatsReporter.prototype.includeStat = function (stat) {
          this.statsToReport_[stat] = true;
      };
      StatsReporter.prototype.reportStats_ = function () {
          var _this = this;
          var stats = this.statsListener_.get();
          var reportedStats = {};
          var haveStatsToReport = false;
          each(stats, function (stat, value) {
              if (value > 0 && index_cjs.contains(_this.statsToReport_, stat)) {
                  reportedStats[stat] = value;
                  haveStatsToReport = true;
              }
          });
          if (haveStatsToReport) {
              this.server_.reportStats(reportedStats);
          }
          // queue our next run.
          setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
      };
      return StatsReporter;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * The event queue serves a few purposes:
   * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
   *    events being queued.
   * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
   *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
   *    left off, ensuring that the events are still raised synchronously and in order.
   * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
   *    events are raised synchronously.
   *
   * NOTE: This can all go away if/when we move to async events.
   *
   * @constructor
   */
  var EventQueue = /** @class */ (function () {
      function EventQueue() {
          /**
           * @private
           * @type {!Array.<EventList>}
           */
          this.eventLists_ = [];
          /**
           * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
           * @private
           * @type {!number}
           */
          this.recursionDepth_ = 0;
      }
      /**
       * @param {!Array.<Event>} eventDataList The new events to queue.
       */
      EventQueue.prototype.queueEvents = function (eventDataList) {
          // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
          var currList = null;
          for (var i = 0; i < eventDataList.length; i++) {
              var eventData = eventDataList[i];
              var eventPath = eventData.getPath();
              if (currList !== null && !eventPath.equals(currList.getPath())) {
                  this.eventLists_.push(currList);
                  currList = null;
              }
              if (currList === null) {
                  currList = new EventList(eventPath);
              }
              currList.add(eventData);
          }
          if (currList) {
              this.eventLists_.push(currList);
          }
      };
      /**
       * Queues the specified events and synchronously raises all events (including previously queued ones)
       * for the specified path.
       *
       * It is assumed that the new events are all for the specified path.
       *
       * @param {!Path} path The path to raise events for.
       * @param {!Array.<Event>} eventDataList The new events to raise.
       */
      EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {
          this.queueEvents(eventDataList);
          this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
              return eventPath.equals(path);
          });
      };
      /**
       * Queues the specified events and synchronously raises all events (including previously queued ones) for
       * locations related to the specified change path (i.e. all ancestors and descendants).
       *
       * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
       *
       * @param {!Path} changedPath The path to raise events for.
       * @param {!Array.<!Event>} eventDataList The events to raise
       */
      EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {
          this.queueEvents(eventDataList);
          this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
              return eventPath.contains(changedPath) || changedPath.contains(eventPath);
          });
      };
      /**
       * @param {!function(!Path):boolean} predicate
       * @private
       */
      EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {
          this.recursionDepth_++;
          var sentAll = true;
          for (var i = 0; i < this.eventLists_.length; i++) {
              var eventList = this.eventLists_[i];
              if (eventList) {
                  var eventPath = eventList.getPath();
                  if (predicate(eventPath)) {
                      this.eventLists_[i].raise();
                      this.eventLists_[i] = null;
                  }
                  else {
                      sentAll = false;
                  }
              }
          }
          if (sentAll) {
              this.eventLists_ = [];
          }
          this.recursionDepth_--;
      };
      return EventQueue;
  }());
  /**
   * @param {!Path} path
   * @constructor
   */
  var EventList = /** @class */ (function () {
      function EventList(path_) {
          this.path_ = path_;
          /**
           * @type {!Array.<Event>}
           * @private
           */
          this.events_ = [];
      }
      /**
       * @param {!Event} eventData
       */
      EventList.prototype.add = function (eventData) {
          this.events_.push(eventData);
      };
      /**
       * Iterates through the list and raises each event
       */
      EventList.prototype.raise = function () {
          for (var i = 0; i < this.events_.length; i++) {
              var eventData = this.events_[i];
              if (eventData !== null) {
                  this.events_[i] = null;
                  var eventFn = eventData.getEventRunner();
                  if (logger) {
                      log('event: ' + eventData.toString());
                  }
                  exceptionGuard(eventFn);
              }
          }
      };
      /**
       * @return {!Path}
       */
      EventList.prototype.getPath = function () {
          return this.path_;
      };
      return EventList;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Base class to be used if you want to emit events. Call the constructor with
   * the set of allowed event names.
   */
  var EventEmitter = /** @class */ (function () {
      /**
       * @param {!Array.<string>} allowedEvents_
       */
      function EventEmitter(allowedEvents_) {
          this.allowedEvents_ = allowedEvents_;
          this.listeners_ = {};
          index_cjs.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
      }
      /**
       * To be called by derived classes to trigger events.
       * @param {!string} eventType
       * @param {...*} var_args
       */
      EventEmitter.prototype.trigger = function (eventType) {
          var var_args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              var_args[_i - 1] = arguments[_i];
          }
          if (Array.isArray(this.listeners_[eventType])) {
              // Clone the list, since callbacks could add/remove listeners.
              var listeners = tslib_es6.__spread(this.listeners_[eventType]);
              for (var i = 0; i < listeners.length; i++) {
                  listeners[i].callback.apply(listeners[i].context, var_args);
              }
          }
      };
      EventEmitter.prototype.on = function (eventType, callback, context) {
          this.validateEventType_(eventType);
          this.listeners_[eventType] = this.listeners_[eventType] || [];
          this.listeners_[eventType].push({ callback: callback, context: context });
          var eventData = this.getInitialEvent(eventType);
          if (eventData) {
              callback.apply(context, eventData);
          }
      };
      EventEmitter.prototype.off = function (eventType, callback, context) {
          this.validateEventType_(eventType);
          var listeners = this.listeners_[eventType] || [];
          for (var i = 0; i < listeners.length; i++) {
              if (listeners[i].callback === callback &&
                  (!context || context === listeners[i].context)) {
                  listeners.splice(i, 1);
                  return;
              }
          }
      };
      EventEmitter.prototype.validateEventType_ = function (eventType) {
          index_cjs.assert(this.allowedEvents_.find(function (et) {
              return et === eventType;
          }), 'Unknown event: ' + eventType);
      };
      return EventEmitter;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @extends {EventEmitter}
   */
  var VisibilityMonitor = /** @class */ (function (_super) {
      tslib_es6.__extends(VisibilityMonitor, _super);
      function VisibilityMonitor() {
          var _this = _super.call(this, ['visible']) || this;
          var hidden;
          var visibilityChange;
          if (typeof document !== 'undefined' &&
              typeof document.addEventListener !== 'undefined') {
              if (typeof document['hidden'] !== 'undefined') {
                  // Opera 12.10 and Firefox 18 and later support
                  visibilityChange = 'visibilitychange';
                  hidden = 'hidden';
              }
              else if (typeof document['mozHidden'] !== 'undefined') {
                  visibilityChange = 'mozvisibilitychange';
                  hidden = 'mozHidden';
              }
              else if (typeof document['msHidden'] !== 'undefined') {
                  visibilityChange = 'msvisibilitychange';
                  hidden = 'msHidden';
              }
              else if (typeof document['webkitHidden'] !== 'undefined') {
                  visibilityChange = 'webkitvisibilitychange';
                  hidden = 'webkitHidden';
              }
          }
          // Initially, we always assume we are visible. This ensures that in browsers
          // without page visibility support or in cases where we are never visible
          // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
          // reconnects
          _this.visible_ = true;
          if (visibilityChange) {
              document.addEventListener(visibilityChange, function () {
                  var visible = !document[hidden];
                  if (visible !== _this.visible_) {
                      _this.visible_ = visible;
                      _this.trigger('visible', visible);
                  }
              }, false);
          }
          return _this;
      }
      VisibilityMonitor.getInstance = function () {
          return new VisibilityMonitor();
      };
      /**
       * @param {!string} eventType
       * @return {Array.<boolean>}
       */
      VisibilityMonitor.prototype.getInitialEvent = function (eventType) {
          index_cjs.assert(eventType === 'visible', 'Unknown event type: ' + eventType);
          return [this.visible_];
      };
      return VisibilityMonitor;
  }(EventEmitter));

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Monitors online state (as reported by window.online/offline events).
   *
   * The expectation is that this could have many false positives (thinks we are online
   * when we're not), but no false negatives.  So we can safely use it to determine when
   * we definitely cannot reach the internet.
   *
   * @extends {EventEmitter}
   */
  var OnlineMonitor = /** @class */ (function (_super) {
      tslib_es6.__extends(OnlineMonitor, _super);
      function OnlineMonitor() {
          var _this = _super.call(this, ['online']) || this;
          _this.online_ = true;
          // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
          // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
          // It would seem that the 'online' event does not always fire consistently. So we disable it
          // for Cordova.
          if (typeof window !== 'undefined' &&
              typeof window.addEventListener !== 'undefined' &&
              !index_cjs.isMobileCordova()) {
              window.addEventListener('online', function () {
                  if (!_this.online_) {
                      _this.online_ = true;
                      _this.trigger('online', true);
                  }
              }, false);
              window.addEventListener('offline', function () {
                  if (_this.online_) {
                      _this.online_ = false;
                      _this.trigger('online', false);
                  }
              }, false);
          }
          return _this;
      }
      OnlineMonitor.getInstance = function () {
          return new OnlineMonitor();
      };
      /**
       * @param {!string} eventType
       * @return {Array.<boolean>}
       */
      OnlineMonitor.prototype.getInitialEvent = function (eventType) {
          index_cjs.assert(eventType === 'online', 'Unknown event type: ' + eventType);
          return [this.online_];
      };
      /**
       * @return {boolean}
       */
      OnlineMonitor.prototype.currentlyOnline = function () {
          return this.online_;
      };
      return OnlineMonitor;
  }(EventEmitter));

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * This class ensures the packets from the server arrive in order
   * This class takes data from the server and ensures it gets passed into the callbacks in order.
   * @constructor
   */
  var PacketReceiver = /** @class */ (function () {
      /**
       * @param onMessage_
       */
      function PacketReceiver(onMessage_) {
          this.onMessage_ = onMessage_;
          this.pendingResponses = [];
          this.currentResponseNum = 0;
          this.closeAfterResponse = -1;
          this.onClose = null;
      }
      PacketReceiver.prototype.closeAfter = function (responseNum, callback) {
          this.closeAfterResponse = responseNum;
          this.onClose = callback;
          if (this.closeAfterResponse < this.currentResponseNum) {
              this.onClose();
              this.onClose = null;
          }
      };
      /**
       * Each message from the server comes with a response number, and an array of data. The responseNumber
       * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
       * browsers will respond in the same order as the requests we sent
       * @param {number} requestNum
       * @param {Array} data
       */
      PacketReceiver.prototype.handleResponse = function (requestNum, data) {
          var _this = this;
          this.pendingResponses[requestNum] = data;
          var _loop_1 = function () {
              var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
              delete this_1.pendingResponses[this_1.currentResponseNum];
              var _loop_2 = function (i) {
                  if (toProcess[i]) {
                      exceptionGuard(function () {
                          _this.onMessage_(toProcess[i]);
                      });
                  }
              };
              for (var i = 0; i < toProcess.length; ++i) {
                  _loop_2(i);
              }
              if (this_1.currentResponseNum === this_1.closeAfterResponse) {
                  if (this_1.onClose) {
                      this_1.onClose();
                      this_1.onClose = null;
                  }
                  return "break";
              }
              this_1.currentResponseNum++;
          };
          var this_1 = this;
          while (this.pendingResponses[this.currentResponseNum]) {
              var state_1 = _loop_1();
              if (state_1 === "break")
                  break;
          }
      };
      return PacketReceiver;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // URL query parameters associated with longpolling
  var FIREBASE_LONGPOLL_START_PARAM = 'start';
  var FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
  var FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
  var FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
  var FIREBASE_LONGPOLL_ID_PARAM = 'id';
  var FIREBASE_LONGPOLL_PW_PARAM = 'pw';
  var FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
  var FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
  var FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
  var FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
  var FIREBASE_LONGPOLL_DATA_PARAM = 'd';
  var FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';
  //Data size constants.
  //TODO: Perf: the maximum length actually differs from browser to browser.
  // We should check what browser we're on and set accordingly.
  var MAX_URL_DATA_SIZE = 1870;
  var SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=
  var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
  /**
   * Keepalive period
   * send a fresh request at minimum every 25 seconds. Opera has a maximum request
   * length of 30 seconds that we can't exceed.
   * @const
   * @type {number}
   */
  var KEEPALIVE_REQUEST_INTERVAL = 25000;
  /**
   * How long to wait before aborting a long-polling connection attempt.
   * @const
   * @type {number}
   */
  var LP_CONNECT_TIMEOUT = 30000;
  /**
   * This class manages a single long-polling connection.
   *
   * @constructor
   * @implements {Transport}
   */
  var BrowserPollConnection = /** @class */ (function () {
      /**
       * @param {string} connId An identifier for this connection, used for logging
       * @param {RepoInfo} repoInfo The info for the endpoint to send data to.
       * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing
       *                                         transport session
       * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a
       *                                     connection previously
       */
      function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {
          this.connId = connId;
          this.repoInfo = repoInfo;
          this.transportSessionId = transportSessionId;
          this.lastSessionId = lastSessionId;
          this.bytesSent = 0;
          this.bytesReceived = 0;
          this.everConnected_ = false;
          this.log_ = logWrapper(connId);
          this.stats_ = StatsManager.getCollection(repoInfo);
          this.urlFn = function (params) {
              return repoInfo.connectionURL(LONG_POLLING, params);
          };
      }
      /**
       *
       * @param {function(Object)} onMessage Callback when messages arrive
       * @param {function()} onDisconnect Callback with connection lost.
       */
      BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {
          var _this = this;
          this.curSegmentNum = 0;
          this.onDisconnect_ = onDisconnect;
          this.myPacketOrderer = new PacketReceiver(onMessage);
          this.isClosed_ = false;
          this.connectTimeoutTimer_ = setTimeout(function () {
              _this.log_('Timed out trying to connect.');
              // Make sure we clear the host cache
              _this.onClosed_();
              _this.connectTimeoutTimer_ = null;
          }, Math.floor(LP_CONNECT_TIMEOUT));
          // Ensure we delay the creation of the iframe until the DOM is loaded.
          executeWhenDOMReady(function () {
              if (_this.isClosed_)
                  return;
              //Set up a callback that gets triggered once a connection is set up.
              _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {
                  var args = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                      args[_i] = arguments[_i];
                  }
                  var _a = tslib_es6.__read(args, 5), command = _a[0], arg1 = _a[1], arg2 = _a[2], arg3 = _a[3], arg4 = _a[4];
                  _this.incrementIncomingBytes_(args);
                  if (!_this.scriptTagHolder)
                      return; // we closed the connection.
                  if (_this.connectTimeoutTimer_) {
                      clearTimeout(_this.connectTimeoutTimer_);
                      _this.connectTimeoutTimer_ = null;
                  }
                  _this.everConnected_ = true;
                  if (command == FIREBASE_LONGPOLL_START_PARAM) {
                      _this.id = arg1;
                      _this.password = arg2;
                  }
                  else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
                      // Don't clear the host cache. We got a response from the server, so we know it's reachable
                      if (arg1) {
                          // We aren't expecting any more data (other than what the server's already in the process of sending us
                          // through our already open polls), so don't send any more.
                          _this.scriptTagHolder.sendNewPolls = false;
                          // arg1 in this case is the last response number sent by the server. We should try to receive
                          // all of the responses up to this one before closing
                          _this.myPacketOrderer.closeAfter(arg1, function () {
                              _this.onClosed_();
                          });
                      }
                      else {
                          _this.onClosed_();
                      }
                  }
                  else {
                      throw new Error('Unrecognized command received: ' + command);
                  }
              }, function () {
                  var args = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                      args[_i] = arguments[_i];
                  }
                  var _a = tslib_es6.__read(args, 2), pN = _a[0], data = _a[1];
                  _this.incrementIncomingBytes_(args);
                  _this.myPacketOrderer.handleResponse(pN, data);
              }, function () {
                  _this.onClosed_();
              }, _this.urlFn);
              //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
              //from cache.
              var urlParams = {};
              urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';
              urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);
              if (_this.scriptTagHolder.uniqueCallbackIdentifier)
                  urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
              urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
              if (_this.transportSessionId) {
                  urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
              }
              if (_this.lastSessionId) {
                  urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;
              }
              if (typeof location !== 'undefined' &&
                  location.href &&
                  location.href.indexOf(FORGE_DOMAIN) !== -1) {
                  urlParams[REFERER_PARAM] = FORGE_REF;
              }
              var connectURL = _this.urlFn(urlParams);
              _this.log_('Connecting via long-poll to ' + connectURL);
              _this.scriptTagHolder.addTag(connectURL, function () {
                  /* do nothing */
              });
          });
      };
      /**
       * Call this when a handshake has completed successfully and we want to consider the connection established
       */
      BrowserPollConnection.prototype.start = function () {
          this.scriptTagHolder.startLongPoll(this.id, this.password);
          this.addDisconnectPingFrame(this.id, this.password);
      };
      /**
       * Forces long polling to be considered as a potential transport
       */
      BrowserPollConnection.forceAllow = function () {
          BrowserPollConnection.forceAllow_ = true;
      };
      /**
       * Forces longpolling to not be considered as a potential transport
       */
      BrowserPollConnection.forceDisallow = function () {
          BrowserPollConnection.forceDisallow_ = true;
      };
      // Static method, use string literal so it can be accessed in a generic way
      BrowserPollConnection.isAvailable = function () {
          if (index_cjs.isNodeSdk()) {
              return false;
          }
          else if (BrowserPollConnection.forceAllow_) {
              return true;
          }
          else {
              // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
              // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
              return (!BrowserPollConnection.forceDisallow_ &&
                  typeof document !== 'undefined' &&
                  document.createElement != null &&
                  !isChromeExtensionContentScript() &&
                  !isWindowsStoreApp());
          }
      };
      /**
       * No-op for polling
       */
      BrowserPollConnection.prototype.markConnectionHealthy = function () { };
      /**
       * Stops polling and cleans up the iframe
       * @private
       */
      BrowserPollConnection.prototype.shutdown_ = function () {
          this.isClosed_ = true;
          if (this.scriptTagHolder) {
              this.scriptTagHolder.close();
              this.scriptTagHolder = null;
          }
          //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
          if (this.myDisconnFrame) {
              document.body.removeChild(this.myDisconnFrame);
              this.myDisconnFrame = null;
          }
          if (this.connectTimeoutTimer_) {
              clearTimeout(this.connectTimeoutTimer_);
              this.connectTimeoutTimer_ = null;
          }
      };
      /**
       * Triggered when this transport is closed
       * @private
       */
      BrowserPollConnection.prototype.onClosed_ = function () {
          if (!this.isClosed_) {
              this.log_('Longpoll is closing itself');
              this.shutdown_();
              if (this.onDisconnect_) {
                  this.onDisconnect_(this.everConnected_);
                  this.onDisconnect_ = null;
              }
          }
      };
      /**
       * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
       * that we've left.
       */
      BrowserPollConnection.prototype.close = function () {
          if (!this.isClosed_) {
              this.log_('Longpoll is being closed.');
              this.shutdown_();
          }
      };
      /**
       * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
       * broken into chunks (since URLs have a small maximum length).
       * @param {!Object} data The JSON data to transmit.
       */
      BrowserPollConnection.prototype.send = function (data) {
          var dataStr = index_cjs.stringify(data);
          this.bytesSent += dataStr.length;
          this.stats_.incrementCounter('bytes_sent', dataStr.length);
          //first, lets get the base64-encoded data
          var base64data = index_cjs.base64Encode(dataStr);
          //We can only fit a certain amount in each URL, so we need to split this request
          //up into multiple pieces if it doesn't fit in one request.
          var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
          //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
          //of segments so that we can reassemble the packet on the server.
          for (var i = 0; i < dataSegs.length; i++) {
              this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
              this.curSegmentNum++;
          }
      };
      /**
       * This is how we notify the server that we're leaving.
       * We aren't able to send requests with DHTML on a window close event, but we can
       * trigger XHR requests in some browsers (everything but Opera basically).
       * @param {!string} id
       * @param {!string} pw
       */
      BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {
          if (index_cjs.isNodeSdk())
              return;
          this.myDisconnFrame = document.createElement('iframe');
          var urlParams = {};
          urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
          urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;
          urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
          this.myDisconnFrame.src = this.urlFn(urlParams);
          this.myDisconnFrame.style.display = 'none';
          document.body.appendChild(this.myDisconnFrame);
      };
      /**
       * Used to track the bytes received by this client
       * @param {*} args
       * @private
       */
      BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {
          // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
          var bytesReceived = index_cjs.stringify(args).length;
          this.bytesReceived += bytesReceived;
          this.stats_.incrementCounter('bytes_received', bytesReceived);
      };
      return BrowserPollConnection;
  }());
  /*********************************************************************************************
   * A wrapper around an iframe that is used as a long-polling script holder.
   * @constructor
   *********************************************************************************************/
  var FirebaseIFrameScriptHolder = /** @class */ (function () {
      /**
       * @param commandCB - The callback to be called when control commands are recevied from the server.
       * @param onMessageCB - The callback to be triggered when responses arrive from the server.
       * @param onDisconnect - The callback to be triggered when this tag holder is closed
       * @param urlFn - A function that provides the URL of the endpoint to send data to.
       */
      function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {
          this.onDisconnect = onDisconnect;
          this.urlFn = urlFn;
          //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
          //problems in some browsers.
          this.outstandingRequests = new Set();
          //A queue of the pending segments waiting for transmission to the server.
          this.pendingSegs = [];
          //A serial number. We use this for two things:
          // 1) A way to ensure the browser doesn't cache responses to polls
          // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
          //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
          //    JSONP code in the order it was added to the iframe.
          this.currentSerial = Math.floor(Math.random() * 100000000);
          // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
          // incoming data from the server that we're waiting for).
          this.sendNewPolls = true;
          if (!index_cjs.isNodeSdk()) {
              //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
              //iframes where we put the long-polling script tags. We have two callbacks:
              //   1) Command Callback - Triggered for control issues, like starting a connection.
              //   2) Message Callback - Triggered when new data arrives.
              this.uniqueCallbackIdentifier = LUIDGenerator();
              window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
              window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
              //Create an iframe for us to add script tags to.
              this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();
              // Set the iframe's contents.
              var script = '';
              // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
              // for ie9, but ie8 needs to do it again in the document itself.
              if (this.myIFrame.src &&
                  this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {
                  var currentDomain = document.domain;
                  script = '<script>document.domain="' + currentDomain + '";</script>';
              }
              var iframeContents = '<html><body>' + script + '</body></html>';
              try {
                  this.myIFrame.doc.open();
                  this.myIFrame.doc.write(iframeContents);
                  this.myIFrame.doc.close();
              }
              catch (e) {
                  log('frame writing exception');
                  if (e.stack) {
                      log(e.stack);
                  }
                  log(e);
              }
          }
          else {
              this.commandCB = commandCB;
              this.onMessageCB = onMessageCB;
          }
      }
      /**
       * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
       * actually use.
       * @private
       * @return {Element}
       */
      FirebaseIFrameScriptHolder.createIFrame_ = function () {
          var iframe = document.createElement('iframe');
          iframe.style.display = 'none';
          // This is necessary in order to initialize the document inside the iframe
          if (document.body) {
              document.body.appendChild(iframe);
              try {
                  // If document.domain has been modified in IE, this will throw an error, and we need to set the
                  // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
                  // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
                  var a = iframe.contentWindow.document;
                  if (!a) {
                      // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
                      log('No IE domain setting required');
                  }
              }
              catch (e) {
                  var domain = document.domain;
                  iframe.src =
                      "javascript:void((function(){document.open();document.domain='" +
                          domain +
                          "';document.close();})())";
              }
          }
          else {
              // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
              // never gets hit.
              throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
          }
          // Get the document of the iframe in a browser-specific way.
          if (iframe.contentDocument) {
              iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
          }
          else if (iframe.contentWindow) {
              iframe.doc = iframe.contentWindow.document; // Internet Explorer
          }
          else if (iframe.document) {
              iframe.doc = iframe.document; //others?
          }
          return iframe;
      };
      /**
       * Cancel all outstanding queries and remove the frame.
       */
      FirebaseIFrameScriptHolder.prototype.close = function () {
          var _this = this;
          //Mark this iframe as dead, so no new requests are sent.
          this.alive = false;
          if (this.myIFrame) {
              //We have to actually remove all of the html inside this iframe before removing it from the
              //window, or IE will continue loading and executing the script tags we've already added, which
              //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
              this.myIFrame.doc.body.innerHTML = '';
              setTimeout(function () {
                  if (_this.myIFrame !== null) {
                      document.body.removeChild(_this.myIFrame);
                      _this.myIFrame = null;
                  }
              }, Math.floor(0));
          }
          // Protect from being called recursively.
          var onDisconnect = this.onDisconnect;
          if (onDisconnect) {
              this.onDisconnect = null;
              onDisconnect();
          }
      };
      /**
       * Actually start the long-polling session by adding the first script tag(s) to the iframe.
       * @param {!string} id - The ID of this connection
       * @param {!string} pw - The password for this connection
       */
      FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {
          this.myID = id;
          this.myPW = pw;
          this.alive = true;
          //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
          while (this.newRequest_()) { }
      };
      /**
       * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
       * too many outstanding requests and we are still alive.
       *
       * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
       * needed.
       */
      FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {
          // We keep one outstanding request open all the time to receive data, but if we need to send data
          // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
          // close the old request.
          if (this.alive &&
              this.sendNewPolls &&
              this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
              //construct our url
              this.currentSerial++;
              var urlParams = {};
              urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
              urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
              urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
              var theURL = this.urlFn(urlParams);
              //Now add as much data as we can.
              var curDataString = '';
              var i = 0;
              while (this.pendingSegs.length > 0) {
                  //first, lets see if the next segment will fit.
                  var nextSeg = this.pendingSegs[0];
                  if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=
                      MAX_URL_DATA_SIZE) {
                      //great, the segment will fit. Lets append it.
                      var theSeg = this.pendingSegs.shift();
                      curDataString =
                          curDataString +
                              '&' +
                              FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +
                              i +
                              '=' +
                              theSeg.seg +
                              '&' +
                              FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +
                              i +
                              '=' +
                              theSeg.ts +
                              '&' +
                              FIREBASE_LONGPOLL_DATA_PARAM +
                              i +
                              '=' +
                              theSeg.d;
                      i++;
                  }
                  else {
                      break;
                  }
              }
              theURL = theURL + curDataString;
              this.addLongPollTag_(theURL, this.currentSerial);
              return true;
          }
          else {
              return false;
          }
      };
      /**
       * Queue a packet for transmission to the server.
       * @param segnum - A sequential id for this packet segment used for reassembly
       * @param totalsegs - The total number of segments in this packet
       * @param data - The data for this segment.
       */
      FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {
          //add this to the queue of segments to send.
          this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });
          //send the data immediately if there isn't already data being transmitted, unless
          //startLongPoll hasn't been called yet.
          if (this.alive) {
              this.newRequest_();
          }
      };
      /**
       * Add a script tag for a regular long-poll request.
       * @param {!string} url - The URL of the script tag.
       * @param {!number} serial - The serial number of the request.
       * @private
       */
      FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {
          var _this = this;
          //remember that we sent this request.
          this.outstandingRequests.add(serial);
          var doNewRequest = function () {
              _this.outstandingRequests.delete(serial);
              _this.newRequest_();
          };
          // If this request doesn't return on its own accord (by the server sending us some data), we'll
          // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
          var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
          var readyStateCB = function () {
              // Request completed.  Cancel the keepalive.
              clearTimeout(keepaliveTimeout);
              // Trigger a new request so we can continue receiving data.
              doNewRequest();
          };
          this.addTag(url, readyStateCB);
      };
      /**
       * Add an arbitrary script tag to the iframe.
       * @param {!string} url - The URL for the script tag source.
       * @param {!function()} loadCB - A callback to be triggered once the script has loaded.
       */
      FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {
          var _this = this;
          if (index_cjs.isNodeSdk()) {
              this.doNodeLongPoll(url, loadCB);
          }
          else {
              setTimeout(function () {
                  try {
                      // if we're already closed, don't add this poll
                      if (!_this.sendNewPolls)
                          return;
                      var newScript_1 = _this.myIFrame.doc.createElement('script');
                      newScript_1.type = 'text/javascript';
                      newScript_1.async = true;
                      newScript_1.src = url;
                      newScript_1.onload = newScript_1.onreadystatechange = function () {
                          var rstate = newScript_1.readyState;
                          if (!rstate || rstate === 'loaded' || rstate === 'complete') {
                              newScript_1.onload = newScript_1.onreadystatechange = null;
                              if (newScript_1.parentNode) {
                                  newScript_1.parentNode.removeChild(newScript_1);
                              }
                              loadCB();
                          }
                      };
                      newScript_1.onerror = function () {
                          log('Long-poll script failed to load: ' + url);
                          _this.sendNewPolls = false;
                          _this.close();
                      };
                      _this.myIFrame.doc.body.appendChild(newScript_1);
                  }
                  catch (e) {
                      // TODO: we should make this error visible somehow
                  }
              }, Math.floor(1));
          }
      };
      return FirebaseIFrameScriptHolder;
  }());

  /**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** The semver (www.semver.org) version of the SDK. */
  var SDK_VERSION = '';
  // SDK_VERSION should be set before any database instance is created
  function setSDKVersion(version) {
      SDK_VERSION = version;
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var WEBSOCKET_MAX_FRAME_SIZE = 16384;
  var WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
  var WebSocketImpl = null;
  if (typeof MozWebSocket !== 'undefined') {
      WebSocketImpl = MozWebSocket;
  }
  else if (typeof WebSocket !== 'undefined') {
      WebSocketImpl = WebSocket;
  }
  /**
   * Create a new websocket connection with the given callbacks.
   * @constructor
   * @implements {Transport}
   */
  var WebSocketConnection = /** @class */ (function () {
      /**
       * @param {string} connId identifier for this transport
       * @param {RepoInfo} repoInfo The info for the websocket endpoint.
       * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
       *                                         session
       * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
       */
      function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {
          this.connId = connId;
          this.keepaliveTimer = null;
          this.frames = null;
          this.totalFrames = 0;
          this.bytesSent = 0;
          this.bytesReceived = 0;
          this.log_ = logWrapper(this.connId);
          this.stats_ = StatsManager.getCollection(repoInfo);
          this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);
      }
      /**
       * @param {RepoInfo} repoInfo The info for the websocket endpoint.
       * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
       *                                         session
       * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
       * @return {string} connection url
       * @private
       */
      WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {
          var urlParams = {};
          urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
          if (!index_cjs.isNodeSdk() &&
              typeof location !== 'undefined' &&
              location.href &&
              location.href.indexOf(FORGE_DOMAIN) !== -1) {
              urlParams[REFERER_PARAM] = FORGE_REF;
          }
          if (transportSessionId) {
              urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
          }
          if (lastSessionId) {
              urlParams[LAST_SESSION_PARAM] = lastSessionId;
          }
          return repoInfo.connectionURL(WEBSOCKET, urlParams);
      };
      /**
       *
       * @param onMessage Callback when messages arrive
       * @param onDisconnect Callback with connection lost.
       */
      WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {
          var _this = this;
          this.onDisconnect = onDisconnect;
          this.onMessage = onMessage;
          this.log_('Websocket connecting to ' + this.connURL);
          this.everConnected_ = false;
          // Assume failure until proven otherwise.
          PersistentStorage.set('previous_websocket_failure', true);
          try {
              if (index_cjs.isNodeSdk()) {
                  var device = index_cjs.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';
                  // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>
                  var options = {
                      headers: {
                          'User-Agent': "Firebase/" + PROTOCOL_VERSION + "/" + SDK_VERSION + "/" + process.platform + "/" + device
                      }
                  };
                  // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.
                  var env = process['env'];
                  var proxy = this.connURL.indexOf('wss://') == 0
                      ? env['HTTPS_PROXY'] || env['https_proxy']
                      : env['HTTP_PROXY'] || env['http_proxy'];
                  if (proxy) {
                      options['proxy'] = { origin: proxy };
                  }
                  this.mySock = new WebSocketImpl(this.connURL, [], options);
              }
              else {
                  this.mySock = new WebSocketImpl(this.connURL);
              }
          }
          catch (e) {
              this.log_('Error instantiating WebSocket.');
              var error = e.message || e.data;
              if (error) {
                  this.log_(error);
              }
              this.onClosed_();
              return;
          }
          this.mySock.onopen = function () {
              _this.log_('Websocket connected.');
              _this.everConnected_ = true;
          };
          this.mySock.onclose = function () {
              _this.log_('Websocket connection was disconnected.');
              _this.mySock = null;
              _this.onClosed_();
          };
          this.mySock.onmessage = function (m) {
              _this.handleIncomingFrame(m);
          };
          this.mySock.onerror = function (e) {
              _this.log_('WebSocket error.  Closing connection.');
              var error = e.message || e.data;
              if (error) {
                  _this.log_(error);
              }
              _this.onClosed_();
          };
      };
      /**
       * No-op for websockets, we don't need to do anything once the connection is confirmed as open
       */
      WebSocketConnection.prototype.start = function () { };
      WebSocketConnection.forceDisallow = function () {
          WebSocketConnection.forceDisallow_ = true;
      };
      WebSocketConnection.isAvailable = function () {
          var isOldAndroid = false;
          if (typeof navigator !== 'undefined' && navigator.userAgent) {
              var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
              var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
              if (oldAndroidMatch && oldAndroidMatch.length > 1) {
                  if (parseFloat(oldAndroidMatch[1]) < 4.4) {
                      isOldAndroid = true;
                  }
              }
          }
          return (!isOldAndroid &&
              WebSocketImpl !== null &&
              !WebSocketConnection.forceDisallow_);
      };
      /**
       * Returns true if we previously failed to connect with this transport.
       * @return {boolean}
       */
      WebSocketConnection.previouslyFailed = function () {
          // If our persistent storage is actually only in-memory storage,
          // we default to assuming that it previously failed to be safe.
          return (PersistentStorage.isInMemoryStorage ||
              PersistentStorage.get('previous_websocket_failure') === true);
      };
      WebSocketConnection.prototype.markConnectionHealthy = function () {
          PersistentStorage.remove('previous_websocket_failure');
      };
      WebSocketConnection.prototype.appendFrame_ = function (data) {
          this.frames.push(data);
          if (this.frames.length == this.totalFrames) {
              var fullMess = this.frames.join('');
              this.frames = null;
              var jsonMess = index_cjs.jsonEval(fullMess);
              //handle the message
              this.onMessage(jsonMess);
          }
      };
      /**
       * @param {number} frameCount The number of frames we are expecting from the server
       * @private
       */
      WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {
          this.totalFrames = frameCount;
          this.frames = [];
      };
      /**
       * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
       * @param {!String} data
       * @return {?String} Any remaining data to be process, or null if there is none
       * @private
       */
      WebSocketConnection.prototype.extractFrameCount_ = function (data) {
          index_cjs.assert(this.frames === null, 'We already have a frame buffer');
          // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
          // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
          if (data.length <= 6) {
              var frameCount = Number(data);
              if (!isNaN(frameCount)) {
                  this.handleNewFrameCount_(frameCount);
                  return null;
              }
          }
          this.handleNewFrameCount_(1);
          return data;
      };
      /**
       * Process a websocket frame that has arrived from the server.
       * @param mess The frame data
       */
      WebSocketConnection.prototype.handleIncomingFrame = function (mess) {
          if (this.mySock === null)
              return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
          var data = mess['data'];
          this.bytesReceived += data.length;
          this.stats_.incrementCounter('bytes_received', data.length);
          this.resetKeepAlive();
          if (this.frames !== null) {
              // we're buffering
              this.appendFrame_(data);
          }
          else {
              // try to parse out a frame count, otherwise, assume 1 and process it
              var remainingData = this.extractFrameCount_(data);
              if (remainingData !== null) {
                  this.appendFrame_(remainingData);
              }
          }
      };
      /**
       * Send a message to the server
       * @param {Object} data The JSON object to transmit
       */
      WebSocketConnection.prototype.send = function (data) {
          this.resetKeepAlive();
          var dataStr = index_cjs.stringify(data);
          this.bytesSent += dataStr.length;
          this.stats_.incrementCounter('bytes_sent', dataStr.length);
          //We can only fit a certain amount in each websocket frame, so we need to split this request
          //up into multiple pieces if it doesn't fit in one request.
          var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
          //Send the length header
          if (dataSegs.length > 1) {
              this.sendString_(String(dataSegs.length));
          }
          //Send the actual data in segments.
          for (var i = 0; i < dataSegs.length; i++) {
              this.sendString_(dataSegs[i]);
          }
      };
      WebSocketConnection.prototype.shutdown_ = function () {
          this.isClosed_ = true;
          if (this.keepaliveTimer) {
              clearInterval(this.keepaliveTimer);
              this.keepaliveTimer = null;
          }
          if (this.mySock) {
              this.mySock.close();
              this.mySock = null;
          }
      };
      WebSocketConnection.prototype.onClosed_ = function () {
          if (!this.isClosed_) {
              this.log_('WebSocket is closing itself');
              this.shutdown_();
              // since this is an internal close, trigger the close listener
              if (this.onDisconnect) {
                  this.onDisconnect(this.everConnected_);
                  this.onDisconnect = null;
              }
          }
      };
      /**
       * External-facing close handler.
       * Close the websocket and kill the connection.
       */
      WebSocketConnection.prototype.close = function () {
          if (!this.isClosed_) {
              this.log_('WebSocket is being closed');
              this.shutdown_();
          }
      };
      /**
       * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
       * the last activity.
       */
      WebSocketConnection.prototype.resetKeepAlive = function () {
          var _this = this;
          clearInterval(this.keepaliveTimer);
          this.keepaliveTimer = setInterval(function () {
              //If there has been no websocket activity for a while, send a no-op
              if (_this.mySock) {
                  _this.sendString_('0');
              }
              _this.resetKeepAlive();
          }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
      };
      /**
       * Send a string over the websocket.
       *
       * @param {string} str String to send.
       * @private
       */
      WebSocketConnection.prototype.sendString_ = function (str) {
          // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
          // calls for some unknown reason.  We treat these as an error and disconnect.
          // See https://app.asana.com/0/58926111402292/68021340250410
          try {
              this.mySock.send(str);
          }
          catch (e) {
              this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
              setTimeout(this.onClosed_.bind(this), 0);
          }
      };
      /**
       * Number of response before we consider the connection "healthy."
       * @type {number}
       */
      WebSocketConnection.responsesRequiredToBeHealthy = 2;
      /**
       * Time to wait for the connection te become healthy before giving up.
       * @type {number}
       */
      WebSocketConnection.healthyTimeout = 30000;
      return WebSocketConnection;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Currently simplistic, this class manages what transport a Connection should use at various stages of its
   * lifecycle.
   *
   * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
   * they are available.
   * @constructor
   */
  var TransportManager = /** @class */ (function () {
      /**
       * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to
       */
      function TransportManager(repoInfo) {
          this.initTransports_(repoInfo);
      }
      Object.defineProperty(TransportManager, "ALL_TRANSPORTS", {
          /**
           * @const
           * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}
           */
          get: function () {
              return [BrowserPollConnection, WebSocketConnection];
          },
          enumerable: true,
          configurable: true
      });
      /**
       * @param {!RepoInfo} repoInfo
       * @private
       */
      TransportManager.prototype.initTransports_ = function (repoInfo) {
          var e_1, _a;
          var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();
          var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();
          if (repoInfo.webSocketOnly) {
              if (!isWebSocketsAvailable)
                  warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
              isSkipPollConnection = true;
          }
          if (isSkipPollConnection) {
              this.transports_ = [WebSocketConnection];
          }
          else {
              var transports = (this.transports_ = []);
              try {
                  for (var _b = tslib_es6.__values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {
                      var transport = _c.value;
                      if (transport && transport['isAvailable']()) {
                          transports.push(transport);
                      }
                  }
              }
              catch (e_1_1) { e_1 = { error: e_1_1 }; }
              finally {
                  try {
                      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                  }
                  finally { if (e_1) throw e_1.error; }
              }
          }
      };
      /**
       * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the
       * initial transport to use
       */
      TransportManager.prototype.initialTransport = function () {
          if (this.transports_.length > 0) {
              return this.transports_[0];
          }
          else {
              throw new Error('No transports available');
          }
      };
      /**
       * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next
       * transport, or null
       */
      TransportManager.prototype.upgradeTransport = function () {
          if (this.transports_.length > 1) {
              return this.transports_[1];
          }
          else {
              return null;
          }
      };
      return TransportManager;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Abort upgrade attempt if it takes longer than 60s.
  var UPGRADE_TIMEOUT = 60000;
  // For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
  // If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
  var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
  // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
  // then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
  // but we've sent/received enough bytes, we don't cancel the connection.
  var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
  var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
  var MESSAGE_TYPE = 't';
  var MESSAGE_DATA = 'd';
  var CONTROL_SHUTDOWN = 's';
  var CONTROL_RESET = 'r';
  var CONTROL_ERROR = 'e';
  var CONTROL_PONG = 'o';
  var SWITCH_ACK = 'a';
  var END_TRANSMISSION = 'n';
  var PING = 'p';
  var SERVER_HELLO = 'h';
  /**
   * Creates a new real-time connection to the server using whichever method works
   * best in the current browser.
   *
   * @constructor
   */
  var Connection = /** @class */ (function () {
      /**
       * @param {!string} id - an id for this connection
       * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to
       * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives
       * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.
       * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost
       * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.
       * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
       */
      function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
          this.id = id;
          this.repoInfo_ = repoInfo_;
          this.onMessage_ = onMessage_;
          this.onReady_ = onReady_;
          this.onDisconnect_ = onDisconnect_;
          this.onKill_ = onKill_;
          this.lastSessionId = lastSessionId;
          this.connectionCount = 0;
          this.pendingDataMessages = [];
          this.state_ = 0 /* CONNECTING */;
          this.log_ = logWrapper('c:' + this.id + ':');
          this.transportManager_ = new TransportManager(repoInfo_);
          this.log_('Connection created');
          this.start_();
      }
      /**
       * Starts a connection attempt
       * @private
       */
      Connection.prototype.start_ = function () {
          var _this = this;
          var conn = this.transportManager_.initialTransport();
          this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);
          // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
          // can consider the transport healthy.
          this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
          var onMessageReceived = this.connReceiver_(this.conn_);
          var onConnectionLost = this.disconnReceiver_(this.conn_);
          this.tx_ = this.conn_;
          this.rx_ = this.conn_;
          this.secondaryConn_ = null;
          this.isHealthy_ = false;
          /*
           * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
           * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
           * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
           * still have the context of your originating frame.
           */
          setTimeout(function () {
              // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
              _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
          }, Math.floor(0));
          var healthyTimeout_ms = conn['healthyTimeout'] || 0;
          if (healthyTimeout_ms > 0) {
              this.healthyTimeout_ = setTimeoutNonBlocking(function () {
                  _this.healthyTimeout_ = null;
                  if (!_this.isHealthy_) {
                      if (_this.conn_ &&
                          _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                          _this.log_('Connection exceeded healthy timeout but has received ' +
                              _this.conn_.bytesReceived +
                              ' bytes.  Marking connection healthy.');
                          _this.isHealthy_ = true;
                          _this.conn_.markConnectionHealthy();
                      }
                      else if (_this.conn_ &&
                          _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
                          _this.log_('Connection exceeded healthy timeout but has sent ' +
                              _this.conn_.bytesSent +
                              ' bytes.  Leaving connection alive.');
                          // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
                          // the server.
                      }
                      else {
                          _this.log_('Closing unhealthy connection after timeout.');
                          _this.close();
                      }
                  }
              }, Math.floor(healthyTimeout_ms));
          }
      };
      /**
       * @return {!string}
       * @private
       */
      Connection.prototype.nextTransportId_ = function () {
          return 'c:' + this.id + ':' + this.connectionCount++;
      };
      Connection.prototype.disconnReceiver_ = function (conn) {
          var _this = this;
          return function (everConnected) {
              if (conn === _this.conn_) {
                  _this.onConnectionLost_(everConnected);
              }
              else if (conn === _this.secondaryConn_) {
                  _this.log_('Secondary connection lost.');
                  _this.onSecondaryConnectionLost_();
              }
              else {
                  _this.log_('closing an old connection');
              }
          };
      };
      Connection.prototype.connReceiver_ = function (conn) {
          var _this = this;
          return function (message) {
              if (_this.state_ != 2 /* DISCONNECTED */) {
                  if (conn === _this.rx_) {
                      _this.onPrimaryMessageReceived_(message);
                  }
                  else if (conn === _this.secondaryConn_) {
                      _this.onSecondaryMessageReceived_(message);
                  }
                  else {
                      _this.log_('message on old connection');
                  }
              }
          };
      };
      /**
       *
       * @param {Object} dataMsg An arbitrary data message to be sent to the server
       */
      Connection.prototype.sendRequest = function (dataMsg) {
          // wrap in a data message envelope and send it on
          var msg = { t: 'd', d: dataMsg };
          this.sendData_(msg);
      };
      Connection.prototype.tryCleanupConnection = function () {
          if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
              this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
              this.conn_ = this.secondaryConn_;
              this.secondaryConn_ = null;
              // the server will shutdown the old connection
          }
      };
      Connection.prototype.onSecondaryControl_ = function (controlData) {
          if (MESSAGE_TYPE in controlData) {
              var cmd = controlData[MESSAGE_TYPE];
              if (cmd === SWITCH_ACK) {
                  this.upgradeIfSecondaryHealthy_();
              }
              else if (cmd === CONTROL_RESET) {
                  // Most likely the session wasn't valid. Abandon the switch attempt
                  this.log_('Got a reset on secondary, closing it');
                  this.secondaryConn_.close();
                  // If we were already using this connection for something, than we need to fully close
                  if (this.tx_ === this.secondaryConn_ ||
                      this.rx_ === this.secondaryConn_) {
                      this.close();
                  }
              }
              else if (cmd === CONTROL_PONG) {
                  this.log_('got pong on secondary.');
                  this.secondaryResponsesRequired_--;
                  this.upgradeIfSecondaryHealthy_();
              }
          }
      };
      Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {
          var layer = requireKey('t', parsedData);
          var data = requireKey('d', parsedData);
          if (layer == 'c') {
              this.onSecondaryControl_(data);
          }
          else if (layer == 'd') {
              // got a data message, but we're still second connection. Need to buffer it up
              this.pendingDataMessages.push(data);
          }
          else {
              throw new Error('Unknown protocol layer: ' + layer);
          }
      };
      Connection.prototype.upgradeIfSecondaryHealthy_ = function () {
          if (this.secondaryResponsesRequired_ <= 0) {
              this.log_('Secondary connection is healthy.');
              this.isHealthy_ = true;
              this.secondaryConn_.markConnectionHealthy();
              this.proceedWithUpgrade_();
          }
          else {
              // Send a ping to make sure the connection is healthy.
              this.log_('sending ping on secondary.');
              this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });
          }
      };
      Connection.prototype.proceedWithUpgrade_ = function () {
          // tell this connection to consider itself open
          this.secondaryConn_.start();
          // send ack
          this.log_('sending client ack on secondary');
          this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });
          // send end packet on primary transport, switch to sending on this one
          // can receive on this one, buffer responses until end received on primary transport
          this.log_('Ending transmission on primary');
          this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });
          this.tx_ = this.secondaryConn_;
          this.tryCleanupConnection();
      };
      Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {
          // Must refer to parsedData properties in quotes, so closure doesn't touch them.
          var layer = requireKey('t', parsedData);
          var data = requireKey('d', parsedData);
          if (layer == 'c') {
              this.onControl_(data);
          }
          else if (layer == 'd') {
              this.onDataMessage_(data);
          }
      };
      Connection.prototype.onDataMessage_ = function (message) {
          this.onPrimaryResponse_();
          // We don't do anything with data messages, just kick them up a level
          this.onMessage_(message);
      };
      Connection.prototype.onPrimaryResponse_ = function () {
          if (!this.isHealthy_) {
              this.primaryResponsesRequired_--;
              if (this.primaryResponsesRequired_ <= 0) {
                  this.log_('Primary connection is healthy.');
                  this.isHealthy_ = true;
                  this.conn_.markConnectionHealthy();
              }
          }
      };
      Connection.prototype.onControl_ = function (controlData) {
          var cmd = requireKey(MESSAGE_TYPE, controlData);
          if (MESSAGE_DATA in controlData) {
              var payload = controlData[MESSAGE_DATA];
              if (cmd === SERVER_HELLO) {
                  this.onHandshake_(payload);
              }
              else if (cmd === END_TRANSMISSION) {
                  this.log_('recvd end transmission on primary');
                  this.rx_ = this.secondaryConn_;
                  for (var i = 0; i < this.pendingDataMessages.length; ++i) {
                      this.onDataMessage_(this.pendingDataMessages[i]);
                  }
                  this.pendingDataMessages = [];
                  this.tryCleanupConnection();
              }
              else if (cmd === CONTROL_SHUTDOWN) {
                  // This was previously the 'onKill' callback passed to the lower-level connection
                  // payload in this case is the reason for the shutdown. Generally a human-readable error
                  this.onConnectionShutdown_(payload);
              }
              else if (cmd === CONTROL_RESET) {
                  // payload in this case is the host we should contact
                  this.onReset_(payload);
              }
              else if (cmd === CONTROL_ERROR) {
                  error('Server Error: ' + payload);
              }
              else if (cmd === CONTROL_PONG) {
                  this.log_('got pong on primary.');
                  this.onPrimaryResponse_();
                  this.sendPingOnPrimaryIfNecessary_();
              }
              else {
                  error('Unknown control packet command: ' + cmd);
              }
          }
      };
      /**
       *
       * @param {Object} handshake The handshake data returned from the server
       * @private
       */
      Connection.prototype.onHandshake_ = function (handshake) {
          var timestamp = handshake.ts;
          var version = handshake.v;
          var host = handshake.h;
          this.sessionId = handshake.s;
          this.repoInfo_.updateHost(host);
          // if we've already closed the connection, then don't bother trying to progress further
          if (this.state_ == 0 /* CONNECTING */) {
              this.conn_.start();
              this.onConnectionEstablished_(this.conn_, timestamp);
              if (PROTOCOL_VERSION !== version) {
                  warn('Protocol version mismatch detected');
              }
              // TODO: do we want to upgrade? when? maybe a delay?
              this.tryStartUpgrade_();
          }
      };
      Connection.prototype.tryStartUpgrade_ = function () {
          var conn = this.transportManager_.upgradeTransport();
          if (conn) {
              this.startUpgrade_(conn);
          }
      };
      Connection.prototype.startUpgrade_ = function (conn) {
          var _this = this;
          this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);
          // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
          // can consider the transport healthy.
          this.secondaryResponsesRequired_ =
              conn['responsesRequiredToBeHealthy'] || 0;
          var onMessage = this.connReceiver_(this.secondaryConn_);
          var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
          this.secondaryConn_.open(onMessage, onDisconnect);
          // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
          setTimeoutNonBlocking(function () {
              if (_this.secondaryConn_) {
                  _this.log_('Timed out trying to upgrade.');
                  _this.secondaryConn_.close();
              }
          }, Math.floor(UPGRADE_TIMEOUT));
      };
      Connection.prototype.onReset_ = function (host) {
          this.log_('Reset packet received.  New host: ' + host);
          this.repoInfo_.updateHost(host);
          // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
          // We don't currently support resets after the connection has already been established
          if (this.state_ === 1 /* CONNECTED */) {
              this.close();
          }
          else {
              // Close whatever connections we have open and start again.
              this.closeConnections_();
              this.start_();
          }
      };
      Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {
          var _this = this;
          this.log_('Realtime connection established.');
          this.conn_ = conn;
          this.state_ = 1 /* CONNECTED */;
          if (this.onReady_) {
              this.onReady_(timestamp, this.sessionId);
              this.onReady_ = null;
          }
          // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
          // send some pings.
          if (this.primaryResponsesRequired_ === 0) {
              this.log_('Primary connection is healthy.');
              this.isHealthy_ = true;
          }
          else {
              setTimeoutNonBlocking(function () {
                  _this.sendPingOnPrimaryIfNecessary_();
              }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
          }
      };
      Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {
          // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
          if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {
              this.log_('sending ping on primary.');
              this.sendData_({ t: 'c', d: { t: PING, d: {} } });
          }
      };
      Connection.prototype.onSecondaryConnectionLost_ = function () {
          var conn = this.secondaryConn_;
          this.secondaryConn_ = null;
          if (this.tx_ === conn || this.rx_ === conn) {
              // we are relying on this connection already in some capacity. Therefore, a failure is real
              this.close();
          }
      };
      /**
       *
       * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if
       * we should flush the host cache
       * @private
       */
      Connection.prototype.onConnectionLost_ = function (everConnected) {
          this.conn_ = null;
          // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
          // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
          if (!everConnected && this.state_ === 0 /* CONNECTING */) {
              this.log_('Realtime connection failed.');
              // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
              if (this.repoInfo_.isCacheableHost()) {
                  PersistentStorage.remove('host:' + this.repoInfo_.host);
                  // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
                  this.repoInfo_.internalHost = this.repoInfo_.host;
              }
          }
          else if (this.state_ === 1 /* CONNECTED */) {
              this.log_('Realtime connection lost.');
          }
          this.close();
      };
      /**
       *
       * @param {string} reason
       * @private
       */
      Connection.prototype.onConnectionShutdown_ = function (reason) {
          this.log_('Connection shutdown command received. Shutting down...');
          if (this.onKill_) {
              this.onKill_(reason);
              this.onKill_ = null;
          }
          // We intentionally don't want to fire onDisconnect (kill is a different case),
          // so clear the callback.
          this.onDisconnect_ = null;
          this.close();
      };
      Connection.prototype.sendData_ = function (data) {
          if (this.state_ !== 1 /* CONNECTED */) {
              throw 'Connection is not connected';
          }
          else {
              this.tx_.send(data);
          }
      };
      /**
       * Cleans up this connection, calling the appropriate callbacks
       */
      Connection.prototype.close = function () {
          if (this.state_ !== 2 /* DISCONNECTED */) {
              this.log_('Closing realtime connection.');
              this.state_ = 2 /* DISCONNECTED */;
              this.closeConnections_();
              if (this.onDisconnect_) {
                  this.onDisconnect_();
                  this.onDisconnect_ = null;
              }
          }
      };
      /**
       *
       * @private
       */
      Connection.prototype.closeConnections_ = function () {
          this.log_('Shutting down all connections');
          if (this.conn_) {
              this.conn_.close();
              this.conn_ = null;
          }
          if (this.secondaryConn_) {
              this.secondaryConn_.close();
              this.secondaryConn_ = null;
          }
          if (this.healthyTimeout_) {
              clearTimeout(this.healthyTimeout_);
              this.healthyTimeout_ = null;
          }
      };
      return Connection;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Interface defining the set of actions that can be performed against the Firebase server
   * (basically corresponds to our wire protocol).
   *
   * @interface
   */
  var ServerActions = /** @class */ (function () {
      function ServerActions() {
      }
      /**
       * @param {string} pathString
       * @param {*} data
       * @param {function(string, string)=} onComplete
       * @param {string=} hash
       */
      ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };
      /**
       * @param {string} pathString
       * @param {*} data
       * @param {function(string, ?string)} onComplete
       * @param {string=} hash
       */
      ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };
      /**
       * Refreshes the auth token for the current connection.
       * @param {string} token The authentication token
       */
      ServerActions.prototype.refreshAuthToken = function (token) { };
      /**
       * @param {string} pathString
       * @param {*} data
       * @param {function(string, string)=} onComplete
       */
      ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };
      /**
       * @param {string} pathString
       * @param {*} data
       * @param {function(string, string)=} onComplete
       */
      ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };
      /**
       * @param {string} pathString
       * @param {function(string, string)=} onComplete
       */
      ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };
      /**
       * @param {Object.<string, *>} stats
       */
      ServerActions.prototype.reportStats = function (stats) { };
      return ServerActions;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var RECONNECT_MIN_DELAY = 1000;
  var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)
  var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)
  var RECONNECT_DELAY_MULTIPLIER = 1.3;
  var RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.
  var SERVER_KILL_INTERRUPT_REASON = 'server_kill';
  // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
  var INVALID_AUTH_TOKEN_THRESHOLD = 3;
  /**
   * Firebase connection.  Abstracts wire protocol and handles reconnecting.
   *
   * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
   * in quotes to make sure the closure compiler does not minify them.
   */
  var PersistentConnection = /** @class */ (function (_super) {
      tslib_es6.__extends(PersistentConnection, _super);
      /**
       * @implements {ServerActions}
       * @param repoInfo_ Data about the namespace we are connecting to
       * @param onDataUpdate_ A callback for new data from the server
       */
      function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {
          var _this = _super.call(this) || this;
          _this.repoInfo_ = repoInfo_;
          _this.onDataUpdate_ = onDataUpdate_;
          _this.onConnectStatus_ = onConnectStatus_;
          _this.onServerInfoUpdate_ = onServerInfoUpdate_;
          _this.authTokenProvider_ = authTokenProvider_;
          _this.authOverride_ = authOverride_;
          // Used for diagnostic logging.
          _this.id = PersistentConnection.nextPersistentConnectionId_++;
          _this.log_ = logWrapper('p:' + _this.id + ':');
          _this.interruptReasons_ = {};
          /** Map<path, Map<queryId, ListenSpec>> */
          _this.listens = new Map();
          _this.outstandingPuts_ = [];
          _this.outstandingPutCount_ = 0;
          _this.onDisconnectRequestQueue_ = [];
          _this.connected_ = false;
          _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
          _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
          _this.securityDebugCallback_ = null;
          _this.lastSessionId = null;
          _this.establishConnectionTimer_ = null;
          _this.visible_ = false;
          // Before we get connected, we keep a queue of pending messages to send.
          _this.requestCBHash_ = {};
          _this.requestNumber_ = 0;
          _this.realtime_ = null;
          _this.authToken_ = null;
          _this.forceTokenRefresh_ = false;
          _this.invalidAuthTokenCount_ = 0;
          _this.firstConnection_ = true;
          _this.lastConnectionAttemptTime_ = null;
          _this.lastConnectionEstablishedTime_ = null;
          if (authOverride_ && !index_cjs.isNodeSdk()) {
              throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
          }
          _this.scheduleConnect_(0);
          VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);
          if (repoInfo_.host.indexOf('fblocal') === -1) {
              OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);
          }
          return _this;
      }
      PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {
          var curReqNum = ++this.requestNumber_;
          var msg = { r: curReqNum, a: action, b: body };
          this.log_(index_cjs.stringify(msg));
          index_cjs.assert(this.connected_, "sendRequest call when we're not connected not allowed.");
          this.realtime_.sendRequest(msg);
          if (onResponse) {
              this.requestCBHash_[curReqNum] = onResponse;
          }
      };
      /**
       * @inheritDoc
       */
      PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {
          var queryId = query.queryIdentifier();
          var pathString = query.path.toString();
          this.log_('Listen called for ' + pathString + ' ' + queryId);
          if (!this.listens.has(pathString)) {
              this.listens.set(pathString, new Map());
          }
          index_cjs.assert(query.getQueryParams().isDefault() ||
              !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');
          index_cjs.assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');
          var listenSpec = {
              onComplete: onComplete,
              hashFn: currentHashFn,
              query: query,
              tag: tag
          };
          this.listens.get(pathString).set(queryId, listenSpec);
          if (this.connected_) {
              this.sendListen_(listenSpec);
          }
      };
      PersistentConnection.prototype.sendListen_ = function (listenSpec) {
          var _this = this;
          var query = listenSpec.query;
          var pathString = query.path.toString();
          var queryId = query.queryIdentifier();
          this.log_('Listen on ' + pathString + ' for ' + queryId);
          var req = { /*path*/ p: pathString };
          var action = 'q';
          // Only bother to send query if it's non-default.
          if (listenSpec.tag) {
              req['q'] = query.queryObject();
              req['t'] = listenSpec.tag;
          }
          req[ /*hash*/'h'] = listenSpec.hashFn();
          this.sendRequest(action, req, function (message) {
              var payload = message[ /*data*/'d'];
              var status = message[ /*status*/'s'];
              // print warnings in any case...
              PersistentConnection.warnOnListenWarnings_(payload, query);
              var currentListenSpec = _this.listens.get(pathString) &&
                  _this.listens.get(pathString).get(queryId);
              // only trigger actions if the listen hasn't been removed and readded
              if (currentListenSpec === listenSpec) {
                  _this.log_('listen response', message);
                  if (status !== 'ok') {
                      _this.removeListen_(pathString, queryId);
                  }
                  if (listenSpec.onComplete) {
                      listenSpec.onComplete(status, payload);
                  }
              }
          });
      };
      PersistentConnection.warnOnListenWarnings_ = function (payload, query) {
          if (payload && typeof payload === 'object' && index_cjs.contains(payload, 'w')) {
              var warnings = index_cjs.safeGet(payload, 'w');
              if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
                  var indexSpec = '".indexOn": "' +
                      query
                          .getQueryParams()
                          .getIndex()
                          .toString() +
                      '"';
                  var indexPath = query.path.toString();
                  warn("Using an unspecified index. Your data will be downloaded and " +
                      ("filtered on the client. Consider adding " + indexSpec + " at ") +
                      (indexPath + " to your security rules for better performance."));
              }
          }
      };
      /**
       * @inheritDoc
       */
      PersistentConnection.prototype.refreshAuthToken = function (token) {
          this.authToken_ = token;
          this.log_('Auth token refreshed');
          if (this.authToken_) {
              this.tryAuth();
          }
          else {
              //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
              //the credential so we dont become authenticated next time we connect.
              if (this.connected_) {
                  this.sendRequest('unauth', {}, function () { });
              }
          }
          this.reduceReconnectDelayIfAdminCredential_(token);
      };
      PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {
          // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
          // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
          var isFirebaseSecret = credential && credential.length === 40;
          if (isFirebaseSecret || index_cjs.isAdmin(credential)) {
              this.log_('Admin auth credential detected.  Reducing max reconnect time.');
              this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
          }
      };
      /**
       * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
       * a auth revoked (the connection is closed).
       */
      PersistentConnection.prototype.tryAuth = function () {
          var _this = this;
          if (this.connected_ && this.authToken_) {
              var token_1 = this.authToken_;
              var authMethod = index_cjs.isValidFormat(token_1) ? 'auth' : 'gauth';
              var requestData = { cred: token_1 };
              if (this.authOverride_ === null) {
                  requestData['noauth'] = true;
              }
              else if (typeof this.authOverride_ === 'object') {
                  requestData['authvar'] = this.authOverride_;
              }
              this.sendRequest(authMethod, requestData, function (res) {
                  var status = res[ /*status*/'s'];
                  var data = res[ /*data*/'d'] || 'error';
                  if (_this.authToken_ === token_1) {
                      if (status === 'ok') {
                          _this.invalidAuthTokenCount_ = 0;
                      }
                      else {
                          // Triggers reconnect and force refresh for auth token
                          _this.onAuthRevoked_(status, data);
                      }
                  }
              });
          }
      };
      /**
       * @inheritDoc
       */
      PersistentConnection.prototype.unlisten = function (query, tag) {
          var pathString = query.path.toString();
          var queryId = query.queryIdentifier();
          this.log_('Unlisten called for ' + pathString + ' ' + queryId);
          index_cjs.assert(query.getQueryParams().isDefault() ||
              !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');
          var listen = this.removeListen_(pathString, queryId);
          if (listen && this.connected_) {
              this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);
          }
      };
      PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {
          this.log_('Unlisten on ' + pathString + ' for ' + queryId);
          var req = { /*path*/ p: pathString };
          var action = 'n';
          // Only bother sending queryId if it's non-default.
          if (tag) {
              req['q'] = queryObj;
              req['t'] = tag;
          }
          this.sendRequest(action, req);
      };
      /**
       * @inheritDoc
       */
      PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {
          if (this.connected_) {
              this.sendOnDisconnect_('o', pathString, data, onComplete);
          }
          else {
              this.onDisconnectRequestQueue_.push({
                  pathString: pathString,
                  action: 'o',
                  data: data,
                  onComplete: onComplete
              });
          }
      };
      /**
       * @inheritDoc
       */
      PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {
          if (this.connected_) {
              this.sendOnDisconnect_('om', pathString, data, onComplete);
          }
          else {
              this.onDisconnectRequestQueue_.push({
                  pathString: pathString,
                  action: 'om',
                  data: data,
                  onComplete: onComplete
              });
          }
      };
      /**
       * @inheritDoc
       */
      PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {
          if (this.connected_) {
              this.sendOnDisconnect_('oc', pathString, null, onComplete);
          }
          else {
              this.onDisconnectRequestQueue_.push({
                  pathString: pathString,
                  action: 'oc',
                  data: null,
                  onComplete: onComplete
              });
          }
      };
      PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {
          var request = { /*path*/ p: pathString, /*data*/ d: data };
          this.log_('onDisconnect ' + action, request);
          this.sendRequest(action, request, function (response) {
              if (onComplete) {
                  setTimeout(function () {
                      onComplete(response[ /*status*/'s'], response[ /* data */'d']);
                  }, Math.floor(0));
              }
          });
      };
      /**
       * @inheritDoc
       */
      PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
          this.putInternal('p', pathString, data, onComplete, hash);
      };
      /**
       * @inheritDoc
       */
      PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {
          this.putInternal('m', pathString, data, onComplete, hash);
      };
      PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {
          var request = {
              /*path*/ p: pathString,
              /*data*/ d: data
          };
          if (hash !== undefined)
              request[ /*hash*/'h'] = hash;
          // TODO: Only keep track of the most recent put for a given path?
          this.outstandingPuts_.push({
              action: action,
              request: request,
              onComplete: onComplete
          });
          this.outstandingPutCount_++;
          var index = this.outstandingPuts_.length - 1;
          if (this.connected_) {
              this.sendPut_(index);
          }
          else {
              this.log_('Buffering put: ' + pathString);
          }
      };
      PersistentConnection.prototype.sendPut_ = function (index) {
          var _this = this;
          var action = this.outstandingPuts_[index].action;
          var request = this.outstandingPuts_[index].request;
          var onComplete = this.outstandingPuts_[index].onComplete;
          this.outstandingPuts_[index].queued = this.connected_;
          this.sendRequest(action, request, function (message) {
              _this.log_(action + ' response', message);
              delete _this.outstandingPuts_[index];
              _this.outstandingPutCount_--;
              // Clean up array occasionally.
              if (_this.outstandingPutCount_ === 0) {
                  _this.outstandingPuts_ = [];
              }
              if (onComplete)
                  onComplete(message[ /*status*/'s'], message[ /* data */'d']);
          });
      };
      /**
       * @inheritDoc
       */
      PersistentConnection.prototype.reportStats = function (stats) {
          var _this = this;
          // If we're not connected, we just drop the stats.
          if (this.connected_) {
              var request = { /*counters*/ c: stats };
              this.log_('reportStats', request);
              this.sendRequest(/*stats*/ 's', request, function (result) {
                  var status = result[ /*status*/'s'];
                  if (status !== 'ok') {
                      var errorReason = result[ /* data */'d'];
                      _this.log_('reportStats', 'Error sending stats: ' + errorReason);
                  }
              });
          }
      };
      PersistentConnection.prototype.onDataMessage_ = function (message) {
          if ('r' in message) {
              // this is a response
              this.log_('from server: ' + index_cjs.stringify(message));
              var reqNum = message['r'];
              var onResponse = this.requestCBHash_[reqNum];
              if (onResponse) {
                  delete this.requestCBHash_[reqNum];
                  onResponse(message[ /*body*/'b']);
              }
          }
          else if ('error' in message) {
              throw 'A server-side error has occurred: ' + message['error'];
          }
          else if ('a' in message) {
              // a and b are action and body, respectively
              this.onDataPush_(message['a'], message['b']);
          }
      };
      PersistentConnection.prototype.onDataPush_ = function (action, body) {
          this.log_('handleServerMessage', action, body);
          if (action === 'd')
              this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
              /*isMerge*/ false, body['t']);
          else if (action === 'm')
              this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
              /*isMerge=*/ true, body['t']);
          else if (action === 'c')
              this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);
          else if (action === 'ac')
              this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);
          else if (action === 'sd')
              this.onSecurityDebugPacket_(body);
          else
              error('Unrecognized action received from server: ' +
                  index_cjs.stringify(action) +
                  '\nAre you using the latest client?');
      };
      PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {
          this.log_('connection ready');
          this.connected_ = true;
          this.lastConnectionEstablishedTime_ = new Date().getTime();
          this.handleTimestamp_(timestamp);
          this.lastSessionId = sessionId;
          if (this.firstConnection_) {
              this.sendConnectStats_();
          }
          this.restoreState_();
          this.firstConnection_ = false;
          this.onConnectStatus_(true);
      };
      PersistentConnection.prototype.scheduleConnect_ = function (timeout) {
          var _this = this;
          index_cjs.assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
          if (this.establishConnectionTimer_) {
              clearTimeout(this.establishConnectionTimer_);
          }
          // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
          // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
          this.establishConnectionTimer_ = setTimeout(function () {
              _this.establishConnectionTimer_ = null;
              _this.establishConnection_();
          }, Math.floor(timeout));
      };
      PersistentConnection.prototype.onVisible_ = function (visible) {
          // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
          if (visible &&
              !this.visible_ &&
              this.reconnectDelay_ === this.maxReconnectDelay_) {
              this.log_('Window became visible.  Reducing delay.');
              this.reconnectDelay_ = RECONNECT_MIN_DELAY;
              if (!this.realtime_) {
                  this.scheduleConnect_(0);
              }
          }
          this.visible_ = visible;
      };
      PersistentConnection.prototype.onOnline_ = function (online) {
          if (online) {
              this.log_('Browser went online.');
              this.reconnectDelay_ = RECONNECT_MIN_DELAY;
              if (!this.realtime_) {
                  this.scheduleConnect_(0);
              }
          }
          else {
              this.log_('Browser went offline.  Killing connection.');
              if (this.realtime_) {
                  this.realtime_.close();
              }
          }
      };
      PersistentConnection.prototype.onRealtimeDisconnect_ = function () {
          this.log_('data client disconnected');
          this.connected_ = false;
          this.realtime_ = null;
          // Since we don't know if our sent transactions succeeded or not, we need to cancel them.
          this.cancelSentTransactions_();
          // Clear out the pending requests.
          this.requestCBHash_ = {};
          if (this.shouldReconnect_()) {
              if (!this.visible_) {
                  this.log_("Window isn't visible.  Delaying reconnect.");
                  this.reconnectDelay_ = this.maxReconnectDelay_;
                  this.lastConnectionAttemptTime_ = new Date().getTime();
              }
              else if (this.lastConnectionEstablishedTime_) {
                  // If we've been connected long enough, reset reconnect delay to minimum.
                  var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
                  if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)
                      this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                  this.lastConnectionEstablishedTime_ = null;
              }
              var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
              var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
              reconnectDelay = Math.random() * reconnectDelay;
              this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
              this.scheduleConnect_(reconnectDelay);
              // Adjust reconnect delay for next time.
              this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
          }
          this.onConnectStatus_(false);
      };
      PersistentConnection.prototype.establishConnection_ = function () {
          if (this.shouldReconnect_()) {
              this.log_('Making a connection attempt');
              this.lastConnectionAttemptTime_ = new Date().getTime();
              this.lastConnectionEstablishedTime_ = null;
              var onDataMessage_1 = this.onDataMessage_.bind(this);
              var onReady_1 = this.onReady_.bind(this);
              var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
              var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;
              var self_1 = this;
              var lastSessionId_1 = this.lastSessionId;
              var canceled_1 = false;
              var connection_1 = null;
              var closeFn_1 = function () {
                  if (connection_1) {
                      connection_1.close();
                  }
                  else {
                      canceled_1 = true;
                      onDisconnect_1();
                  }
              };
              var sendRequestFn = function (msg) {
                  index_cjs.assert(connection_1, "sendRequest call when we're not connected not allowed.");
                  connection_1.sendRequest(msg);
              };
              this.realtime_ = {
                  close: closeFn_1,
                  sendRequest: sendRequestFn
              };
              var forceRefresh = this.forceTokenRefresh_;
              this.forceTokenRefresh_ = false;
              // First fetch auth token, and establish connection after fetching the token was successful
              this.authTokenProvider_
                  .getToken(forceRefresh)
                  .then(function (result) {
                  if (!canceled_1) {
                      log('getToken() completed. Creating connection.');
                      self_1.authToken_ = result && result.accessToken;
                      connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, 
                      /* onKill= */ function (reason) {
                          warn(reason + ' (' + self_1.repoInfo_.toString() + ')');
                          self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);
                      }, lastSessionId_1);
                  }
                  else {
                      log('getToken() completed but was canceled');
                  }
              })
                  .then(null, function (error) {
                  self_1.log_('Failed to get token: ' + error);
                  if (!canceled_1) {
                      if (index_cjs.CONSTANTS.NODE_ADMIN) {
                          // This may be a critical error for the Admin Node.js SDK, so log a warning.
                          // But getToken() may also just have temporarily failed, so we still want to
                          // continue retrying.
                          warn(error);
                      }
                      closeFn_1();
                  }
              });
          }
      };
      PersistentConnection.prototype.interrupt = function (reason) {
          log('Interrupting connection for reason: ' + reason);
          this.interruptReasons_[reason] = true;
          if (this.realtime_) {
              this.realtime_.close();
          }
          else {
              if (this.establishConnectionTimer_) {
                  clearTimeout(this.establishConnectionTimer_);
                  this.establishConnectionTimer_ = null;
              }
              if (this.connected_) {
                  this.onRealtimeDisconnect_();
              }
          }
      };
      PersistentConnection.prototype.resume = function (reason) {
          log('Resuming connection for reason: ' + reason);
          delete this.interruptReasons_[reason];
          if (index_cjs.isEmpty(this.interruptReasons_)) {
              this.reconnectDelay_ = RECONNECT_MIN_DELAY;
              if (!this.realtime_) {
                  this.scheduleConnect_(0);
              }
          }
      };
      PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {
          var delta = timestamp - new Date().getTime();
          this.onServerInfoUpdate_({ serverTimeOffset: delta });
      };
      PersistentConnection.prototype.cancelSentTransactions_ = function () {
          for (var i = 0; i < this.outstandingPuts_.length; i++) {
              var put = this.outstandingPuts_[i];
              if (put && /*hash*/ 'h' in put.request && put.queued) {
                  if (put.onComplete)
                      put.onComplete('disconnect');
                  delete this.outstandingPuts_[i];
                  this.outstandingPutCount_--;
              }
          }
          // Clean up array occasionally.
          if (this.outstandingPutCount_ === 0)
              this.outstandingPuts_ = [];
      };
      PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {
          // Remove the listen and manufacture a "permission_denied" error for the failed listen.
          var queryId;
          if (!query) {
              queryId = 'default';
          }
          else {
              queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');
          }
          var listen = this.removeListen_(pathString, queryId);
          if (listen && listen.onComplete)
              listen.onComplete('permission_denied');
      };
      PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {
          var normalizedPathString = new Path(pathString).toString(); // normalize path.
          var listen;
          if (this.listens.has(normalizedPathString)) {
              var map = this.listens.get(normalizedPathString);
              listen = map.get(queryId);
              map.delete(queryId);
              if (map.size === 0) {
                  this.listens.delete(normalizedPathString);
              }
          }
          else {
              // all listens for this path has already been removed
              listen = undefined;
          }
          return listen;
      };
      PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {
          log('Auth token revoked: ' + statusCode + '/' + explanation);
          this.authToken_ = null;
          this.forceTokenRefresh_ = true;
          this.realtime_.close();
          if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
              // We'll wait a couple times before logging the warning / increasing the
              // retry period since oauth tokens will report as "invalid" if they're
              // just expired. Plus there may be transient issues that resolve themselves.
              this.invalidAuthTokenCount_++;
              if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {
                  // Set a long reconnect delay because recovery is unlikely
                  this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
                  // Notify the auth token provider that the token is invalid, which will log
                  // a warning
                  this.authTokenProvider_.notifyForInvalidToken();
              }
          }
      };
      PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {
          if (this.securityDebugCallback_) {
              this.securityDebugCallback_(body);
          }
          else {
              if ('msg' in body) {
                  console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
              }
          }
      };
      PersistentConnection.prototype.restoreState_ = function () {
          var e_1, _a, e_2, _b;
          //Re-authenticate ourselves if we have a credential stored.
          this.tryAuth();
          try {
              // Puts depend on having received the corresponding data update from the server before they complete, so we must
              // make sure to send listens before puts.
              for (var _c = tslib_es6.__values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
                  var queries = _d.value;
                  try {
                      for (var _e = (e_2 = void 0, tslib_es6.__values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {
                          var listenSpec = _f.value;
                          this.sendListen_(listenSpec);
                      }
                  }
                  catch (e_2_1) { e_2 = { error: e_2_1 }; }
                  finally {
                      try {
                          if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                      }
                      finally { if (e_2) throw e_2.error; }
                  }
              }
          }
          catch (e_1_1) { e_1 = { error: e_1_1 }; }
          finally {
              try {
                  if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
              }
              finally { if (e_1) throw e_1.error; }
          }
          for (var i = 0; i < this.outstandingPuts_.length; i++) {
              if (this.outstandingPuts_[i])
                  this.sendPut_(i);
          }
          while (this.onDisconnectRequestQueue_.length) {
              var request = this.onDisconnectRequestQueue_.shift();
              this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
          }
      };
      /**
       * Sends client stats for first connection
       */
      PersistentConnection.prototype.sendConnectStats_ = function () {
          var stats = {};
          var clientName = 'js';
          if (index_cjs.CONSTANTS.NODE_ADMIN) {
              clientName = 'admin_node';
          }
          else if (index_cjs.CONSTANTS.NODE_CLIENT) {
              clientName = 'node';
          }
          stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\./g, '-')] = 1;
          if (index_cjs.isMobileCordova()) {
              stats['framework.cordova'] = 1;
          }
          else if (index_cjs.isReactNative()) {
              stats['framework.reactnative'] = 1;
          }
          this.reportStats(stats);
      };
      PersistentConnection.prototype.shouldReconnect_ = function () {
          var online = OnlineMonitor.getInstance().currentlyOnline();
          return index_cjs.isEmpty(this.interruptReasons_) && online;
      };
      PersistentConnection.nextPersistentConnectionId_ = 0;
      /**
       * Counter for number of connections created. Mainly used for tagging in the logs
       */
      PersistentConnection.nextConnectionId_ = 0;
      return PersistentConnection;
  }(ServerActions));

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An implementation of ServerActions that communicates with the server via REST requests.
   * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
   * persistent connection (using WebSockets or long-polling)
   */
  var ReadonlyRestClient = /** @class */ (function (_super) {
      tslib_es6.__extends(ReadonlyRestClient, _super);
      /**
       * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to
       * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server
       * @param {AuthTokenProvider} authTokenProvider_
       * @implements {ServerActions}
       */
      function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {
          var _this = _super.call(this) || this;
          _this.repoInfo_ = repoInfo_;
          _this.onDataUpdate_ = onDataUpdate_;
          _this.authTokenProvider_ = authTokenProvider_;
          /** @private {function(...[*])} */
          _this.log_ = logWrapper('p:rest:');
          /**
           * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
           * that's been removed. :-/
           *
           * @private {!Object.<string, !Object>}
           */
          _this.listens_ = {};
          return _this;
      }
      ReadonlyRestClient.prototype.reportStats = function (stats) {
          throw new Error('Method not implemented.');
      };
      /**
       * @param {!Query} query
       * @param {?number=} tag
       * @return {string}
       * @private
       */
      ReadonlyRestClient.getListenId_ = function (query, tag) {
          if (tag !== undefined) {
              return 'tag$' + tag;
          }
          else {
              index_cjs.assert(query.getQueryParams().isDefault(), "should have a tag if it's not a default query.");
              return query.path.toString();
          }
      };
      /** @inheritDoc */
      ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {
          var _this = this;
          var pathString = query.path.toString();
          this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());
          // Mark this listener so we can tell if it's removed.
          var listenId = ReadonlyRestClient.getListenId_(query, tag);
          var thisListen = {};
          this.listens_[listenId] = thisListen;
          var queryStringParameters = query
              .getQueryParams()
              .toRestQueryStringParameters();
          this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {
              var data = result;
              if (error === 404) {
                  data = null;
                  error = null;
              }
              if (error === null) {
                  _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);
              }
              if (index_cjs.safeGet(_this.listens_, listenId) === thisListen) {
                  var status_1;
                  if (!error) {
                      status_1 = 'ok';
                  }
                  else if (error == 401) {
                      status_1 = 'permission_denied';
                  }
                  else {
                      status_1 = 'rest_error:' + error;
                  }
                  onComplete(status_1, null);
              }
          });
      };
      /** @inheritDoc */
      ReadonlyRestClient.prototype.unlisten = function (query, tag) {
          var listenId = ReadonlyRestClient.getListenId_(query, tag);
          delete this.listens_[listenId];
      };
      /** @inheritDoc */
      ReadonlyRestClient.prototype.refreshAuthToken = function (token) {
          // no-op since we just always call getToken.
      };
      /**
       * Performs a REST request to the given path, with the provided query string parameters,
       * and any auth credentials we have.
       *
       * @param {!string} pathString
       * @param {!Object.<string, *>} queryStringParameters
       * @param {?function(?number, *=)} callback
       * @private
       */
      ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {
          var _this = this;
          if (queryStringParameters === void 0) { queryStringParameters = {}; }
          queryStringParameters['format'] = 'export';
          this.authTokenProvider_
              .getToken(/*forceRefresh=*/ false)
              .then(function (authTokenData) {
              var authToken = authTokenData && authTokenData.accessToken;
              if (authToken) {
                  queryStringParameters['auth'] = authToken;
              }
              var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +
                  _this.repoInfo_.host +
                  pathString +
                  '?' +
                  'ns=' +
                  _this.repoInfo_.namespace +
                  index_cjs.querystring(queryStringParameters);
              _this.log_('Sending REST request for ' + url);
              var xhr = new XMLHttpRequest();
              xhr.onreadystatechange = function () {
                  if (callback && xhr.readyState === 4) {
                      _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);
                      var res = null;
                      if (xhr.status >= 200 && xhr.status < 300) {
                          try {
                              res = index_cjs.jsonEval(xhr.responseText);
                          }
                          catch (e) {
                              warn('Failed to parse JSON response for ' +
                                  url +
                                  ': ' +
                                  xhr.responseText);
                          }
                          callback(null, res);
                      }
                      else {
                          // 401 and 404 are expected.
                          if (xhr.status !== 401 && xhr.status !== 404) {
                              warn('Got unsuccessful REST response for ' +
                                  url +
                                  ' Status: ' +
                                  xhr.status);
                          }
                          callback(xhr.status);
                      }
                      callback = null;
                  }
              };
              xhr.open('GET', url, /*asynchronous=*/ true);
              xhr.send();
          });
      };
      return ReadonlyRestClient;
  }(ServerActions));

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var INTERRUPT_REASON = 'repo_interrupt';
  /**
   * A connection to a single data repository.
   */
  var Repo = /** @class */ (function () {
      function Repo(repoInfo_, forceRestClient, app) {
          var _this = this;
          this.repoInfo_ = repoInfo_;
          this.app = app;
          this.dataUpdateCount = 0;
          this.statsListener_ = null;
          this.eventQueue_ = new EventQueue();
          this.nextWriteId_ = 1;
          this.interceptServerDataCallback_ = null;
          /** A list of data pieces and paths to be set when this client disconnects. */
          this.onDisconnect_ = new SparseSnapshotTree();
          // TODO: This should be @private but it's used by test_access.js and internal.js
          this.persistentConnection_ = null;
          var authTokenProvider = new AuthTokenProvider(app);
          this.stats_ = StatsManager.getCollection(repoInfo_);
          if (forceRestClient || beingCrawled()) {
              this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);
              // Minor hack: Fire onConnect immediately, since there's no actual connection.
              setTimeout(this.onConnectStatus_.bind(this, true), 0);
          }
          else {
              var authOverride = app.options['databaseAuthVariableOverride'];
              // Validate authOverride
              if (typeof authOverride !== 'undefined' && authOverride !== null) {
                  if (typeof authOverride !== 'object') {
                      throw new Error('Only objects are supported for option databaseAuthVariableOverride');
                  }
                  try {
                      index_cjs.stringify(authOverride);
                  }
                  catch (e) {
                      throw new Error('Invalid authOverride provided: ' + e);
                  }
              }
              this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);
              this.server_ = this.persistentConnection_;
          }
          authTokenProvider.addTokenChangeListener(function (token) {
              _this.server_.refreshAuthToken(token);
          });
          // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
          // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
          this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });
          this.transactions_init_();
          // Used for .info.
          this.infoData_ = new SnapshotHolder();
          this.infoSyncTree_ = new SyncTree({
              startListening: function (query, tag, currentHashFn, onComplete) {
                  var infoEvents = [];
                  var node = _this.infoData_.getNode(query.path);
                  // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
                  // on initial data...
                  if (!node.isEmpty()) {
                      infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);
                      setTimeout(function () {
                          onComplete('ok');
                      }, 0);
                  }
                  return infoEvents;
              },
              stopListening: function () { }
          });
          this.updateInfo_('connected', false);
          this.serverSyncTree_ = new SyncTree({
              startListening: function (query, tag, currentHashFn, onComplete) {
                  _this.server_.listen(query, currentHashFn, tag, function (status, data) {
                      var events = onComplete(status, data);
                      _this.eventQueue_.raiseEventsForChangedPath(query.path, events);
                  });
                  // No synchronous events for network-backed sync trees
                  return [];
              },
              stopListening: function (query, tag) {
                  _this.server_.unlisten(query, tag);
              }
          });
      }
      /**
       * @return The URL corresponding to the root of this Firebase.
       */
      Repo.prototype.toString = function () {
          return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);
      };
      /**
       * @return The namespace represented by the repo.
       */
      Repo.prototype.name = function () {
          return this.repoInfo_.namespace;
      };
      /**
       * @return The time in milliseconds, taking the server offset into account if we have one.
       */
      Repo.prototype.serverTime = function () {
          var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));
          var offset = offsetNode.val() || 0;
          return new Date().getTime() + offset;
      };
      /**
       * Generate ServerValues using some variables from the repo object.
       */
      Repo.prototype.generateServerValues = function () {
          return generateWithValues({
              timestamp: this.serverTime()
          });
      };
      /**
       * Called by realtime when we get new messages from the server.
       */
      Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {
          // For testing.
          this.dataUpdateCount++;
          var path = new Path(pathString);
          data = this.interceptServerDataCallback_
              ? this.interceptServerDataCallback_(pathString, data)
              : data;
          var events = [];
          if (tag) {
              if (isMerge) {
                  var taggedChildren = index_cjs.map(data, function (raw) {
                      return nodeFromJSON$1(raw);
                  });
                  events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);
              }
              else {
                  var taggedSnap = nodeFromJSON$1(data);
                  events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);
              }
          }
          else if (isMerge) {
              var changedChildren = index_cjs.map(data, function (raw) {
                  return nodeFromJSON$1(raw);
              });
              events = this.serverSyncTree_.applyServerMerge(path, changedChildren);
          }
          else {
              var snap = nodeFromJSON$1(data);
              events = this.serverSyncTree_.applyServerOverwrite(path, snap);
          }
          var affectedPath = path;
          if (events.length > 0) {
              // Since we have a listener outstanding for each transaction, receiving any events
              // is a proxy for some change having occurred.
              affectedPath = this.rerunTransactions_(path);
          }
          this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);
      };
      // TODO: This should be @private but it's used by test_access.js and internal.js
      Repo.prototype.interceptServerData_ = function (callback) {
          this.interceptServerDataCallback_ = callback;
      };
      Repo.prototype.onConnectStatus_ = function (connectStatus) {
          this.updateInfo_('connected', connectStatus);
          if (connectStatus === false) {
              this.runOnDisconnectEvents_();
          }
      };
      Repo.prototype.onServerInfoUpdate_ = function (updates) {
          var _this = this;
          each(updates, function (key, value) {
              _this.updateInfo_(key, value);
          });
      };
      Repo.prototype.updateInfo_ = function (pathString, value) {
          var path = new Path('/.info/' + pathString);
          var newNode = nodeFromJSON$1(value);
          this.infoData_.updateSnapshot(path, newNode);
          var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);
          this.eventQueue_.raiseEventsForChangedPath(path, events);
      };
      Repo.prototype.getNextWriteId_ = function () {
          return this.nextWriteId_++;
      };
      Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {
          var _this = this;
          this.log_('set', {
              path: path.toString(),
              value: newVal,
              priority: newPriority
          });
          // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
          // (b) store unresolved paths on JSON parse
          var serverValues = this.generateServerValues();
          var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);
          var existing = this.serverSyncTree_.calcCompleteEventCache(path);
          var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
          var writeId = this.getNextWriteId_();
          var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);
          this.eventQueue_.queueEvents(events);
          this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {
              var success = status === 'ok';
              if (!success) {
                  warn('set at ' + path + ' failed: ' + status);
              }
              var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);
              _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);
              _this.callOnCompleteCallback(onComplete, status, errorReason);
          });
          var affectedPath = this.abortTransactions_(path);
          this.rerunTransactions_(affectedPath);
          // We queued the events above, so just flush the queue here
          this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);
      };
      Repo.prototype.update = function (path, childrenToMerge, onComplete) {
          var _this = this;
          this.log_('update', { path: path.toString(), value: childrenToMerge });
          // Start with our existing data and merge each child into it.
          var empty = true;
          var serverValues = this.generateServerValues();
          var changedChildren = {};
          each(childrenToMerge, function (changedKey, changedValue) {
              empty = false;
              var newNodeUnresolved = nodeFromJSON$1(changedValue);
              changedChildren[changedKey] = resolveDeferredValueSnapshot(newNodeUnresolved, _this.serverSyncTree_.calcCompleteEventCache(path), serverValues);
          });
          if (!empty) {
              var writeId_1 = this.getNextWriteId_();
              var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);
              this.eventQueue_.queueEvents(events);
              this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {
                  var success = status === 'ok';
                  if (!success) {
                      warn('update at ' + path + ' failed: ' + status);
                  }
                  var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);
                  var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;
                  _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);
                  _this.callOnCompleteCallback(onComplete, status, errorReason);
              });
              each(childrenToMerge, function (changedPath) {
                  var affectedPath = _this.abortTransactions_(path.child(changedPath));
                  _this.rerunTransactions_(affectedPath);
              });
              // We queued the events above, so just flush the queue here
              this.eventQueue_.raiseEventsForChangedPath(path, []);
          }
          else {
              log("update() called with empty data.  Don't do anything.");
              this.callOnCompleteCallback(onComplete, 'ok');
          }
      };
      /**
       * Applies all of the changes stored up in the onDisconnect_ tree.
       */
      Repo.prototype.runOnDisconnectEvents_ = function () {
          var _this = this;
          this.log_('onDisconnectEvents');
          var serverValues = this.generateServerValues();
          var resolvedOnDisconnectTree = resolveDeferredValueTree(this.onDisconnect_, this.serverSyncTree_, serverValues);
          var events = [];
          resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {
              events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));
              var affectedPath = _this.abortTransactions_(path);
              _this.rerunTransactions_(affectedPath);
          });
          this.onDisconnect_ = new SparseSnapshotTree();
          this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);
      };
      Repo.prototype.onDisconnectCancel = function (path, onComplete) {
          var _this = this;
          this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {
              if (status === 'ok') {
                  _this.onDisconnect_.forget(path);
              }
              _this.callOnCompleteCallback(onComplete, status, errorReason);
          });
      };
      Repo.prototype.onDisconnectSet = function (path, value, onComplete) {
          var _this = this;
          var newNode = nodeFromJSON$1(value);
          this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
              if (status === 'ok') {
                  _this.onDisconnect_.remember(path, newNode);
              }
              _this.callOnCompleteCallback(onComplete, status, errorReason);
          });
      };
      Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {
          var _this = this;
          var newNode = nodeFromJSON$1(value, priority);
          this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
              if (status === 'ok') {
                  _this.onDisconnect_.remember(path, newNode);
              }
              _this.callOnCompleteCallback(onComplete, status, errorReason);
          });
      };
      Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {
          var _this = this;
          if (index_cjs.isEmpty(childrenToMerge)) {
              log("onDisconnect().update() called with empty data.  Don't do anything.");
              this.callOnCompleteCallback(onComplete, 'ok');
              return;
          }
          this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {
              if (status === 'ok') {
                  each(childrenToMerge, function (childName, childNode) {
                      var newChildNode = nodeFromJSON$1(childNode);
                      _this.onDisconnect_.remember(path.child(childName), newChildNode);
                  });
              }
              _this.callOnCompleteCallback(onComplete, status, errorReason);
          });
      };
      Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {
          var events;
          if (query.path.getFront() === '.info') {
              events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);
          }
          else {
              events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);
          }
          this.eventQueue_.raiseEventsAtPath(query.path, events);
      };
      Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {
          // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
          // a little bit by handling the return values anyways.
          var events;
          if (query.path.getFront() === '.info') {
              events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);
          }
          else {
              events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);
          }
          this.eventQueue_.raiseEventsAtPath(query.path, events);
      };
      Repo.prototype.interrupt = function () {
          if (this.persistentConnection_) {
              this.persistentConnection_.interrupt(INTERRUPT_REASON);
          }
      };
      Repo.prototype.resume = function () {
          if (this.persistentConnection_) {
              this.persistentConnection_.resume(INTERRUPT_REASON);
          }
      };
      Repo.prototype.stats = function (showDelta) {
          if (showDelta === void 0) { showDelta = false; }
          if (typeof console === 'undefined')
              return;
          var stats;
          if (showDelta) {
              if (!this.statsListener_)
                  this.statsListener_ = new StatsListener(this.stats_);
              stats = this.statsListener_.get();
          }
          else {
              stats = this.stats_.get();
          }
          var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {
              return Math.max(currentValue.length, previousValue);
          }, 0);
          each(stats, function (stat, value) {
              var paddedStat = stat;
              // pad stat names to be the same length (plus 2 extra spaces).
              for (var i = stat.length; i < longestName + 2; i++) {
                  paddedStat += ' ';
              }
              console.log(paddedStat + value);
          });
      };
      Repo.prototype.statsIncrementCounter = function (metric) {
          this.stats_.incrementCounter(metric);
          this.statsReporter_.includeStat(metric);
      };
      Repo.prototype.log_ = function () {
          var var_args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              var_args[_i] = arguments[_i];
          }
          var prefix = '';
          if (this.persistentConnection_) {
              prefix = this.persistentConnection_.id + ':';
          }
          log.apply(void 0, tslib_es6.__spread([prefix], var_args));
      };
      Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {
          if (callback) {
              exceptionGuard(function () {
                  if (status == 'ok') {
                      callback(null);
                  }
                  else {
                      var code = (status || 'error').toUpperCase();
                      var message = code;
                      if (errorReason)
                          message += ': ' + errorReason;
                      var error = new Error(message);
                      error.code = code;
                      callback(error);
                  }
              });
          }
      };
      Object.defineProperty(Repo.prototype, "database", {
          get: function () {
              return this.__database || (this.__database = new Database(this));
          },
          enumerable: true,
          configurable: true
      });
      return Repo;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
   *
   * @constructor
   * @implements {NodeFilter}
   */
  var RangedFilter = /** @class */ (function () {
      /**
       * @param {!QueryParams} params
       */
      function RangedFilter(params) {
          this.indexedFilter_ = new IndexedFilter(params.getIndex());
          this.index_ = params.getIndex();
          this.startPost_ = RangedFilter.getStartPost_(params);
          this.endPost_ = RangedFilter.getEndPost_(params);
      }
      /**
       * @return {!NamedNode}
       */
      RangedFilter.prototype.getStartPost = function () {
          return this.startPost_;
      };
      /**
       * @return {!NamedNode}
       */
      RangedFilter.prototype.getEndPost = function () {
          return this.endPost_;
      };
      /**
       * @param {!NamedNode} node
       * @return {boolean}
       */
      RangedFilter.prototype.matches = function (node) {
          return (this.index_.compare(this.getStartPost(), node) <= 0 &&
              this.index_.compare(node, this.getEndPost()) <= 0);
      };
      /**
       * @inheritDoc
       */
      RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
          if (!this.matches(new NamedNode(key, newChild))) {
              newChild = ChildrenNode.EMPTY_NODE;
          }
          return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
      };
      /**
       * @inheritDoc
       */
      RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
          if (newSnap.isLeafNode()) {
              // Make sure we have a children node with the correct index, not a leaf node;
              newSnap = ChildrenNode.EMPTY_NODE;
          }
          var filtered = newSnap.withIndex(this.index_);
          // Don't support priorities on queries
          filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
          var self = this;
          newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
              if (!self.matches(new NamedNode(key, childNode))) {
                  filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);
              }
          });
          return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
      };
      /**
       * @inheritDoc
       */
      RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
          // Don't support priorities on queries
          return oldSnap;
      };
      /**
       * @inheritDoc
       */
      RangedFilter.prototype.filtersNodes = function () {
          return true;
      };
      /**
       * @inheritDoc
       */
      RangedFilter.prototype.getIndexedFilter = function () {
          return this.indexedFilter_;
      };
      /**
       * @inheritDoc
       */
      RangedFilter.prototype.getIndex = function () {
          return this.index_;
      };
      /**
       * @param {!QueryParams} params
       * @return {!NamedNode}
       * @private
       */
      RangedFilter.getStartPost_ = function (params) {
          if (params.hasStart()) {
              var startName = params.getIndexStartName();
              return params.getIndex().makePost(params.getIndexStartValue(), startName);
          }
          else {
              return params.getIndex().minPost();
          }
      };
      /**
       * @param {!QueryParams} params
       * @return {!NamedNode}
       * @private
       */
      RangedFilter.getEndPost_ = function (params) {
          if (params.hasEnd()) {
              var endName = params.getIndexEndName();
              return params.getIndex().makePost(params.getIndexEndValue(), endName);
          }
          else {
              return params.getIndex().maxPost();
          }
      };
      return RangedFilter;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
   *
   * @constructor
   * @implements {NodeFilter}
   */
  var LimitedFilter = /** @class */ (function () {
      /**
       * @param {!QueryParams} params
       */
      function LimitedFilter(params) {
          this.rangedFilter_ = new RangedFilter(params);
          this.index_ = params.getIndex();
          this.limit_ = params.getLimit();
          this.reverse_ = !params.isViewFromLeft();
      }
      /**
       * @inheritDoc
       */
      LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
          if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {
              newChild = ChildrenNode.EMPTY_NODE;
          }
          if (snap.getImmediateChild(key).equals(newChild)) {
              // No change
              return snap;
          }
          else if (snap.numChildren() < this.limit_) {
              return this.rangedFilter_
                  .getIndexedFilter()
                  .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
          }
          else {
              return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
          }
      };
      /**
       * @inheritDoc
       */
      LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
          var filtered;
          if (newSnap.isLeafNode() || newSnap.isEmpty()) {
              // Make sure we have a children node with the correct index, not a leaf node;
              filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
          }
          else {
              if (this.limit_ * 2 < newSnap.numChildren() &&
                  newSnap.isIndexed(this.index_)) {
                  // Easier to build up a snapshot, since what we're given has more than twice the elements we want
                  filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
                  // anchor to the startPost, endPost, or last element as appropriate
                  var iterator = void 0;
                  if (this.reverse_) {
                      iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
                  }
                  else {
                      iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
                  }
                  var count = 0;
                  while (iterator.hasNext() && count < this.limit_) {
                      var next = iterator.getNext();
                      var inRange = void 0;
                      if (this.reverse_) {
                          inRange =
                              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
                      }
                      else {
                          inRange =
                              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
                      }
                      if (inRange) {
                          filtered = filtered.updateImmediateChild(next.name, next.node);
                          count++;
                      }
                      else {
                          // if we have reached the end post, we cannot keep adding elemments
                          break;
                      }
                  }
              }
              else {
                  // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
                  filtered = newSnap.withIndex(this.index_);
                  // Don't support priorities on queries
                  filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
                  var startPost = void 0;
                  var endPost = void 0;
                  var cmp = void 0;
                  var iterator = void 0;
                  if (this.reverse_) {
                      iterator = filtered.getReverseIterator(this.index_);
                      startPost = this.rangedFilter_.getEndPost();
                      endPost = this.rangedFilter_.getStartPost();
                      var indexCompare_1 = this.index_.getCompare();
                      cmp = function (a, b) { return indexCompare_1(b, a); };
                  }
                  else {
                      iterator = filtered.getIterator(this.index_);
                      startPost = this.rangedFilter_.getStartPost();
                      endPost = this.rangedFilter_.getEndPost();
                      cmp = this.index_.getCompare();
                  }
                  var count = 0;
                  var foundStartPost = false;
                  while (iterator.hasNext()) {
                      var next = iterator.getNext();
                      if (!foundStartPost && cmp(startPost, next) <= 0) {
                          // start adding
                          foundStartPost = true;
                      }
                      var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;
                      if (inRange) {
                          count++;
                      }
                      else {
                          filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
                      }
                  }
              }
          }
          return this.rangedFilter_
              .getIndexedFilter()
              .updateFullNode(oldSnap, filtered, optChangeAccumulator);
      };
      /**
       * @inheritDoc
       */
      LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
          // Don't support priorities on queries
          return oldSnap;
      };
      /**
       * @inheritDoc
       */
      LimitedFilter.prototype.filtersNodes = function () {
          return true;
      };
      /**
       * @inheritDoc
       */
      LimitedFilter.prototype.getIndexedFilter = function () {
          return this.rangedFilter_.getIndexedFilter();
      };
      /**
       * @inheritDoc
       */
      LimitedFilter.prototype.getIndex = function () {
          return this.index_;
      };
      /**
       * @param {!Node} snap
       * @param {string} childKey
       * @param {!Node} childSnap
       * @param {!CompleteChildSource} source
       * @param {?ChildChangeAccumulator} changeAccumulator
       * @return {!Node}
       * @private
       */
      LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {
          // TODO: rename all cache stuff etc to general snap terminology
          var cmp;
          if (this.reverse_) {
              var indexCmp_1 = this.index_.getCompare();
              cmp = function (a, b) { return indexCmp_1(b, a); };
          }
          else {
              cmp = this.index_.getCompare();
          }
          var oldEventCache = snap;
          index_cjs.assert(oldEventCache.numChildren() == this.limit_, '');
          var newChildNamedNode = new NamedNode(childKey, childSnap);
          var windowBoundary = this.reverse_
              ? oldEventCache.getFirstChild(this.index_)
              : oldEventCache.getLastChild(this.index_);
          var inRange = this.rangedFilter_.matches(newChildNamedNode);
          if (oldEventCache.hasChild(childKey)) {
              var oldChildSnap = oldEventCache.getImmediateChild(childKey);
              var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
              while (nextChild != null &&
                  (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {
                  // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
                  // been applied to the limited filter yet. Ignore this next child which will be updated later in
                  // the limited filter...
                  nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
              }
              var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
              var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
              if (remainsInWindow) {
                  if (changeAccumulator != null) {
                      changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));
                  }
                  return oldEventCache.updateImmediateChild(childKey, childSnap);
              }
              else {
                  if (changeAccumulator != null) {
                      changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));
                  }
                  var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
                  var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
                  if (nextChildInRange) {
                      if (changeAccumulator != null) {
                          changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));
                      }
                      return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
                  }
                  else {
                      return newEventCache;
                  }
              }
          }
          else if (childSnap.isEmpty()) {
              // we're deleting a node, but it was not in the window, so ignore it
              return snap;
          }
          else if (inRange) {
              if (cmp(windowBoundary, newChildNamedNode) >= 0) {
                  if (changeAccumulator != null) {
                      changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));
                      changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));
                  }
                  return oldEventCache
                      .updateImmediateChild(childKey, childSnap)
                      .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
              }
              else {
                  return snap;
              }
          }
          else {
              return snap;
          }
      };
      return LimitedFilter;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
   * range to be returned for a particular location. It is assumed that validation of parameters is done at the
   * user-facing API level, so it is not done here.
   * @constructor
   */
  var QueryParams = /** @class */ (function () {
      function QueryParams() {
          this.limitSet_ = false;
          this.startSet_ = false;
          this.startNameSet_ = false;
          this.endSet_ = false;
          this.endNameSet_ = false;
          this.limit_ = 0;
          this.viewFrom_ = '';
          this.indexStartValue_ = null;
          this.indexStartName_ = '';
          this.indexEndValue_ = null;
          this.indexEndName_ = '';
          this.index_ = PRIORITY_INDEX;
      }
      /**
       * @return {boolean}
       */
      QueryParams.prototype.hasStart = function () {
          return this.startSet_;
      };
      /**
       * @return {boolean} True if it would return from left.
       */
      QueryParams.prototype.isViewFromLeft = function () {
          if (this.viewFrom_ === '') {
              // limit(), rather than limitToFirst or limitToLast was called.
              // This means that only one of startSet_ and endSet_ is true. Use them
              // to calculate which side of the view to anchor to. If neither is set,
              // anchor to the end.
              return this.startSet_;
          }
          else {
              return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);
          }
      };
      /**
       * Only valid to call if hasStart() returns true
       * @return {*}
       */
      QueryParams.prototype.getIndexStartValue = function () {
          index_cjs.assert(this.startSet_, 'Only valid if start has been set');
          return this.indexStartValue_;
      };
      /**
       * Only valid to call if hasStart() returns true.
       * Returns the starting key name for the range defined by these query parameters
       * @return {!string}
       */
      QueryParams.prototype.getIndexStartName = function () {
          index_cjs.assert(this.startSet_, 'Only valid if start has been set');
          if (this.startNameSet_) {
              return this.indexStartName_;
          }
          else {
              return MIN_NAME;
          }
      };
      /**
       * @return {boolean}
       */
      QueryParams.prototype.hasEnd = function () {
          return this.endSet_;
      };
      /**
       * Only valid to call if hasEnd() returns true.
       * @return {*}
       */
      QueryParams.prototype.getIndexEndValue = function () {
          index_cjs.assert(this.endSet_, 'Only valid if end has been set');
          return this.indexEndValue_;
      };
      /**
       * Only valid to call if hasEnd() returns true.
       * Returns the end key name for the range defined by these query parameters
       * @return {!string}
       */
      QueryParams.prototype.getIndexEndName = function () {
          index_cjs.assert(this.endSet_, 'Only valid if end has been set');
          if (this.endNameSet_) {
              return this.indexEndName_;
          }
          else {
              return MAX_NAME;
          }
      };
      /**
       * @return {boolean}
       */
      QueryParams.prototype.hasLimit = function () {
          return this.limitSet_;
      };
      /**
       * @return {boolean} True if a limit has been set and it has been explicitly anchored
       */
      QueryParams.prototype.hasAnchoredLimit = function () {
          return this.limitSet_ && this.viewFrom_ !== '';
      };
      /**
       * Only valid to call if hasLimit() returns true
       * @return {!number}
       */
      QueryParams.prototype.getLimit = function () {
          index_cjs.assert(this.limitSet_, 'Only valid if limit has been set');
          return this.limit_;
      };
      /**
       * @return {!Index}
       */
      QueryParams.prototype.getIndex = function () {
          return this.index_;
      };
      /**
       * @return {!QueryParams}
       * @private
       */
      QueryParams.prototype.copy_ = function () {
          var copy = new QueryParams();
          copy.limitSet_ = this.limitSet_;
          copy.limit_ = this.limit_;
          copy.startSet_ = this.startSet_;
          copy.indexStartValue_ = this.indexStartValue_;
          copy.startNameSet_ = this.startNameSet_;
          copy.indexStartName_ = this.indexStartName_;
          copy.endSet_ = this.endSet_;
          copy.indexEndValue_ = this.indexEndValue_;
          copy.endNameSet_ = this.endNameSet_;
          copy.indexEndName_ = this.indexEndName_;
          copy.index_ = this.index_;
          copy.viewFrom_ = this.viewFrom_;
          return copy;
      };
      /**
       * @param {!number} newLimit
       * @return {!QueryParams}
       */
      QueryParams.prototype.limit = function (newLimit) {
          var newParams = this.copy_();
          newParams.limitSet_ = true;
          newParams.limit_ = newLimit;
          newParams.viewFrom_ = '';
          return newParams;
      };
      /**
       * @param {!number} newLimit
       * @return {!QueryParams}
       */
      QueryParams.prototype.limitToFirst = function (newLimit) {
          var newParams = this.copy_();
          newParams.limitSet_ = true;
          newParams.limit_ = newLimit;
          newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
          return newParams;
      };
      /**
       * @param {!number} newLimit
       * @return {!QueryParams}
       */
      QueryParams.prototype.limitToLast = function (newLimit) {
          var newParams = this.copy_();
          newParams.limitSet_ = true;
          newParams.limit_ = newLimit;
          newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;
          return newParams;
      };
      /**
       * @param {*} indexValue
       * @param {?string=} key
       * @return {!QueryParams}
       */
      QueryParams.prototype.startAt = function (indexValue, key) {
          var newParams = this.copy_();
          newParams.startSet_ = true;
          if (indexValue === undefined) {
              indexValue = null;
          }
          newParams.indexStartValue_ = indexValue;
          if (key != null) {
              newParams.startNameSet_ = true;
              newParams.indexStartName_ = key;
          }
          else {
              newParams.startNameSet_ = false;
              newParams.indexStartName_ = '';
          }
          return newParams;
      };
      /**
       * @param {*} indexValue
       * @param {?string=} key
       * @return {!QueryParams}
       */
      QueryParams.prototype.endAt = function (indexValue, key) {
          var newParams = this.copy_();
          newParams.endSet_ = true;
          if (indexValue === undefined) {
              indexValue = null;
          }
          newParams.indexEndValue_ = indexValue;
          if (key !== undefined) {
              newParams.endNameSet_ = true;
              newParams.indexEndName_ = key;
          }
          else {
              newParams.endNameSet_ = false;
              newParams.indexEndName_ = '';
          }
          return newParams;
      };
      /**
       * @param {!Index} index
       * @return {!QueryParams}
       */
      QueryParams.prototype.orderBy = function (index) {
          var newParams = this.copy_();
          newParams.index_ = index;
          return newParams;
      };
      /**
       * @return {!Object}
       */
      QueryParams.prototype.getQueryObject = function () {
          var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;
          var obj = {};
          if (this.startSet_) {
              obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;
              if (this.startNameSet_) {
                  obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;
              }
          }
          if (this.endSet_) {
              obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;
              if (this.endNameSet_) {
                  obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;
              }
          }
          if (this.limitSet_) {
              obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;
              var viewFrom = this.viewFrom_;
              if (viewFrom === '') {
                  if (this.isViewFromLeft()) {
                      viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;
                  }
                  else {
                      viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;
                  }
              }
              obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;
          }
          // For now, priority index is the default, so we only specify if it's some other index
          if (this.index_ !== PRIORITY_INDEX) {
              obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();
          }
          return obj;
      };
      /**
       * @return {boolean}
       */
      QueryParams.prototype.loadsAllData = function () {
          return !(this.startSet_ || this.endSet_ || this.limitSet_);
      };
      /**
       * @return {boolean}
       */
      QueryParams.prototype.isDefault = function () {
          return this.loadsAllData() && this.index_ == PRIORITY_INDEX;
      };
      /**
       * @return {!NodeFilter}
       */
      QueryParams.prototype.getNodeFilter = function () {
          if (this.loadsAllData()) {
              return new IndexedFilter(this.getIndex());
          }
          else if (this.hasLimit()) {
              return new LimitedFilter(this);
          }
          else {
              return new RangedFilter(this);
          }
      };
      /**
       * Returns a set of REST query string parameters representing this query.
       *
       * @return {!Object.<string,*>} query string parameters
       */
      QueryParams.prototype.toRestQueryStringParameters = function () {
          var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;
          var qs = {};
          if (this.isDefault()) {
              return qs;
          }
          var orderBy;
          if (this.index_ === PRIORITY_INDEX) {
              orderBy = REST_CONSTANTS.PRIORITY_INDEX;
          }
          else if (this.index_ === VALUE_INDEX) {
              orderBy = REST_CONSTANTS.VALUE_INDEX;
          }
          else if (this.index_ === KEY_INDEX) {
              orderBy = REST_CONSTANTS.KEY_INDEX;
          }
          else {
              index_cjs.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');
              orderBy = this.index_.toString();
          }
          qs[REST_CONSTANTS.ORDER_BY] = index_cjs.stringify(orderBy);
          if (this.startSet_) {
              qs[REST_CONSTANTS.START_AT] = index_cjs.stringify(this.indexStartValue_);
              if (this.startNameSet_) {
                  qs[REST_CONSTANTS.START_AT] += ',' + index_cjs.stringify(this.indexStartName_);
              }
          }
          if (this.endSet_) {
              qs[REST_CONSTANTS.END_AT] = index_cjs.stringify(this.indexEndValue_);
              if (this.endNameSet_) {
                  qs[REST_CONSTANTS.END_AT] += ',' + index_cjs.stringify(this.indexEndName_);
              }
          }
          if (this.limitSet_) {
              if (this.isViewFromLeft()) {
                  qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;
              }
              else {
                  qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;
              }
          }
          return qs;
      };
      /**
       * Wire Protocol Constants
       * @const
       * @enum {string}
       * @private
       */
      QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {
          INDEX_START_VALUE: 'sp',
          INDEX_START_NAME: 'sn',
          INDEX_END_VALUE: 'ep',
          INDEX_END_NAME: 'en',
          LIMIT: 'l',
          VIEW_FROM: 'vf',
          VIEW_FROM_LEFT: 'l',
          VIEW_FROM_RIGHT: 'r',
          INDEX: 'i'
      };
      /**
       * REST Query Constants
       * @const
       * @enum {string}
       * @private
       */
      QueryParams.REST_QUERY_CONSTANTS_ = {
          ORDER_BY: 'orderBy',
          PRIORITY_INDEX: '$priority',
          VALUE_INDEX: '$value',
          KEY_INDEX: '$key',
          START_AT: 'startAt',
          END_AT: 'endAt',
          LIMIT_TO_FIRST: 'limitToFirst',
          LIMIT_TO_LAST: 'limitToLast'
      };
      /**
       * Default, empty query parameters
       * @type {!QueryParams}
       * @const
       */
      QueryParams.DEFAULT = new QueryParams();
      return QueryParams;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var Reference = /** @class */ (function (_super) {
      tslib_es6.__extends(Reference, _super);
      /**
       * Call options:
       *   new Reference(Repo, Path) or
       *   new Reference(url: string, string|RepoManager)
       *
       * Externally - this is the firebase.database.Reference type.
       *
       * @param {!Repo} repo
       * @param {(!Path)} path
       * @extends {Query}
       */
      function Reference(repo, path) {
          var _this = this;
          if (!(repo instanceof Repo)) {
              throw new Error('new Reference() no longer supported - use app.database().');
          }
          // call Query's constructor, passing in the repo and path.
          _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;
          return _this;
      }
      /** @return {?string} */
      Reference.prototype.getKey = function () {
          index_cjs.validateArgCount('Reference.key', 0, 0, arguments.length);
          if (this.path.isEmpty())
              return null;
          else
              return this.path.getBack();
      };
      /**
       * @param {!(string|Path)} pathString
       * @return {!Reference}
       */
      Reference.prototype.child = function (pathString) {
          index_cjs.validateArgCount('Reference.child', 1, 1, arguments.length);
          if (typeof pathString === 'number') {
              pathString = String(pathString);
          }
          else if (!(pathString instanceof Path)) {
              if (this.path.getFront() === null)
                  validateRootPathString('Reference.child', 1, pathString, false);
              else
                  validatePathString('Reference.child', 1, pathString, false);
          }
          return new Reference(this.repo, this.path.child(pathString));
      };
      /** @return {?Reference} */
      Reference.prototype.getParent = function () {
          index_cjs.validateArgCount('Reference.parent', 0, 0, arguments.length);
          var parentPath = this.path.parent();
          return parentPath === null ? null : new Reference(this.repo, parentPath);
      };
      /** @return {!Reference} */
      Reference.prototype.getRoot = function () {
          index_cjs.validateArgCount('Reference.root', 0, 0, arguments.length);
          var ref = this;
          while (ref.getParent() !== null) {
              ref = ref.getParent();
          }
          return ref;
      };
      /** @return {!Database} */
      Reference.prototype.databaseProp = function () {
          return this.repo.database;
      };
      /**
       * @param {*} newVal
       * @param {function(?Error)=} onComplete
       * @return {!Promise}
       */
      Reference.prototype.set = function (newVal, onComplete) {
          index_cjs.validateArgCount('Reference.set', 1, 2, arguments.length);
          validateWritablePath('Reference.set', this.path);
          validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);
          index_cjs.validateCallback('Reference.set', 2, onComplete, true);
          var deferred = new index_cjs.Deferred();
          this.repo.setWithPriority(this.path, newVal, 
          /*priority=*/ null, deferred.wrapCallback(onComplete));
          return deferred.promise;
      };
      /**
       * @param {!Object} objectToMerge
       * @param {function(?Error)=} onComplete
       * @return {!Promise}
       */
      Reference.prototype.update = function (objectToMerge, onComplete) {
          index_cjs.validateArgCount('Reference.update', 1, 2, arguments.length);
          validateWritablePath('Reference.update', this.path);
          if (Array.isArray(objectToMerge)) {
              var newObjectToMerge = {};
              for (var i = 0; i < objectToMerge.length; ++i) {
                  newObjectToMerge['' + i] = objectToMerge[i];
              }
              objectToMerge = newObjectToMerge;
              warn('Passing an Array to Firebase.update() is deprecated. ' +
                  'Use set() if you want to overwrite the existing data, or ' +
                  'an Object with integer keys if you really do want to ' +
                  'only update some of the children.');
          }
          validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);
          index_cjs.validateCallback('Reference.update', 2, onComplete, true);
          var deferred = new index_cjs.Deferred();
          this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));
          return deferred.promise;
      };
      /**
       * @param {*} newVal
       * @param {string|number|null} newPriority
       * @param {function(?Error)=} onComplete
       * @return {!Promise}
       */
      Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {
          index_cjs.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);
          validateWritablePath('Reference.setWithPriority', this.path);
          validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);
          validatePriority('Reference.setWithPriority', 2, newPriority, false);
          index_cjs.validateCallback('Reference.setWithPriority', 3, onComplete, true);
          if (this.getKey() === '.length' || this.getKey() === '.keys')
              throw 'Reference.setWithPriority failed: ' +
                  this.getKey() +
                  ' is a read-only object.';
          var deferred = new index_cjs.Deferred();
          this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));
          return deferred.promise;
      };
      /**
       * @param {function(?Error)=} onComplete
       * @return {!Promise}
       */
      Reference.prototype.remove = function (onComplete) {
          index_cjs.validateArgCount('Reference.remove', 0, 1, arguments.length);
          validateWritablePath('Reference.remove', this.path);
          index_cjs.validateCallback('Reference.remove', 1, onComplete, true);
          return this.set(null, onComplete);
      };
      /**
       * @param {function(*):*} transactionUpdate
       * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete
       * @param {boolean=} applyLocally
       * @return {!Promise}
       */
      Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {
          index_cjs.validateArgCount('Reference.transaction', 1, 3, arguments.length);
          validateWritablePath('Reference.transaction', this.path);
          index_cjs.validateCallback('Reference.transaction', 1, transactionUpdate, false);
          index_cjs.validateCallback('Reference.transaction', 2, onComplete, true);
          // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how
          // to expose it.
          validateBoolean('Reference.transaction', 3, applyLocally, true);
          if (this.getKey() === '.length' || this.getKey() === '.keys')
              throw 'Reference.transaction failed: ' +
                  this.getKey() +
                  ' is a read-only object.';
          if (applyLocally === undefined)
              applyLocally = true;
          var deferred = new index_cjs.Deferred();
          if (typeof onComplete === 'function') {
              deferred.promise.catch(function () { });
          }
          var promiseComplete = function (error, committed, snapshot) {
              if (error) {
                  deferred.reject(error);
              }
              else {
                  deferred.resolve(new TransactionResult(committed, snapshot));
              }
              if (typeof onComplete === 'function') {
                  onComplete(error, committed, snapshot);
              }
          };
          this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);
          return deferred.promise;
      };
      /**
       * @param {string|number|null} priority
       * @param {function(?Error)=} onComplete
       * @return {!Promise}
       */
      Reference.prototype.setPriority = function (priority, onComplete) {
          index_cjs.validateArgCount('Reference.setPriority', 1, 2, arguments.length);
          validateWritablePath('Reference.setPriority', this.path);
          validatePriority('Reference.setPriority', 1, priority, false);
          index_cjs.validateCallback('Reference.setPriority', 2, onComplete, true);
          var deferred = new index_cjs.Deferred();
          this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));
          return deferred.promise;
      };
      /**
       * @param {*=} value
       * @param {function(?Error)=} onComplete
       * @return {!Reference}
       */
      Reference.prototype.push = function (value, onComplete) {
          index_cjs.validateArgCount('Reference.push', 0, 2, arguments.length);
          validateWritablePath('Reference.push', this.path);
          validateFirebaseDataArg('Reference.push', 1, value, this.path, true);
          index_cjs.validateCallback('Reference.push', 2, onComplete, true);
          var now = this.repo.serverTime();
          var name = nextPushId(now);
          // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.
          // We use child() to create handles to two different references. The first is turned into a
          // ThennableReference below by adding then() and catch() methods and is used as the
          // return value of push(). The second remains a regular Reference and is used as the fulfilled
          // value of the first ThennableReference.
          var thennablePushRef = this.child(name);
          var pushRef = this.child(name);
          var promise;
          if (value != null) {
              promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });
          }
          else {
              promise = Promise.resolve(pushRef);
          }
          thennablePushRef.then = promise.then.bind(promise);
          thennablePushRef.catch = promise.then.bind(promise, undefined);
          if (typeof onComplete === 'function') {
              promise.catch(function () { });
          }
          return thennablePushRef;
      };
      /**
       * @return {!OnDisconnect}
       */
      Reference.prototype.onDisconnect = function () {
          validateWritablePath('Reference.onDisconnect', this.path);
          return new OnDisconnect(this.repo, this.path);
      };
      Object.defineProperty(Reference.prototype, "database", {
          get: function () {
              return this.databaseProp();
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Reference.prototype, "key", {
          get: function () {
              return this.getKey();
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Reference.prototype, "parent", {
          get: function () {
              return this.getParent();
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Reference.prototype, "root", {
          get: function () {
              return this.getRoot();
          },
          enumerable: true,
          configurable: true
      });
      return Reference;
  }(Query));
  /**
   * Define reference constructor in various modules
   *
   * We are doing this here to avoid several circular
   * dependency issues
   */
  Query.__referenceConstructor = Reference;
  SyncPoint.__referenceConstructor = Reference;

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Node in a Tree.
   */
  var TreeNode = /** @class */ (function () {
      function TreeNode() {
          // TODO: Consider making accessors that create children and value lazily or
          // separate Internal / Leaf 'types'.
          this.children = {};
          this.childCount = 0;
          this.value = null;
      }
      return TreeNode;
  }());
  /**
   * A light-weight tree, traversable by path.  Nodes can have both values and children.
   * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
   * children.
   */
  var Tree = /** @class */ (function () {
      /**
       * @template T
       * @param {string=} name_ Optional name of the node.
       * @param {Tree=} parent_ Optional parent node.
       * @param {TreeNode=} node_ Optional node to wrap.
       */
      function Tree(name_, parent_, node_) {
          if (name_ === void 0) { name_ = ''; }
          if (parent_ === void 0) { parent_ = null; }
          if (node_ === void 0) { node_ = new TreeNode(); }
          this.name_ = name_;
          this.parent_ = parent_;
          this.node_ = node_;
      }
      /**
       * Returns a sub-Tree for the given path.
       *
       * @param {!(string|Path)} pathObj Path to look up.
       * @return {!Tree.<T>} Tree for path.
       */
      Tree.prototype.subTree = function (pathObj) {
          // TODO: Require pathObj to be Path?
          var path = pathObj instanceof Path ? pathObj : new Path(pathObj);
          var child = this, next;
          while ((next = path.getFront()) !== null) {
              var childNode = index_cjs.safeGet(child.node_.children, next) || new TreeNode();
              child = new Tree(next, child, childNode);
              path = path.popFront();
          }
          return child;
      };
      /**
       * Returns the data associated with this tree node.
       *
       * @return {?T} The data or null if no data exists.
       */
      Tree.prototype.getValue = function () {
          return this.node_.value;
      };
      /**
       * Sets data to this tree node.
       *
       * @param {!T} value Value to set.
       */
      Tree.prototype.setValue = function (value) {
          index_cjs.assert(typeof value !== 'undefined', 'Cannot set value to undefined');
          this.node_.value = value;
          this.updateParents_();
      };
      /**
       * Clears the contents of the tree node (its value and all children).
       */
      Tree.prototype.clear = function () {
          this.node_.value = null;
          this.node_.children = {};
          this.node_.childCount = 0;
          this.updateParents_();
      };
      /**
       * @return {boolean} Whether the tree has any children.
       */
      Tree.prototype.hasChildren = function () {
          return this.node_.childCount > 0;
      };
      /**
       * @return {boolean} Whether the tree is empty (no value or children).
       */
      Tree.prototype.isEmpty = function () {
          return this.getValue() === null && !this.hasChildren();
      };
      /**
       * Calls action for each child of this tree node.
       *
       * @param {function(!Tree.<T>)} action Action to be called for each child.
       */
      Tree.prototype.forEachChild = function (action) {
          var _this = this;
          each(this.node_.children, function (child, childTree) {
              action(new Tree(child, _this, childTree));
          });
      };
      /**
       * Does a depth-first traversal of this node's descendants, calling action for each one.
       *
       * @param {function(!Tree.<T>)} action Action to be called for each child.
       * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to
       *   false.
       * @param {boolean=} childrenFirst Whether to call action on children before calling it on
       *   parent.
       */
      Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {
          if (includeSelf && !childrenFirst)
              action(this);
          this.forEachChild(function (child) {
              child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);
          });
          if (includeSelf && childrenFirst)
              action(this);
      };
      /**
       * Calls action on each ancestor node.
       *
       * @param {function(!Tree.<T>)} action Action to be called on each parent; return
       *   true to abort.
       * @param {boolean=} includeSelf Whether to call action on this node as well.
       * @return {boolean} true if the action callback returned true.
       */
      Tree.prototype.forEachAncestor = function (action, includeSelf) {
          var node = includeSelf ? this : this.parent();
          while (node !== null) {
              if (action(node)) {
                  return true;
              }
              node = node.parent();
          }
          return false;
      };
      /**
       * Does a depth-first traversal of this node's descendants.  When a descendant with a value
       * is found, action is called on it and traversal does not continue inside the node.
       * Action is *not* called on this node.
       *
       * @param {function(!Tree.<T>)} action Action to be called for each child.
       */
      Tree.prototype.forEachImmediateDescendantWithValue = function (action) {
          this.forEachChild(function (child) {
              if (child.getValue() !== null)
                  action(child);
              else
                  child.forEachImmediateDescendantWithValue(action);
          });
      };
      /**
       * @return {!Path} The path of this tree node, as a Path.
       */
      Tree.prototype.path = function () {
          return new Path(this.parent_ === null
              ? this.name_
              : this.parent_.path() + '/' + this.name_);
      };
      /**
       * @return {string} The name of the tree node.
       */
      Tree.prototype.name = function () {
          return this.name_;
      };
      /**
       * @return {?Tree} The parent tree node, or null if this is the root of the tree.
       */
      Tree.prototype.parent = function () {
          return this.parent_;
      };
      /**
       * Adds or removes this child from its parent based on whether it's empty or not.
       *
       * @private
       */
      Tree.prototype.updateParents_ = function () {
          if (this.parent_ !== null)
              this.parent_.updateChild_(this.name_, this);
      };
      /**
       * Adds or removes the passed child to this tree node, depending on whether it's empty.
       *
       * @param {string} childName The name of the child to update.
       * @param {!Tree.<T>} child The child to update.
       * @private
       */
      Tree.prototype.updateChild_ = function (childName, child) {
          var childEmpty = child.isEmpty();
          var childExists = index_cjs.contains(this.node_.children, childName);
          if (childEmpty && childExists) {
              delete this.node_.children[childName];
              this.node_.childCount--;
              this.updateParents_();
          }
          else if (!childEmpty && !childExists) {
              this.node_.children[childName] = child.node_;
              this.node_.childCount++;
              this.updateParents_();
          }
      };
      return Tree;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific
  // component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well
  // as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.
  // For now it's part of Repo, but in its own file.
  /**
   * @enum {number}
   */
  var TransactionStatus;
  (function (TransactionStatus) {
      // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the
      // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to
      // mismatched hash.
      TransactionStatus[TransactionStatus["RUN"] = 0] = "RUN";
      // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted
      // or rejected yet).
      TransactionStatus[TransactionStatus["SENT"] = 1] = "SENT";
      // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be
      // removed when we get a chance to prune completed ones.
      TransactionStatus[TransactionStatus["COMPLETED"] = 2] = "COMPLETED";
      // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).
      // If it comes back as unsuccessful, we'll abort it.
      TransactionStatus[TransactionStatus["SENT_NEEDS_ABORT"] = 3] = "SENT_NEEDS_ABORT";
      // Temporary state used to mark transactions that need to be aborted.
      TransactionStatus[TransactionStatus["NEEDS_ABORT"] = 4] = "NEEDS_ABORT";
  })(TransactionStatus || (TransactionStatus = {}));
  /**
   * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's
   * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.
   * @type {number}
   * @const
   * @private
   */
  Repo.MAX_TRANSACTION_RETRIES_ = 25;
  /**
   * Setup the transaction data structures
   * @private
   */
  Repo.prototype.transactions_init_ = function () {
      /**
       * Stores queues of outstanding transactions for Firebase locations.
       *
       * @type {!Tree.<Array.<!Transaction>>}
       * @private
       */
      this.transactionQueueTree_ = new Tree();
  };
  /**
   * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.
   *
   * @param {!Path} path Path at which to do transaction.
   * @param {function(*):*} transactionUpdate Update callback.
   * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.
   * @param {boolean} applyLocally Whether or not to make intermediate results visible
   */
  Repo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {
      this.log_('transaction on ' + path);
      // Add a watch to make sure we get server updates.
      var valueCallback = function () { };
      var watchRef = new Reference(this, path);
      watchRef.on('value', valueCallback);
      var unwatcher = function () {
          watchRef.off('value', valueCallback);
      };
      // Initialize transaction.
      var transaction = {
          path: path,
          update: transactionUpdate,
          onComplete: onComplete,
          // One of TransactionStatus enums.
          status: null,
          // Used when combining transactions at different locations to figure out which one goes first.
          order: LUIDGenerator(),
          // Whether to raise local events for this transaction.
          applyLocally: applyLocally,
          // Count of how many times we've retried the transaction.
          retryCount: 0,
          // Function to call to clean up our .on() listener.
          unwatcher: unwatcher,
          // Stores why a transaction was aborted.
          abortReason: null,
          currentWriteId: null,
          currentInputSnapshot: null,
          currentOutputSnapshotRaw: null,
          currentOutputSnapshotResolved: null
      };
      // Run transaction initially.
      var currentState = this.getLatestState_(path);
      transaction.currentInputSnapshot = currentState;
      var newVal = transaction.update(currentState.val());
      if (newVal === undefined) {
          // Abort transaction.
          transaction.unwatcher();
          transaction.currentOutputSnapshotRaw = null;
          transaction.currentOutputSnapshotResolved = null;
          if (transaction.onComplete) {
              // We just set the input snapshot, so this cast should be safe
              var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);
              transaction.onComplete(null, false, snapshot);
          }
      }
      else {
          validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);
          // Mark as run and add to our queue.
          transaction.status = TransactionStatus.RUN;
          var queueNode = this.transactionQueueTree_.subTree(path);
          var nodeQueue = queueNode.getValue() || [];
          nodeQueue.push(transaction);
          queueNode.setValue(nodeQueue);
          // Update visibleData and raise events
          // Note: We intentionally raise events after updating all of our transaction state, since the user could
          // start new transactions from the event callbacks.
          var priorityForNode = void 0;
          if (typeof newVal === 'object' &&
              newVal !== null &&
              index_cjs.contains(newVal, '.priority')) {
              priorityForNode = index_cjs.safeGet(newVal, '.priority');
              index_cjs.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +
                  'Priority must be a valid string, finite number, server value, or null.');
          }
          else {
              var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||
                  ChildrenNode.EMPTY_NODE;
              priorityForNode = currentNode.getPriority().val();
          }
          priorityForNode /** @type {null|number|string} */ = priorityForNode;
          var serverValues = this.generateServerValues();
          var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);
          var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);
          transaction.currentOutputSnapshotRaw = newNodeUnresolved;
          transaction.currentOutputSnapshotResolved = newNode;
          transaction.currentWriteId = this.getNextWriteId_();
          var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);
          this.eventQueue_.raiseEventsForChangedPath(path, events);
          this.sendReadyTransactions_();
      }
  };
  /**
   * @param {!Path} path
   * @param {Array.<number>=} excludeSets A specific set to exclude
   * @return {Node}
   * @private
   */
  Repo.prototype.getLatestState_ = function (path, excludeSets) {
      return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||
          ChildrenNode.EMPTY_NODE);
  };
  /**
   * Sends any already-run transactions that aren't waiting for outstanding transactions to
   * complete.
   *
   * Externally it's called with no arguments, but it calls itself recursively with a particular
   * transactionQueueTree node to recurse through the tree.
   *
   * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.
   * @private
   */
  Repo.prototype.sendReadyTransactions_ = function (node) {
      var _this = this;
      if (node === void 0) { node = this.transactionQueueTree_; }
      // Before recursing, make sure any completed transactions are removed.
      if (!node) {
          this.pruneCompletedTransactionsBelowNode_(node);
      }
      if (node.getValue() !== null) {
          var queue = this.buildTransactionQueue_(node);
          index_cjs.assert(queue.length > 0, 'Sending zero length transaction queue');
          var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });
          // If they're all run (and not sent), we can send them.  Else, we must wait.
          if (allRun) {
              this.sendTransactionQueue_(node.path(), queue);
          }
      }
      else if (node.hasChildren()) {
          node.forEachChild(function (childNode) {
              _this.sendReadyTransactions_(childNode);
          });
      }
  };
  /**
   * Given a list of run transactions, send them to the server and then handle the result (success or failure).
   *
   * @param {!Path} path The location of the queue.
   * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.
   * @private
   */
  Repo.prototype.sendTransactionQueue_ = function (path, queue) {
      var _this = this;
      // Mark transactions as sent and increment retry count!
      var setsToIgnore = queue.map(function (txn) {
          return txn.currentWriteId;
      });
      var latestState = this.getLatestState_(path, setsToIgnore);
      var snapToSend = latestState;
      var latestHash = latestState.hash();
      for (var i = 0; i < queue.length; i++) {
          var txn = queue[i];
          index_cjs.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');
          txn.status = TransactionStatus.SENT;
          txn.retryCount++;
          var relativePath = Path.relativePath(path, txn.path);
          // If we've gotten to this point, the output snapshot must be defined.
          snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);
      }
      var dataToSend = snapToSend.val(true);
      var pathToSend = path;
      // Send the put.
      this.server_.put(pathToSend.toString(), dataToSend, function (status) {
          _this.log_('transaction put response', {
              path: pathToSend.toString(),
              status: status
          });
          var events = [];
          if (status === 'ok') {
              // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
              // the callback could trigger more transactions or sets.
              var callbacks = [];
              for (var i = 0; i < queue.length; i++) {
                  queue[i].status = TransactionStatus.COMPLETED;
                  events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));
                  if (queue[i].onComplete) {
                      // We never unset the output snapshot, and given that this transaction is complete, it should be set
                      var node = queue[i].currentOutputSnapshotResolved;
                      var ref = new Reference(_this, queue[i].path);
                      var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);
                      callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));
                  }
                  queue[i].unwatcher();
              }
              // Now remove the completed transactions.
              _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));
              // There may be pending transactions that we can now send.
              _this.sendReadyTransactions_();
              _this.eventQueue_.raiseEventsForChangedPath(path, events);
              // Finally, trigger onComplete callbacks.
              for (var i = 0; i < callbacks.length; i++) {
                  exceptionGuard(callbacks[i]);
              }
          }
          else {
              // transactions are no longer sent.  Update their status appropriately.
              if (status === 'datastale') {
                  for (var i = 0; i < queue.length; i++) {
                      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)
                          queue[i].status = TransactionStatus.NEEDS_ABORT;
                      else
                          queue[i].status = TransactionStatus.RUN;
                  }
              }
              else {
                  warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);
                  for (var i = 0; i < queue.length; i++) {
                      queue[i].status = TransactionStatus.NEEDS_ABORT;
                      queue[i].abortReason = status;
                  }
              }
              _this.rerunTransactions_(path);
          }
      }, latestHash);
  };
  /**
   * Finds all transactions dependent on the data at changedPath and reruns them.
   *
   * Should be called any time cached data changes.
   *
   * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to
   * be raised for.
   *
   * @param {!Path} changedPath The path in mergedData that changed.
   * @return {!Path} The rootmost path that was affected by rerunning transactions.
   * @private
   */
  Repo.prototype.rerunTransactions_ = function (changedPath) {
      var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);
      var path = rootMostTransactionNode.path();
      var queue = this.buildTransactionQueue_(rootMostTransactionNode);
      this.rerunTransactionQueue_(queue, path);
      return path;
  };
  /**
   * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).
   *
   * @param {Array.<Transaction>} queue The queue of transactions to run.
   * @param {!Path} path The path the queue is for.
   * @private
   */
  Repo.prototype.rerunTransactionQueue_ = function (queue, path) {
      if (queue.length === 0) {
          return; // Nothing to do!
      }
      // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
      // the callback could trigger more transactions or sets.
      var callbacks = [];
      var events = [];
      // Ignore all of the sets we're going to re-run.
      var txnsToRerun = queue.filter(function (q) {
          return q.status === TransactionStatus.RUN;
      });
      var setsToIgnore = txnsToRerun.map(function (q) {
          return q.currentWriteId;
      });
      for (var i = 0; i < queue.length; i++) {
          var transaction = queue[i];
          var relativePath = Path.relativePath(path, transaction.path);
          var abortTransaction = false, abortReason = void 0;
          index_cjs.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');
          if (transaction.status === TransactionStatus.NEEDS_ABORT) {
              abortTransaction = true;
              abortReason = transaction.abortReason;
              events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
          }
          else if (transaction.status === TransactionStatus.RUN) {
              if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {
                  abortTransaction = true;
                  abortReason = 'maxretry';
                  events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
              }
              else {
                  // This code reruns a transaction
                  var currentNode = this.getLatestState_(transaction.path, setsToIgnore);
                  transaction.currentInputSnapshot = currentNode;
                  var newData = queue[i].update(currentNode.val());
                  if (newData !== undefined) {
                      validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
                      var newDataNode = nodeFromJSON$1(newData);
                      var hasExplicitPriority = typeof newData === 'object' &&
                          newData != null &&
                          index_cjs.contains(newData, '.priority');
                      if (!hasExplicitPriority) {
                          // Keep the old priority if there wasn't a priority explicitly specified.
                          newDataNode = newDataNode.updatePriority(currentNode.getPriority());
                      }
                      var oldWriteId = transaction.currentWriteId;
                      var serverValues = this.generateServerValues();
                      var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
                      transaction.currentOutputSnapshotRaw = newDataNode;
                      transaction.currentOutputSnapshotResolved = newNodeResolved;
                      transaction.currentWriteId = this.getNextWriteId_();
                      // Mutates setsToIgnore in place
                      setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
                      events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
                      events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));
                  }
                  else {
                      abortTransaction = true;
                      abortReason = 'nodata';
                      events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
                  }
              }
          }
          this.eventQueue_.raiseEventsForChangedPath(path, events);
          events = [];
          if (abortTransaction) {
              // Abort.
              queue[i].status = TransactionStatus.COMPLETED;
              // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).
              // So defer the unwatcher until we're done.
              (function (unwatcher) {
                  setTimeout(unwatcher, Math.floor(0));
              })(queue[i].unwatcher);
              if (queue[i].onComplete) {
                  if (abortReason === 'nodata') {
                      var ref = new Reference(this, queue[i].path);
                      // We set this field immediately, so it's safe to cast to an actual snapshot
                      var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;
                      var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);
                      callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));
                  }
                  else {
                      callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));
                  }
              }
          }
      }
      // Clean up completed transactions.
      this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);
      // Now fire callbacks, now that we're in a good, known state.
      for (var i = 0; i < callbacks.length; i++) {
          exceptionGuard(callbacks[i]);
      }
      // Try to send the transaction result to the server.
      this.sendReadyTransactions_();
  };
  /**
   * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns
   * the node for the given path if there are no pending transactions on any ancestor.
   *
   * @param {!Path} path The location to start at.
   * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.
   * @private
   */
  Repo.prototype.getAncestorTransactionNode_ = function (path) {
      var front;
      // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.
      var transactionNode = this.transactionQueueTree_;
      while ((front = path.getFront()) !== null &&
          transactionNode.getValue() === null) {
          transactionNode = transactionNode.subTree(front);
          path = path.popFront();
      }
      return transactionNode;
  };
  /**
   * Builds the queue of all transactions at or below the specified transactionNode.
   *
   * @param {!Tree.<Array.<Transaction>>} transactionNode
   * @return {Array.<Transaction>} The generated queue.
   * @private
   */
  Repo.prototype.buildTransactionQueue_ = function (transactionNode) {
      // Walk any child transaction queues and aggregate them into a single queue.
      var transactionQueue = [];
      this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);
      // Sort them by the order the transactions were created.
      transactionQueue.sort(function (a, b) {
          return a.order - b.order;
      });
      return transactionQueue;
  };
  /**
   * @param {!Tree.<Array.<Transaction>>} node
   * @param {Array.<Transaction>} queue
   * @private
   */
  Repo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {
      var _this = this;
      var nodeQueue = node.getValue();
      if (nodeQueue !== null) {
          for (var i = 0; i < nodeQueue.length; i++) {
              queue.push(nodeQueue[i]);
          }
      }
      node.forEachChild(function (child) {
          _this.aggregateTransactionQueuesForNode_(child, queue);
      });
  };
  /**
   * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
   *
   * @param {!Tree.<Array.<!Transaction>>} node
   * @private
   */
  Repo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {
      var _this = this;
      var queue = node.getValue();
      if (queue) {
          var to = 0;
          for (var from = 0; from < queue.length; from++) {
              if (queue[from].status !== TransactionStatus.COMPLETED) {
                  queue[to] = queue[from];
                  to++;
              }
          }
          queue.length = to;
          node.setValue(queue.length > 0 ? queue : null);
      }
      node.forEachChild(function (childNode) {
          _this.pruneCompletedTransactionsBelowNode_(childNode);
      });
  };
  /**
   * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()
   * since we consider them incompatible with transactions.
   *
   * @param {!Path} path Path for which we want to abort related transactions.
   * @return {!Path}
   * @private
   */
  Repo.prototype.abortTransactions_ = function (path) {
      var _this = this;
      var affectedPath = this.getAncestorTransactionNode_(path).path();
      var transactionNode = this.transactionQueueTree_.subTree(path);
      transactionNode.forEachAncestor(function (node) {
          _this.abortTransactionsOnNode_(node);
      });
      this.abortTransactionsOnNode_(transactionNode);
      transactionNode.forEachDescendant(function (node) {
          _this.abortTransactionsOnNode_(node);
      });
      return affectedPath;
  };
  /**
   * Abort transactions stored in this transaction queue node.
   *
   * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.
   * @private
   */
  Repo.prototype.abortTransactionsOnNode_ = function (node) {
      var queue = node.getValue();
      if (queue !== null) {
          // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
          // the callback could trigger more transactions or sets.
          var callbacks = [];
          // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones
          // can be immediately aborted and removed.
          var events = [];
          var lastSent = -1;
          for (var i = 0; i < queue.length; i++) {
              if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ;
              else if (queue[i].status === TransactionStatus.SENT) {
                  index_cjs.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
                  lastSent = i;
                  // Mark transaction for abort when it comes back.
                  queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;
                  queue[i].abortReason = 'set';
              }
              else {
                  index_cjs.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');
                  // We can abort it immediately.
                  queue[i].unwatcher();
                  events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));
                  if (queue[i].onComplete) {
                      var snapshot = null;
                      callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));
                  }
              }
          }
          if (lastSent === -1) {
              // We're not waiting for any sent transactions.  We can clear the queue.
              node.setValue(null);
          }
          else {
              // Remove the transactions we aborted.
              queue.length = lastSent + 1;
          }
          // Now fire the callbacks.
          this.eventQueue_.raiseEventsForChangedPath(node.path(), events);
          for (var i = 0; i < callbacks.length; i++) {
              exceptionGuard(callbacks[i]);
          }
      }
  };

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** @const {string} */
  var DATABASE_URL_OPTION = 'databaseURL';
  /**
   * This variable is also defined in the firebase node.js admin SDK. Before
   * modifying this definition, consult the definition in:
   *
   * https://github.com/firebase/firebase-admin-node
   *
   * and make sure the two are consistent.
   */
  var FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';
  var _staticInstance;
  /**
   * Creates and caches Repo instances.
   */
  var RepoManager = /** @class */ (function () {
      function RepoManager() {
          /**
           * @private {!Object.<string, Object<string, !fb.core.Repo>>}
           */
          this.repos_ = {};
          /**
           * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).
           * @private {boolean}
           */
          this.useRestClient_ = false;
      }
      RepoManager.getInstance = function () {
          if (!_staticInstance) {
              _staticInstance = new RepoManager();
          }
          return _staticInstance;
      };
      // TODO(koss): Remove these functions unless used in tests?
      RepoManager.prototype.interrupt = function () {
          for (var appName in this.repos_) {
              for (var dbUrl in this.repos_[appName]) {
                  this.repos_[appName][dbUrl].interrupt();
              }
          }
      };
      RepoManager.prototype.resume = function () {
          for (var appName in this.repos_) {
              for (var dbUrl in this.repos_[appName]) {
                  this.repos_[appName][dbUrl].resume();
              }
          }
      };
      /**
       * This function should only ever be called to CREATE a new database instance.
       *
       * @param {!FirebaseApp} app
       * @return {!Database}
       */
      RepoManager.prototype.databaseFromApp = function (app, url) {
          var dbUrl = url || app.options[DATABASE_URL_OPTION];
          if (dbUrl === undefined) {
              fatal("Can't determine Firebase Database URL.  Be sure to include " +
                  DATABASE_URL_OPTION +
                  ' option when calling firebase.initializeApp().');
          }
          var parsedUrl = parseRepoInfo(dbUrl);
          var repoInfo = parsedUrl.repoInfo;
          var dbEmulatorHost = undefined;
          if (typeof process !== 'undefined') {
              dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
          }
          if (dbEmulatorHost) {
              dbUrl = "http://" + dbEmulatorHost + "?ns=" + repoInfo.namespace;
              parsedUrl = parseRepoInfo(dbUrl);
              repoInfo = parsedUrl.repoInfo;
          }
          validateUrl('Invalid Firebase Database URL', 1, parsedUrl);
          if (!parsedUrl.path.isEmpty()) {
              fatal('Database URL must point to the root of a Firebase Database ' +
                  '(not including a child path).');
          }
          var repo = this.createRepo(repoInfo, app);
          return repo.database;
      };
      /**
       * Remove the repo and make sure it is disconnected.
       *
       * @param {!Repo} repo
       */
      RepoManager.prototype.deleteRepo = function (repo) {
          var appRepos = index_cjs.safeGet(this.repos_, repo.app.name);
          // This should never happen...
          if (!appRepos || index_cjs.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {
              fatal("Database " + repo.app.name + "(" + repo.repoInfo_ + ") has already been deleted.");
          }
          repo.interrupt();
          delete appRepos[repo.repoInfo_.toURLString()];
      };
      /**
       * Ensures a repo doesn't already exist and then creates one using the
       * provided app.
       *
       * @param {!RepoInfo} repoInfo The metadata about the Repo
       * @param {!FirebaseApp} app
       * @return {!Repo} The Repo object for the specified server / repoName.
       */
      RepoManager.prototype.createRepo = function (repoInfo, app) {
          var appRepos = index_cjs.safeGet(this.repos_, app.name);
          if (!appRepos) {
              appRepos = {};
              this.repos_[app.name] = appRepos;
          }
          var repo = index_cjs.safeGet(appRepos, repoInfo.toURLString());
          if (repo) {
              fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
          }
          repo = new Repo(repoInfo, this.useRestClient_, app);
          appRepos[repoInfo.toURLString()] = repo;
          return repo;
      };
      /**
       * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
       * @param {boolean} forceRestClient
       */
      RepoManager.prototype.forceRestClient = function (forceRestClient) {
          this.useRestClient_ = forceRestClient;
      };
      return RepoManager;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Class representing a firebase database.
   * @implements {FirebaseService}
   */
  var Database = /** @class */ (function () {
      /**
       * The constructor should not be called by users of our public API.
       * @param {!Repo} repo_
       */
      function Database(repo_) {
          this.repo_ = repo_;
          if (!(repo_ instanceof Repo)) {
              fatal("Don't call new Database() directly - please use firebase.database().");
          }
          /** @type {Reference} */
          this.root_ = new Reference(repo_, Path.Empty);
          this.INTERNAL = new DatabaseInternals(this);
      }
      Object.defineProperty(Database.prototype, "app", {
          get: function () {
              return this.repo_.app;
          },
          enumerable: true,
          configurable: true
      });
      Database.prototype.ref = function (path) {
          this.checkDeleted_('ref');
          index_cjs.validateArgCount('database.ref', 0, 1, arguments.length);
          if (path instanceof Reference) {
              return this.refFromURL(path.toString());
          }
          return path !== undefined ? this.root_.child(path) : this.root_;
      };
      /**
       * Returns a reference to the root or the path specified in url.
       * We throw a exception if the url is not in the same domain as the
       * current repo.
       * @param {string} url
       * @return {!Reference} Firebase reference.
       */
      Database.prototype.refFromURL = function (url) {
          /** @const {string} */
          var apiName = 'database.refFromURL';
          this.checkDeleted_(apiName);
          index_cjs.validateArgCount(apiName, 1, 1, arguments.length);
          var parsedURL = parseRepoInfo(url);
          validateUrl(apiName, 1, parsedURL);
          var repoInfo = parsedURL.repoInfo;
          if (repoInfo.host !== this.repo_.repoInfo_.host) {
              fatal(apiName +
                  ': Host name does not match the current database: ' +
                  '(found ' +
                  repoInfo.host +
                  ' but expected ' +
                  this.repo_.repoInfo_.host +
                  ')');
          }
          return this.ref(parsedURL.path.toString());
      };
      /**
       * @param {string} apiName
       */
      Database.prototype.checkDeleted_ = function (apiName) {
          if (this.repo_ === null) {
              fatal('Cannot call ' + apiName + ' on a deleted database.');
          }
      };
      // Make individual repo go offline.
      Database.prototype.goOffline = function () {
          index_cjs.validateArgCount('database.goOffline', 0, 0, arguments.length);
          this.checkDeleted_('goOffline');
          this.repo_.interrupt();
      };
      Database.prototype.goOnline = function () {
          index_cjs.validateArgCount('database.goOnline', 0, 0, arguments.length);
          this.checkDeleted_('goOnline');
          this.repo_.resume();
      };
      Database.ServerValue = {
          TIMESTAMP: {
              '.sv': 'timestamp'
          },
          _increment: function (x) {
              return {
                  '.sv': {
                      'increment': x
                  }
              };
          }
      };
      return Database;
  }());
  var DatabaseInternals = /** @class */ (function () {
      /** @param {!Database} database */
      function DatabaseInternals(database) {
          this.database = database;
      }
      /** @return {Promise<void>} */
      DatabaseInternals.prototype.delete = function () {
          return tslib_es6.__awaiter(this, void 0, void 0, function () {
              return tslib_es6.__generator(this, function (_a) {
                  this.database.checkDeleted_('delete');
                  RepoManager.getInstance().deleteRepo(this.database.repo_);
                  this.database.repo_ = null;
                  this.database.root_ = null;
                  this.database.INTERNAL = null;
                  this.database = null;
                  return [2 /*return*/];
              });
          });
      };
      return DatabaseInternals;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * INTERNAL methods for internal-use only (tests, etc.).
   *
   * Customers shouldn't use these or else should be aware that they could break at any time.
   *
   * @const
   */
  var forceLongPolling = function () {
      WebSocketConnection.forceDisallow();
      BrowserPollConnection.forceAllow();
  };
  var forceWebSockets = function () {
      BrowserPollConnection.forceDisallow();
  };
  /* Used by App Manager */
  var isWebSocketsAvailable = function () {
      return WebSocketConnection['isAvailable']();
  };
  var setSecurityDebugCallback = function (ref, callback) {
      ref.repo.persistentConnection_.securityDebugCallback_ = callback;
  };
  var stats = function (ref, showDelta) {
      ref.repo.stats(showDelta);
  };
  var statsIncrementCounter = function (ref, metric) {
      ref.repo.statsIncrementCounter(metric);
  };
  var dataUpdateCount = function (ref) {
      return ref.repo.dataUpdateCount;
  };
  var interceptServerData = function (ref, callback) {
      return ref.repo.interceptServerData_(callback);
  };

  var INTERNAL = /*#__PURE__*/Object.freeze({
    __proto__: null,
    forceLongPolling: forceLongPolling,
    forceWebSockets: forceWebSockets,
    isWebSocketsAvailable: isWebSocketsAvailable,
    setSecurityDebugCallback: setSecurityDebugCallback,
    stats: stats,
    statsIncrementCounter: statsIncrementCounter,
    dataUpdateCount: dataUpdateCount,
    interceptServerData: interceptServerData
  });

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var DataConnection = PersistentConnection;
  /**
   * @param {!string} pathString
   * @param {function(*)} onComplete
   */
  PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {
      this.sendRequest('q', { p: pathString }, onComplete);
  };
  /**
   * @param {*} data
   * @param {function(*)} onEcho
   */
  PersistentConnection.prototype.echo = function (data, onEcho) {
      this.sendRequest('echo', { d: data }, onEcho);
  };
  // RealTimeConnection properties that we use in tests.
  var RealTimeConnection = Connection;
  /**
   * @param {function(): string} newHash
   * @return {function()}
   */
  var hijackHash = function (newHash) {
      var oldPut = PersistentConnection.prototype.put;
      PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {
          if (opt_hash !== undefined) {
              opt_hash = newHash();
          }
          oldPut.call(this, pathString, data, opt_onComplete, opt_hash);
      };
      return function () {
          PersistentConnection.prototype.put = oldPut;
      };
  };
  /**
   * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}
   */
  var ConnectionTarget = RepoInfo;
  /**
   * @param {!Query} query
   * @return {!string}
   */
  var queryIdentifier = function (query) {
      return query.queryIdentifier();
  };
  /**
   * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
   *
   * @param {boolean} forceRestClient
   */
  var forceRestClient = function (forceRestClient) {
      RepoManager.getInstance().forceRestClient(forceRestClient);
  };

  var TEST_ACCESS = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DataConnection: DataConnection,
    RealTimeConnection: RealTimeConnection,
    hijackHash: hijackHash,
    ConnectionTarget: ConnectionTarget,
    queryIdentifier: queryIdentifier,
    forceRestClient: forceRestClient
  });

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ServerValue = Database.ServerValue;
  function registerDatabase(instance) {
      // set SDK_VERSION
      setSDKVersion(instance.SDK_VERSION);
      // Register the Database Service with the 'firebase' namespace.
      var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) { return RepoManager.getInstance().databaseFromApp(app, url); }, 
      // firebase.database namespace properties
      {
          Reference: Reference,
          Query: Query,
          Database: Database,
          DataSnapshot: DataSnapshot,
          enableLogging: enableLogging,
          INTERNAL: INTERNAL,
          ServerValue: ServerValue,
          TEST_ACCESS: TEST_ACCESS
      }, null, true);
      if (index_cjs.isNodeSdk()) {
          module.exports = namespace;
      }
  }
  registerDatabase(firebase);

  exports.DataSnapshot = DataSnapshot;
  exports.Database = Database;
  exports.OnDisconnect = OnDisconnect;
  exports.Query = Query;
  exports.Reference = Reference;
  exports.ServerValue = ServerValue;
  exports.enableLogging = enableLogging;
  exports.registerDatabase = registerDatabase;
  //# sourceMappingURL=index.cjs.js.map
  });

  unwrapExports(index_cjs$3);
  var index_cjs_1$2 = index_cjs$3.DataSnapshot;
  var index_cjs_2$1 = index_cjs$3.Database;
  var index_cjs_3$1 = index_cjs$3.OnDisconnect;
  var index_cjs_4$1 = index_cjs$3.Query;
  var index_cjs_5$1 = index_cjs$3.Reference;
  var index_cjs_6$1 = index_cjs$3.ServerValue;
  var index_cjs_7$1 = index_cjs$3.enableLogging;
  var index_cjs_8$1 = index_cjs$3.registerDatabase;

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @fileoverview Constants used in the Firebase Storage library.
   */
  /**
   * Domain name for firebase storage.
   */
  var DEFAULT_HOST = 'firebasestorage.googleapis.com';
  /**
   * The key in Firebase config json for the storage bucket.
   */
  var CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';
  /**
   * 2 minutes
   *
   * The timeout for all operations except upload.
   */
  var DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;
  /**
   * 10 minutes
   *
   * The timeout for upload.
   */
  var DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;
  /**
   * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported
   * enough for us to use it directly.
   */
  var MIN_SAFE_INTEGER = -9007199254740991;

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var FirebaseStorageError = /** @class */ (function () {
      function FirebaseStorageError(code, message) {
          this.code_ = prependCode(code);
          this.message_ = 'Firebase Storage: ' + message;
          this.serverResponse_ = null;
          this.name_ = 'FirebaseError';
      }
      FirebaseStorageError.prototype.codeProp = function () {
          return this.code;
      };
      FirebaseStorageError.prototype.codeEquals = function (code) {
          return prependCode(code) === this.codeProp();
      };
      FirebaseStorageError.prototype.serverResponseProp = function () {
          return this.serverResponse_;
      };
      FirebaseStorageError.prototype.setServerResponseProp = function (serverResponse) {
          this.serverResponse_ = serverResponse;
      };
      Object.defineProperty(FirebaseStorageError.prototype, "name", {
          get: function () {
              return this.name_;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(FirebaseStorageError.prototype, "code", {
          get: function () {
              return this.code_;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(FirebaseStorageError.prototype, "message", {
          get: function () {
              return this.message_;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(FirebaseStorageError.prototype, "serverResponse", {
          get: function () {
              return this.serverResponse_;
          },
          enumerable: true,
          configurable: true
      });
      return FirebaseStorageError;
  }());
  var Code = {
      // Shared between all platforms
      UNKNOWN: 'unknown',
      OBJECT_NOT_FOUND: 'object-not-found',
      BUCKET_NOT_FOUND: 'bucket-not-found',
      PROJECT_NOT_FOUND: 'project-not-found',
      QUOTA_EXCEEDED: 'quota-exceeded',
      UNAUTHENTICATED: 'unauthenticated',
      UNAUTHORIZED: 'unauthorized',
      RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',
      INVALID_CHECKSUM: 'invalid-checksum',
      CANCELED: 'canceled',
      // JS specific
      INVALID_EVENT_NAME: 'invalid-event-name',
      INVALID_URL: 'invalid-url',
      INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',
      NO_DEFAULT_BUCKET: 'no-default-bucket',
      CANNOT_SLICE_BLOB: 'cannot-slice-blob',
      SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',
      NO_DOWNLOAD_URL: 'no-download-url',
      INVALID_ARGUMENT: 'invalid-argument',
      INVALID_ARGUMENT_COUNT: 'invalid-argument-count',
      APP_DELETED: 'app-deleted',
      INVALID_ROOT_OPERATION: 'invalid-root-operation',
      INVALID_FORMAT: 'invalid-format',
      INTERNAL_ERROR: 'internal-error'
  };
  function prependCode(code) {
      return 'storage/' + code;
  }
  function unknown() {
      var message = 'An unknown error occurred, please check the error payload for ' +
          'server response.';
      return new FirebaseStorageError(Code.UNKNOWN, message);
  }
  function objectNotFound(path) {
      return new FirebaseStorageError(Code.OBJECT_NOT_FOUND, "Object '" + path + "' does not exist.");
  }
  function quotaExceeded(bucket) {
      return new FirebaseStorageError(Code.QUOTA_EXCEEDED, "Quota for bucket '" +
          bucket +
          "' exceeded, please view quota on " +
          'https://firebase.google.com/pricing/.');
  }
  function unauthenticated() {
      var message = 'User is not authenticated, please authenticate using Firebase ' +
          'Authentication and try again.';
      return new FirebaseStorageError(Code.UNAUTHENTICATED, message);
  }
  function unauthorized(path) {
      return new FirebaseStorageError(Code.UNAUTHORIZED, "User does not have permission to access '" + path + "'.");
  }
  function retryLimitExceeded() {
      return new FirebaseStorageError(Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');
  }
  function canceled() {
      return new FirebaseStorageError(Code.CANCELED, 'User canceled the upload/download.');
  }
  function invalidUrl(url) {
      return new FirebaseStorageError(Code.INVALID_URL, "Invalid URL '" + url + "'.");
  }
  function invalidDefaultBucket(bucket) {
      return new FirebaseStorageError(Code.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + bucket + "'.");
  }
  function noDefaultBucket() {
      return new FirebaseStorageError(Code.NO_DEFAULT_BUCKET, 'No default bucket ' +
          "found. Did you set the '" +
          CONFIG_STORAGE_BUCKET_KEY +
          "' property when initializing the app?");
  }
  function cannotSliceBlob() {
      return new FirebaseStorageError(Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');
  }
  function serverFileWrongSize() {
      return new FirebaseStorageError(Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');
  }
  function noDownloadURL() {
      return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');
  }
  function invalidArgument(index, fnName, message) {
      return new FirebaseStorageError(Code.INVALID_ARGUMENT, 'Invalid argument in `' + fnName + '` at index ' + index + ': ' + message);
  }
  function invalidArgumentCount(argMin, argMax, fnName, real) {
      var countPart;
      var plural;
      if (argMin === argMax) {
          countPart = argMin;
          plural = argMin === 1 ? 'argument' : 'arguments';
      }
      else {
          countPart = 'between ' + argMin + ' and ' + argMax;
          plural = 'arguments';
      }
      return new FirebaseStorageError(Code.INVALID_ARGUMENT_COUNT, 'Invalid argument count in `' +
          fnName +
          '`: Expected ' +
          countPart +
          ' ' +
          plural +
          ', received ' +
          real +
          '.');
  }
  function appDeleted() {
      return new FirebaseStorageError(Code.APP_DELETED, 'The Firebase app was deleted.');
  }
  /**
   * @param name The name of the operation that was invalid.
   */
  function invalidRootOperation(name) {
      return new FirebaseStorageError(Code.INVALID_ROOT_OPERATION, "The operation '" +
          name +
          "' cannot be performed on a root reference, create a non-root " +
          "reference using child, such as .child('file.png').");
  }
  /**
   * @param format The format that was not valid.
   * @param message A message describing the format violation.
   */
  function invalidFormat(format, message) {
      return new FirebaseStorageError(Code.INVALID_FORMAT, "String does not match format '" + format + "': " + message);
  }
  /**
   * @param message A message describing the internal error.
   */
  function internalError(message) {
      throw new FirebaseStorageError(Code.INTERNAL_ERROR, 'Internal error: ' + message);
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var StringFormat = {
      RAW: 'raw',
      BASE64: 'base64',
      BASE64URL: 'base64url',
      DATA_URL: 'data_url'
  };
  function formatValidator(stringFormat) {
      switch (stringFormat) {
          case StringFormat.RAW:
          case StringFormat.BASE64:
          case StringFormat.BASE64URL:
          case StringFormat.DATA_URL:
              return;
          default:
              throw 'Expected one of the event types: [' +
                  StringFormat.RAW +
                  ', ' +
                  StringFormat.BASE64 +
                  ', ' +
                  StringFormat.BASE64URL +
                  ', ' +
                  StringFormat.DATA_URL +
                  '].';
      }
  }
  /**
   * @struct
   */
  var StringData = /** @class */ (function () {
      function StringData(data, contentType) {
          this.data = data;
          this.contentType = contentType || null;
      }
      return StringData;
  }());
  function dataFromString(format, stringData) {
      switch (format) {
          case StringFormat.RAW:
              return new StringData(utf8Bytes_(stringData));
          case StringFormat.BASE64:
          case StringFormat.BASE64URL:
              return new StringData(base64Bytes_(format, stringData));
          case StringFormat.DATA_URL:
              return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));
          // do nothing
      }
      // assert(false);
      throw unknown();
  }
  function utf8Bytes_(value) {
      var b = [];
      for (var i = 0; i < value.length; i++) {
          var c = value.charCodeAt(i);
          if (c <= 127) {
              b.push(c);
          }
          else {
              if (c <= 2047) {
                  b.push(192 | (c >> 6), 128 | (c & 63));
              }
              else {
                  if ((c & 64512) === 55296) {
                      // The start of a surrogate pair.
                      var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;
                      if (!valid) {
                          // The second surrogate wasn't there.
                          b.push(239, 191, 189);
                      }
                      else {
                          var hi = c;
                          var lo = value.charCodeAt(++i);
                          c = 65536 | ((hi & 1023) << 10) | (lo & 1023);
                          b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));
                      }
                  }
                  else {
                      if ((c & 64512) === 56320) {
                          // Invalid low surrogate.
                          b.push(239, 191, 189);
                      }
                      else {
                          b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));
                      }
                  }
              }
          }
      }
      return new Uint8Array(b);
  }
  function percentEncodedBytes_(value) {
      var decoded;
      try {
          decoded = decodeURIComponent(value);
      }
      catch (e) {
          throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');
      }
      return utf8Bytes_(decoded);
  }
  function base64Bytes_(format, value) {
      switch (format) {
          case StringFormat.BASE64: {
              var hasMinus = value.indexOf('-') !== -1;
              var hasUnder = value.indexOf('_') !== -1;
              if (hasMinus || hasUnder) {
                  var invalidChar = hasMinus ? '-' : '_';
                  throw invalidFormat(format, "Invalid character '" +
                      invalidChar +
                      "' found: is it base64url encoded?");
              }
              break;
          }
          case StringFormat.BASE64URL: {
              var hasPlus = value.indexOf('+') !== -1;
              var hasSlash = value.indexOf('/') !== -1;
              if (hasPlus || hasSlash) {
                  var invalidChar = hasPlus ? '+' : '/';
                  throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
              }
              value = value.replace(/-/g, '+').replace(/_/g, '/');
              break;
          }
          // do nothing
      }
      var bytes;
      try {
          bytes = atob(value);
      }
      catch (e) {
          throw invalidFormat(format, 'Invalid character found');
      }
      var array = new Uint8Array(bytes.length);
      for (var i = 0; i < bytes.length; i++) {
          array[i] = bytes.charCodeAt(i);
      }
      return array;
  }
  /**
   * @struct
   */
  var DataURLParts = /** @class */ (function () {
      function DataURLParts(dataURL) {
          this.base64 = false;
          this.contentType = null;
          var matches = dataURL.match(/^data:([^,]+)?,/);
          if (matches === null) {
              throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
          }
          var middle = matches[1] || null;
          if (middle != null) {
              this.base64 = endsWith(middle, ';base64');
              this.contentType = this.base64
                  ? middle.substring(0, middle.length - ';base64'.length)
                  : middle;
          }
          this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
      }
      return DataURLParts;
  }());
  function dataURLBytes_(dataUrl) {
      var parts = new DataURLParts(dataUrl);
      if (parts.base64) {
          return base64Bytes_(StringFormat.BASE64, parts.rest);
      }
      else {
          return percentEncodedBytes_(parts.rest);
      }
  }
  function dataURLContentType_(dataUrl) {
      var parts = new DataURLParts(dataUrl);
      return parts.contentType;
  }
  function endsWith(s, end) {
      var longEnough = s.length >= end.length;
      if (!longEnough) {
          return false;
      }
      return s.substring(s.length - end.length) === end;
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TaskEvent = {
      /** Triggered whenever the task changes or progress is updated. */
      STATE_CHANGED: 'state_changed'
  };
  var InternalTaskState = {
      RUNNING: 'running',
      PAUSING: 'pausing',
      PAUSED: 'paused',
      SUCCESS: 'success',
      CANCELING: 'canceling',
      CANCELED: 'canceled',
      ERROR: 'error'
  };
  var TaskState = {
      /** The task is currently transferring data. */
      RUNNING: 'running',
      /** The task was paused by the user. */
      PAUSED: 'paused',
      /** The task completed successfully. */
      SUCCESS: 'success',
      /** The task was canceled. */
      CANCELED: 'canceled',
      /** The task failed with an error. */
      ERROR: 'error'
  };
  function taskStateFromInternalTaskState(state) {
      switch (state) {
          case InternalTaskState.RUNNING:
          case InternalTaskState.PAUSING:
          case InternalTaskState.CANCELING:
              return TaskState.RUNNING;
          case InternalTaskState.PAUSED:
              return TaskState.PAUSED;
          case InternalTaskState.SUCCESS:
              return TaskState.SUCCESS;
          case InternalTaskState.CANCELED:
              return TaskState.CANCELED;
          case InternalTaskState.ERROR:
              return TaskState.ERROR;
          default:
              // TODO(andysoto): assert(false);
              return TaskState.ERROR;
      }
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @return False if the object is undefined or null, true otherwise.
   */
  function isDef(p) {
      return p != null;
  }
  function isJustDef(p) {
      return p !== void 0;
  }
  function isFunction(p) {
      return typeof p === 'function';
  }
  function isObject$1(p) {
      return typeof p === 'object';
  }
  function isNonNullObject(p) {
      return isObject$1(p) && p !== null;
  }
  function isNonArrayObject(p) {
      return isObject$1(p) && !Array.isArray(p);
  }
  function isString(p) {
      return typeof p === 'string' || p instanceof String;
  }
  function isInteger(p) {
      return isNumber(p) && Number.isInteger(p);
  }
  function isNumber(p) {
      return typeof p === 'number' || p instanceof Number;
  }
  function isNativeBlob(p) {
      return isNativeBlobDefined() && p instanceof Blob;
  }
  function isNativeBlobDefined() {
      return typeof Blob !== 'undefined';
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @enum{number}
   */
  var ErrorCode;
  (function (ErrorCode) {
      ErrorCode[ErrorCode["NO_ERROR"] = 0] = "NO_ERROR";
      ErrorCode[ErrorCode["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
      ErrorCode[ErrorCode["ABORT"] = 2] = "ABORT";
  })(ErrorCode || (ErrorCode = {}));

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and
   * doesn't work in React Native on Android.
   */
  var NetworkXhrIo = /** @class */ (function () {
      function NetworkXhrIo() {
          var _this = this;
          this.sent_ = false;
          this.xhr_ = new XMLHttpRequest();
          this.errorCode_ = ErrorCode.NO_ERROR;
          this.sendPromise_ = new Promise(function (resolve) {
              _this.xhr_.addEventListener('abort', function () {
                  _this.errorCode_ = ErrorCode.ABORT;
                  resolve(_this);
              });
              _this.xhr_.addEventListener('error', function () {
                  _this.errorCode_ = ErrorCode.NETWORK_ERROR;
                  resolve(_this);
              });
              _this.xhr_.addEventListener('load', function () {
                  resolve(_this);
              });
          });
      }
      /**
       * @override
       */
      NetworkXhrIo.prototype.send = function (url, method, body, headers) {
          if (this.sent_) {
              throw internalError('cannot .send() more than once');
          }
          this.sent_ = true;
          this.xhr_.open(method, url, true);
          if (isDef(headers)) {
              for (var key in headers) {
                  if (headers.hasOwnProperty(key)) {
                      this.xhr_.setRequestHeader(key, headers[key].toString());
                  }
              }
          }
          if (isDef(body)) {
              this.xhr_.send(body);
          }
          else {
              this.xhr_.send();
          }
          return this.sendPromise_;
      };
      /**
       * @override
       */
      NetworkXhrIo.prototype.getErrorCode = function () {
          if (!this.sent_) {
              throw internalError('cannot .getErrorCode() before sending');
          }
          return this.errorCode_;
      };
      /**
       * @override
       */
      NetworkXhrIo.prototype.getStatus = function () {
          if (!this.sent_) {
              throw internalError('cannot .getStatus() before sending');
          }
          try {
              return this.xhr_.status;
          }
          catch (e) {
              return -1;
          }
      };
      /**
       * @override
       */
      NetworkXhrIo.prototype.getResponseText = function () {
          if (!this.sent_) {
              throw internalError('cannot .getResponseText() before sending');
          }
          return this.xhr_.responseText;
      };
      /**
       * Aborts the request.
       * @override
       */
      NetworkXhrIo.prototype.abort = function () {
          this.xhr_.abort();
      };
      /**
       * @override
       */
      NetworkXhrIo.prototype.getResponseHeader = function (header) {
          return this.xhr_.getResponseHeader(header);
      };
      /**
       * @override
       */
      NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {
          if (isDef(this.xhr_.upload)) {
              this.xhr_.upload.addEventListener('progress', listener);
          }
      };
      /**
       * @override
       */
      NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {
          if (isDef(this.xhr_.upload)) {
              this.xhr_.upload.removeEventListener('progress', listener);
          }
      };
      return NetworkXhrIo;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Factory-like class for creating XhrIo instances.
   */
  var XhrIoPool = /** @class */ (function () {
      function XhrIoPool() {
      }
      XhrIoPool.prototype.createXhrIo = function () {
          return new NetworkXhrIo();
      };
      return XhrIoPool;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function getBlobBuilder() {
      if (typeof BlobBuilder !== 'undefined') {
          return BlobBuilder;
      }
      else if (typeof WebKitBlobBuilder !== 'undefined') {
          return WebKitBlobBuilder;
      }
      else {
          return undefined;
      }
  }
  /**
   * Concatenates one or more values together and converts them to a Blob.
   *
   * @param args The values that will make up the resulting blob.
   * @return The blob.
   */
  function getBlob() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      var BlobBuilder = getBlobBuilder();
      if (BlobBuilder !== undefined) {
          var bb = new BlobBuilder();
          for (var i = 0; i < args.length; i++) {
              bb.append(args[i]);
          }
          return bb.getBlob();
      }
      else {
          if (isNativeBlobDefined()) {
              return new Blob(args);
          }
          else {
              throw Error("This browser doesn't seem to support creating Blobs");
          }
      }
  }
  /**
   * Slices the blob. The returned blob contains data from the start byte
   * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
   *
   * @param blob The blob to be sliced.
   * @param start Index of the starting byte.
   * @param end Index of the ending byte.
   * @return The blob slice or null if not supported.
   */
  function sliceBlob(blob, start, end) {
      if (blob.webkitSlice) {
          return blob.webkitSlice(start, end);
      }
      else if (blob.mozSlice) {
          return blob.mozSlice(start, end);
      }
      else if (blob.slice) {
          return blob.slice(start, end);
      }
      return null;
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @param opt_elideCopy If true, doesn't copy mutable input data
   *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
   *     modified after this blob's construction.
   */
  var FbsBlob = /** @class */ (function () {
      function FbsBlob(data, elideCopy) {
          var size = 0;
          var blobType = '';
          if (isNativeBlob(data)) {
              this.data_ = data;
              size = data.size;
              blobType = data.type;
          }
          else if (data instanceof ArrayBuffer) {
              if (elideCopy) {
                  this.data_ = new Uint8Array(data);
              }
              else {
                  this.data_ = new Uint8Array(data.byteLength);
                  this.data_.set(new Uint8Array(data));
              }
              size = this.data_.length;
          }
          else if (data instanceof Uint8Array) {
              if (elideCopy) {
                  this.data_ = data;
              }
              else {
                  this.data_ = new Uint8Array(data.length);
                  this.data_.set(data);
              }
              size = data.length;
          }
          this.size_ = size;
          this.type_ = blobType;
      }
      FbsBlob.prototype.size = function () {
          return this.size_;
      };
      FbsBlob.prototype.type = function () {
          return this.type_;
      };
      FbsBlob.prototype.slice = function (startByte, endByte) {
          if (isNativeBlob(this.data_)) {
              var realBlob = this.data_;
              var sliced = sliceBlob(realBlob, startByte, endByte);
              if (sliced === null) {
                  return null;
              }
              return new FbsBlob(sliced);
          }
          else {
              var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
              return new FbsBlob(slice, true);
          }
      };
      FbsBlob.getBlob = function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          if (isNativeBlobDefined()) {
              var blobby = args.map(function (val) {
                  if (val instanceof FbsBlob) {
                      return val.data_;
                  }
                  else {
                      return val;
                  }
              });
              return new FbsBlob(getBlob.apply(null, blobby));
          }
          else {
              var uint8Arrays = args.map(function (val) {
                  if (isString(val)) {
                      return dataFromString(StringFormat.RAW, val).data;
                  }
                  else {
                      // Blobs don't exist, so this has to be a Uint8Array.
                      return val.data_;
                  }
              });
              var finalLength_1 = 0;
              uint8Arrays.forEach(function (array) {
                  finalLength_1 += array.byteLength;
              });
              var merged_1 = new Uint8Array(finalLength_1);
              var index_1 = 0;
              uint8Arrays.forEach(function (array) {
                  for (var i = 0; i < array.length; i++) {
                      merged_1[index_1++] = array[i];
                  }
              });
              return new FbsBlob(merged_1, true);
          }
      };
      FbsBlob.prototype.uploadData = function () {
          return this.data_;
      };
      return FbsBlob;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @struct
   */
  var Location = /** @class */ (function () {
      function Location(bucket, path) {
          this.bucket = bucket;
          this.path_ = path;
      }
      Object.defineProperty(Location.prototype, "path", {
          get: function () {
              return this.path_;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Location.prototype, "isRoot", {
          get: function () {
              return this.path.length === 0;
          },
          enumerable: true,
          configurable: true
      });
      Location.prototype.fullServerUrl = function () {
          var encode = encodeURIComponent;
          return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
      };
      Location.prototype.bucketOnlyServerUrl = function () {
          var encode = encodeURIComponent;
          return '/b/' + encode(this.bucket) + '/o';
      };
      Location.makeFromBucketSpec = function (bucketString) {
          var bucketLocation;
          try {
              bucketLocation = Location.makeFromUrl(bucketString);
          }
          catch (e) {
              // Not valid URL, use as-is. This lets you put bare bucket names in
              // config.
              return new Location(bucketString, '');
          }
          if (bucketLocation.path === '') {
              return bucketLocation;
          }
          else {
              throw invalidDefaultBucket(bucketString);
          }
      };
      Location.makeFromUrl = function (url) {
          var location = null;
          var bucketDomain = '([A-Za-z0-9.\\-_]+)';
          function gsModify(loc) {
              if (loc.path.charAt(loc.path.length - 1) === '/') {
                  loc.path_ = loc.path_.slice(0, -1);
              }
          }
          var gsPath = '(/(.*))?$';
          var path = '(/([^?#]*).*)?$';
          var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
          var gsIndices = { bucket: 1, path: 3 };
          function httpModify(loc) {
              loc.path_ = decodeURIComponent(loc.path);
          }
          var version = 'v[A-Za-z0-9_]+';
          var hostRegex = DEFAULT_HOST.replace(/[.]/g, '\\.');
          var httpRegex = new RegExp("^https?://" + hostRegex + "/" + version + "/b/" + bucketDomain + "/o" + path, 'i');
          var httpIndices = { bucket: 1, path: 3 };
          var groups = [
              { regex: gsRegex, indices: gsIndices, postModify: gsModify },
              { regex: httpRegex, indices: httpIndices, postModify: httpModify }
          ];
          for (var i = 0; i < groups.length; i++) {
              var group = groups[i];
              var captures = group.regex.exec(url);
              if (captures) {
                  var bucketValue = captures[group.indices.bucket];
                  var pathValue = captures[group.indices.path];
                  if (!pathValue) {
                      pathValue = '';
                  }
                  location = new Location(bucketValue, pathValue);
                  group.postModify(location);
                  break;
              }
          }
          if (location == null) {
              throw invalidUrl(url);
          }
          return location;
      };
      return Location;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Returns the Object resulting from parsing the given JSON, or null if the
   * given string does not represent a JSON object.
   */
  function jsonObjectOrNull(s) {
      var obj;
      try {
          obj = JSON.parse(s);
      }
      catch (e) {
          return null;
      }
      if (isNonArrayObject(obj)) {
          return obj;
      }
      else {
          return null;
      }
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @fileoverview Contains helper methods for manipulating paths.
   */
  /**
   * @return Null if the path is already at the root.
   */
  function parent(path) {
      if (path.length === 0) {
          return null;
      }
      var index = path.lastIndexOf('/');
      if (index === -1) {
          return '';
      }
      var newPath = path.slice(0, index);
      return newPath;
  }
  function child(path, childPath) {
      var canonicalChildPath = childPath
          .split('/')
          .filter(function (component) { return component.length > 0; })
          .join('/');
      if (path.length === 0) {
          return canonicalChildPath;
      }
      else {
          return path + '/' + canonicalChildPath;
      }
  }
  /**
   * Returns the last component of a path.
   * '/foo/bar' -> 'bar'
   * '/foo/bar/baz/' -> 'baz/'
   * '/a' -> 'a'
   */
  function lastComponent(path) {
      var index = path.lastIndexOf('/', path.length - 2);
      if (index === -1) {
          return path;
      }
      else {
          return path.slice(index + 1);
      }
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function makeUrl(urlPart) {
      return "https://" + DEFAULT_HOST + "/v0" + urlPart;
  }
  function makeQueryString(params) {
      var encode = encodeURIComponent;
      var queryPart = '?';
      for (var key in params) {
          if (params.hasOwnProperty(key)) {
              // @ts-ignore TODO: remove once typescript is upgraded to 3.5.x
              var nextPart = encode(key) + '=' + encode(params[key]);
              queryPart = queryPart + nextPart + '&';
          }
      }
      // Chop off the extra '&' or '?' on the end
      queryPart = queryPart.slice(0, -1);
      return queryPart;
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function noXform_(metadata, value) {
      return value;
  }
  /**
   * @struct
   */
  var Mapping = /** @class */ (function () {
      function Mapping(server, local, writable, xform) {
          this.server = server;
          this.local = local || server;
          this.writable = !!writable;
          this.xform = xform || noXform_;
      }
      return Mapping;
  }());
  var mappings_ = null;
  function xformPath(fullPath) {
      if (!isString(fullPath) || fullPath.length < 2) {
          return fullPath;
      }
      else {
          return lastComponent(fullPath);
      }
  }
  function getMappings() {
      if (mappings_) {
          return mappings_;
      }
      var mappings = [];
      mappings.push(new Mapping('bucket'));
      mappings.push(new Mapping('generation'));
      mappings.push(new Mapping('metageneration'));
      mappings.push(new Mapping('name', 'fullPath', true));
      function mappingsXformPath(_metadata, fullPath) {
          return xformPath(fullPath);
      }
      var nameMapping = new Mapping('name');
      nameMapping.xform = mappingsXformPath;
      mappings.push(nameMapping);
      /**
       * Coerces the second param to a number, if it is defined.
       */
      function xformSize(_metadata, size) {
          if (isDef(size)) {
              return Number(size);
          }
          else {
              return size;
          }
      }
      var sizeMapping = new Mapping('size');
      sizeMapping.xform = xformSize;
      mappings.push(sizeMapping);
      mappings.push(new Mapping('timeCreated'));
      mappings.push(new Mapping('updated'));
      mappings.push(new Mapping('md5Hash', null, true));
      mappings.push(new Mapping('cacheControl', null, true));
      mappings.push(new Mapping('contentDisposition', null, true));
      mappings.push(new Mapping('contentEncoding', null, true));
      mappings.push(new Mapping('contentLanguage', null, true));
      mappings.push(new Mapping('contentType', null, true));
      mappings.push(new Mapping('metadata', 'customMetadata', true));
      mappings_ = mappings;
      return mappings_;
  }
  function addRef(metadata, authWrapper) {
      function generateRef() {
          var bucket = metadata['bucket'];
          var path = metadata['fullPath'];
          var loc = new Location(bucket, path);
          return authWrapper.makeStorageReference(loc);
      }
      Object.defineProperty(metadata, 'ref', { get: generateRef });
  }
  function fromResource(authWrapper, resource, mappings) {
      var metadata = {};
      metadata['type'] = 'file';
      var len = mappings.length;
      for (var i = 0; i < len; i++) {
          var mapping = mappings[i];
          metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
      }
      addRef(metadata, authWrapper);
      return metadata;
  }
  function fromResourceString(authWrapper, resourceString, mappings) {
      var obj = jsonObjectOrNull(resourceString);
      if (obj === null) {
          return null;
      }
      var resource = obj;
      return fromResource(authWrapper, resource, mappings);
  }
  function downloadUrlFromResourceString(metadata, resourceString) {
      var obj = jsonObjectOrNull(resourceString);
      if (obj === null) {
          return null;
      }
      if (!isString(obj['downloadTokens'])) {
          // This can happen if objects are uploaded through GCS and retrieved
          // through list, so we don't want to throw an Error.
          return null;
      }
      var tokens = obj['downloadTokens'];
      if (tokens.length === 0) {
          return null;
      }
      var encode = encodeURIComponent;
      var tokensList = tokens.split(',');
      var urls = tokensList.map(function (token) {
          var bucket = metadata['bucket'];
          var path = metadata['fullPath'];
          var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
          var base = makeUrl(urlPart);
          var queryString = makeQueryString({
              alt: 'media',
              token: token
          });
          return base + queryString;
      });
      return urls[0];
  }
  function toResourceString(metadata, mappings) {
      var resource = {};
      var len = mappings.length;
      for (var i = 0; i < len; i++) {
          var mapping = mappings[i];
          if (mapping.writable) {
              resource[mapping.server] = metadata[mapping.local];
          }
      }
      return JSON.stringify(resource);
  }
  function metadataValidator(p) {
      if (!isObject$1(p) || !p) {
          throw 'Expected Metadata object.';
      }
      for (var key in p) {
          if (p.hasOwnProperty(key)) {
              var val = p[key];
              if (key === 'customMetadata') {
                  if (!isObject$1(val)) {
                      throw 'Expected object for \'customMetadata\' mapping.';
                  }
              }
              else {
                  if (isNonNullObject(val)) {
                      throw "Mapping for '" + key + "' cannot be an object.";
                  }
              }
          }
      }
  }

  /**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var MAX_RESULTS_KEY = 'maxResults';
  var MAX_MAX_RESULTS = 1000;
  var PAGE_TOKEN_KEY = 'pageToken';
  var PREFIXES_KEY = 'prefixes';
  var ITEMS_KEY = 'items';
  function fromBackendResponse(authWrapper, resource) {
      var listResult = {
          prefixes: [],
          items: [],
          nextPageToken: resource['nextPageToken']
      };
      var bucket = authWrapper.bucket();
      if (bucket === null) {
          throw noDefaultBucket();
      }
      if (resource[PREFIXES_KEY]) {
          for (var _i = 0, _a = resource[PREFIXES_KEY]; _i < _a.length; _i++) {
              var path = _a[_i];
              var pathWithoutTrailingSlash = path.replace(/\/$/, '');
              var reference = authWrapper.makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));
              listResult.prefixes.push(reference);
          }
      }
      if (resource[ITEMS_KEY]) {
          for (var _b = 0, _c = resource[ITEMS_KEY]; _b < _c.length; _b++) {
              var item = _c[_b];
              var reference = authWrapper.makeStorageReference(new Location(bucket, item['name']));
              listResult.items.push(reference);
          }
      }
      return listResult;
  }
  function fromResponseString(authWrapper, resourceString) {
      var obj = jsonObjectOrNull(resourceString);
      if (obj === null) {
          return null;
      }
      var resource = obj;
      return fromBackendResponse(authWrapper, resource);
  }
  function listOptionsValidator(p) {
      if (!isObject$1(p) || !p) {
          throw 'Expected ListOptions object.';
      }
      for (var key in p) {
          if (key === MAX_RESULTS_KEY) {
              if (!isInteger(p[MAX_RESULTS_KEY]) ||
                  p[MAX_RESULTS_KEY] <= 0) {
                  throw 'Expected maxResults to be a positive number.';
              }
              if (p[MAX_RESULTS_KEY] > 1000) {
                  throw "Expected maxResults to be less than or equal to " + MAX_MAX_RESULTS + ".";
              }
          }
          else if (key === PAGE_TOKEN_KEY) {
              if (p[PAGE_TOKEN_KEY] && !isString(p[PAGE_TOKEN_KEY])) {
                  throw 'Expected pageToken to be string.';
              }
          }
          else {
              throw 'Unknown option: ' + key;
          }
      }
  }

  var RequestInfo = /** @class */ (function () {
      function RequestInfo(url, method, 
      /**
       * Returns the value with which to resolve the request's promise. Only called
       * if the request is successful. Throw from this function to reject the
       * returned Request's promise with the thrown error.
       * Note: The XhrIo passed to this function may be reused after this callback
       * returns. Do not keep a reference to it in any way.
       */
      handler, timeout) {
          this.url = url;
          this.method = method;
          this.handler = handler;
          this.timeout = timeout;
          this.urlParams = {};
          this.headers = {};
          this.body = null;
          this.errorHandler = null;
          /**
           * Called with the current number of bytes uploaded and total size (-1 if not
           * computable) of the request body (i.e. used to report upload progress).
           */
          this.progressCallback = null;
          this.successCodes = [200];
          this.additionalRetryCodes = [];
      }
      return RequestInfo;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Throws the UNKNOWN FirebaseStorageError if cndn is false.
   */
  function handlerCheck(cndn) {
      if (!cndn) {
          throw unknown();
      }
  }
  function metadataHandler(authWrapper, mappings) {
      function handler(xhr, text) {
          var metadata = fromResourceString(authWrapper, text, mappings);
          handlerCheck(metadata !== null);
          return metadata;
      }
      return handler;
  }
  function listHandler(authWrapper) {
      function handler(xhr, text) {
          var listResult = fromResponseString(authWrapper, text);
          handlerCheck(listResult !== null);
          return listResult;
      }
      return handler;
  }
  function downloadUrlHandler(authWrapper, mappings) {
      function handler(xhr, text) {
          var metadata = fromResourceString(authWrapper, text, mappings);
          handlerCheck(metadata !== null);
          return downloadUrlFromResourceString(metadata, text);
      }
      return handler;
  }
  function sharedErrorHandler(location) {
      function errorHandler(xhr, err) {
          var newErr;
          if (xhr.getStatus() === 401) {
              newErr = unauthenticated();
          }
          else {
              if (xhr.getStatus() === 402) {
                  newErr = quotaExceeded(location.bucket);
              }
              else {
                  if (xhr.getStatus() === 403) {
                      newErr = unauthorized(location.path);
                  }
                  else {
                      newErr = err;
                  }
              }
          }
          newErr.setServerResponseProp(err.serverResponseProp());
          return newErr;
      }
      return errorHandler;
  }
  function objectErrorHandler(location) {
      var shared = sharedErrorHandler(location);
      function errorHandler(xhr, err) {
          var newErr = shared(xhr, err);
          if (xhr.getStatus() === 404) {
              newErr = objectNotFound(location.path);
          }
          newErr.setServerResponseProp(err.serverResponseProp());
          return newErr;
      }
      return errorHandler;
  }
  function getMetadata(authWrapper, location, mappings) {
      var urlPart = location.fullServerUrl();
      var url = makeUrl(urlPart);
      var method = 'GET';
      var timeout = authWrapper.maxOperationRetryTime();
      var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
      requestInfo.errorHandler = objectErrorHandler(location);
      return requestInfo;
  }
  function list(authWrapper, location, delimiter, pageToken, maxResults) {
      var urlParams = {};
      if (location.isRoot) {
          urlParams['prefix'] = '';
      }
      else {
          urlParams['prefix'] = location.path + '/';
      }
      if (delimiter && delimiter.length > 0) {
          urlParams['delimiter'] = delimiter;
      }
      if (pageToken) {
          urlParams['pageToken'] = pageToken;
      }
      if (maxResults) {
          urlParams['maxResults'] = maxResults;
      }
      var urlPart = location.bucketOnlyServerUrl();
      var url = makeUrl(urlPart);
      var method = 'GET';
      var timeout = authWrapper.maxOperationRetryTime();
      var requestInfo = new RequestInfo(url, method, listHandler(authWrapper), timeout);
      requestInfo.urlParams = urlParams;
      requestInfo.errorHandler = sharedErrorHandler(location);
      return requestInfo;
  }
  function getDownloadUrl(authWrapper, location, mappings) {
      var urlPart = location.fullServerUrl();
      var url = makeUrl(urlPart);
      var method = 'GET';
      var timeout = authWrapper.maxOperationRetryTime();
      var requestInfo = new RequestInfo(url, method, downloadUrlHandler(authWrapper, mappings), timeout);
      requestInfo.errorHandler = objectErrorHandler(location);
      return requestInfo;
  }
  function updateMetadata(authWrapper, location, metadata, mappings) {
      var urlPart = location.fullServerUrl();
      var url = makeUrl(urlPart);
      var method = 'PATCH';
      var body = toResourceString(metadata, mappings);
      var headers = { 'Content-Type': 'application/json; charset=utf-8' };
      var timeout = authWrapper.maxOperationRetryTime();
      var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
      requestInfo.headers = headers;
      requestInfo.body = body;
      requestInfo.errorHandler = objectErrorHandler(location);
      return requestInfo;
  }
  function deleteObject(authWrapper, location) {
      var urlPart = location.fullServerUrl();
      var url = makeUrl(urlPart);
      var method = 'DELETE';
      var timeout = authWrapper.maxOperationRetryTime();
      function handler(_xhr, _text) { }
      var requestInfo = new RequestInfo(url, method, handler, timeout);
      requestInfo.successCodes = [200, 204];
      requestInfo.errorHandler = objectErrorHandler(location);
      return requestInfo;
  }
  function determineContentType_(metadata, blob) {
      return ((metadata && metadata['contentType']) ||
          (blob && blob.type()) ||
          'application/octet-stream');
  }
  function metadataForUpload_(location, blob, metadata) {
      var metadataClone = Object.assign({}, metadata);
      metadataClone['fullPath'] = location.path;
      metadataClone['size'] = blob.size();
      if (!metadataClone['contentType']) {
          metadataClone['contentType'] = determineContentType_(null, blob);
      }
      return metadataClone;
  }
  function multipartUpload(authWrapper, location, mappings, blob, metadata) {
      var urlPart = location.bucketOnlyServerUrl();
      var headers = {
          'X-Goog-Upload-Protocol': 'multipart'
      };
      function genBoundary() {
          var str = '';
          for (var i = 0; i < 2; i++) {
              str =
                  str +
                      Math.random()
                          .toString()
                          .slice(2);
          }
          return str;
      }
      var boundary = genBoundary();
      headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
      var metadata_ = metadataForUpload_(location, blob, metadata);
      var metadataString = toResourceString(metadata_, mappings);
      var preBlobPart = '--' +
          boundary +
          '\r\n' +
          'Content-Type: application/json; charset=utf-8\r\n\r\n' +
          metadataString +
          '\r\n--' +
          boundary +
          '\r\n' +
          'Content-Type: ' +
          metadata_['contentType'] +
          '\r\n\r\n';
      var postBlobPart = '\r\n--' + boundary + '--';
      var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);
      if (body === null) {
          throw cannotSliceBlob();
      }
      var urlParams = { name: metadata_['fullPath'] };
      var url = makeUrl(urlPart);
      var method = 'POST';
      var timeout = authWrapper.maxUploadRetryTime();
      var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
      requestInfo.urlParams = urlParams;
      requestInfo.headers = headers;
      requestInfo.body = body.uploadData();
      requestInfo.errorHandler = sharedErrorHandler(location);
      return requestInfo;
  }
  /**
   * @param current The number of bytes that have been uploaded so far.
   * @param total The total number of bytes in the upload.
   * @param opt_finalized True if the server has finished the upload.
   * @param opt_metadata The upload metadata, should
   *     only be passed if opt_finalized is true.
   * @struct
   */
  var ResumableUploadStatus = /** @class */ (function () {
      function ResumableUploadStatus(current, total, finalized, metadata) {
          this.current = current;
          this.total = total;
          this.finalized = !!finalized;
          this.metadata = metadata || null;
      }
      return ResumableUploadStatus;
  }());
  function checkResumeHeader_(xhr, allowed) {
      var status = null;
      try {
          status = xhr.getResponseHeader('X-Goog-Upload-Status');
      }
      catch (e) {
          handlerCheck(false);
      }
      var allowedStatus = allowed || ['active'];
      handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);
      return status;
  }
  function createResumableUpload(authWrapper, location, mappings, blob, metadata) {
      var urlPart = location.bucketOnlyServerUrl();
      var metadataForUpload = metadataForUpload_(location, blob, metadata);
      var urlParams = { name: metadataForUpload['fullPath'] };
      var url = makeUrl(urlPart);
      var method = 'POST';
      var headers = {
          'X-Goog-Upload-Protocol': 'resumable',
          'X-Goog-Upload-Command': 'start',
          'X-Goog-Upload-Header-Content-Length': blob.size(),
          'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],
          'Content-Type': 'application/json; charset=utf-8'
      };
      var body = toResourceString(metadataForUpload, mappings);
      var timeout = authWrapper.maxUploadRetryTime();
      function handler(xhr) {
          checkResumeHeader_(xhr);
          var url;
          try {
              url = xhr.getResponseHeader('X-Goog-Upload-URL');
          }
          catch (e) {
              handlerCheck(false);
          }
          handlerCheck(isString(url));
          return url;
      }
      var requestInfo = new RequestInfo(url, method, handler, timeout);
      requestInfo.urlParams = urlParams;
      requestInfo.headers = headers;
      requestInfo.body = body;
      requestInfo.errorHandler = sharedErrorHandler(location);
      return requestInfo;
  }
  /**
   * @param url From a call to fbs.requests.createResumableUpload.
   */
  function getResumableUploadStatus(authWrapper, location, url, blob) {
      var headers = { 'X-Goog-Upload-Command': 'query' };
      function handler(xhr) {
          var status = checkResumeHeader_(xhr, ['active', 'final']);
          var sizeString = null;
          try {
              sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
          }
          catch (e) {
              handlerCheck(false);
          }
          if (!sizeString) {
              // null or empty string
              handlerCheck(false);
          }
          var size = Number(sizeString);
          handlerCheck(!isNaN(size));
          return new ResumableUploadStatus(size, blob.size(), status === 'final');
      }
      var method = 'POST';
      var timeout = authWrapper.maxUploadRetryTime();
      var requestInfo = new RequestInfo(url, method, handler, timeout);
      requestInfo.headers = headers;
      requestInfo.errorHandler = sharedErrorHandler(location);
      return requestInfo;
  }
  /**
   * Any uploads via the resumable upload API must transfer a number of bytes
   * that is a multiple of this number.
   */
  var resumableUploadChunkSize = 256 * 1024;
  /**
   * @param url From a call to fbs.requests.createResumableUpload.
   * @param chunkSize Number of bytes to upload.
   * @param status The previous status.
   *     If not passed or null, we start from the beginning.
   * @throws fbs.Error If the upload is already complete, the passed in status
   *     has a final size inconsistent with the blob, or the blob cannot be sliced
   *     for upload.
   */
  function continueResumableUpload(location, authWrapper, url, blob, chunkSize, mappings, status, progressCallback) {
      // TODO(andysoto): standardize on internal asserts
      // assert(!(opt_status && opt_status.finalized));
      var status_ = new ResumableUploadStatus(0, 0);
      if (status) {
          status_.current = status.current;
          status_.total = status.total;
      }
      else {
          status_.current = 0;
          status_.total = blob.size();
      }
      if (blob.size() !== status_.total) {
          throw serverFileWrongSize();
      }
      var bytesLeft = status_.total - status_.current;
      var bytesToUpload = bytesLeft;
      if (chunkSize > 0) {
          bytesToUpload = Math.min(bytesToUpload, chunkSize);
      }
      var startByte = status_.current;
      var endByte = startByte + bytesToUpload;
      var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
      var headers = {
          'X-Goog-Upload-Command': uploadCommand,
          'X-Goog-Upload-Offset': status_.current
      };
      var body = blob.slice(startByte, endByte);
      if (body === null) {
          throw cannotSliceBlob();
      }
      function handler(xhr, text) {
          // TODO(andysoto): Verify the MD5 of each uploaded range:
          // the 'x-range-md5' header comes back with status code 308 responses.
          // We'll only be able to bail out though, because you can't re-upload a
          // range that you previously uploaded.
          var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);
          var newCurrent = status_.current + bytesToUpload;
          var size = blob.size();
          var metadata;
          if (uploadStatus === 'final') {
              metadata = metadataHandler(authWrapper, mappings)(xhr, text);
          }
          else {
              metadata = null;
          }
          return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
      }
      var method = 'POST';
      var timeout = authWrapper.maxUploadRetryTime();
      var requestInfo = new RequestInfo(url, method, handler, timeout);
      requestInfo.headers = headers;
      requestInfo.body = body.uploadData();
      requestInfo.progressCallback = progressCallback || null;
      requestInfo.errorHandler = sharedErrorHandler(location);
      return requestInfo;
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @struct
   */
  var Observer = /** @class */ (function () {
      function Observer(nextOrObserver, error, complete) {
          var asFunctions = isFunction(nextOrObserver) ||
              isDef(error) ||
              isDef(complete);
          if (asFunctions) {
              this.next = nextOrObserver;
              this.error = error || null;
              this.complete = complete || null;
          }
          else {
              var observer = nextOrObserver;
              this.next = observer.next || null;
              this.error = observer.error || null;
              this.complete = observer.complete || null;
          }
      }
      return Observer;
  }());

  var UploadTaskSnapshot = /** @class */ (function () {
      function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {
          this.bytesTransferred = bytesTransferred;
          this.totalBytes = totalBytes;
          this.state = state;
          this.metadata = metadata;
          this.task = task;
          this.ref = ref;
      }
      return UploadTaskSnapshot;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @param name Name of the function.
   * @param specs Argument specs.
   * @param passed The actual arguments passed to the function.
   * @throws {fbs.Error} If the arguments are invalid.
   */
  function validate(name, specs, passed) {
      var minArgs = specs.length;
      var maxArgs = specs.length;
      for (var i = 0; i < specs.length; i++) {
          if (specs[i].optional) {
              minArgs = i;
              break;
          }
      }
      var validLength = minArgs <= passed.length && passed.length <= maxArgs;
      if (!validLength) {
          throw invalidArgumentCount(minArgs, maxArgs, name, passed.length);
      }
      for (var i = 0; i < passed.length; i++) {
          try {
              specs[i].validator(passed[i]);
          }
          catch (e) {
              if (e instanceof Error) {
                  throw invalidArgument(i, name, e.message);
              }
              else {
                  throw invalidArgument(i, name, e);
              }
          }
      }
  }
  /**
   * @struct
   */
  var ArgSpec = /** @class */ (function () {
      function ArgSpec(validator, optional) {
          var self = this;
          this.validator = function (p) {
              if (self.optional && !isJustDef(p)) {
                  return;
              }
              validator(p);
          };
          this.optional = !!optional;
      }
      return ArgSpec;
  }());
  function and_(v1, v2) {
      return function (p) {
          v1(p);
          v2(p);
      };
  }
  function stringSpec(validator, optional) {
      function stringValidator(p) {
          if (!isString(p)) {
              throw 'Expected string.';
          }
      }
      var chainedValidator;
      if (validator) {
          chainedValidator = and_(stringValidator, validator);
      }
      else {
          chainedValidator = stringValidator;
      }
      return new ArgSpec(chainedValidator, optional);
  }
  function uploadDataSpec() {
      function validator(p) {
          var valid = p instanceof Uint8Array ||
              p instanceof ArrayBuffer ||
              (isNativeBlobDefined() && p instanceof Blob);
          if (!valid) {
              throw 'Expected Blob or File.';
          }
      }
      return new ArgSpec(validator);
  }
  function metadataSpec(optional) {
      return new ArgSpec(metadataValidator, optional);
  }
  function listOptionSpec(optional) {
      return new ArgSpec(listOptionsValidator, optional);
  }
  function nonNegativeNumberSpec() {
      function validator(p) {
          var valid = isNumber(p) && p >= 0;
          if (!valid) {
              throw 'Expected a number 0 or greater.';
          }
      }
      return new ArgSpec(validator);
  }
  function looseObjectSpec(validator, optional) {
      function isLooseObjectValidator(p) {
          var isLooseObject = p === null || (isDef(p) && p instanceof Object);
          if (!isLooseObject) {
              throw 'Expected an Object.';
          }
          if (validator !== undefined && validator !== null) {
              validator(p);
          }
      }
      return new ArgSpec(isLooseObjectValidator, optional);
  }
  function nullFunctionSpec(optional) {
      function validator(p) {
          var valid = p === null || isFunction(p);
          if (!valid) {
              throw 'Expected a Function.';
          }
      }
      return new ArgSpec(validator, optional);
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Returns a function that invokes f with its arguments asynchronously as a
   * microtask, i.e. as soon as possible after the current script returns back
   * into browser code.
   */
  function async(f) {
      return function () {
          var argsToForward = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              argsToForward[_i] = arguments[_i];
          }
          // eslint-disable-next-line @typescript-eslint/no-floating-promises
          Promise.resolve().then(function () { return f.apply(void 0, argsToForward); });
      };
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Represents a blob being uploaded. Can be used to pause/resume/cancel the
   * upload and manage callbacks for various events.
   */
  var UploadTask = /** @class */ (function () {
      /**
       * @param ref The firebaseStorage.Reference object this task came
       *     from, untyped to avoid cyclic dependencies.
       * @param blob The blob to upload.
       */
      function UploadTask(ref, authWrapper, location, mappings, blob, metadata) {
          var _this = this;
          if (metadata === void 0) { metadata = null; }
          this.transferred_ = 0;
          this.needToFetchStatus_ = false;
          this.needToFetchMetadata_ = false;
          this.observers_ = [];
          this.error_ = null;
          this.uploadUrl_ = null;
          this.request_ = null;
          this.chunkMultiplier_ = 1;
          this.resolve_ = null;
          this.reject_ = null;
          this.ref_ = ref;
          this.authWrapper_ = authWrapper;
          this.location_ = location;
          this.blob_ = blob;
          this.metadata_ = metadata;
          this.mappings_ = mappings;
          this.resumable_ = this.shouldDoResumable_(this.blob_);
          this.state_ = InternalTaskState.RUNNING;
          this.errorHandler_ = function (error) {
              _this.request_ = null;
              _this.chunkMultiplier_ = 1;
              if (error.codeEquals(Code.CANCELED)) {
                  _this.needToFetchStatus_ = true;
                  _this.completeTransitions_();
              }
              else {
                  _this.error_ = error;
                  _this.transition_(InternalTaskState.ERROR);
              }
          };
          this.metadataErrorHandler_ = function (error) {
              _this.request_ = null;
              if (error.codeEquals(Code.CANCELED)) {
                  _this.completeTransitions_();
              }
              else {
                  _this.error_ = error;
                  _this.transition_(InternalTaskState.ERROR);
              }
          };
          this.promise_ = new Promise(function (resolve, reject) {
              _this.resolve_ = resolve;
              _this.reject_ = reject;
              _this.start_();
          });
          // Prevent uncaught rejections on the internal promise from bubbling out
          // to the top level with a dummy handler.
          this.promise_.then(null, function () { });
      }
      UploadTask.prototype.makeProgressCallback_ = function () {
          var _this = this;
          var sizeBefore = this.transferred_;
          return function (loaded) { return _this.updateProgress_(sizeBefore + loaded); };
      };
      UploadTask.prototype.shouldDoResumable_ = function (blob) {
          return blob.size() > 256 * 1024;
      };
      UploadTask.prototype.start_ = function () {
          if (this.state_ !== InternalTaskState.RUNNING) {
              // This can happen if someone pauses us in a resume callback, for example.
              return;
          }
          if (this.request_ !== null) {
              return;
          }
          if (this.resumable_) {
              if (this.uploadUrl_ === null) {
                  this.createResumable_();
              }
              else {
                  if (this.needToFetchStatus_) {
                      this.fetchStatus_();
                  }
                  else {
                      if (this.needToFetchMetadata_) {
                          // Happens if we miss the metadata on upload completion.
                          this.fetchMetadata_();
                      }
                      else {
                          this.continueUpload_();
                      }
                  }
              }
          }
          else {
              this.oneShotUpload_();
          }
      };
      UploadTask.prototype.resolveToken_ = function (callback) {
          var _this = this;
          // eslint-disable-next-line @typescript-eslint/no-floating-promises
          this.authWrapper_.getAuthToken().then(function (authToken) {
              switch (_this.state_) {
                  case InternalTaskState.RUNNING:
                      callback(authToken);
                      break;
                  case InternalTaskState.CANCELING:
                      _this.transition_(InternalTaskState.CANCELED);
                      break;
                  case InternalTaskState.PAUSING:
                      _this.transition_(InternalTaskState.PAUSED);
                      break;
              }
          });
      };
      // TODO(andysoto): assert false
      UploadTask.prototype.createResumable_ = function () {
          var _this = this;
          this.resolveToken_(function (authToken) {
              var requestInfo = createResumableUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);
              var createRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
              _this.request_ = createRequest;
              createRequest.getPromise().then(function (url) {
                  _this.request_ = null;
                  _this.uploadUrl_ = url;
                  _this.needToFetchStatus_ = false;
                  _this.completeTransitions_();
              }, _this.errorHandler_);
          });
      };
      UploadTask.prototype.fetchStatus_ = function () {
          var _this = this;
          // TODO(andysoto): assert(this.uploadUrl_ !== null);
          var url = this.uploadUrl_;
          this.resolveToken_(function (authToken) {
              var requestInfo = getResumableUploadStatus(_this.authWrapper_, _this.location_, url, _this.blob_);
              var statusRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
              _this.request_ = statusRequest;
              statusRequest.getPromise().then(function (status) {
                  status = status;
                  _this.request_ = null;
                  _this.updateProgress_(status.current);
                  _this.needToFetchStatus_ = false;
                  if (status.finalized) {
                      _this.needToFetchMetadata_ = true;
                  }
                  _this.completeTransitions_();
              }, _this.errorHandler_);
          });
      };
      UploadTask.prototype.continueUpload_ = function () {
          var _this = this;
          var chunkSize = resumableUploadChunkSize * this.chunkMultiplier_;
          var status = new ResumableUploadStatus(this.transferred_, this.blob_.size());
          // TODO(andysoto): assert(this.uploadUrl_ !== null);
          var url = this.uploadUrl_;
          this.resolveToken_(function (authToken) {
              var requestInfo;
              try {
                  requestInfo = continueResumableUpload(_this.location_, _this.authWrapper_, url, _this.blob_, chunkSize, _this.mappings_, status, _this.makeProgressCallback_());
              }
              catch (e) {
                  _this.error_ = e;
                  _this.transition_(InternalTaskState.ERROR);
                  return;
              }
              var uploadRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
              _this.request_ = uploadRequest;
              uploadRequest
                  .getPromise()
                  .then(function (newStatus) {
                  _this.increaseMultiplier_();
                  _this.request_ = null;
                  _this.updateProgress_(newStatus.current);
                  if (newStatus.finalized) {
                      _this.metadata_ = newStatus.metadata;
                      _this.transition_(InternalTaskState.SUCCESS);
                  }
                  else {
                      _this.completeTransitions_();
                  }
              }, _this.errorHandler_);
          });
      };
      UploadTask.prototype.increaseMultiplier_ = function () {
          var currentSize = resumableUploadChunkSize * this.chunkMultiplier_;
          // Max chunk size is 32M.
          if (currentSize < 32 * 1024 * 1024) {
              this.chunkMultiplier_ *= 2;
          }
      };
      UploadTask.prototype.fetchMetadata_ = function () {
          var _this = this;
          this.resolveToken_(function (authToken) {
              var requestInfo = getMetadata(_this.authWrapper_, _this.location_, _this.mappings_);
              var metadataRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
              _this.request_ = metadataRequest;
              metadataRequest.getPromise().then(function (metadata) {
                  _this.request_ = null;
                  _this.metadata_ = metadata;
                  _this.transition_(InternalTaskState.SUCCESS);
              }, _this.metadataErrorHandler_);
          });
      };
      UploadTask.prototype.oneShotUpload_ = function () {
          var _this = this;
          this.resolveToken_(function (authToken) {
              var requestInfo = multipartUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);
              var multipartRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
              _this.request_ = multipartRequest;
              multipartRequest.getPromise().then(function (metadata) {
                  _this.request_ = null;
                  _this.metadata_ = metadata;
                  _this.updateProgress_(_this.blob_.size());
                  _this.transition_(InternalTaskState.SUCCESS);
              }, _this.errorHandler_);
          });
      };
      UploadTask.prototype.updateProgress_ = function (transferred) {
          var old = this.transferred_;
          this.transferred_ = transferred;
          // A progress update can make the "transferred" value smaller (e.g. a
          // partial upload not completed by server, after which the "transferred"
          // value may reset to the value at the beginning of the request).
          if (this.transferred_ !== old) {
              this.notifyObservers_();
          }
      };
      UploadTask.prototype.transition_ = function (state) {
          if (this.state_ === state) {
              return;
          }
          switch (state) {
              case InternalTaskState.CANCELING:
                  // TODO(andysoto):
                  // assert(this.state_ === InternalTaskState.RUNNING ||
                  //        this.state_ === InternalTaskState.PAUSING);
                  this.state_ = state;
                  if (this.request_ !== null) {
                      this.request_.cancel();
                  }
                  break;
              case InternalTaskState.PAUSING:
                  // TODO(andysoto):
                  // assert(this.state_ === InternalTaskState.RUNNING);
                  this.state_ = state;
                  if (this.request_ !== null) {
                      this.request_.cancel();
                  }
                  break;
              case InternalTaskState.RUNNING:
                  // TODO(andysoto):
                  // assert(this.state_ === InternalTaskState.PAUSED ||
                  //        this.state_ === InternalTaskState.PAUSING);
                  var wasPaused = this.state_ === InternalTaskState.PAUSED;
                  this.state_ = state;
                  if (wasPaused) {
                      this.notifyObservers_();
                      this.start_();
                  }
                  break;
              case InternalTaskState.PAUSED:
                  // TODO(andysoto):
                  // assert(this.state_ === InternalTaskState.PAUSING);
                  this.state_ = state;
                  this.notifyObservers_();
                  break;
              case InternalTaskState.CANCELED:
                  // TODO(andysoto):
                  // assert(this.state_ === InternalTaskState.PAUSED ||
                  //        this.state_ === InternalTaskState.CANCELING);
                  this.error_ = canceled();
                  this.state_ = state;
                  this.notifyObservers_();
                  break;
              case InternalTaskState.ERROR:
                  // TODO(andysoto):
                  // assert(this.state_ === InternalTaskState.RUNNING ||
                  //        this.state_ === InternalTaskState.PAUSING ||
                  //        this.state_ === InternalTaskState.CANCELING);
                  this.state_ = state;
                  this.notifyObservers_();
                  break;
              case InternalTaskState.SUCCESS:
                  // TODO(andysoto):
                  // assert(this.state_ === InternalTaskState.RUNNING ||
                  //        this.state_ === InternalTaskState.PAUSING ||
                  //        this.state_ === InternalTaskState.CANCELING);
                  this.state_ = state;
                  this.notifyObservers_();
                  break;
          }
      };
      UploadTask.prototype.completeTransitions_ = function () {
          switch (this.state_) {
              case InternalTaskState.PAUSING:
                  this.transition_(InternalTaskState.PAUSED);
                  break;
              case InternalTaskState.CANCELING:
                  this.transition_(InternalTaskState.CANCELED);
                  break;
              case InternalTaskState.RUNNING:
                  this.start_();
                  break;
          }
      };
      Object.defineProperty(UploadTask.prototype, "snapshot", {
          get: function () {
              var externalState = taskStateFromInternalTaskState(this.state_);
              return new UploadTaskSnapshot(this.transferred_, this.blob_.size(), externalState, this.metadata_, this, this.ref_);
          },
          enumerable: true,
          configurable: true
      });
      /**
       * Adds a callback for an event.
       * @param type The type of event to listen for.
       */
      UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {
          function typeValidator() {
              if (type !== TaskEvent.STATE_CHANGED) {
                  throw "Expected one of the event types: [" + TaskEvent.STATE_CHANGED + "].";
              }
          }
          var nextOrObserverMessage = 'Expected a function or an Object with one of ' +
              '`next`, `error`, `complete` properties.';
          var nextValidator = nullFunctionSpec(true).validator;
          var observerValidator = looseObjectSpec(null, true).validator;
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          function nextOrObserverValidator(p) {
              try {
                  nextValidator(p);
                  return;
              }
              catch (e) { }
              try {
                  observerValidator(p);
                  var anyDefined = isJustDef(p['next']) ||
                      isJustDef(p['error']) ||
                      isJustDef(p['complete']);
                  if (!anyDefined) {
                      throw '';
                  }
                  return;
              }
              catch (e) {
                  throw nextOrObserverMessage;
              }
          }
          var specs = [
              stringSpec(typeValidator),
              looseObjectSpec(nextOrObserverValidator, true),
              nullFunctionSpec(true),
              nullFunctionSpec(true)
          ];
          validate('on', specs, arguments);
          var self = this;
          function makeBinder(specs) {
              function binder(nextOrObserver, error, complete) {
                  if (specs !== null) {
                      validate('on', specs, arguments);
                  }
                  var observer = new Observer(nextOrObserver, error, completed);
                  self.addObserver_(observer);
                  return function () {
                      self.removeObserver_(observer);
                  };
              }
              return binder;
          }
          function binderNextOrObserverValidator(p) {
              if (p === null) {
                  throw nextOrObserverMessage;
              }
              nextOrObserverValidator(p);
          }
          var binderSpecs = [
              looseObjectSpec(binderNextOrObserverValidator),
              nullFunctionSpec(true),
              nullFunctionSpec(true)
          ];
          var typeOnly = !(isJustDef(nextOrObserver) ||
              isJustDef(error) ||
              isJustDef(completed));
          if (typeOnly) {
              return makeBinder(binderSpecs);
          }
          else {
              return makeBinder(null)(nextOrObserver, error, completed);
          }
      };
      /**
       * This object behaves like a Promise, and resolves with its snapshot data
       * when the upload completes.
       * @param onFulfilled The fulfillment callback. Promise chaining works as normal.
       * @param onRejected The rejection callback.
       */
      UploadTask.prototype.then = function (onFulfilled, onRejected) {
          // These casts are needed so that TypeScript can infer the types of the
          // resulting Promise.
          return this.promise_.then(onFulfilled, onRejected);
      };
      /**
       * Equivalent to calling `then(null, onRejected)`.
       */
      UploadTask.prototype.catch = function (onRejected) {
          return this.then(null, onRejected);
      };
      /**
       * Adds the given observer.
       */
      UploadTask.prototype.addObserver_ = function (observer) {
          this.observers_.push(observer);
          this.notifyObserver_(observer);
      };
      /**
       * Removes the given observer.
       */
      UploadTask.prototype.removeObserver_ = function (observer) {
          var i = this.observers_.indexOf(observer);
          if (i !== -1) {
              this.observers_.splice(i, 1);
          }
      };
      UploadTask.prototype.notifyObservers_ = function () {
          var _this = this;
          this.finishPromise_();
          var observers = this.observers_.slice();
          observers.forEach(function (observer) {
              _this.notifyObserver_(observer);
          });
      };
      UploadTask.prototype.finishPromise_ = function () {
          if (this.resolve_ !== null) {
              var triggered = true;
              switch (taskStateFromInternalTaskState(this.state_)) {
                  case TaskState.SUCCESS:
                      async(this.resolve_.bind(null, this.snapshot))();
                      break;
                  case TaskState.CANCELED:
                  case TaskState.ERROR:
                      var toCall = this.reject_;
                      async(toCall.bind(null, this.error_))();
                      break;
                  default:
                      triggered = false;
                      break;
              }
              if (triggered) {
                  this.resolve_ = null;
                  this.reject_ = null;
              }
          }
      };
      UploadTask.prototype.notifyObserver_ = function (observer) {
          var externalState = taskStateFromInternalTaskState(this.state_);
          switch (externalState) {
              case TaskState.RUNNING:
              case TaskState.PAUSED:
                  if (observer.next) {
                      async(observer.next.bind(observer, this.snapshot))();
                  }
                  break;
              case TaskState.SUCCESS:
                  if (observer.complete) {
                      async(observer.complete.bind(observer))();
                  }
                  break;
              case TaskState.CANCELED:
              case TaskState.ERROR:
                  if (observer.error) {
                      async(observer.error.bind(observer, this.error_))();
                  }
                  break;
              default:
                  // TODO(andysoto): assert(false);
                  if (observer.error) {
                      async(observer.error.bind(observer, this.error_))();
                  }
          }
      };
      /**
       * Resumes a paused task. Has no effect on a currently running or failed task.
       * @return True if the operation took effect, false if ignored.
       */
      UploadTask.prototype.resume = function () {
          validate('resume', [], arguments);
          var valid = this.state_ === InternalTaskState.PAUSED ||
              this.state_ === InternalTaskState.PAUSING;
          if (valid) {
              this.transition_(InternalTaskState.RUNNING);
          }
          return valid;
      };
      /**
       * Pauses a currently running task. Has no effect on a paused or failed task.
       * @return True if the operation took effect, false if ignored.
       */
      UploadTask.prototype.pause = function () {
          validate('pause', [], arguments);
          var valid = this.state_ === InternalTaskState.RUNNING;
          if (valid) {
              this.transition_(InternalTaskState.PAUSING);
          }
          return valid;
      };
      /**
       * Cancels a currently running or paused task. Has no effect on a complete or
       * failed task.
       * @return True if the operation took effect, false if ignored.
       */
      UploadTask.prototype.cancel = function () {
          validate('cancel', [], arguments);
          var valid = this.state_ === InternalTaskState.RUNNING ||
              this.state_ === InternalTaskState.PAUSING;
          if (valid) {
              this.transition_(InternalTaskState.CANCELING);
          }
          return valid;
      };
      return UploadTask;
  }());

  /**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Provides methods to interact with a bucket in the Firebase Storage service.
   * @param location An fbs.location, or the URL at
   *     which to base this object, in one of the following forms:
   *         gs://<bucket>/<object-path>
   *         http[s]://firebasestorage.googleapis.com/
   *                     <api-version>/b/<bucket>/o/<object-path>
   *     Any query or fragment strings will be ignored in the http[s]
   *     format. If no value is passed, the storage object will use a URL based on
   *     the project ID of the base firebase.App instance.
   */
  var Reference = /** @class */ (function () {
      function Reference(authWrapper, location) {
          this.authWrapper = authWrapper;
          if (location instanceof Location) {
              this.location = location;
          }
          else {
              this.location = Location.makeFromUrl(location);
          }
      }
      /**
       * @return The URL for the bucket and path this object references,
       *     in the form gs://<bucket>/<object-path>
       * @override
       */
      Reference.prototype.toString = function () {
          validate('toString', [], arguments);
          return 'gs://' + this.location.bucket + '/' + this.location.path;
      };
      Reference.prototype.newRef = function (authWrapper, location) {
          return new Reference(authWrapper, location);
      };
      Reference.prototype.mappings = function () {
          return getMappings();
      };
      /**
       * @return A reference to the object obtained by
       *     appending childPath, removing any duplicate, beginning, or trailing
       *     slashes.
       */
      Reference.prototype.child = function (childPath) {
          validate('child', [stringSpec()], arguments);
          var newPath = child(this.location.path, childPath);
          var location = new Location(this.location.bucket, newPath);
          return this.newRef(this.authWrapper, location);
      };
      Object.defineProperty(Reference.prototype, "parent", {
          /**
           * @return A reference to the parent of the
           *     current object, or null if the current object is the root.
           */
          get: function () {
              var newPath = parent(this.location.path);
              if (newPath === null) {
                  return null;
              }
              var location = new Location(this.location.bucket, newPath);
              return this.newRef(this.authWrapper, location);
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Reference.prototype, "root", {
          /**
           * @return An reference to the root of this
           *     object's bucket.
           */
          get: function () {
              var location = new Location(this.location.bucket, '');
              return this.newRef(this.authWrapper, location);
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Reference.prototype, "bucket", {
          get: function () {
              return this.location.bucket;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Reference.prototype, "fullPath", {
          get: function () {
              return this.location.path;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Reference.prototype, "name", {
          get: function () {
              return lastComponent(this.location.path);
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Reference.prototype, "storage", {
          get: function () {
              return this.authWrapper.service();
          },
          enumerable: true,
          configurable: true
      });
      /**
       * Uploads a blob to this object's location.
       * @param data The blob to upload.
       * @return An UploadTask that lets you control and
       *     observe the upload.
       */
      Reference.prototype.put = function (data, metadata) {
          if (metadata === void 0) { metadata = null; }
          validate('put', [uploadDataSpec(), metadataSpec(true)], arguments);
          this.throwIfRoot_('put');
          return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data), metadata);
      };
      /**
       * Uploads a string to this object's location.
       * @param value The string to upload.
       * @param format The format of the string to upload.
       * @return An UploadTask that lets you control and
       *     observe the upload.
       */
      Reference.prototype.putString = function (value, format, metadata) {
          if (format === void 0) { format = StringFormat.RAW; }
          validate('putString', [stringSpec(), stringSpec(formatValidator, true), metadataSpec(true)], arguments);
          this.throwIfRoot_('putString');
          var data = dataFromString(format, value);
          var metadataClone = Object.assign({}, metadata);
          if (!isDef(metadataClone['contentType']) &&
              isDef(data.contentType)) {
              metadataClone['contentType'] = data.contentType;
          }
          return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data.data, true), metadataClone);
      };
      /**
       * Deletes the object at this location.
       * @return A promise that resolves if the deletion succeeds.
       */
      Reference.prototype.delete = function () {
          var _this = this;
          validate('delete', [], arguments);
          this.throwIfRoot_('delete');
          return this.authWrapper.getAuthToken().then(function (authToken) {
              var requestInfo = deleteObject(_this.authWrapper, _this.location);
              return _this.authWrapper.makeRequest(requestInfo, authToken).getPromise();
          });
      };
      /**
       * List all items (files) and prefixes (folders) under this storage reference.
       *
       * This is a helper method for calling list() repeatedly until there are
       * no more results. The default pagination size is 1000.
       *
       * Note: The results may not be consistent if objects are changed while this
       * operation is running.
       *
       * Warning: listAll may potentially consume too many resources if there are
       * too many results.
       *
       * @return A Promise that resolves with all the items and prefixes under
       *      the current storage reference. `prefixes` contains references to
       *      sub-directories and `items` contains references to objects in this
       *      folder. `nextPageToken` is never returned.
       */
      Reference.prototype.listAll = function () {
          validate('listAll', [], arguments);
          var accumulator = {
              prefixes: [],
              items: []
          };
          return this.listAllHelper(accumulator).then(function () { return accumulator; });
      };
      Reference.prototype.listAllHelper = function (accumulator, pageToken) {
          return __awaiter(this, void 0, void 0, function () {
              var opt, nextPage;
              var _a, _b;
              return __generator(this, function (_c) {
                  switch (_c.label) {
                      case 0:
                          opt = {
                              // maxResults is 1000 by default.
                              pageToken: pageToken
                          };
                          return [4 /*yield*/, this.list(opt)];
                      case 1:
                          nextPage = _c.sent();
                          (_a = accumulator.prefixes).push.apply(_a, nextPage.prefixes);
                          (_b = accumulator.items).push.apply(_b, nextPage.items);
                          if (!(nextPage.nextPageToken != null)) return [3 /*break*/, 3];
                          return [4 /*yield*/, this.listAllHelper(accumulator, nextPage.nextPageToken)];
                      case 2:
                          _c.sent();
                          _c.label = 3;
                      case 3: return [2 /*return*/];
                  }
              });
          });
      };
      /**
       * List items (files) and prefixes (folders) under this storage reference.
       *
       * List API is only available for Firebase Rules Version 2.
       *
       * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
       * delimited folder structure.
       * Refer to GCS's List API if you want to learn more.
       *
       * To adhere to Firebase Rules's Semantics, Firebase Storage does not
       * support objects whose paths end with "/" or contain two consecutive
       * "/"s. Firebase Storage List API will filter these unsupported objects.
       * list() may fail if there are too many unsupported objects in the bucket.
       *
       * @param options See ListOptions for details.
       * @return A Promise that resolves with the items and prefixes.
       *      `prefixes` contains references to sub-folders and `items`
       *      contains references to objects in this folder. `nextPageToken`
       *      can be used to get the rest of the results.
       */
      Reference.prototype.list = function (options) {
          validate('list', [listOptionSpec(true)], arguments);
          var self = this;
          return this.authWrapper.getAuthToken().then(function (authToken) {
              var op = options || {};
              var requestInfo = list(self.authWrapper, self.location, 
              /*delimiter= */ '/', op.pageToken, op.maxResults);
              return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
          });
      };
      /**
       *     A promise that resolves with the metadata for this object. If this
       *     object doesn't exist or metadata cannot be retreived, the promise is
       *     rejected.
       */
      Reference.prototype.getMetadata = function () {
          var _this = this;
          validate('getMetadata', [], arguments);
          this.throwIfRoot_('getMetadata');
          return this.authWrapper.getAuthToken().then(function (authToken) {
              var requestInfo = getMetadata(_this.authWrapper, _this.location, _this.mappings());
              return _this.authWrapper.makeRequest(requestInfo, authToken).getPromise();
          });
      };
      /**
       * Updates the metadata for this object.
       * @param metadata The new metadata for the object.
       *     Only values that have been explicitly set will be changed. Explicitly
       *     setting a value to null will remove the metadata.
       * @return A promise that resolves
       *     with the new metadata for this object.
       *     @see firebaseStorage.Reference.prototype.getMetadata
       */
      Reference.prototype.updateMetadata = function (metadata) {
          var _this = this;
          validate('updateMetadata', [metadataSpec()], arguments);
          this.throwIfRoot_('updateMetadata');
          return this.authWrapper.getAuthToken().then(function (authToken) {
              var requestInfo = updateMetadata(_this.authWrapper, _this.location, metadata, _this.mappings());
              return _this.authWrapper.makeRequest(requestInfo, authToken).getPromise();
          });
      };
      /**
       * @return A promise that resolves with the download
       *     URL for this object.
       */
      Reference.prototype.getDownloadURL = function () {
          var _this = this;
          validate('getDownloadURL', [], arguments);
          this.throwIfRoot_('getDownloadURL');
          return this.authWrapper.getAuthToken().then(function (authToken) {
              var requestInfo = getDownloadUrl(_this.authWrapper, _this.location, _this.mappings());
              return _this.authWrapper
                  .makeRequest(requestInfo, authToken)
                  .getPromise()
                  .then(function (url) {
                  if (url === null) {
                      throw noDownloadURL();
                  }
                  return url;
              });
          });
      };
      Reference.prototype.throwIfRoot_ = function (name) {
          if (this.location.path === '') {
              throw invalidRootOperation(name);
          }
      };
      return Reference;
  }());

  /**
   * A request whose promise always fails.
   * @struct
   * @template T
   */
  var FailRequest = /** @class */ (function () {
      function FailRequest(error) {
          this.promise_ = Promise.reject(error);
      }
      /** @inheritDoc */
      FailRequest.prototype.getPromise = function () {
          return this.promise_;
      };
      /** @inheritDoc */
      FailRequest.prototype.cancel = function (_appDelete) {
      };
      return FailRequest;
  }());

  var RequestMap = /** @class */ (function () {
      function RequestMap() {
          this.map = new Map();
          this.id = MIN_SAFE_INTEGER;
      }
      /**
       * Registers the given request with this map.
       * The request is unregistered when it completes.
       *
       * @param request The request to register.
       */
      RequestMap.prototype.addRequest = function (request) {
          var _this = this;
          var id = this.id;
          this.id++;
          this.map.set(id, request);
          request.getPromise().then(function () { return _this.map.delete(id); }, function () { return _this.map.delete(id); });
      };
      /**
       * Cancels all registered requests.
       */
      RequestMap.prototype.clear = function () {
          this.map.forEach(function (v) {
              v && v.cancel(true);
          });
          this.map.clear();
      };
      return RequestMap;
  }());

  /**
   * @param app If null, getAuthToken always resolves with null.
   * @param service The storage service associated with this auth wrapper.
   *     Untyped to avoid circular type dependencies.
   * @struct
   */
  var AuthWrapper = /** @class */ (function () {
      function AuthWrapper(app, maker, requestMaker, service, pool) {
          this.bucket_ = null;
          this.deleted_ = false;
          this.app_ = app;
          if (this.app_ !== null) {
              var options = this.app_.options;
              if (isDef(options)) {
                  this.bucket_ = AuthWrapper.extractBucket_(options);
              }
          }
          this.storageRefMaker_ = maker;
          this.requestMaker_ = requestMaker;
          this.pool_ = pool;
          this.service_ = service;
          this.maxOperationRetryTime_ = DEFAULT_MAX_OPERATION_RETRY_TIME;
          this.maxUploadRetryTime_ = DEFAULT_MAX_UPLOAD_RETRY_TIME;
          this.requestMap_ = new RequestMap();
      }
      AuthWrapper.extractBucket_ = function (config) {
          var bucketString = config[CONFIG_STORAGE_BUCKET_KEY] || null;
          if (bucketString == null) {
              return null;
          }
          var loc = Location.makeFromBucketSpec(bucketString);
          return loc.bucket;
      };
      AuthWrapper.prototype.getAuthToken = function () {
          // TODO(andysoto): remove ifDef checks after firebase-app implements stubs
          // (b/28673818).
          if (this.app_ !== null &&
              isDef(this.app_.INTERNAL) &&
              isDef(this.app_.INTERNAL.getToken)) {
              return this.app_.INTERNAL.getToken().then(function (response) {
                  if (response !== null) {
                      return response.accessToken;
                  }
                  else {
                      return null;
                  }
              }, function () { return null; });
          }
          else {
              return Promise.resolve(null);
          }
      };
      AuthWrapper.prototype.bucket = function () {
          if (this.deleted_) {
              throw appDeleted();
          }
          else {
              return this.bucket_;
          }
      };
      /**
       * The service associated with this auth wrapper. Untyped to avoid circular
       * type dependencies.
       */
      AuthWrapper.prototype.service = function () {
          return this.service_;
      };
      /**
       * Returns a new firebaseStorage.Reference object referencing this AuthWrapper
       * at the given Location.
       * @param loc The Location.
       * @return Actually a firebaseStorage.Reference, typing not allowed
       *     because of circular dependency problems.
       */
      AuthWrapper.prototype.makeStorageReference = function (loc) {
          return this.storageRefMaker_(this, loc);
      };
      AuthWrapper.prototype.makeRequest = function (requestInfo, authToken) {
          if (!this.deleted_) {
              var request = this.requestMaker_(requestInfo, authToken, this.pool_);
              this.requestMap_.addRequest(request);
              return request;
          }
          else {
              return new FailRequest(appDeleted());
          }
      };
      /**
       * Stop running requests and prevent more from being created.
       */
      AuthWrapper.prototype.deleteApp = function () {
          this.deleted_ = true;
          this.app_ = null;
          this.requestMap_.clear();
      };
      AuthWrapper.prototype.maxUploadRetryTime = function () {
          return this.maxUploadRetryTime_;
      };
      AuthWrapper.prototype.setMaxUploadRetryTime = function (time) {
          this.maxUploadRetryTime_ = time;
      };
      AuthWrapper.prototype.maxOperationRetryTime = function () {
          return this.maxOperationRetryTime_;
      };
      AuthWrapper.prototype.setMaxOperationRetryTime = function (time) {
          this.maxOperationRetryTime_ = time;
      };
      return AuthWrapper;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @param f May be invoked
   *     before the function returns.
   * @param callback Get all the arguments passed to the function
   *     passed to f, including the initial boolean.
   */
  function start(f, callback, timeout) {
      // TODO(andysoto): make this code cleaner (probably refactor into an actual
      // type instead of a bunch of functions with state shared in the closure)
      var waitSeconds = 1;
      // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯
      // TODO: find a way to exclude Node type definition for storage because storage only works in browser
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var timeoutId = null;
      var hitTimeout = false;
      var cancelState = 0;
      function canceled() {
          return cancelState === 2;
      }
      var triggeredCallback = false;
      // TODO: This disable can be removed and the 'ignoreRestArgs' option added to
      // the no-explicit-any rule when ESlint releases it.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      function triggerCallback() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          if (!triggeredCallback) {
              triggeredCallback = true;
              callback.apply(null, args);
          }
      }
      function callWithDelay(millis) {
          timeoutId = setTimeout(function () {
              timeoutId = null;
              f(handler, canceled());
          }, millis);
      }
      // TODO: This disable can be removed and the 'ignoreRestArgs' option added to
      // the no-explicit-any rule when ESlint releases it.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      function handler(success) {
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments[_i];
          }
          if (triggeredCallback) {
              return;
          }
          if (success) {
              triggerCallback.call.apply(triggerCallback, __spreadArrays([null, success], args));
              return;
          }
          var mustStop = canceled() || hitTimeout;
          if (mustStop) {
              triggerCallback.call.apply(triggerCallback, __spreadArrays([null, success], args));
              return;
          }
          if (waitSeconds < 64) {
              /* TODO(andysoto): don't back off so quickly if we know we're offline. */
              waitSeconds *= 2;
          }
          var waitMillis;
          if (cancelState === 1) {
              cancelState = 2;
              waitMillis = 0;
          }
          else {
              waitMillis = (waitSeconds + Math.random()) * 1000;
          }
          callWithDelay(waitMillis);
      }
      var stopped = false;
      function stop(wasTimeout) {
          if (stopped) {
              return;
          }
          stopped = true;
          if (triggeredCallback) {
              return;
          }
          if (timeoutId !== null) {
              if (!wasTimeout) {
                  cancelState = 2;
              }
              clearTimeout(timeoutId);
              callWithDelay(0);
          }
          else {
              if (!wasTimeout) {
                  cancelState = 1;
              }
          }
      }
      callWithDelay(0);
      setTimeout(function () {
          hitTimeout = true;
          stop(true);
      }, timeout);
      return stop;
  }
  /**
   * Stops the retry loop from repeating.
   * If the function is currently "in between" retries, it is invoked immediately
   * with the second parameter as "true". Otherwise, it will be invoked once more
   * after the current invocation finishes iff the current invocation would have
   * triggered another retry.
   */
  function stop(id) {
      id(false);
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @struct
   * @template T
   */
  var NetworkRequest = /** @class */ (function () {
      function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
          var _this = this;
          this.pendingXhr_ = null;
          this.backoffId_ = null;
          this.resolve_ = null;
          this.reject_ = null;
          this.canceled_ = false;
          this.appDelete_ = false;
          this.url_ = url;
          this.method_ = method;
          this.headers_ = headers;
          this.body_ = body;
          this.successCodes_ = successCodes.slice();
          this.additionalRetryCodes_ = additionalRetryCodes.slice();
          this.callback_ = callback;
          this.errorCallback_ = errorCallback;
          this.progressCallback_ = progressCallback;
          this.timeout_ = timeout;
          this.pool_ = pool;
          this.promise_ = new Promise(function (resolve, reject) {
              _this.resolve_ = resolve;
              _this.reject_ = reject;
              _this.start_();
          });
      }
      /**
       * Actually starts the retry loop.
       */
      NetworkRequest.prototype.start_ = function () {
          var self = this;
          function doTheRequest(backoffCallback, canceled) {
              if (canceled) {
                  backoffCallback(false, new RequestEndStatus(false, null, true));
                  return;
              }
              var xhr = self.pool_.createXhrIo();
              self.pendingXhr_ = xhr;
              function progressListener(progressEvent) {
                  var loaded = progressEvent.loaded;
                  var total = progressEvent.lengthComputable ? progressEvent.total : -1;
                  if (self.progressCallback_ !== null) {
                      self.progressCallback_(loaded, total);
                  }
              }
              if (self.progressCallback_ !== null) {
                  xhr.addUploadProgressListener(progressListener);
              }
              // eslint-disable-next-line @typescript-eslint/no-floating-promises
              xhr
                  .send(self.url_, self.method_, self.body_, self.headers_)
                  .then(function (xhr) {
                  if (self.progressCallback_ !== null) {
                      xhr.removeUploadProgressListener(progressListener);
                  }
                  self.pendingXhr_ = null;
                  xhr = xhr;
                  var hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;
                  var status = xhr.getStatus();
                  if (!hitServer || self.isRetryStatusCode_(status)) {
                      var wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;
                      backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
                      return;
                  }
                  var successCode = self.successCodes_.indexOf(status) !== -1;
                  backoffCallback(true, new RequestEndStatus(successCode, xhr));
              });
          }
          /**
           * @param requestWentThrough True if the request eventually went
           *     through, false if it hit the retry limit or was canceled.
           */
          function backoffDone(requestWentThrough, status) {
              var resolve = self.resolve_;
              var reject = self.reject_;
              var xhr = status.xhr;
              if (status.wasSuccessCode) {
                  try {
                      var result = self.callback_(xhr, xhr.getResponseText());
                      if (isJustDef(result)) {
                          resolve(result);
                      }
                      else {
                          resolve();
                      }
                  }
                  catch (e) {
                      reject(e);
                  }
              }
              else {
                  if (xhr !== null) {
                      var err = unknown();
                      err.setServerResponseProp(xhr.getResponseText());
                      if (self.errorCallback_) {
                          reject(self.errorCallback_(xhr, err));
                      }
                      else {
                          reject(err);
                      }
                  }
                  else {
                      if (status.canceled) {
                          var err = self.appDelete_ ? appDeleted() : canceled();
                          reject(err);
                      }
                      else {
                          var err = retryLimitExceeded();
                          reject(err);
                      }
                  }
              }
          }
          if (this.canceled_) {
              backoffDone(false, new RequestEndStatus(false, null, true));
          }
          else {
              this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
          }
      };
      /** @inheritDoc */
      NetworkRequest.prototype.getPromise = function () {
          return this.promise_;
      };
      /** @inheritDoc */
      NetworkRequest.prototype.cancel = function (appDelete) {
          this.canceled_ = true;
          this.appDelete_ = appDelete || false;
          if (this.backoffId_ !== null) {
              stop(this.backoffId_);
          }
          if (this.pendingXhr_ !== null) {
              this.pendingXhr_.abort();
          }
      };
      NetworkRequest.prototype.isRetryStatusCode_ = function (status) {
          // The codes for which to retry came from this page:
          // https://cloud.google.com/storage/docs/exponential-backoff
          var isFiveHundredCode = status >= 500 && status < 600;
          var extraRetryCodes = [
              // Request Timeout: web server didn't receive full request in time.
              408,
              // Too Many Requests: you're getting rate-limited, basically.
              429
          ];
          var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;
          var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;
          return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
      };
      return NetworkRequest;
  }());
  /**
   * A collection of information about the result of a network request.
   * @param opt_canceled Defaults to false.
   * @struct
   */
  var RequestEndStatus = /** @class */ (function () {
      function RequestEndStatus(wasSuccessCode, xhr, canceled) {
          this.wasSuccessCode = wasSuccessCode;
          this.xhr = xhr;
          this.canceled = !!canceled;
      }
      return RequestEndStatus;
  }());
  function addAuthHeader_(headers, authToken) {
      if (authToken !== null && authToken.length > 0) {
          headers['Authorization'] = 'Firebase ' + authToken;
      }
  }
  function addVersionHeader_(headers) {
      var version = typeof firebase !== 'undefined' ? firebase.SDK_VERSION : 'AppManager';
      headers['X-Firebase-Storage-Version'] = 'webjs/' + version;
  }
  /**
   * @template T
   */
  function makeRequest(requestInfo, authToken, pool) {
      var queryPart = makeQueryString(requestInfo.urlParams);
      var url = requestInfo.url + queryPart;
      var headers = Object.assign({}, requestInfo.headers);
      addAuthHeader_(headers, authToken);
      addVersionHeader_(headers);
      return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
  }

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A service that provides firebaseStorage.Reference instances.
   * @param opt_url gs:// url to a custom Storage Bucket
   *
   * @struct
   */
  var Service = /** @class */ (function () {
      function Service(app, pool, url) {
          this.bucket_ = null;
          function maker(authWrapper, loc) {
              return new Reference(authWrapper, loc);
          }
          this.authWrapper_ = new AuthWrapper(app, maker, makeRequest, this, pool);
          this.app_ = app;
          if (url != null) {
              this.bucket_ = Location.makeFromBucketSpec(url);
          }
          else {
              var authWrapperBucket = this.authWrapper_.bucket();
              if (authWrapperBucket != null) {
                  this.bucket_ = new Location(authWrapperBucket, '');
              }
          }
          this.internals_ = new ServiceInternals(this);
      }
      /**
       * Returns a firebaseStorage.Reference for the given path in the default
       * bucket.
       */
      Service.prototype.ref = function (path) {
          function validator(path) {
              if (typeof path !== 'string') {
                  throw 'Path is not a string.';
              }
              if (/^[A-Za-z]+:\/\//.test(path)) {
                  throw 'Expected child path but got a URL, use refFromURL instead.';
              }
          }
          validate('ref', [stringSpec(validator, true)], arguments);
          if (this.bucket_ == null) {
              throw new Error('No Storage Bucket defined in Firebase Options.');
          }
          var ref = new Reference(this.authWrapper_, this.bucket_);
          if (path != null) {
              return ref.child(path);
          }
          else {
              return ref;
          }
      };
      /**
       * Returns a firebaseStorage.Reference object for the given absolute URL,
       * which must be a gs:// or http[s]:// URL.
       */
      Service.prototype.refFromURL = function (url) {
          function validator(p) {
              if (typeof p !== 'string') {
                  throw 'Path is not a string.';
              }
              if (!/^[A-Za-z]+:\/\//.test(p)) {
                  throw 'Expected full URL but got a child path, use ref instead.';
              }
              try {
                  Location.makeFromUrl(p);
              }
              catch (e) {
                  throw 'Expected valid full URL but got an invalid one.';
              }
          }
          validate('refFromURL', [stringSpec(validator, false)], arguments);
          return new Reference(this.authWrapper_, url);
      };
      Object.defineProperty(Service.prototype, "maxUploadRetryTime", {
          get: function () {
              return this.authWrapper_.maxUploadRetryTime();
          },
          enumerable: true,
          configurable: true
      });
      Service.prototype.setMaxUploadRetryTime = function (time) {
          validate('setMaxUploadRetryTime', [nonNegativeNumberSpec()], arguments);
          this.authWrapper_.setMaxUploadRetryTime(time);
      };
      Service.prototype.setMaxOperationRetryTime = function (time) {
          validate('setMaxOperationRetryTime', [nonNegativeNumberSpec()], arguments);
          this.authWrapper_.setMaxOperationRetryTime(time);
      };
      Object.defineProperty(Service.prototype, "app", {
          get: function () {
              return this.app_;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Service.prototype, "INTERNAL", {
          get: function () {
              return this.internals_;
          },
          enumerable: true,
          configurable: true
      });
      return Service;
  }());
  /**
   * @struct
   */
  var ServiceInternals = /** @class */ (function () {
      function ServiceInternals(service) {
          this.service_ = service;
      }
      /**
       * Called when the associated app is deleted.
       * @see {!fbs.AuthWrapper.prototype.deleteApp}
       */
      ServiceInternals.prototype.delete = function () {
          this.service_.authWrapper_.deleteApp();
          return Promise.resolve();
      };
      return ServiceInternals;
  }());

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Type constant for Firebase Storage.
   */
  var STORAGE_TYPE = 'storage';
  function factory(app, unused, url) {
      return new Service(app, new XhrIoPool(), url);
  }
  function registerStorage(instance) {
      var namespaceExports = {
          // no-inline
          TaskState: TaskState,
          TaskEvent: TaskEvent,
          StringFormat: StringFormat,
          Storage: Service,
          Reference: Reference
      };
      instance.INTERNAL.registerService(STORAGE_TYPE, factory, namespaceExports, undefined, 
      // Allow multiple storage instances per app.
      true);
  }
  registerStorage(firebase);
  //# sourceMappingURL=index.esm.js.map

  (function() {var k,aa="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value);},ba="undefined"!=typeof window&&window===this?this:"undefined"!=typeof global&&null!=global?global:this;function ca(a,b){if(b){var c=ba;a=a.split(".");for(var d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e];}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&aa(c,a,{configurable:!0,writable:!0,value:b});}}
  function da(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function ea(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:da(a)}}
  ca("Promise",function(a){function b(g){this.b=0;this.c=void 0;this.a=[];var h=this.f();try{g(h.resolve,h.reject);}catch(m){h.reject(m);}}function c(){this.a=null;}function d(g){return g instanceof b?g:new b(function(h){h(g);})}if(a)return a;c.prototype.b=function(g){if(null==this.a){this.a=[];var h=this;this.c(function(){h.g();});}this.a.push(g);};var e=ba.setTimeout;c.prototype.c=function(g){e(g,0);};c.prototype.g=function(){for(;this.a&&this.a.length;){var g=this.a;this.a=[];for(var h=0;h<g.length;++h){var m=
  g[h];g[h]=null;try{m();}catch(p){this.f(p);}}}this.a=null;};c.prototype.f=function(g){this.c(function(){throw g;});};b.prototype.f=function(){function g(p){return function(u){m||(m=!0,p.call(h,u));}}var h=this,m=!1;return {resolve:g(this.m),reject:g(this.g)}};b.prototype.m=function(g){if(g===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(g instanceof b)this.o(g);else{a:switch(typeof g){case "object":var h=null!=g;break a;case "function":h=!0;break a;default:h=!1;}h?this.u(g):this.h(g);}};
  b.prototype.u=function(g){var h=void 0;try{h=g.then;}catch(m){this.g(m);return}"function"==typeof h?this.v(h,g):this.h(g);};b.prototype.g=function(g){this.i(2,g);};b.prototype.h=function(g){this.i(1,g);};b.prototype.i=function(g,h){if(0!=this.b)throw Error("Cannot settle("+g+", "+h+"): Promise already settled in state"+this.b);this.b=g;this.c=h;this.l();};b.prototype.l=function(){if(null!=this.a){for(var g=0;g<this.a.length;++g)f.b(this.a[g]);this.a=null;}};var f=new c;b.prototype.o=function(g){var h=this.f();
  g.La(h.resolve,h.reject);};b.prototype.v=function(g,h){var m=this.f();try{g.call(h,m.resolve,m.reject);}catch(p){m.reject(p);}};b.prototype.then=function(g,h){function m(C,N){return "function"==typeof C?function(wa){try{p(C(wa));}catch(ld){u(ld);}}:N}var p,u,A=new b(function(C,N){p=C;u=N;});this.La(m(g,p),m(h,u));return A};b.prototype.catch=function(g){return this.then(void 0,g)};b.prototype.La=function(g,h){function m(){switch(p.b){case 1:g(p.c);break;case 2:h(p.c);break;default:throw Error("Unexpected state: "+
  p.b);}}var p=this;null==this.a?f.b(m):this.a.push(m);};b.resolve=d;b.reject=function(g){return new b(function(h,m){m(g);})};b.race=function(g){return new b(function(h,m){for(var p=ea(g),u=p.next();!u.done;u=p.next())d(u.value).La(h,m);})};b.all=function(g){var h=ea(g),m=h.next();return m.done?d([]):new b(function(p,u){function A(wa){return function(ld){C[wa]=ld;N--;0==N&&p(C);}}var C=[],N=0;do C.push(void 0),N++,d(m.value).La(A(C.length-1),u),m=h.next();while(!m.done)})};return b});
  var fa=fa||{},l=this||self;function n(a){return "string"==typeof a}function ha(a){return "boolean"==typeof a}var ia=/^[\w+/_-]+[=]{0,2}$/,ja=null;function ka(){}
  function la(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return "array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return "object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return "array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return "function"}else return "null";
  else if("function"==b&&"undefined"==typeof a.call)return "object";return b}function ma(a){return null===a}function na(a){return "array"==la(a)}function oa(a){var b=la(a);return "array"==b||"object"==b&&"number"==typeof a.length}function q(a){return "function"==la(a)}function r(a){var b=typeof a;return "object"==b&&null!=a||"function"==b}var pa="closure_uid_"+(1E9*Math.random()>>>0),qa=0;function ra(a,b,c){return a.call.apply(a.bind,arguments)}
  function sa(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}}function t(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?t=ra:t=sa;return t.apply(null,arguments)}
  function ta(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}var ua=Date.now||function(){return +new Date};function v(a,b){function c(){}c.prototype=b.prototype;a.qb=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.gd=function(d,e,f){for(var g=Array(arguments.length-2),h=2;h<arguments.length;h++)g[h-2]=arguments[h];return b.prototype[e].apply(d,g)};}function va(a){if(!a)return !1;try{return !!a.$goog_Thenable}catch(b){return !1}}function w(a){if(Error.captureStackTrace)Error.captureStackTrace(this,w);else{var b=Error().stack;b&&(this.stack=b);}a&&(this.message=String(a));}v(w,Error);w.prototype.name="CustomError";function xa(a,b){a=a.split("%s");for(var c="",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");w.call(this,c+a[d]);}v(xa,w);xa.prototype.name="AssertionError";function ya(a,b){throw new xa("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1));}function za(a,b){this.c=a;this.f=b;this.b=0;this.a=null;}za.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null;}else a=this.c();return a};function Aa(a,b){a.f(b);100>a.b&&(a.b++,b.next=a.a,a.a=b);}function Ba(){this.b=this.a=null;}var Da=new za(function(){return new Ca},function(a){a.reset();});Ba.prototype.add=function(a,b){var c=Da.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c;};function Ea(){var a=Fa,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Ca(){this.next=this.b=this.a=null;}Ca.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null;};Ca.prototype.reset=function(){this.next=this.b=this.a=null;};function Ga(a,b){a:{try{var c=a&&a.ownerDocument,d=c&&(c.defaultView||c.parentWindow);d=d||l;if(d.Element&&d.Location){var e=d;break a}}catch(g){}e=null;}if(e&&"undefined"!=typeof e[b]&&(!a||!(a instanceof e[b])&&(a instanceof e.Location||a instanceof e.Element))){if(r(a))try{var f=a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a);}catch(g){f="<object could not be stringified>";}else f=void 0===a?"undefined":null===a?"null":typeof a;ya("Argument is not a %s (or a non-Element, non-Location mock); got: %s",
  b,f);}}var Ha=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(n(a))return n(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return -1},x=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c);}:function(a,b,c){for(var d=a.length,e=n(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a);};function Ia(a,b){for(var c=n(a)?a.split(""):a,d=a.length-1;0<=d;--d)d in c&&b.call(void 0,c[d],d,a);}
  var Ja=Array.prototype.map?function(a,b){return Array.prototype.map.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=Array(c),e=n(a)?a.split(""):a,f=0;f<c;f++)f in e&&(d[f]=b.call(void 0,e[f],f,a));return d},Ka=Array.prototype.some?function(a,b){return Array.prototype.some.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=n(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a))return !0;return !1};
  function La(a){a:{var b=Ma;for(var c=a.length,d=n(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1;}return 0>b?null:n(a)?a.charAt(b):a[b]}function Na(a,b){return 0<=Ha(a,b)}function Oa(a,b){b=Ha(a,b);var c;(c=0<=b)&&Array.prototype.splice.call(a,b,1);return c}function Pa(a,b){var c=0;Ia(a,function(d,e){b.call(void 0,d,e,a)&&1==Array.prototype.splice.call(a,e,1).length&&c++;});}function Qa(a){return Array.prototype.concat.apply([],arguments)}
  function Ra(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return []}function Sa(a,b){for(var c in a)b.call(void 0,a[c],c,a);}function Ta(a){for(var b in a)return !1;return !0}function Ua(a){var b={},c;for(c in a)b[c]=a[c];return b}var Va="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Wa(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<Va.length;f++)c=Va[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}}function Xa(a,b){this.a=a===Ya&&b||"";this.b=Za;}Xa.prototype.qa=!0;Xa.prototype.pa=function(){return this.a};Xa.prototype.toString=function(){return "Const{"+this.a+"}"};function $a(a){if(a instanceof Xa&&a.constructor===Xa&&a.b===Za)return a.a;ya("expected object of type Const, got '"+a+"'");return "type_error:Const"}var Za={},Ya={},ab=new Xa(Ya,"");function bb(){this.a="";this.b=cb;}bb.prototype.qa=!0;bb.prototype.pa=function(){return this.a.toString()};bb.prototype.toString=function(){return "TrustedResourceUrl{"+this.a+"}"};function db(a){if(a instanceof bb&&a.constructor===bb&&a.b===cb)return a.a;ya("expected object of type TrustedResourceUrl, got '"+a+"' of type "+la(a));return "type_error:TrustedResourceUrl"}
  function eb(a,b){var c=$a(a);if(!fb.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(gb,function(d,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, "'+e+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));d=b[e];return d instanceof Xa?$a(d):encodeURIComponent(String(d))});return hb(a)}var gb=/%{(\w+)}/g,fb=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,cb={};
  function hb(a){var b=new bb;b.a=a;return b}var ib=String.prototype.trim?function(a){return a.trim()}:function(a){return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]},jb=/&/g,kb=/</g,lb=/>/g,mb=/"/g,nb=/'/g,ob=/\x00/g,pb=/[\x00&<>"']/;function y(a,b){return -1!=a.indexOf(b)}function qb(a,b){return a<b?-1:a>b?1:0}function rb(){this.a="";this.b=sb;}rb.prototype.qa=!0;rb.prototype.pa=function(){return this.a.toString()};rb.prototype.toString=function(){return "SafeUrl{"+this.a+"}"};function tb(a){if(a instanceof rb&&a.constructor===rb&&a.b===sb)return a.a;ya("expected object of type SafeUrl, got '"+a+"' of type "+la(a));return "type_error:SafeUrl"}var ub=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
  function vb(a){if(a instanceof rb)return a;a="object"==typeof a&&a.qa?a.pa():String(a);ub.test(a)||(a="about:invalid#zClosurez");return wb(a)}var sb={};function wb(a){var b=new rb;b.a=a;return b}wb("about:blank");var xb;a:{var yb=l.navigator;if(yb){var zb=yb.userAgent;if(zb){xb=zb;break a}}xb="";}function z(a){return y(xb,a)}function Ab(){this.a="";this.b=Bb;}Ab.prototype.qa=!0;Ab.prototype.pa=function(){return this.a.toString()};Ab.prototype.toString=function(){return "SafeHtml{"+this.a+"}"};function Cb(a){if(a instanceof Ab&&a.constructor===Ab&&a.b===Bb)return a.a;ya("expected object of type SafeHtml, got '"+a+"' of type "+la(a));return "type_error:SafeHtml"}var Bb={};function Db(a){var b=new Ab;b.a=a;return b}Db("<!DOCTYPE html>");var Eb=Db("");Db("<br>");function Fb(a){var b=hb($a(ab));Ga(a,"HTMLIFrameElement");a.src=db(b).toString();}function Gb(a,b){Ga(a,"HTMLScriptElement");a.src=db(b);if(null===ja)b:{b=l.document;if((b=b.querySelector&&b.querySelector("script[nonce]"))&&(b=b.nonce||b.getAttribute("nonce"))&&ia.test(b)){ja=b;break b}ja="";}b=ja;b&&a.setAttribute("nonce",b);}function Hb(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")}function Ib(a){pb.test(a)&&(-1!=a.indexOf("&")&&(a=a.replace(jb,"&amp;")),-1!=a.indexOf("<")&&(a=a.replace(kb,"&lt;")),-1!=a.indexOf(">")&&(a=a.replace(lb,"&gt;")),-1!=a.indexOf('"')&&(a=a.replace(mb,"&quot;")),-1!=a.indexOf("'")&&(a=a.replace(nb,"&#39;")),-1!=a.indexOf("\x00")&&(a=a.replace(ob,"&#0;")));return a}function Jb(a){l.setTimeout(function(){throw a;},0);}var Kb;
  function Lb(){var a=l.MessageChannel;"undefined"===typeof a&&"undefined"!==typeof window&&window.postMessage&&window.addEventListener&&!z("Presto")&&(a=function(){var e=document.createElement("IFRAME");e.style.display="none";Fb(e);document.documentElement.appendChild(e);var f=e.contentWindow;e=f.document;e.open();e.write(Cb(Eb));e.close();var g="callImmediate"+Math.random(),h="file:"==f.location.protocol?"*":f.location.protocol+"//"+f.location.host;e=t(function(m){if(("*"==h||m.origin==h)&&m.data==
  g)this.port1.onmessage();},this);f.addEventListener("message",e,!1);this.port1={};this.port2={postMessage:function(){f.postMessage(g,h);}};});if("undefined"!==typeof a&&!z("Trident")&&!z("MSIE")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var e=c.yb;c.yb=null;e();}};return function(e){d.next={yb:e};d=d.next;b.port2.postMessage(0);}}return "undefined"!==typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(e){var f=document.createElement("SCRIPT");
  f.onreadystatechange=function(){f.onreadystatechange=null;f.parentNode.removeChild(f);f=null;e();e=null;};document.documentElement.appendChild(f);}:function(e){l.setTimeout(e,0);}}function Mb(a,b){Nb||Ob();Pb||(Nb(),Pb=!0);Fa.add(a,b);}var Nb;function Ob(){if(l.Promise&&l.Promise.resolve){var a=l.Promise.resolve(void 0);Nb=function(){a.then(Qb);};}else Nb=function(){var b=Qb;!q(l.setImmediate)||l.Window&&l.Window.prototype&&!z("Edge")&&l.Window.prototype.setImmediate==l.setImmediate?(Kb||(Kb=Lb()),Kb(b)):l.setImmediate(b);};}var Pb=!1,Fa=new Ba;function Qb(){for(var a;a=Ea();){try{a.a.call(a.b);}catch(b){Jb(b);}Aa(Da,a);}Pb=!1;}function B(a,b){this.a=Rb;this.i=void 0;this.f=this.b=this.c=null;this.g=this.h=!1;if(a!=ka)try{var c=this;a.call(b,function(d){Sb(c,Tb,d);},function(d){if(!(d instanceof Ub))try{if(d instanceof Error)throw d;throw Error("Promise rejected.");}catch(e){}Sb(c,Vb,d);});}catch(d){Sb(this,Vb,d);}}var Rb=0,Tb=2,Vb=3;function Wb(){this.next=this.f=this.b=this.g=this.a=null;this.c=!1;}Wb.prototype.reset=function(){this.f=this.b=this.g=this.a=null;this.c=!1;};var Xb=new za(function(){return new Wb},function(a){a.reset();});
  function Yb(a,b,c){var d=Xb.get();d.g=a;d.b=b;d.f=c;return d}function D(a){if(a instanceof B)return a;var b=new B(ka);Sb(b,Tb,a);return b}function E(a){return new B(function(b,c){c(a);})}function Zb(a,b,c){$b(a,b,c,null)||Mb(ta(b,a));}function ac(a){return new B(function(b,c){var d=a.length,e=[];if(d)for(var f=function(p,u){d--;e[p]=u;0==d&&b(e);},g=function(p){c(p);},h=0,m;h<a.length;h++)m=a[h],Zb(m,ta(f,h),g);else b(e);})}
  function bc(a){return new B(function(b){var c=a.length,d=[];if(c)for(var e=function(h,m,p){c--;d[h]=m?{Gb:!0,value:p}:{Gb:!1,reason:p};0==c&&b(d);},f=0,g;f<a.length;f++)g=a[f],Zb(g,ta(e,f,!0),ta(e,f,!1));else b(d);})}B.prototype.then=function(a,b,c){return cc(this,q(a)?a:null,q(b)?b:null,c)};B.prototype.$goog_Thenable=!0;k=B.prototype;k.ka=function(a,b){a=Yb(a,a,b);a.c=!0;dc(this,a);return this};k.s=function(a,b){return cc(this,null,a,b)};
  k.cancel=function(a){this.a==Rb&&Mb(function(){var b=new Ub(a);ec(this,b);},this);};function ec(a,b){if(a.a==Rb)if(a.c){var c=a.c;if(c.b){for(var d=0,e=null,f=null,g=c.b;g&&(g.c||(d++,g.a==a&&(e=g),!(e&&1<d)));g=g.next)e||(f=g);e&&(c.a==Rb&&1==d?ec(c,b):(f?(d=f,d.next==c.f&&(c.f=d),d.next=d.next.next):fc(c),gc(c,e,Vb,b)));}a.c=null;}else Sb(a,Vb,b);}function dc(a,b){a.b||a.a!=Tb&&a.a!=Vb||hc(a);a.f?a.f.next=b:a.b=b;a.f=b;}
  function cc(a,b,c,d){var e=Yb(null,null,null);e.a=new B(function(f,g){e.g=b?function(h){try{var m=b.call(d,h);f(m);}catch(p){g(p);}}:f;e.b=c?function(h){try{var m=c.call(d,h);void 0===m&&h instanceof Ub?g(h):f(m);}catch(p){g(p);}}:g;});e.a.c=a;dc(a,e);return e.a}k.Oc=function(a){this.a=Rb;Sb(this,Tb,a);};k.Pc=function(a){this.a=Rb;Sb(this,Vb,a);};
  function Sb(a,b,c){a.a==Rb&&(a===c&&(b=Vb,c=new TypeError("Promise cannot resolve to itself")),a.a=1,$b(c,a.Oc,a.Pc,a)||(a.i=c,a.a=b,a.c=null,hc(a),b!=Vb||c instanceof Ub||ic(a,c)));}function $b(a,b,c,d){if(a instanceof B)return dc(a,Yb(b||ka,c||null,d)),!0;if(va(a))return a.then(b,c,d),!0;if(r(a))try{var e=a.then;if(q(e))return jc(a,e,b,c,d),!0}catch(f){return c.call(d,f),!0}return !1}
  function jc(a,b,c,d,e){function f(m){h||(h=!0,d.call(e,m));}function g(m){h||(h=!0,c.call(e,m));}var h=!1;try{b.call(a,g,f);}catch(m){f(m);}}function hc(a){a.h||(a.h=!0,Mb(a.Zb,a));}function fc(a){var b=null;a.b&&(b=a.b,a.b=b.next,b.next=null);a.b||(a.f=null);return b}k.Zb=function(){for(var a;a=fc(this);)gc(this,a,this.a,this.i);this.h=!1;};
  function gc(a,b,c,d){if(c==Vb&&b.b&&!b.c)for(;a&&a.g;a=a.c)a.g=!1;if(b.a)b.a.c=null,kc(b,c,d);else try{b.c?b.g.call(b.f):kc(b,c,d);}catch(e){lc.call(null,e);}Aa(Xb,b);}function kc(a,b,c){b==Tb?a.g.call(a.f,c):a.b&&a.b.call(a.f,c);}function ic(a,b){a.g=!0;Mb(function(){a.g&&lc.call(null,b);});}var lc=Jb;function Ub(a){w.call(this,a);}v(Ub,w);Ub.prototype.name="cancel";function mc(){this.va=this.va;this.la=this.la;}var nc=0;mc.prototype.va=!1;function pc(a){if(!a.va&&(a.va=!0,a.za(),0!=nc)){var b=a[pa]||(a[pa]=++qa);}}mc.prototype.za=function(){if(this.la)for(;this.la.length;)this.la.shift()();};function qc(a){qc[" "](a);return a}qc[" "]=ka;function rc(a,b){var c=sc;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)}var tc=z("Opera"),uc=z("Trident")||z("MSIE"),vc=z("Edge"),wc=vc||uc,xc=z("Gecko")&&!(y(xb.toLowerCase(),"webkit")&&!z("Edge"))&&!(z("Trident")||z("MSIE"))&&!z("Edge"),yc=y(xb.toLowerCase(),"webkit")&&!z("Edge");function zc(){var a=l.document;return a?a.documentMode:void 0}var Ac;
  a:{var Bc="",Cc=function(){var a=xb;if(xc)return /rv:([^\);]+)(\)|;)/.exec(a);if(vc)return /Edge\/([\d\.]+)/.exec(a);if(uc)return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(yc)return /WebKit\/(\S+)/.exec(a);if(tc)return /(?:Version)[ \/]?(\S+)/.exec(a)}();Cc&&(Bc=Cc?Cc[1]:"");if(uc){var Dc=zc();if(null!=Dc&&Dc>parseFloat(Bc)){Ac=String(Dc);break a}}Ac=Bc;}var sc={};
  function Ec(a){return rc(a,function(){for(var b=0,c=ib(String(Ac)).split("."),d=ib(String(a)).split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var g=c[f]||"",h=d[f]||"";do{g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];h=/(\d*)(\D*)(.*)/.exec(h)||["","","",""];if(0==g[0].length&&0==h[0].length)break;b=qb(0==g[1].length?0:parseInt(g[1],10),0==h[1].length?0:parseInt(h[1],10))||qb(0==g[2].length,0==h[2].length)||qb(g[2],h[2]);g=g[3];h=h[3];}while(0==b)}return 0<=b})}var Fc;
  Fc=l.document&&uc?zc():void 0;var Gc=Object.freeze||function(a){return a};var Hc=!uc||9<=Number(Fc),Ic=uc&&!Ec("9"),Jc=function(){if(!l.addEventListener||!Object.defineProperty)return !1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0;}});try{l.addEventListener("test",ka,b),l.removeEventListener("test",ka,b);}catch(c){}return a}();function F(a,b){this.type=a;this.b=this.target=b;this.Mb=!0;}F.prototype.preventDefault=function(){this.Mb=!1;};function Kc(a,b){F.call(this,a?a.type:"");this.relatedTarget=this.b=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.a=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.b=b;if(b=a.relatedTarget){if(xc){a:{try{qc(b.nodeName);var e=!0;break a}catch(f){}e=!1;}e||(b=null);}}else"mouseover"==
  c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
  a.metaKey;this.pointerId=a.pointerId||0;this.pointerType=n(a.pointerType)?a.pointerType:Lc[a.pointerType]||"";this.a=a;a.defaultPrevented&&this.preventDefault();}}v(Kc,F);var Lc=Gc({2:"touch",3:"pen",4:"mouse"});Kc.prototype.preventDefault=function(){Kc.qb.preventDefault.call(this);var a=this.a;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Ic)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1;}catch(b){}};Kc.prototype.f=function(){return this.a};var Mc="closure_listenable_"+(1E6*Math.random()|0),Nc=0;function Oc(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.Pa=e;this.key=++Nc;this.ta=this.Ka=!1;}function Pc(a){a.ta=!0;a.listener=null;a.proxy=null;a.src=null;a.Pa=null;}function Qc(a){this.src=a;this.a={};this.b=0;}Qc.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var g=Rc(a,b,d,e);-1<g?(b=a[g],c||(b.Ka=!1)):(b=new Oc(b,this.src,f,!!d,e),b.Ka=c,a.push(b));return b};function Sc(a,b){var c=b.type;c in a.a&&Oa(a.a[c],b)&&(Pc(b),0==a.a[c].length&&(delete a.a[c],a.b--));}function Rc(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.ta&&f.listener==b&&f.capture==!!c&&f.Pa==d)return e}return -1}var Tc="closure_lm_"+(1E6*Math.random()|0),Uc={};function Wc(a,b,c,d,e){if(d&&d.once)Xc(a,b,c,d,e);else if(na(b))for(var f=0;f<b.length;f++)Wc(a,b[f],c,d,e);else c=Yc(c),a&&a[Mc]?Zc(a,b,c,r(d)?!!d.capture:!!d,e):$c(a,b,c,!1,d,e);}
  function $c(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var g=r(e)?!!e.capture:!!e,h=ad(a);h||(a[Tc]=h=new Qc(a));c=h.add(b,c,d,g,f);if(!c.proxy){d=bd();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)Jc||(e=g),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(cd(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");}}
  function bd(){var a=dd,b=Hc?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function Xc(a,b,c,d,e){if(na(b))for(var f=0;f<b.length;f++)Xc(a,b[f],c,d,e);else c=Yc(c),a&&a[Mc]?ed(a,b,c,r(d)?!!d.capture:!!d,e):$c(a,b,c,!0,d,e);}
  function fd(a,b,c,d,e){if(na(b))for(var f=0;f<b.length;f++)fd(a,b[f],c,d,e);else(d=r(d)?!!d.capture:!!d,c=Yc(c),a&&a[Mc])?(a=a.u,b=String(b).toString(),b in a.a&&(f=a.a[b],c=Rc(f,c,d,e),-1<c&&(Pc(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.a[b],a.b--)))):a&&(a=ad(a))&&(b=a.a[b.toString()],a=-1,b&&(a=Rc(b,c,d,e)),(c=-1<a?b[a]:null)&&gd(c));}
  function gd(a){if("number"!=typeof a&&a&&!a.ta){var b=a.src;if(b&&b[Mc])Sc(b.u,a);else{var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(cd(c),d):b.addListener&&b.removeListener&&b.removeListener(d);(c=ad(b))?(Sc(c,a),0==c.b&&(c.src=null,b[Tc]=null)):Pc(a);}}}function cd(a){return a in Uc?Uc[a]:Uc[a]="on"+a}
  function hd(a,b,c,d){var e=!0;if(a=ad(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.ta&&(f=id(f,d),e=e&&!1!==f);}return e}function id(a,b){var c=a.listener,d=a.Pa||a.src;a.Ka&&gd(a);return c.call(d,b)}
  function dd(a,b){if(a.ta)return !0;if(!Hc){if(!b)a:{b=["window","event"];for(var c=l,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c;}d=b;b=new Kc(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(g){e=!0;}if(e||void 0==d.returnValue)d.returnValue=!0;}d=[];for(e=b.b;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.b=d[e];var f=hd(d[e],a,!0,b);c=c&&f;}for(e=0;e<d.length;e++)b.b=d[e],f=hd(d[e],a,!1,b),c=c&&f;}return c}return id(a,
  new Kc(b,this))}function ad(a){a=a[Tc];return a instanceof Qc?a:null}var jd="__closure_events_fn_"+(1E9*Math.random()>>>0);function Yc(a){if(q(a))return a;a[jd]||(a[jd]=function(b){return a.handleEvent(b)});return a[jd]}function G(){mc.call(this);this.u=new Qc(this);this.Sb=this;this.Xa=null;}v(G,mc);G.prototype[Mc]=!0;G.prototype.addEventListener=function(a,b,c,d){Wc(this,a,b,c,d);};G.prototype.removeEventListener=function(a,b,c,d){fd(this,a,b,c,d);};
  G.prototype.dispatchEvent=function(a){var b,c=this.Xa;if(c)for(b=[];c;c=c.Xa)b.push(c);c=this.Sb;var d=a.type||a;if(n(a))a=new F(a,c);else if(a instanceof F)a.target=a.target||c;else{var e=a;a=new F(d,c);Wa(a,e);}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var g=a.b=b[f];e=kd(g,d,!0,a)&&e;}g=a.b=c;e=kd(g,d,!0,a)&&e;e=kd(g,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)g=a.b=b[f],e=kd(g,d,!1,a)&&e;return e};
  G.prototype.za=function(){G.qb.za.call(this);if(this.u){var a=this.u,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)Pc(d[e]);delete a.a[c];a.b--;}}this.Xa=null;};function Zc(a,b,c,d,e){a.u.add(String(b),c,!1,d,e);}function ed(a,b,c,d,e){a.u.add(String(b),c,!0,d,e);}
  function kd(a,b,c,d){b=a.u.a[String(b)];if(!b)return !0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var g=b[f];if(g&&!g.ta&&g.capture==c){var h=g.listener,m=g.Pa||g.src;g.Ka&&Sc(a.u,g);e=!1!==h.call(m,d)&&e;}}return e&&0!=d.Mb}function md(a,b,c){if(q(a))c&&(a=t(a,c));else if(a&&"function"==typeof a.handleEvent)a=t(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:l.setTimeout(a,b||0)}function nd(a){var b=null;return (new B(function(c,d){b=md(function(){c(void 0);},a);-1==b&&d(Error("Failed to schedule timer."));})).s(function(c){l.clearTimeout(b);throw c;})}function od(a){if(a.U&&"function"==typeof a.U)return a.U();if(n(a))return a.split("");if(oa(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}b=[];c=0;for(d in a)b[c++]=a[d];return b}function pd(a){if(a.X&&"function"==typeof a.X)return a.X();if(!a.U||"function"!=typeof a.U){if(oa(a)||n(a)){var b=[];a=a.length;for(var c=0;c<a;c++)b.push(c);return b}b=[];c=0;for(var d in a)b[c++]=d;return b}}
  function qd(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(oa(a)||n(a))x(a,b,void 0);else for(var c=pd(a),d=od(a),e=d.length,f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a);}function rd(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1]);}else if(a)if(a instanceof rd)for(c=a.X(),d=0;d<c.length;d++)this.set(c[d],a.get(c[d]));else for(d in a)this.set(d,a[d]);}k=rd.prototype;k.U=function(){sd(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};k.X=function(){sd(this);return this.a.concat()};
  k.clear=function(){this.b={};this.c=this.a.length=0;};function sd(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];td(a.b,d)&&(a.a[c++]=d);b++;}a.a.length=c;}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],td(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c;}}k.get=function(a,b){return td(this.b,a)?this.b[a]:b};k.set=function(a,b){td(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b;};
  k.forEach=function(a,b){for(var c=this.X(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this);}};function td(a,b){return Object.prototype.hasOwnProperty.call(a,b)}var ud=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function vd(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1);}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\+/g," ")):"");}}}function wd(a,b){this.b=this.i=this.f="";this.l=null;this.g=this.c="";this.h=!1;var c;a instanceof wd?(this.h=void 0!==b?b:a.h,xd(this,a.f),this.i=a.i,this.b=a.b,yd(this,a.l),this.c=a.c,zd(this,Ad(a.a)),this.g=a.g):a&&(c=String(a).match(ud))?(this.h=!!b,xd(this,c[1]||"",!0),this.i=Bd(c[2]||""),this.b=Bd(c[3]||"",!0),yd(this,c[4]),this.c=Bd(c[5]||"",!0),zd(this,c[6]||"",!0),this.g=Bd(c[7]||"")):(this.h=!!b,this.a=new Cd(null,this.h));}
  wd.prototype.toString=function(){var a=[],b=this.f;b&&a.push(Dd(b,Ed,!0),":");var c=this.b;if(c||"file"==b)a.push("//"),(b=this.i)&&a.push(Dd(b,Ed,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.l,null!=c&&a.push(":",String(c));if(c=this.c)this.b&&"/"!=c.charAt(0)&&a.push("/"),a.push(Dd(c,"/"==c.charAt(0)?Fd:Gd,!0));(c=this.a.toString())&&a.push("?",c);(c=this.g)&&a.push("#",Dd(c,Hd));return a.join("")};
  wd.prototype.resolve=function(a){var b=new wd(this),c=!!a.f;c?xd(b,a.f):c=!!a.i;c?b.i=a.i:c=!!a.b;c?b.b=a.b:c=null!=a.l;var d=a.c;if(c)yd(b,a.l);else if(c=!!a.c){if("/"!=d.charAt(0))if(this.b&&!this.c)d="/"+d;else{var e=b.c.lastIndexOf("/");-1!=e&&(d=b.c.substr(0,e+1)+d);}e=d;if(".."==e||"."==e)d="";else if(y(e,"./")||y(e,"/.")){d=0==e.lastIndexOf("/",0);e=e.split("/");for(var f=[],g=0;g<e.length;){var h=e[g++];"."==h?d&&g==e.length&&f.push(""):".."==h?((1<f.length||1==f.length&&""!=f[0])&&f.pop(),
  d&&g==e.length&&f.push("")):(f.push(h),d=!0);}d=f.join("/");}else d=e;}c?b.c=d:c=""!==a.a.toString();c?zd(b,Ad(a.a)):c=!!a.g;c&&(b.g=a.g);return b};function xd(a,b,c){a.f=c?Bd(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,""));}function yd(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.l=b;}else a.l=null;}function zd(a,b,c){b instanceof Cd?(a.a=b,Id(a.a,a.h)):(c||(b=Dd(b,Jd)),a.a=new Cd(b,a.h));}function H(a,b,c){a.a.set(b,c);}function Kd(a,b){return a.a.get(b)}
  function Ld(a){return a instanceof wd?new wd(a):new wd(a,void 0)}function Md(a,b){var c=new wd(null,void 0);xd(c,"https");a&&(c.b=a);b&&(c.c=b);return c}function Bd(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}function Dd(a,b,c){return n(a)?(a=encodeURI(a).replace(b,Nd),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function Nd(a){a=a.charCodeAt(0);return "%"+(a>>4&15).toString(16)+(a&15).toString(16)}
  var Ed=/[#\/\?@]/g,Gd=/[#\?:]/g,Fd=/[#\?]/g,Jd=/[#\?@]/g,Hd=/#/g;function Cd(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b;}function Od(a){a.a||(a.a=new rd,a.b=0,a.c&&vd(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c);}));}function Pd(a){var b=pd(a);if("undefined"==typeof b)throw Error("Keys are undefined");var c=new Cd(null,void 0);a=od(a);for(var d=0;d<b.length;d++){var e=b[d],f=a[d];na(f)?Qd(c,e,f):c.add(e,f);}return c}k=Cd.prototype;
  k.add=function(a,b){Od(this);this.c=null;a=Rd(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function Sd(a,b){Od(a);b=Rd(a,b);td(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,a=a.a,td(a.b,b)&&(delete a.b[b],a.c--,a.a.length>2*a.c&&sd(a)));}k.clear=function(){this.a=this.c=null;this.b=0;};function Td(a,b){Od(a);b=Rd(a,b);return td(a.a.b,b)}k.forEach=function(a,b){Od(this);this.a.forEach(function(c,d){x(c,function(e){a.call(b,e,d,this);},this);},this);};
  k.X=function(){Od(this);for(var a=this.a.U(),b=this.a.X(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};k.U=function(a){Od(this);var b=[];if(n(a))Td(this,a)&&(b=Qa(b,this.a.get(Rd(this,a))));else{a=this.a.U();for(var c=0;c<a.length;c++)b=Qa(b,a[c]);}return b};k.set=function(a,b){Od(this);this.c=null;a=Rd(this,a);Td(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};
  k.get=function(a,b){if(!a)return b;a=this.U(a);return 0<a.length?String(a[0]):b};function Qd(a,b,c){Sd(a,b);0<c.length&&(a.c=null,a.a.set(Rd(a,b),Ra(c)),a.b+=c.length);}k.toString=function(){if(this.c)return this.c;if(!this.a)return "";for(var a=[],b=this.a.X(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.U(d);for(var f=0;f<d.length;f++){var g=e;""!==d[f]&&(g+="="+encodeURIComponent(String(d[f])));a.push(g);}}return this.c=a.join("&")};
  function Ad(a){var b=new Cd;b.c=a.c;a.a&&(b.a=new rd(a.a),b.b=a.b);return b}function Rd(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function Id(a,b){b&&!a.f&&(Od(a),a.c=null,a.a.forEach(function(c,d){var e=d.toLowerCase();d!=e&&(Sd(this,d),Qd(this,e,c));},a));a.f=b;}var Ud=!uc||9<=Number(Fc);function Vd(a){var b=document;return n(a)?b.getElementById(a):a}function Wd(a,b){Sa(b,function(c,d){c&&"object"==typeof c&&c.qa&&(c=c.pa());"style"==d?a.style.cssText=c:"class"==d?a.className=c:"for"==d?a.htmlFor=c:Xd.hasOwnProperty(d)?a.setAttribute(Xd[d],c):0==d.lastIndexOf("aria-",0)||0==d.lastIndexOf("data-",0)?a.setAttribute(d,c):a[d]=c;});}
  var Xd={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};
  function Yd(a,b,c){var d=arguments,e=document,f=String(d[0]),g=d[1];if(!Ud&&g&&(g.name||g.type)){f=["<",f];g.name&&f.push(' name="',Ib(g.name),'"');if(g.type){f.push(' type="',Ib(g.type),'"');var h={};Wa(h,g);delete h.type;g=h;}f.push(">");f=f.join("");}f=e.createElement(f);g&&(n(g)?f.className=g:na(g)?f.className=g.join(" "):Wd(f,g));2<d.length&&Zd(e,f,d);return f}
  function Zd(a,b,c){function d(g){g&&b.appendChild(n(g)?a.createTextNode(g):g);}for(var e=2;e<c.length;e++){var f=c[e];!oa(f)||r(f)&&0<f.nodeType?d(f):x($d(f)?Ra(f):f,d);}}function $d(a){if(a&&"number"==typeof a.length){if(r(a))return "function"==typeof a.item||"string"==typeof a.item;if(q(a))return "function"==typeof a.item}return !1}function ae(a){var b=[];be(new ce,a,b);return b.join("")}function ce(){}
  function be(a,b,c){if(null==b)c.push("null");else{if("object"==typeof b){if(na(b)){var d=b;b=d.length;c.push("[");for(var e="",f=0;f<b;f++)c.push(e),be(a,d[f],c),e=",";c.push("]");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push("{");e="";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],"function"!=typeof f&&(c.push(e),de(d,c),c.push(":"),be(a,f,c),e=","));c.push("}");return}}switch(typeof b){case "string":de(b,c);break;case "number":c.push(isFinite(b)&&
  !isNaN(b)?String(b):"null");break;case "boolean":c.push(String(b));break;case "function":c.push("null");break;default:throw Error("Unknown type: "+typeof b);}}}var ee={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},fe=/\uffff/.test("\uffff")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;
  function de(a,b){b.push('"',a.replace(fe,function(c){var d=ee[c];d||(d="\\u"+(c.charCodeAt(0)|65536).toString(16).substr(1),ee[c]=d);return d}),'"');}function ge(){var a=I();return uc&&!!Fc&&11==Fc||/Edge\/\d+/.test(a)}function he(){return l.window&&l.window.location.href||self&&self.location&&self.location.href||""}function ie(a,b){b=b||l.window;var c="about:blank";a&&(c=tb(vb(a)).toString());b.location.href=c;}function je(a,b){var c=[],d;for(d in a)d in b?typeof a[d]!=typeof b[d]?c.push(d):"object"==typeof a[d]&&null!=a[d]&&null!=b[d]?0<je(a[d],b[d]).length&&c.push(d):a[d]!==b[d]&&c.push(d):c.push(d);for(d in b)d in a||c.push(d);return c}
  function ke(){var a=I();a=le(a)!=me?null:(a=a.match(/\sChrome\/(\d+)/i))&&2==a.length?parseInt(a[1],10):null;return a&&30>a?!1:!uc||!Fc||9<Fc}function ne(a){a=(a||I()).toLowerCase();return a.match(/android/)||a.match(/webos/)||a.match(/iphone|ipad|ipod/)||a.match(/blackberry/)||a.match(/windows phone/)||a.match(/iemobile/)?!0:!1}function oe(a){a=a||l.window;try{a.close();}catch(b){}}
  function pe(a,b,c){var d=Math.floor(1E9*Math.random()).toString();b=b||500;c=c||600;var e=(window.screen.availHeight-c)/2,f=(window.screen.availWidth-b)/2;b={width:b,height:c,top:0<e?e:0,left:0<f?f:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1};c=I().toLowerCase();d&&(b.target=d,y(c,"crios/")&&(b.target="_blank"));le(I())==qe&&(a=a||"http://localhost",b.scrollbars=!0);c=a||"";(a=b)||(a={});d=window;b=c instanceof rb?c:vb("undefined"!=typeof c.href?c.href:String(c));c=a.target||c.target;e=[];
  for(g in a)switch(g){case "width":case "height":case "top":case "left":e.push(g+"="+a[g]);break;case "target":case "noopener":case "noreferrer":break;default:e.push(g+"="+(a[g]?1:0));}var g=e.join(",");(z("iPhone")&&!z("iPod")&&!z("iPad")||z("iPad")||z("iPod"))&&d.navigator&&d.navigator.standalone&&c&&"_self"!=c?(g=d.document.createElement("A"),Ga(g,"HTMLAnchorElement"),b instanceof rb||b instanceof rb||(b="object"==typeof b&&b.qa?b.pa():String(b),ub.test(b)||(b="about:invalid#zClosurez"),b=wb(b)),
  g.href=tb(b),g.setAttribute("target",c),a.noreferrer&&g.setAttribute("rel","noreferrer"),a=document.createEvent("MouseEvent"),a.initMouseEvent("click",!0,!0,d,1),g.dispatchEvent(a),g={}):a.noreferrer?(g=d.open("",c,g),a=tb(b).toString(),g&&(wc&&y(a,";")&&(a="'"+a.replace(/'/g,"%27")+"'"),g.opener=null,a=Db('<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Ib(a)+'">'),g.document.write(Cb(a)),g.document.close())):(g=d.open(tb(b).toString(),c,g))&&a.noopener&&
  (g.opener=null);if(g)try{g.focus();}catch(h){}return g}function re(a){return new B(function(b){function c(){nd(2E3).then(function(){if(!a||a.closed)b();else return c()});}return c()})}var se=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,te=/^[^@]+@[^@]+$/;function ue(){var a=null;return (new B(function(b){"complete"==l.document.readyState?b():(a=function(){b();},Xc(window,"load",a));})).s(function(b){fd(window,"load",a);throw b;})}
  function ve(){return we(void 0)?ue().then(function(){return new B(function(a,b){var c=l.document,d=setTimeout(function(){b(Error("Cordova framework is not ready."));},1E3);c.addEventListener("deviceready",function(){clearTimeout(d);a();},!1);})}):E(Error("Cordova must run in an Android or iOS file scheme."))}function we(a){a=a||I();return !("file:"!==xe()&&"ionic:"!==xe()||!a.toLowerCase().match(/iphone|ipad|ipod|android/))}function ye(){var a=l.window;try{return !(!a||a==a.top)}catch(b){return !1}}
  function ze(){return "undefined"!==typeof l.WorkerGlobalScope&&"function"===typeof l.importScripts}function Ae(){return firebase.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":firebase.INTERNAL.hasOwnProperty("node")?"Node":ze()?"Worker":"Browser"}function Be(){var a=Ae();return "ReactNative"===a||"Node"===a}function Ce(){for(var a=50,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}
  var qe="Firefox",me="Chrome";
  function le(a){var b=a.toLowerCase();if(y(b,"opera/")||y(b,"opr/")||y(b,"opios/"))return "Opera";if(y(b,"iemobile"))return "IEMobile";if(y(b,"msie")||y(b,"trident/"))return "IE";if(y(b,"edge/"))return "Edge";if(y(b,"firefox/"))return qe;if(y(b,"silk/"))return "Silk";if(y(b,"blackberry"))return "Blackberry";if(y(b,"webos"))return "Webos";if(!y(b,"safari/")||y(b,"chrome/")||y(b,"crios/")||y(b,"android"))if(!y(b,"chrome/")&&!y(b,"crios/")||y(b,"edge/")){if(y(b,"android"))return "Android";if((a=a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&
  2==a.length)return a[1]}else return me;else return "Safari";return "Other"}var De={Wc:"FirebaseCore-web",Yc:"FirebaseUI-web"};function Ee(a,b){b=b||[];var c=[],d={},e;for(e in De)d[De[e]]=!0;for(e=0;e<b.length;e++)"undefined"!==typeof d[b[e]]&&(delete d[b[e]],c.push(b[e]));c.sort();b=c;b.length||(b=["FirebaseCore-web"]);c=Ae();"Browser"===c?(d=I(),c=le(d)):"Worker"===c&&(d=I(),c=le(d)+"-"+c);return c+"/JsCore/"+a+"/"+b.join(",")}function I(){return l.navigator&&l.navigator.userAgent||""}
  function J(a,b){a=a.split(".");b=b||l;for(var c=0;c<a.length&&"object"==typeof b&&null!=b;c++)b=b[a[c]];c!=a.length&&(b=void 0);return b}function Fe(){try{var a=l.localStorage,b=Ge();if(a)return a.setItem(b,"1"),a.removeItem(b),ge()?!!l.indexedDB:!0}catch(c){return ze()&&!!l.indexedDB}return !1}function He(){return (Ie()||"chrome-extension:"===xe()||we())&&!Be()&&Fe()&&!ze()}function Ie(){return "http:"===xe()||"https:"===xe()}function xe(){return l.location&&l.location.protocol||null}
  function Je(a){a=a||I();return ne(a)||le(a)==qe?!1:!0}function Ke(a){return "undefined"===typeof a?null:ae(a)}function Le(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&null!==a[c]&&void 0!==a[c]&&(b[c]=a[c]);return b}function Me(a){if(null!==a)return JSON.parse(a)}function Ge(a){return a?a:Math.floor(1E9*Math.random()).toString()}function Ne(a){a=a||I();return "Safari"==le(a)||a.toLowerCase().match(/iphone|ipad|ipod/)?!1:!0}
  function Oe(){var a=l.___jsl;if(a&&a.H)for(var b in a.H)if(a.H[b].r=a.H[b].r||[],a.H[b].L=a.H[b].L||[],a.H[b].r=a.H[b].L.concat(),a.CP)for(var c=0;c<a.CP.length;c++)a.CP[c]=null;}function Pe(a,b){if(a>b)throw Error("Short delay should be less than long delay!");this.a=a;this.c=b;a=I();b=Ae();this.b=ne(a)||"ReactNative"===b;}
  Pe.prototype.get=function(){var a=l.navigator;return (a&&"boolean"===typeof a.onLine&&(Ie()||"chrome-extension:"===xe()||"undefined"!==typeof a.connection)?a.onLine:1)?this.b?this.c:this.a:Math.min(5E3,this.a)};function Qe(){var a=l.document;return a&&"undefined"!==typeof a.visibilityState?"visible"==a.visibilityState:!0}
  function Re(){var a=l.document,b=null;return Qe()||!a?D():(new B(function(c){b=function(){Qe()&&(a.removeEventListener("visibilitychange",b,!1),c());};a.addEventListener("visibilitychange",b,!1);})).s(function(c){a.removeEventListener("visibilitychange",b,!1);throw c;})}function Se(a){try{var b=new Date(parseInt(a,10));if(!isNaN(b.getTime())&&!/[^0-9]/.test(a))return b.toUTCString()}catch(c){}return null}function Te(){return !(!J("fireauth.oauthhelper",l)&&!J("fireauth.iframe",l))}
  function Ue(){var a=l.navigator;return a&&a.serviceWorker&&a.serviceWorker.controller||null}function Ve(){var a=l.navigator;return a&&a.serviceWorker?D().then(function(){return a.serviceWorker.ready}).then(function(b){return b.active||null}).s(function(){return null}):D(null)}var We={};function Xe(a){We[a]||(We[a]=!0,"undefined"!==typeof console&&"function"===typeof console.warn&&console.warn(a));}var Ye;try{var Ze={};Object.defineProperty(Ze,"abcd",{configurable:!0,enumerable:!0,value:1});Object.defineProperty(Ze,"abcd",{configurable:!0,enumerable:!0,value:2});Ye=2==Ze.abcd;}catch(a){Ye=!1;}function K(a,b,c){Ye?Object.defineProperty(a,b,{configurable:!0,enumerable:!0,value:c}):a[b]=c;}function L(a,b){if(b)for(var c in b)b.hasOwnProperty(c)&&K(a,c,b[c]);}function $e(a){var b={};L(b,a);return b}function af(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b}
  function bf(a,b){if(!b||!b.length)return !0;if(!a)return !1;for(var c=0;c<b.length;c++){var d=a[b[c]];if(void 0===d||null===d||""===d)return !1}return !0}function cf(a){var b=a;if("object"==typeof a&&null!=a){b="length"in a?[]:{};for(var c in a)K(b,c,cf(a[c]));}return b}function df(a){var b={},c=a[ef],d=a[ff];a=a[gf];if(!a||a!=hf&&!c)throw Error("Invalid provider user info!");b[jf]=d||null;b[kf]=c||null;K(this,lf,a);K(this,mf,cf(b));}var hf="EMAIL_SIGNIN",ef="email",ff="newEmail",gf="requestType",kf="email",jf="fromEmail",mf="data",lf="operation";function M(a,b){this.code=nf+a;this.message=b||of[a]||"";}v(M,Error);M.prototype.A=function(){return {code:this.code,message:this.message}};M.prototype.toJSON=function(){return this.A()};function pf(a){var b=a&&a.code;return b?new M(b.substring(nf.length),a.message):null}
  var nf="auth/",of={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
  "captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.",
  "requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.",
  "internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.",
  "invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
  "invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.",
  "invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
  "invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
  "invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.",
  "missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.",
  "missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.",
  "missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.",
  "no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
  "popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",
  "rejected-credential":"The request contains malformed or mismatching credentials.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
  "unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.",
  "user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};function qf(a){a=Ld(a);var b=Kd(a,rf)||null,c=Kd(a,sf)||null,d=Kd(a,tf)||null;d=d?uf[d]||null:null;if(!b||!c||!d)throw new M("argument-error",rf+", "+sf+"and "+tf+" are required in a valid action code URL.");L(this,{apiKey:b,operation:d,code:c,continueUrl:Kd(a,vf)||null,languageCode:Kd(a,wf)||null,tenantId:Kd(a,xf)||null});}var rf="apiKey",sf="oobCode",vf="continueUrl",wf="languageCode",tf="mode",xf="tenantId",uf={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",signIn:hf,verifyEmail:"VERIFY_EMAIL"};
  function yf(a){try{return new qf(a)}catch(b){return null}}function zf(a){var b=a[Af];if("undefined"===typeof b)throw new M("missing-continue-uri");if("string"!==typeof b||"string"===typeof b&&!b.length)throw new M("invalid-continue-uri");this.h=b;this.b=this.a=null;this.g=!1;var c=a[Bf];if(c&&"object"===typeof c){b=c[Cf];var d=c[Df];c=c[Ef];if("string"===typeof b&&b.length){this.a=b;if("undefined"!==typeof d&&"boolean"!==typeof d)throw new M("argument-error",Df+" property must be a boolean when specified.");this.g=!!d;if("undefined"!==typeof c&&("string"!==
  typeof c||"string"===typeof c&&!c.length))throw new M("argument-error",Ef+" property must be a non empty string when specified.");this.b=c||null;}else{if("undefined"!==typeof b)throw new M("argument-error",Cf+" property must be a non empty string when specified.");if("undefined"!==typeof d||"undefined"!==typeof c)throw new M("missing-android-pkg-name");}}else if("undefined"!==typeof c)throw new M("argument-error",Bf+" property must be a non null object when specified.");this.f=null;if((b=a[Ff])&&"object"===
  typeof b)if(b=b[Gf],"string"===typeof b&&b.length)this.f=b;else{if("undefined"!==typeof b)throw new M("argument-error",Gf+" property must be a non empty string when specified.");}else if("undefined"!==typeof b)throw new M("argument-error",Ff+" property must be a non null object when specified.");b=a[Hf];if("undefined"!==typeof b&&"boolean"!==typeof b)throw new M("argument-error",Hf+" property must be a boolean when specified.");this.c=!!b;a=a[If];if("undefined"!==typeof a&&("string"!==typeof a||"string"===
  typeof a&&!a.length))throw new M("argument-error",If+" property must be a non empty string when specified.");this.i=a||null;}var Bf="android",If="dynamicLinkDomain",Hf="handleCodeInApp",Ff="iOS",Af="url",Df="installApp",Ef="minimumVersion",Cf="packageName",Gf="bundleId";
  function Jf(a){var b={};b.continueUrl=a.h;b.canHandleCodeInApp=a.c;if(b.androidPackageName=a.a)b.androidMinimumVersion=a.b,b.androidInstallApp=a.g;b.iOSBundleId=a.f;b.dynamicLinkDomain=a.i;for(var c in b)null===b[c]&&delete b[c];return b}function Kf(a){return Ja(a,function(b){b=b.toString(16);return 1<b.length?b:"0"+b}).join("")}var Lf=null,Mf=null;function Nf(a){var b="";Of(a,function(c){b+=String.fromCharCode(c);});return b}function Of(a,b){function c(m){for(;d<a.length;){var p=a.charAt(d++),u=Mf[p];if(null!=u)return u;if(!/^[\s\xa0]*$/.test(p))throw Error("Unknown base64 encoding at char: "+p);}return m}Pf();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h));}}
  function Pf(){if(!Lf){Lf={};Mf={};for(var a=0;65>a;a++)Lf[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a),Mf[Lf[a]]=a,62<=a&&(Mf["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a)]=a);}}function Qf(a){this.f=a.sub;this.a=a.provider_id||a.firebase&&a.firebase.sign_in_provider||null;this.c=a.firebase&&a.firebase.tenant||null;this.b=!!a.is_anonymous||"anonymous"==this.a;}Qf.prototype.R=function(){return this.c};Qf.prototype.g=function(){return this.b};function Rf(a){return (a=Sf(a))&&a.sub&&a.iss&&a.aud&&a.exp?new Qf(a):null}
  function Sf(a){if(!a)return null;a=a.split(".");if(3!=a.length)return null;a=a[1];for(var b=(4-a.length%4)%4,c=0;c<b;c++)a+=".";try{return JSON.parse(Nf(a))}catch(d){}return null}var Tf={bd:{cb:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",ib:"https://securetoken.googleapis.com/v1/token",id:"p"},dd:{cb:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",ib:"https://staging-securetoken.sandbox.googleapis.com/v1/token",id:"s"},ed:{cb:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",ib:"https://test-securetoken.sandbox.googleapis.com/v1/token",id:"t"}};
  function Uf(a){for(var b in Tf)if(Tf[b].id===a)return a=Tf[b],{firebaseEndpoint:a.cb,secureTokenEndpoint:a.ib};return null}var Vf;Vf=Uf("__EID__")?"__EID__":void 0;var Wf="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),Xf=["client_id","response_type","scope","redirect_uri","state"],Yf={Xc:{Ea:"locale",sa:700,ra:600,Fa:"facebook.com",Qa:Xf},Zc:{Ea:null,sa:500,ra:750,Fa:"github.com",Qa:Xf},$c:{Ea:"hl",sa:515,ra:680,Fa:"google.com",Qa:Xf},fd:{Ea:"lang",sa:485,ra:705,Fa:"twitter.com",Qa:Wf},Vc:{Ea:"locale",sa:600,ra:600,Fa:"apple.com",Qa:[]}};
  function Zf(a){for(var b in Yf)if(Yf[b].Fa==a)return Yf[b];return null}function $f(a){var b={};b["facebook.com"]=ag;b["google.com"]=bg;b["github.com"]=cg;b["twitter.com"]=dg;var c=a&&a[eg];try{if(c)return b[c]?new b[c](a):new fg(a);if("undefined"!==typeof a[gg])return new hg(a)}catch(d){}return null}var gg="idToken",eg="providerId";
  function hg(a){var b=a[eg];if(!b&&a[gg]){var c=Rf(a[gg]);c&&c.a&&(b=c.a);}if(!b)throw Error("Invalid additional user info!");if("anonymous"==b||"custom"==b)b=null;c=!1;"undefined"!==typeof a.isNewUser?c=!!a.isNewUser:"identitytoolkit#SignupNewUserResponse"===a.kind&&(c=!0);K(this,"providerId",b);K(this,"isNewUser",c);}function fg(a){hg.call(this,a);a=Me(a.rawUserInfo||"{}");K(this,"profile",cf(a||{}));}v(fg,hg);
  function ag(a){fg.call(this,a);if("facebook.com"!=this.providerId)throw Error("Invalid provider ID!");}v(ag,fg);function cg(a){fg.call(this,a);if("github.com"!=this.providerId)throw Error("Invalid provider ID!");K(this,"username",this.profile&&this.profile.login||null);}v(cg,fg);function bg(a){fg.call(this,a);if("google.com"!=this.providerId)throw Error("Invalid provider ID!");}v(bg,fg);
  function dg(a){fg.call(this,a);if("twitter.com"!=this.providerId)throw Error("Invalid provider ID!");K(this,"username",a.screenName||null);}v(dg,fg);function ig(a){var b=Ld(a),c=Kd(b,"link"),d=Kd(Ld(c),"link");b=Kd(b,"deep_link_id");return Kd(Ld(b),"link")||b||d||c||a}function jg(){}function kg(a,b){return a.then(function(c){if(c[lg]){var d=Rf(c[lg]);if(!d||b!=d.f)throw new M("user-mismatch");return c}throw new M("user-mismatch");}).s(function(c){throw c&&c.code&&c.code==nf+"user-not-found"?new M("user-mismatch"):c;})}function mg(a,b){if(b)this.a=b;else throw new M("internal-error","failed to construct a credential");K(this,"providerId",a);K(this,"signInMethod",a);}mg.prototype.na=function(a){return ng(a,og(this))};
  mg.prototype.b=function(a,b){var c=og(this);c.idToken=b;return pg(a,c)};mg.prototype.f=function(a,b){return kg(qg(a,og(this)),b)};function og(a){return {pendingToken:a.a,requestUri:"http://localhost"}}mg.prototype.A=function(){return {providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}};function rg(a){if(a&&a.providerId&&a.signInMethod&&0==a.providerId.indexOf("saml.")&&a.pendingToken)try{return new mg(a.providerId,a.pendingToken)}catch(b){}return null}
  function sg(a,b,c){this.a=null;if(b.idToken||b.accessToken)b.idToken&&K(this,"idToken",b.idToken),b.accessToken&&K(this,"accessToken",b.accessToken),b.nonce&&!b.pendingToken&&K(this,"nonce",b.nonce),b.pendingToken&&(this.a=b.pendingToken);else if(b.oauthToken&&b.oauthTokenSecret)K(this,"accessToken",b.oauthToken),K(this,"secret",b.oauthTokenSecret);else throw new M("internal-error","failed to construct a credential");K(this,"providerId",a);K(this,"signInMethod",c);}
  sg.prototype.na=function(a){return ng(a,tg(this))};sg.prototype.b=function(a,b){var c=tg(this);c.idToken=b;return pg(a,c)};sg.prototype.f=function(a,b){var c=tg(this);return kg(qg(a,c),b)};
  function tg(a){var b={};a.idToken&&(b.id_token=a.idToken);a.accessToken&&(b.access_token=a.accessToken);a.secret&&(b.oauth_token_secret=a.secret);b.providerId=a.providerId;a.nonce&&!a.a&&(b.nonce=a.nonce);b={postBody:Pd(b).toString(),requestUri:"http://localhost"};a.a&&(delete b.postBody,b.pendingToken=a.a);return b}
  sg.prototype.A=function(){var a={providerId:this.providerId,signInMethod:this.signInMethod};this.idToken&&(a.oauthIdToken=this.idToken);this.accessToken&&(a.oauthAccessToken=this.accessToken);this.secret&&(a.oauthTokenSecret=this.secret);this.nonce&&(a.nonce=this.nonce);this.a&&(a.pendingToken=this.a);return a};
  function ug(a){if(a&&a.providerId&&a.signInMethod){var b={idToken:a.oauthIdToken,accessToken:a.oauthTokenSecret?null:a.oauthAccessToken,oauthTokenSecret:a.oauthTokenSecret,oauthToken:a.oauthTokenSecret&&a.oauthAccessToken,nonce:a.nonce,pendingToken:a.pendingToken};try{return new sg(a.providerId,b,a.signInMethod)}catch(c){}}return null}function vg(a,b){this.Fc=b||[];L(this,{providerId:a,isOAuthProvider:!0});this.zb={};this.eb=(Zf(a)||{}).Ea||null;this.bb=null;}
  vg.prototype.Ga=function(a){this.zb=Ua(a);return this};function wg(a){if("string"!==typeof a||0!=a.indexOf("saml."))throw new M("argument-error",'SAML provider IDs must be prefixed with "saml."');vg.call(this,a,[]);}v(wg,vg);function O(a){vg.call(this,a,Xf);this.a=[];}v(O,vg);O.prototype.ya=function(a){Na(this.a,a)||this.a.push(a);return this};O.prototype.Hb=function(){return Ra(this.a)};
  O.prototype.credential=function(a,b){var c;r(a)?c={idToken:a.idToken||null,accessToken:a.accessToken||null,nonce:a.rawNonce||null}:c={idToken:a||null,accessToken:b||null};if(!c.idToken&&!c.accessToken)throw new M("argument-error","credential failed: must provide the ID token and/or the access token.");return new sg(this.providerId,c,this.providerId)};function xg(){O.call(this,"facebook.com");}v(xg,O);K(xg,"PROVIDER_ID","facebook.com");K(xg,"FACEBOOK_SIGN_IN_METHOD","facebook.com");
  function yg(a){if(!a)throw new M("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;r(a)&&(b=a.accessToken);return (new xg).credential({accessToken:b})}function zg(){O.call(this,"github.com");}v(zg,O);K(zg,"PROVIDER_ID","github.com");K(zg,"GITHUB_SIGN_IN_METHOD","github.com");
  function Ag(a){if(!a)throw new M("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;r(a)&&(b=a.accessToken);return (new zg).credential({accessToken:b})}function Bg(){O.call(this,"google.com");this.ya("profile");}v(Bg,O);K(Bg,"PROVIDER_ID","google.com");K(Bg,"GOOGLE_SIGN_IN_METHOD","google.com");function Cg(a,b){var c=a;r(a)&&(c=a.idToken,b=a.accessToken);return (new Bg).credential({idToken:c,accessToken:b})}function Dg(){vg.call(this,"twitter.com",Wf);}v(Dg,vg);
  K(Dg,"PROVIDER_ID","twitter.com");K(Dg,"TWITTER_SIGN_IN_METHOD","twitter.com");function Eg(a,b){var c=a;r(c)||(c={oauthToken:a,oauthTokenSecret:b});if(!c.oauthToken||!c.oauthTokenSecret)throw new M("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new sg("twitter.com",c,"twitter.com")}
  function Fg(a,b,c){this.a=a;this.c=b;K(this,"providerId","password");K(this,"signInMethod",c===Gg.EMAIL_LINK_SIGN_IN_METHOD?Gg.EMAIL_LINK_SIGN_IN_METHOD:Gg.EMAIL_PASSWORD_SIGN_IN_METHOD);}Fg.prototype.na=function(a){return this.signInMethod==Gg.EMAIL_LINK_SIGN_IN_METHOD?P(a,Hg,{email:this.a,oobCode:this.c}):P(a,Ig,{email:this.a,password:this.c})};
  Fg.prototype.b=function(a,b){return this.signInMethod==Gg.EMAIL_LINK_SIGN_IN_METHOD?P(a,Jg,{idToken:b,email:this.a,oobCode:this.c}):P(a,Kg,{idToken:b,email:this.a,password:this.c})};Fg.prototype.f=function(a,b){return kg(this.na(a),b)};Fg.prototype.A=function(){return {email:this.a,password:this.c,signInMethod:this.signInMethod}};function Lg(a){return a&&a.email&&a.password?new Fg(a.email,a.password,a.signInMethod):null}function Gg(){L(this,{providerId:"password",isOAuthProvider:!1});}
  function Mg(a,b){b=Ng(b);if(!b)throw new M("argument-error","Invalid email link!");return new Fg(a,b.code,Gg.EMAIL_LINK_SIGN_IN_METHOD)}function Ng(a){a=ig(a);return (a=yf(a))&&a.operation===hf?a:null}L(Gg,{PROVIDER_ID:"password"});L(Gg,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"});L(Gg,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"});function Og(a){if(!(a.Va&&a.Ua||a.Ha&&a.ba))throw new M("internal-error");this.a=a;K(this,"providerId","phone");K(this,"signInMethod","phone");}Og.prototype.na=function(a){return a.Wa(Pg(this))};
  Og.prototype.b=function(a,b){var c=Pg(this);c.idToken=b;return P(a,Qg,c)};Og.prototype.f=function(a,b){var c=Pg(this);c.operation="REAUTH";a=P(a,Rg,c);return kg(a,b)};Og.prototype.A=function(){var a={providerId:"phone"};this.a.Va&&(a.verificationId=this.a.Va);this.a.Ua&&(a.verificationCode=this.a.Ua);this.a.Ha&&(a.temporaryProof=this.a.Ha);this.a.ba&&(a.phoneNumber=this.a.ba);return a};
  function Sg(a){if(a&&"phone"===a.providerId&&(a.verificationId&&a.verificationCode||a.temporaryProof&&a.phoneNumber)){var b={};x(["verificationId","verificationCode","temporaryProof","phoneNumber"],function(c){a[c]&&(b[c]=a[c]);});return new Og(b)}return null}function Pg(a){return a.a.Ha&&a.a.ba?{temporaryProof:a.a.Ha,phoneNumber:a.a.ba}:{sessionInfo:a.a.Va,code:a.a.Ua}}
  function Tg(a){try{this.a=a||firebase.auth();}catch(b){throw new M("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");}L(this,{providerId:"phone",isOAuthProvider:!1});}
  Tg.prototype.Wa=function(a,b){var c=this.a.b;return D(b.verify()).then(function(d){if(!n(d))throw new M("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(b.type){case "recaptcha":return Ug(c,{phoneNumber:a,recaptchaToken:d}).then(function(e){"function"===typeof b.reset&&b.reset();return e},function(e){"function"===typeof b.reset&&b.reset();throw e;});default:throw new M("argument-error",
  'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');}})};function Vg(a,b){if(!a)throw new M("missing-verification-id");if(!b)throw new M("missing-verification-code");return new Og({Va:a,Ua:b})}L(Tg,{PROVIDER_ID:"phone"});L(Tg,{PHONE_SIGN_IN_METHOD:"phone"});
  function Wg(a){if(a.temporaryProof&&a.phoneNumber)return new Og({Ha:a.temporaryProof,ba:a.phoneNumber});var b=a&&a.providerId;if(!b||"password"===b)return null;var c=a&&a.oauthAccessToken,d=a&&a.oauthTokenSecret,e=a&&a.nonce,f=a&&a.oauthIdToken,g=a&&a.pendingToken;try{switch(b){case "google.com":return Cg(f,c);case "facebook.com":return yg(c);case "github.com":return Ag(c);case "twitter.com":return Eg(c,d);default:return c||d||f||g?g?0==b.indexOf("saml.")?new mg(b,g):new sg(b,{pendingToken:g,idToken:a.oauthIdToken,
  accessToken:a.oauthAccessToken},b):(new O(b)).credential({idToken:f,accessToken:c,rawNonce:e}):null}}catch(h){return null}}function Xg(a){if(!a.isOAuthProvider)throw new M("invalid-oauth-provider");}function Yg(a,b,c,d,e,f,g){this.c=a;this.b=b||null;this.g=c||null;this.f=d||null;this.i=f||null;this.h=g||null;this.a=e||null;if(this.g||this.a){if(this.g&&this.a)throw new M("invalid-auth-event");if(this.g&&!this.f)throw new M("invalid-auth-event");}else throw new M("invalid-auth-event");}Yg.prototype.getUid=function(){var a=[];a.push(this.c);this.b&&a.push(this.b);this.f&&a.push(this.f);this.h&&a.push(this.h);return a.join("-")};Yg.prototype.R=function(){return this.h};
  Yg.prototype.A=function(){return {type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.A()}};function Zg(a){a=a||{};return a.type?new Yg(a.type,a.eventId,a.urlResponse,a.sessionId,a.error&&pf(a.error),a.postBody,a.tenantId):null}function $g(){this.b=null;this.a=[];}var ah=null;function bh(a){var b=ah;b.a.push(a);b.b||(b.b=function(c){for(var d=0;d<b.a.length;d++)b.a[d](c);},a=J("universalLinks.subscribe",l),"function"===typeof a&&a(null,b.b));}function ch(a){var b="unauthorized-domain",c=void 0,d=Ld(a);a=d.b;d=d.f;"chrome-extension"==d?c=Hb("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):"http"==d||"https"==d?c=Hb("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):b="operation-not-supported-in-this-environment";
  M.call(this,b,c);}v(ch,M);function dh(a,b,c){M.call(this,a,c);a=b||{};a.Ab&&K(this,"email",a.Ab);a.ba&&K(this,"phoneNumber",a.ba);a.credential&&K(this,"credential",a.credential);a.Qb&&K(this,"tenantId",a.Qb);}v(dh,M);dh.prototype.A=function(){var a={code:this.code,message:this.message};this.email&&(a.email=this.email);this.phoneNumber&&(a.phoneNumber=this.phoneNumber);this.tenantId&&(a.tenantId=this.tenantId);var b=this.credential&&this.credential.A();b&&Wa(a,b);return a};dh.prototype.toJSON=function(){return this.A()};
  function eh(a){if(a.code){var b=a.code||"";0==b.indexOf(nf)&&(b=b.substring(nf.length));var c={credential:Wg(a),Qb:a.tenantId};if(a.email)c.Ab=a.email;else if(a.phoneNumber)c.ba=a.phoneNumber;else if(!c.credential)return new M(b,a.message||void 0);return new dh(b,c,a.message)}return null}function fh(){}fh.prototype.c=null;function gh(a){return a.c||(a.c=a.b())}var hh;function ih(){}v(ih,fh);ih.prototype.a=function(){var a=jh(this);return a?new ActiveXObject(a):new XMLHttpRequest};ih.prototype.b=function(){var a={};jh(this)&&(a[0]=!0,a[1]=!0);return a};
  function jh(a){if(!a.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var b=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.f=d}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");}return a.f}hh=new ih;function kh(){}v(kh,fh);kh.prototype.a=function(){var a=new XMLHttpRequest;if("withCredentials"in a)return a;if("undefined"!=typeof XDomainRequest)return new lh;throw Error("Unsupported browser");};kh.prototype.b=function(){return {}};
  function lh(){this.a=new XDomainRequest;this.readyState=0;this.onreadystatechange=null;this.responseType=this.responseText=this.response="";this.status=-1;this.statusText="";this.a.onload=t(this.fc,this);this.a.onerror=t(this.Ib,this);this.a.onprogress=t(this.gc,this);this.a.ontimeout=t(this.kc,this);}k=lh.prototype;k.open=function(a,b,c){if(null!=c&&!c)throw Error("Only async requests are supported.");this.a.open(a,b);};
  k.send=function(a){if(a)if("string"==typeof a)this.a.send(a);else throw Error("Only string data is supported");else this.a.send();};k.abort=function(){this.a.abort();};k.setRequestHeader=function(){};k.getResponseHeader=function(a){return "content-type"==a.toLowerCase()?this.a.contentType:""};k.fc=function(){this.status=200;this.response=this.responseText=this.a.responseText;mh(this,4);};k.Ib=function(){this.status=500;this.response=this.responseText="";mh(this,4);};k.kc=function(){this.Ib();};
  k.gc=function(){this.status=200;mh(this,1);};function mh(a,b){a.readyState=b;if(a.onreadystatechange)a.onreadystatechange();}k.getAllResponseHeaders=function(){return "content-type: "+this.a.contentType};function nh(a,b,c){this.reset(a,b,c,void 0,void 0);}nh.prototype.a=null;nh.prototype.reset=function(a,b,c,d,e){delete this.a;};function ph(a){this.f=a;this.b=this.c=this.a=null;}function qh(a,b){this.name=a;this.value=b;}qh.prototype.toString=function(){return this.name};var rh=new qh("SEVERE",1E3),sh=new qh("WARNING",900),th=new qh("CONFIG",700),uh=new qh("FINE",500);function vh(a){if(a.c)return a.c;if(a.a)return vh(a.a);ya("Root logger has no level set.");return null}ph.prototype.log=function(a,b,c){if(a.value>=vh(this).value)for(q(b)&&(b=b()),a=new nh(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a;};var wh={},xh=null;
  function yh(a){xh||(xh=new ph(""),wh[""]=xh,xh.c=th);var b;if(!(b=wh[a])){b=new ph(a);var c=a.lastIndexOf("."),d=a.substr(c+1);c=yh(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;wh[a]=b;}return b}function zh(a,b){a&&a.log(uh,b,void 0);}function Ah(a){this.f=a;}v(Ah,fh);Ah.prototype.a=function(){return new Bh(this.f)};Ah.prototype.b=function(a){return function(){return a}}({});function Bh(a){G.call(this);this.o=a;this.readyState=Ch;this.status=0;this.responseType=this.responseText=this.response=this.statusText="";this.onreadystatechange=null;this.i=new Headers;this.b=null;this.m="GET";this.g="";this.a=!1;this.h=yh("goog.net.FetchXmlHttp");this.l=this.c=this.f=null;}v(Bh,G);var Ch=0;k=Bh.prototype;
  k.open=function(a,b){if(this.readyState!=Ch)throw this.abort(),Error("Error reopening a connection");this.m=a;this.g=b;this.readyState=1;Dh(this);};k.send=function(a){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var b={headers:this.i,method:this.m,credentials:void 0,cache:void 0};a&&(b.body=a);this.o.fetch(new Request(this.g,b)).then(this.jc.bind(this),this.Oa.bind(this));};
  k.abort=function(){this.response=this.responseText="";this.i=new Headers;this.status=0;this.c&&this.c.cancel("Request was aborted.");1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,Eh(this,!1));this.readyState=Ch;};
  k.jc=function(a){this.a&&(this.f=a,this.b||(this.b=a.headers,this.readyState=2,Dh(this)),this.a&&(this.readyState=3,Dh(this),this.a&&("arraybuffer"===this.responseType?a.arrayBuffer().then(this.hc.bind(this),this.Oa.bind(this)):"undefined"!==typeof l.ReadableStream&&"body"in a?(this.response=this.responseText="",this.c=a.body.getReader(),this.l=new TextDecoder,Fh(this)):a.text().then(this.ic.bind(this),this.Oa.bind(this)))));};function Fh(a){a.c.read().then(a.ec.bind(a)).catch(a.Oa.bind(a));}
  k.ec=function(a){if(this.a){var b=this.l.decode(a.value?a.value:new Uint8Array(0),{stream:!a.done});b&&(this.response=this.responseText+=b);a.done?Eh(this,!0):Dh(this);3==this.readyState&&Fh(this);}};k.ic=function(a){this.a&&(this.response=this.responseText=a,Eh(this,!0));};k.hc=function(a){this.a&&(this.response=a,Eh(this,!0));};k.Oa=function(a){var b=this.h;b&&b.log(sh,"Failed to fetch url "+this.g,a instanceof Error?a:Error(a));this.a&&Eh(this,!0);};
  function Eh(a,b){b&&a.f&&(a.status=a.f.status,a.statusText=a.f.statusText);a.readyState=4;a.f=null;a.c=null;a.l=null;Dh(a);}k.setRequestHeader=function(a,b){this.i.append(a,b);};k.getResponseHeader=function(a){return this.b?this.b.get(a.toLowerCase())||"":((a=this.h)&&a.log(sh,"Attempting to get response header but no headers have been received for url: "+this.g,void 0),"")};
  k.getAllResponseHeaders=function(){if(!this.b){var a=this.h;a&&a.log(sh,"Attempting to get all response headers but no headers have been received for url: "+this.g,void 0);return ""}a=[];for(var b=this.b.entries(),c=b.next();!c.done;)c=c.value,a.push(c[0]+": "+c[1]),c=b.next();return a.join("\r\n")};function Dh(a){a.onreadystatechange&&a.onreadystatechange.call(a);}function Gh(a){G.call(this);this.headers=new rd;this.B=a||null;this.c=!1;this.w=this.a=null;this.h=this.O=this.l="";this.f=this.J=this.i=this.I=!1;this.g=0;this.o=null;this.m=Hh;this.v=this.P=!1;}v(Gh,G);var Hh="";Gh.prototype.b=yh("goog.net.XhrIo");var Ih=/^https?$/i,Jh=["POST","PUT"];
  function Kh(a,b,c,d,e){if(a.a)throw Error("[goog.net.XhrIo] Object is active with another request="+a.l+"; newUri="+b);c=c?c.toUpperCase():"GET";a.l=b;a.h="";a.O=c;a.I=!1;a.c=!0;a.a=a.B?a.B.a():hh.a();a.w=a.B?gh(a.B):gh(hh);a.a.onreadystatechange=t(a.Lb,a);try{zh(a.b,Lh(a,"Opening Xhr")),a.J=!0,a.a.open(c,String(b),!0),a.J=!1;}catch(g){zh(a.b,Lh(a,"Error opening Xhr: "+g.message));Mh(a,g);return}b=d||"";var f=new rd(a.headers);e&&qd(e,function(g,h){f.set(h,g);});e=La(f.X());d=l.FormData&&b instanceof
  l.FormData;!Na(Jh,c)||e||d||f.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");f.forEach(function(g,h){this.a.setRequestHeader(h,g);},a);a.m&&(a.a.responseType=a.m);"withCredentials"in a.a&&a.a.withCredentials!==a.P&&(a.a.withCredentials=a.P);try{Nh(a),0<a.g&&(a.v=Oh(a.a),zh(a.b,Lh(a,"Will abort after "+a.g+"ms if incomplete, xhr2 "+a.v)),a.v?(a.a.timeout=a.g,a.a.ontimeout=t(a.Ia,a)):a.o=md(a.Ia,a.g,a)),zh(a.b,Lh(a,"Sending request")),a.i=!0,a.a.send(b),a.i=!1;}catch(g){zh(a.b,
  Lh(a,"Send error: "+g.message)),Mh(a,g);}}function Oh(a){return uc&&Ec(9)&&"number"==typeof a.timeout&&void 0!==a.ontimeout}function Ma(a){return "content-type"==a.toLowerCase()}k=Gh.prototype;k.Ia=function(){"undefined"!=typeof fa&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",zh(this.b,Lh(this,this.h)),this.dispatchEvent("timeout"),this.abort(8));};function Mh(a,b){a.c=!1;a.a&&(a.f=!0,a.a.abort(),a.f=!1);a.h=b;Ph(a);Qh(a);}
  function Ph(a){a.I||(a.I=!0,a.dispatchEvent("complete"),a.dispatchEvent("error"));}k.abort=function(){this.a&&this.c&&(zh(this.b,Lh(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),Qh(this));};k.za=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),Qh(this,!0));Gh.qb.za.call(this);};k.Lb=function(){this.va||(this.J||this.i||this.f?Rh(this):this.yc());};k.yc=function(){Rh(this);};
  function Rh(a){if(a.c&&"undefined"!=typeof fa)if(a.w[1]&&4==Sh(a)&&2==Th(a))zh(a.b,Lh(a,"Local request error detected and ignored"));else if(a.i&&4==Sh(a))md(a.Lb,0,a);else if(a.dispatchEvent("readystatechange"),4==Sh(a)){zh(a.b,Lh(a,"Request complete"));a.c=!1;try{var b=Th(a);a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1;}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.l).match(ud)[1]||null;if(!f&&l.self&&l.self.location){var g=l.self.location.protocol;
  f=g.substr(0,g.length-1);}e=!Ih.test(f?f.toLowerCase():"");}d=e;}if(d)a.dispatchEvent("complete"),a.dispatchEvent("success");else{try{var h=2<Sh(a)?a.a.statusText:"";}catch(m){zh(a.b,"Can not get status: "+m.message),h="";}a.h=h+" ["+Th(a)+"]";Ph(a);}}finally{Qh(a);}}}function Qh(a,b){if(a.a){Nh(a);var c=a.a,d=a.w[0]?ka:null;a.a=null;a.w=null;b||a.dispatchEvent("ready");try{c.onreadystatechange=d;}catch(e){(a=a.b)&&a.log(rh,"Problem encountered resetting onreadystatechange: "+e.message,void 0);}}}
  function Nh(a){a.a&&a.v&&(a.a.ontimeout=null);a.o&&(l.clearTimeout(a.o),a.o=null);}function Sh(a){return a.a?a.a.readyState:0}function Th(a){try{return 2<Sh(a)?a.a.status:-1}catch(b){return -1}}function Uh(a){try{return a.a?a.a.responseText:""}catch(b){return zh(a.b,"Can not get responseText: "+b.message),""}}
  k.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case Hh:case "text":return this.a.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var a=this.b;a&&a.log(rh,"Response type "+this.m+" is not supported on this browser",void 0);return null}catch(b){return zh(this.b,"Can not get response: "+b.message),null}};function Lh(a,b){return b+" ["+a.O+" "+a.l+" "+Th(a)+"]"}function Vh(a){var b=Wh;this.g=[];this.v=b;this.o=a||null;this.f=this.a=!1;this.c=void 0;this.u=this.w=this.i=!1;this.h=0;this.b=null;this.l=0;}Vh.prototype.cancel=function(a){if(this.a)this.c instanceof Vh&&this.c.cancel();else{if(this.b){var b=this.b;delete this.b;a?b.cancel(a):(b.l--,0>=b.l&&b.cancel());}this.v?this.v.call(this.o,this):this.u=!0;this.a||(a=new Xh(this),Yh(this),Zh(this,!1,a));}};Vh.prototype.m=function(a,b){this.i=!1;Zh(this,a,b);};function Zh(a,b,c){a.a=!0;a.c=c;a.f=!b;$h(a);}
  function Yh(a){if(a.a){if(!a.u)throw new ai(a);a.u=!1;}}function bi(a,b){ci(a,null,b,void 0);}function ci(a,b,c,d){a.g.push([b,c,d]);a.a&&$h(a);}Vh.prototype.then=function(a,b,c){var d,e,f=new B(function(g,h){d=g;e=h;});ci(this,d,function(g){g instanceof Xh?f.cancel():e(g);});return f.then(a,b,c)};Vh.prototype.$goog_Thenable=!0;function di(a){return Ka(a.g,function(b){return q(b[1])})}
  function $h(a){if(a.h&&a.a&&di(a)){var b=a.h,c=ei[b];c&&(l.clearTimeout(c.a),delete ei[b]);a.h=0;}a.b&&(a.b.l--,delete a.b);b=a.c;for(var d=c=!1;a.g.length&&!a.i;){var e=a.g.shift(),f=e[0],g=e[1];e=e[2];if(f=a.f?g:f)try{var h=f.call(e||a.o,b);void 0!==h&&(a.f=a.f&&(h==b||h instanceof Error),a.c=b=h);if(va(b)||"function"===typeof l.Promise&&b instanceof l.Promise)d=!0,a.i=!0;}catch(m){b=m,a.f=!0,di(a)||(c=!0);}}a.c=b;d&&(h=t(a.m,a,!0),d=t(a.m,a,!1),b instanceof Vh?(ci(b,h,d),b.w=!0):b.then(h,d));c&&(b=
  new fi(b),ei[b.a]=b,a.h=b.a);}function ai(){w.call(this);}v(ai,w);ai.prototype.message="Deferred has already fired";ai.prototype.name="AlreadyCalledError";function Xh(){w.call(this);}v(Xh,w);Xh.prototype.message="Deferred was canceled";Xh.prototype.name="CanceledError";function fi(a){this.a=l.setTimeout(t(this.c,this),0);this.b=a;}fi.prototype.c=function(){delete ei[this.a];throw this.b;};var ei={};function gi(a){var c=document,d=db(a).toString(),e=document.createElement("SCRIPT"),f={Nb:e,Ia:void 0},g=new Vh(f),h=null,m=5E3;(h=window.setTimeout(function(){hi(e,!0);var p=new ii(ji,"Timeout reached for loading script "+d);Yh(g);Zh(g,!1,p);},m),f.Ia=h);e.onload=e.onreadystatechange=function(){e.readyState&&"loaded"!=e.readyState&&"complete"!=e.readyState||(hi(e,!1,h),Yh(g),Zh(g,!0,null));};e.onerror=function(){hi(e,!0,h);var p=new ii(ki,"Error while loading script "+
  d);Yh(g);Zh(g,!1,p);};f={};Wa(f,{type:"text/javascript",charset:"UTF-8"});Wd(e,f);Gb(e,a);li(c).appendChild(e);return g}function li(a){var b;return (b=(a||document).getElementsByTagName("HEAD"))&&0!=b.length?b[0]:a.documentElement}function Wh(){if(this&&this.Nb){var a=this.Nb;a&&"SCRIPT"==a.tagName&&hi(a,!0,this.Ia);}}
  function hi(a,b,c){null!=c&&l.clearTimeout(c);a.onload=ka;a.onerror=ka;a.onreadystatechange=ka;b&&window.setTimeout(function(){a&&a.parentNode&&a.parentNode.removeChild(a);},0);}var ki=0,ji=1;function ii(a,b){var c="Jsloader error (code #"+a+")";b&&(c+=": "+b);w.call(this,c);this.code=a;}v(ii,w);function mi(a){this.f=a;}v(mi,fh);mi.prototype.a=function(){return new this.f};mi.prototype.b=function(){return {}};
  function ni(a,b,c){this.c=a;a=b||{};this.l=a.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token";this.u=a.secureTokenTimeout||oi;this.g=Ua(a.secureTokenHeaders||pi);this.h=a.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/";this.i=a.firebaseTimeout||qi;this.a=Ua(a.firebaseHeaders||ri);c&&(this.a["X-Client-Version"]=c,this.g["X-Client-Version"]=c);c="Node"==Ae();c=l.XMLHttpRequest||c&&firebase.INTERNAL.node&&firebase.INTERNAL.node.XMLHttpRequest;if(!c&&
  !ze())throw new M("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0;ze()?this.f=new Ah(self):Be()?this.f=new mi(c):this.f=new kh;this.b=null;}var si,lg="idToken",oi=new Pe(3E4,6E4),pi={"Content-Type":"application/x-www-form-urlencoded"},qi=new Pe(3E4,6E4),ri={"Content-Type":"application/json"};function ti(a,b){b?a.a["X-Firebase-Locale"]=b:delete a.a["X-Firebase-Locale"];}
  function ui(a,b){b?(a.a["X-Client-Version"]=b,a.g["X-Client-Version"]=b):(delete a.a["X-Client-Version"],delete a.g["X-Client-Version"]);}ni.prototype.R=function(){return this.b};function vi(a,b,c,d,e,f,g){ke()||ze()?a=t(a.o,a):(si||(si=new B(function(h,m){wi(h,m);})),a=t(a.m,a));a(b,c,d,e,f,g);}
  ni.prototype.o=function(a,b,c,d,e,f){if(ze()&&("undefined"===typeof l.fetch||"undefined"===typeof l.Headers||"undefined"===typeof l.Request))throw new M("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var g=new Gh(this.f);if(f){g.g=Math.max(0,f);var h=setTimeout(function(){g.dispatchEvent("timeout");},f);}Zc(g,"complete",function(){h&&clearTimeout(h);var m=null;try{m=
  JSON.parse(Uh(this))||null;}catch(p){m=null;}b&&b(m);});ed(g,"ready",function(){h&&clearTimeout(h);pc(this);});ed(g,"timeout",function(){h&&clearTimeout(h);pc(this);b&&b(null);});Kh(g,a,c,d,e);};var xi=new Xa(Ya,"https://apis.google.com/js/client.js?onload=%{onload}"),yi="__fcb"+Math.floor(1E6*Math.random()).toString();
  function wi(a,b){if(((window.gapi||{}).client||{}).request)a();else{l[yi]=function(){((window.gapi||{}).client||{}).request?a():b(Error("CORS_UNSUPPORTED"));};var c=eb(xi,{onload:yi});bi(gi(c),function(){b(Error("CORS_UNSUPPORTED"));});}}
  ni.prototype.m=function(a,b,c,d,e){var f=this;si.then(function(){window.gapi.client.setApiKey(f.c);var g=window.gapi.auth.getToken();window.gapi.auth.setToken(null);window.gapi.client.request({path:a,method:c,body:d,headers:e,authType:"none",callback:function(h){window.gapi.auth.setToken(g);b&&b(h);}});}).s(function(g){b&&b({error:{message:g&&g.message||"CORS_UNSUPPORTED"}});});};
  function zi(a,b){return new B(function(c,d){"refresh_token"==b.grant_type&&b.refresh_token||"authorization_code"==b.grant_type&&b.code?vi(a,a.l+"?key="+encodeURIComponent(a.c),function(e){e?e.error?d(Ai(e)):e.access_token&&e.refresh_token?c(e):d(new M("internal-error")):d(new M("network-request-failed"));},"POST",Pd(b).toString(),a.g,a.u.get()):d(new M("internal-error"));})}
  function Bi(a,b,c,d,e,f){var g=Ld(a.h+b);H(g,"key",a.c);f&&H(g,"cb",ua().toString());var h="GET"==c;if(h)for(var m in d)d.hasOwnProperty(m)&&H(g,m,d[m]);return new B(function(p,u){vi(a,g.toString(),function(A){A?A.error?u(Ai(A,e||{})):p(A):u(new M("network-request-failed"));},c,h?void 0:ae(Le(d)),a.a,a.i.get());})}function Ci(a){a=a.email;if(!n(a)||!te.test(a))throw new M("invalid-email");}function Di(a){"email"in a&&Ci(a);}
  function Ei(a,b){return P(a,Fi,{identifier:b,continueUri:Ie()?he():"http://localhost"}).then(function(c){return c.signinMethods||[]})}function Gi(a){return P(a,Hi,{}).then(function(b){return b.authorizedDomains||[]})}function Ii(a){if(!a[lg])throw new M("internal-error");}
  function Ji(a){if(a.phoneNumber||a.temporaryProof){if(!a.phoneNumber||!a.temporaryProof)throw new M("internal-error");}else{if(!a.sessionInfo)throw new M("missing-verification-id");if(!a.code)throw new M("missing-verification-code");}}ni.prototype.ob=function(){return P(this,Ki,{})};ni.prototype.rb=function(a,b){return P(this,Li,{idToken:a,email:b})};ni.prototype.sb=function(a,b){return P(this,Kg,{idToken:a,password:b})};var Mi={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};k=ni.prototype;
  k.tb=function(a,b){var c={idToken:a},d=[];Sa(Mi,function(e,f){var g=b[f];null===g?d.push(e):f in b&&(c[f]=g);});d.length&&(c.deleteAttribute=d);return P(this,Li,c)};k.kb=function(a,b){a={requestType:"PASSWORD_RESET",email:a};Wa(a,b);return P(this,Ni,a)};k.lb=function(a,b){a={requestType:"EMAIL_SIGNIN",email:a};Wa(a,b);return P(this,Oi,a)};k.jb=function(a,b){a={requestType:"VERIFY_EMAIL",idToken:a};Wa(a,b);return P(this,Pi,a)};function Ug(a,b){return P(a,Qi,b)}k.Wa=function(a){return P(this,Ri,a)};
  function Si(a,b,c){return P(a,Ti,{idToken:b,deleteProvider:c})}function Ui(a){if(!a.requestUri||!a.sessionId&&!a.postBody&&!a.pendingToken)throw new M("internal-error");}function Vi(a,b){b.oauthIdToken&&b.providerId&&0==b.providerId.indexOf("oidc.")&&!b.pendingToken&&(a.sessionId?b.nonce=a.sessionId:a.postBody&&(a=new Cd(a.postBody),Td(a,"nonce")&&(b.nonce=a.get("nonce"))));return b}
  function Wi(a){var b=null;a.needConfirmation?(a.code="account-exists-with-different-credential",b=eh(a)):"FEDERATED_USER_ID_ALREADY_LINKED"==a.errorMessage?(a.code="credential-already-in-use",b=eh(a)):"EMAIL_EXISTS"==a.errorMessage?(a.code="email-already-in-use",b=eh(a)):a.errorMessage&&(b=Xi(a.errorMessage));if(b)throw b;if(!a[lg])throw new M("internal-error");}function ng(a,b){b.returnIdpCredential=!0;return P(a,Yi,b)}function pg(a,b){b.returnIdpCredential=!0;return P(a,Zi,b)}
  function qg(a,b){b.returnIdpCredential=!0;b.autoCreate=!1;return P(a,$i,b)}function aj(a){if(!a.oobCode)throw new M("invalid-action-code");}k.ab=function(a,b){return P(this,bj,{oobCode:a,newPassword:b})};k.Ma=function(a){return P(this,cj,{oobCode:a})};k.Ya=function(a){return P(this,dj,{oobCode:a})};
  var dj={endpoint:"setAccountInfo",D:aj,fa:"email",F:!0},cj={endpoint:"resetPassword",D:aj,K:function(a){var b=a.requestType;if(!b||!a.email&&"EMAIL_SIGNIN"!=b)throw new M("internal-error");},F:!0},ej={endpoint:"signupNewUser",D:function(a){Ci(a);if(!a.password)throw new M("weak-password");},K:Ii,T:!0,F:!0},Fi={endpoint:"createAuthUri",F:!0},fj={endpoint:"deleteAccount",V:["idToken"]},Ti={endpoint:"setAccountInfo",V:["idToken","deleteProvider"],D:function(a){if(!na(a.deleteProvider))throw new M("internal-error");
  }},Hg={endpoint:"emailLinkSignin",V:["email","oobCode"],D:Ci,K:Ii,T:!0,F:!0},Jg={endpoint:"emailLinkSignin",V:["idToken","email","oobCode"],D:Ci,K:Ii,T:!0},gj={endpoint:"getAccountInfo"},Oi={endpoint:"getOobConfirmationCode",V:["requestType"],D:function(a){if("EMAIL_SIGNIN"!=a.requestType)throw new M("internal-error");Ci(a);},fa:"email",F:!0},Pi={endpoint:"getOobConfirmationCode",V:["idToken","requestType"],D:function(a){if("VERIFY_EMAIL"!=a.requestType)throw new M("internal-error");},fa:"email",F:!0},
  Ni={endpoint:"getOobConfirmationCode",V:["requestType"],D:function(a){if("PASSWORD_RESET"!=a.requestType)throw new M("internal-error");Ci(a);},fa:"email",F:!0},Hi={wb:!0,endpoint:"getProjectConfig",Kb:"GET"},hj={wb:!0,endpoint:"getRecaptchaParam",Kb:"GET",K:function(a){if(!a.recaptchaSiteKey)throw new M("internal-error");}},bj={endpoint:"resetPassword",D:aj,fa:"email",F:!0},Qi={endpoint:"sendVerificationCode",V:["phoneNumber","recaptchaToken"],fa:"sessionInfo",F:!0},Li={endpoint:"setAccountInfo",V:["idToken"],
  D:Di,T:!0},Kg={endpoint:"setAccountInfo",V:["idToken"],D:function(a){Di(a);if(!a.password)throw new M("weak-password");},K:Ii,T:!0},Ki={endpoint:"signupNewUser",K:Ii,T:!0,F:!0},Yi={endpoint:"verifyAssertion",D:Ui,Ra:Vi,K:Wi,T:!0,F:!0},$i={endpoint:"verifyAssertion",D:Ui,Ra:Vi,K:function(a){if(a.errorMessage&&"USER_NOT_FOUND"==a.errorMessage)throw new M("user-not-found");if(a.errorMessage)throw Xi(a.errorMessage);if(!a[lg])throw new M("internal-error");},T:!0,F:!0},Zi={endpoint:"verifyAssertion",D:function(a){Ui(a);
  if(!a.idToken)throw new M("internal-error");},Ra:Vi,K:Wi,T:!0},ij={endpoint:"verifyCustomToken",D:function(a){if(!a.token)throw new M("invalid-custom-token");},K:Ii,T:!0,F:!0},Ig={endpoint:"verifyPassword",D:function(a){Ci(a);if(!a.password)throw new M("wrong-password");},K:Ii,T:!0,F:!0},Ri={endpoint:"verifyPhoneNumber",D:Ji,K:Ii,F:!0},Qg={endpoint:"verifyPhoneNumber",D:function(a){if(!a.idToken)throw new M("internal-error");Ji(a);},K:function(a){if(a.temporaryProof)throw a.code="credential-already-in-use",
  eh(a);Ii(a);}},Rg={Yb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",D:Ji,K:Ii,F:!0};
  function P(a,b,c){if(!bf(c,b.V))return E(new M("internal-error"));var d=b.Kb||"POST",e;return D(c).then(b.D).then(function(){b.T&&(c.returnSecureToken=!0);b.F&&a.b&&"undefined"===typeof c.tenantId&&(c.tenantId=a.b);return Bi(a,b.endpoint,d,c,b.Yb,b.wb||!1)}).then(function(f){e=f;return b.Ra?b.Ra(c,e):e}).then(b.K).then(function(){if(!b.fa)return e;if(!(b.fa in e))throw new M("internal-error");return e[b.fa]})}function Xi(a){return Ai({error:{errors:[{message:a}],code:400,message:a}})}
  function Ai(a,b){var c=(a.error&&a.error.errors&&a.error.errors[0]||{}).reason||"";var d={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(c=d[c]?new M(d[c]):null)return c;c=a.error&&a.error.message||"";d={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",
  MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",
  EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",
  OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",
  QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",
  INVALID_TENANT_ID:"invalid-tenant-id",ADMIN_ONLY_OPERATION:"admin-restricted-operation"};Wa(d,b||{});b=(b=c.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<b.length?b[1]:void 0;for(var e in d)if(0===c.indexOf(e))return new M(d[e],b);!b&&a&&(b=Ke(a));return new M("internal-error",b)}function jj(a){this.b=a;this.a=null;this.gb=kj(this);}
  function kj(a){return lj().then(function(){return new B(function(b,c){J("gapi.iframes.getContext")().open({where:document.body,url:a.b,messageHandlersFilter:J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},function(d){function e(){clearTimeout(f);b();}a.a=d;a.a.restyle({setHideOnLeave:!1});var f=setTimeout(function(){c(Error("Network Error"));},mj.get());d.ping(e).then(e,function(){c(Error("Network Error"));});});})})}
  function nj(a,b){return a.gb.then(function(){return new B(function(c){a.a.send(b.type,b,c,J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));})})}function oj(a,b){a.gb.then(function(){a.a.register("authEvent",b,J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));});}var pj=new Xa(Ya,"https://apis.google.com/js/api.js?onload=%{onload}"),qj=new Pe(3E4,6E4),mj=new Pe(5E3,15E3),rj=null;
  function lj(){return rj?rj:rj=(new B(function(a,b){function c(){Oe();J("gapi.load")("gapi.iframes",{callback:a,ontimeout:function(){Oe();b(Error("Network Error"));},timeout:qj.get()});}if(J("gapi.iframes.Iframe"))a();else if(J("gapi.load"))c();else{var d="__iframefcb"+Math.floor(1E6*Math.random()).toString();l[d]=function(){J("gapi.load")?c():b(Error("Network Error"));};d=eb(pj,{onload:d});D(gi(d)).s(function(){b(Error("Network Error"));});}})).s(function(a){rj=null;throw a;})}function sj(a,b,c){this.i=a;this.g=b;this.h=c;this.f=null;this.a=Md(this.i,"/__/auth/iframe");H(this.a,"apiKey",this.g);H(this.a,"appName",this.h);this.b=null;this.c=[];}sj.prototype.toString=function(){this.f?H(this.a,"v",this.f):Sd(this.a.a,"v");this.b?H(this.a,"eid",this.b):Sd(this.a.a,"eid");this.c.length?H(this.a,"fw",this.c.join(",")):Sd(this.a.a,"fw");return this.a.toString()};function tj(a,b,c,d,e){this.o=a;this.m=b;this.c=c;this.u=d;this.i=this.g=this.l=null;this.a=e;this.h=this.f=null;}
  tj.prototype.nb=function(a){this.h=a;return this};
  tj.prototype.toString=function(){var a=Md(this.o,"/__/auth/handler");H(a,"apiKey",this.m);H(a,"appName",this.c);H(a,"authType",this.u);if(this.a.isOAuthProvider){var b=this.a;try{var c=firebase.app(this.c).auth().ha();}catch(h){c=null;}b.bb=c;H(a,"providerId",this.a.providerId);b=this.a;c=Le(b.zb);for(var d in c)c[d]=c[d].toString();d=b.Fc;c=Ua(c);for(var e=0;e<d.length;e++){var f=d[e];f in c&&delete c[f];}b.eb&&b.bb&&!c[b.eb]&&(c[b.eb]=b.bb);Ta(c)||H(a,"customParameters",Ke(c));}"function"===typeof this.a.Hb&&
  (b=this.a.Hb(),b.length&&H(a,"scopes",b.join(",")));this.l?H(a,"redirectUrl",this.l):Sd(a.a,"redirectUrl");this.g?H(a,"eventId",this.g):Sd(a.a,"eventId");this.i?H(a,"v",this.i):Sd(a.a,"v");if(this.b)for(var g in this.b)this.b.hasOwnProperty(g)&&!Kd(a,g)&&H(a,g,this.b[g]);this.h?H(a,"tid",this.h):Sd(a.a,"tid");this.f?H(a,"eid",this.f):Sd(a.a,"eid");g=uj(this.c);g.length&&H(a,"fw",g.join(","));return a.toString()};function uj(a){try{return firebase.app(a).auth().Ca()}catch(b){return []}}
  function vj(a,b,c,d,e){this.u=a;this.f=b;this.b=c;this.c=d||null;this.h=e||null;this.m=this.o=this.v=null;this.g=[];this.l=this.a=null;}
  function wj(a){var b=he();return Gi(a).then(function(c){a:{var d=Ld(b),e=d.f;d=d.b;for(var f=0;f<c.length;f++){var g=c[f];var h=d;var m=e;0==g.indexOf("chrome-extension://")?h=Ld(g).b==h&&"chrome-extension"==m:"http"!=m&&"https"!=m?h=!1:se.test(g)?h=h==g:(g=g.split(".").join("\\."),h=(new RegExp("^(.+\\."+g+"|"+g+")$","i")).test(h));if(h){c=!0;break a}}c=!1;}if(!c)throw new ch(he());})}
  function xj(a){if(a.l)return a.l;a.l=ue().then(function(){if(!a.o){var b=a.c,c=a.h,d=uj(a.b),e=new sj(a.u,a.f,a.b);e.f=b;e.b=c;e.c=Ra(d||[]);a.o=e.toString();}a.i=new jj(a.o);yj(a);});return a.l}k=vj.prototype;k.Fb=function(a,b,c){var d=new M("popup-closed-by-user"),e=new M("web-storage-unsupported"),f=this,g=!1;return this.ia().then(function(){zj(f).then(function(h){h||(a&&oe(a),b(e),g=!0);});}).s(function(){}).then(function(){if(!g)return re(a)}).then(function(){if(!g)return nd(c).then(function(){b(d);})})};
  k.Ob=function(){var a=I();return !Je(a)&&!Ne(a)};k.Jb=function(){return !1};
  k.Db=function(a,b,c,d,e,f,g,h){if(!a)return E(new M("popup-blocked"));if(g&&!Je())return this.ia().s(function(p){oe(a);e(p);}),d(),D();this.a||(this.a=wj(Aj(this)));var m=this;return this.a.then(function(){var p=m.ia().s(function(u){oe(a);e(u);throw u;});d();return p}).then(function(){Xg(c);if(!g){var p=Bj(m.u,m.f,m.b,b,c,null,f,m.c,void 0,m.h,h);ie(p,a);}}).s(function(p){"auth/network-request-failed"==p.code&&(m.a=null);throw p;})};
  function Aj(a){a.m||(a.v=a.c?Ee(a.c,uj(a.b)):null,a.m=new ni(a.f,Uf(a.h),a.v));return a.m}k.Eb=function(a,b,c,d){this.a||(this.a=wj(Aj(this)));var e=this;return this.a.then(function(){Xg(b);var f=Bj(e.u,e.f,e.b,a,b,he(),c,e.c,void 0,e.h,d);ie(f);}).s(function(f){"auth/network-request-failed"==f.code&&(e.a=null);throw f;})};k.ia=function(){var a=this;return xj(this).then(function(){return a.i.gb}).s(function(){a.a=null;throw new M("network-request-failed");})};k.Rb=function(){return !0};
  function Bj(a,b,c,d,e,f,g,h,m,p,u){a=new tj(a,b,c,d,e);a.l=f;a.g=g;a.i=h;a.b=Ua(m||null);a.f=p;return a.nb(u).toString()}function yj(a){if(!a.i)throw Error("IfcHandler must be initialized!");oj(a.i,function(b){var c={};if(b&&b.authEvent){var d=!1;b=Zg(b.authEvent);for(c=0;c<a.g.length;c++)d=a.g[c](b)||d;c={};c.status=d?"ACK":"ERROR";return D(c)}c.status="ERROR";return D(c)});}
  function zj(a){var b={type:"webStorageSupport"};return xj(a).then(function(){return nj(a.i,b)}).then(function(c){if(c&&c.length&&"undefined"!==typeof c[0].webStorageSupport)return c[0].webStorageSupport;throw Error();})}k.Aa=function(a){this.g.push(a);};k.Na=function(a){Pa(this.g,function(b){return b==a});};function Cj(a){this.a=a||firebase.INTERNAL.reactNative&&firebase.INTERNAL.reactNative.AsyncStorage;if(!this.a)throw new M("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage";}k=Cj.prototype;k.get=function(a){return D(this.a.getItem(a)).then(function(b){return b&&Me(b)})};k.set=function(a,b){return D(this.a.setItem(a,Ke(b)))};k.S=function(a){return D(this.a.removeItem(a))};k.$=function(){};k.ea=function(){};function Dj(a){this.b=a;this.a={};this.f=t(this.c,this);}var Ej=[];function Fj(){var a=ze()?self:null;x(Ej,function(c){c.b==a&&(b=c);});if(!b){var b=new Dj(a);Ej.push(b);}return b}
  Dj.prototype.c=function(a){var b=a.data.eventType,c=a.data.eventId,d=this.a[b];if(d&&0<d.length){a.ports[0].postMessage({status:"ack",eventId:c,eventType:b,response:null});var e=[];x(d,function(f){e.push(D().then(function(){return f(a.origin,a.data.data)}));});bc(e).then(function(f){var g=[];x(f,function(h){g.push({fulfilled:h.Gb,value:h.value,reason:h.reason?h.reason.message:void 0});});x(g,function(h){for(var m in h)"undefined"===typeof h[m]&&delete h[m];});a.ports[0].postMessage({status:"done",eventId:c,
  eventType:b,response:g});});}};function Gj(a,b,c){Ta(a.a)&&a.b.addEventListener("message",a.f);"undefined"===typeof a.a[b]&&(a.a[b]=[]);a.a[b].push(c);}function Hj(a){this.a=a;}Hj.prototype.postMessage=function(a,b){this.a.postMessage(a,b);};function Ij(a){this.c=a;this.b=!1;this.a=[];}
  function Jj(a,b,c,d){var e,f=c||{},g,h,m,p=null;if(a.b)return E(Error("connection_unavailable"));var u=d?800:50,A="undefined"!==typeof MessageChannel?new MessageChannel:null;return (new B(function(C,N){A?(e=Math.floor(Math.random()*Math.pow(10,20)).toString(),A.port1.start(),h=setTimeout(function(){N(Error("unsupported_event"));},u),g=function(wa){wa.data.eventId===e&&("ack"===wa.data.status?(clearTimeout(h),m=setTimeout(function(){N(Error("timeout"));},3E3)):"done"===wa.data.status?(clearTimeout(m),
  "undefined"!==typeof wa.data.response?C(wa.data.response):N(Error("unknown_error"))):(clearTimeout(h),clearTimeout(m),N(Error("invalid_response"))));},p={messageChannel:A,onMessage:g},a.a.push(p),A.port1.addEventListener("message",g),a.c.postMessage({eventType:b,eventId:e,data:f},[A.port2])):N(Error("connection_unavailable"));})).then(function(C){Kj(a,p);return C}).s(function(C){Kj(a,p);throw C;})}
  function Kj(a,b){if(b){var c=b.messageChannel,d=b.onMessage;c&&(c.port1.removeEventListener("message",d),c.port1.close());Pa(a.a,function(e){return e==b});}}Ij.prototype.close=function(){for(;0<this.a.length;)Kj(this,this.a[0]);this.b=!0;};function Lj(){if(!Mj())throw new M("web-storage-unsupported");this.c={};this.a=[];this.b=0;this.u=l.indexedDB;this.type="indexedDB";this.g=this.l=this.f=this.i=null;this.o=!1;this.h=null;var a=this;ze()&&self?(this.l=Fj(),Gj(this.l,"keyChanged",function(b,c){return Nj(a).then(function(d){0<d.length&&x(a.a,function(e){e(d);});return {keyProcessed:Na(d,c.key)}})}),Gj(this.l,"ping",function(){return D(["keyChanged"])})):Ve().then(function(b){if(a.h=b)a.g=new Ij(new Hj(b)),Jj(a.g,"ping",null,!0).then(function(c){c[0].fulfilled&&
  Na(c[0].value,"keyChanged")&&(a.o=!0);}).s(function(){});});}var Oj;function Pj(a){return new B(function(b,c){var d=a.u.deleteDatabase("firebaseLocalStorageDb");d.onsuccess=function(){b();};d.onerror=function(e){c(Error(e.target.error));};})}
  function Qj(a){return new B(function(b,c){var d=a.u.open("firebaseLocalStorageDb",1);d.onerror=function(e){try{e.preventDefault();}catch(f){}c(Error(e.target.error));};d.onupgradeneeded=function(e){e=e.target.result;try{e.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"});}catch(f){c(f);}};d.onsuccess=function(e){e=e.target.result;e.objectStoreNames.contains("firebaseLocalStorage")?b(e):Pj(a).then(function(){return Qj(a)}).then(function(f){b(f);}).s(function(f){c(f);});};})}
  function Rj(a){a.m||(a.m=Qj(a));return a.m}function Mj(){try{return !!l.indexedDB}catch(a){return !1}}function Sj(a){return a.objectStore("firebaseLocalStorage")}function Tj(a,b){return a.transaction(["firebaseLocalStorage"],b?"readwrite":"readonly")}function Uj(a){return new B(function(b,c){a.onsuccess=function(d){d&&d.target?b(d.target.result):b();};a.onerror=function(d){c(d.target.error);};})}k=Lj.prototype;
  k.set=function(a,b){var c=!1,d,e=this;return Rj(this).then(function(f){d=f;f=Sj(Tj(d,!0));return Uj(f.get(a))}).then(function(f){var g=Sj(Tj(d,!0));if(f)return f.value=b,Uj(g.put(f));e.b++;c=!0;f={};f.fbase_key=a;f.value=b;return Uj(g.add(f))}).then(function(){e.c[a]=b;return Vj(e,a)}).ka(function(){c&&e.b--;})};function Vj(a,b){return a.g&&a.h&&Ue()===a.h?Jj(a.g,"keyChanged",{key:b},a.o).then(function(){}).s(function(){}):D()}
  k.get=function(a){return Rj(this).then(function(b){return Uj(Sj(Tj(b,!1)).get(a))}).then(function(b){return b&&b.value})};k.S=function(a){var b=!1,c=this;return Rj(this).then(function(d){b=!0;c.b++;return Uj(Sj(Tj(d,!0))["delete"](a))}).then(function(){delete c.c[a];return Vj(c,a)}).ka(function(){b&&c.b--;})};
  function Nj(a){return Rj(a).then(function(b){var c=Sj(Tj(b,!1));return c.getAll?Uj(c.getAll()):new B(function(d,e){var f=[],g=c.openCursor();g.onsuccess=function(h){(h=h.target.result)?(f.push(h.value),h["continue"]()):d(f);};g.onerror=function(h){e(h.target.error);};})}).then(function(b){var c={},d=[];if(0==a.b){for(d=0;d<b.length;d++)c[b[d].fbase_key]=b[d].value;d=je(a.c,c);a.c=c;}return d})}k.$=function(a){0==this.a.length&&Wj(this);this.a.push(a);};
  k.ea=function(a){Pa(this.a,function(b){return b==a});0==this.a.length&&Xj(this);};function Wj(a){function b(){a.f=setTimeout(function(){a.i=Nj(a).then(function(c){0<c.length&&x(a.a,function(d){d(c);});}).then(function(){b();}).s(function(c){"STOP_EVENT"!=c.message&&b();});},800);}Xj(a);b();}function Xj(a){a.i&&a.i.cancel("STOP_EVENT");a.f&&(clearTimeout(a.f),a.f=null);}function Yj(a){var b=this,c=null;this.a=[];this.type="indexedDB";this.c=a;this.b=D().then(function(){if(Mj()){var d=Ge(),e="__sak"+d;Oj||(Oj=new Lj);c=Oj;return c.set(e,d).then(function(){return c.get(e)}).then(function(f){if(f!==d)throw Error("indexedDB not supported!");return c.S(e)}).then(function(){return c}).s(function(){return b.c})}return b.c}).then(function(d){b.type=d.type;d.$(function(e){x(b.a,function(f){f(e);});});return d});}k=Yj.prototype;k.get=function(a){return this.b.then(function(b){return b.get(a)})};
  k.set=function(a,b){return this.b.then(function(c){return c.set(a,b)})};k.S=function(a){return this.b.then(function(b){return b.S(a)})};k.$=function(a){this.a.push(a);};k.ea=function(a){Pa(this.a,function(b){return b==a});};function Zj(){this.a={};this.type="inMemory";}k=Zj.prototype;k.get=function(a){return D(this.a[a])};k.set=function(a,b){this.a[a]=b;return D()};k.S=function(a){delete this.a[a];return D()};k.$=function(){};k.ea=function(){};function ak(){if(!bk()){if("Node"==Ae())throw new M("internal-error","The LocalStorage compatibility library was not found.");throw new M("web-storage-unsupported");}this.a=ck()||firebase.INTERNAL.node.localStorage;this.type="localStorage";}function ck(){try{var a=l.localStorage,b=Ge();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
  function bk(){var a="Node"==Ae();a=ck()||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.localStorage;if(!a)return !1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return !1}}k=ak.prototype;k.get=function(a){var b=this;return D().then(function(){var c=b.a.getItem(a);return Me(c)})};k.set=function(a,b){var c=this;return D().then(function(){var d=Ke(b);null===d?c.S(a):c.a.setItem(a,d);})};k.S=function(a){var b=this;return D().then(function(){b.a.removeItem(a);})};
  k.$=function(a){l.window&&Wc(l.window,"storage",a);};k.ea=function(a){l.window&&fd(l.window,"storage",a);};function dk(){this.type="nullStorage";}k=dk.prototype;k.get=function(){return D(null)};k.set=function(){return D()};k.S=function(){return D()};k.$=function(){};k.ea=function(){};function ek(){if(!fk()){if("Node"==Ae())throw new M("internal-error","The SessionStorage compatibility library was not found.");throw new M("web-storage-unsupported");}this.a=gk()||firebase.INTERNAL.node.sessionStorage;this.type="sessionStorage";}function gk(){try{var a=l.sessionStorage,b=Ge();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
  function fk(){var a="Node"==Ae();a=gk()||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.sessionStorage;if(!a)return !1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return !1}}k=ek.prototype;k.get=function(a){var b=this;return D().then(function(){var c=b.a.getItem(a);return Me(c)})};k.set=function(a,b){var c=this;return D().then(function(){var d=Ke(b);null===d?c.S(a):c.a.setItem(a,d);})};k.S=function(a){var b=this;return D().then(function(){b.a.removeItem(a);})};k.$=function(){};
  k.ea=function(){};function hk(){var a={};a.Browser=ik;a.Node=jk;a.ReactNative=kk;a.Worker=lk;this.a=a[Ae()];}var mk,ik={C:ak,Ta:ek},jk={C:ak,Ta:ek},kk={C:Cj,Ta:dk},lk={C:ak,Ta:dk};var nk={ad:"local",NONE:"none",cd:"session"};function ok(a){var b=new M("invalid-persistence-type"),c=new M("unsupported-persistence-type");a:{for(d in nk)if(nk[d]==a){var d=!0;break a}d=!1;}if(!d||"string"!==typeof a)throw b;switch(Ae()){case "ReactNative":if("session"===a)throw c;break;case "Node":if("none"!==a)throw c;break;default:if(!Fe()&&"none"!==a)throw c;}}
  function pk(){var a=!Ne(I())&&ye()?!0:!1,b=Je(),c=Fe();this.m=a;this.h=b;this.l=c;this.a={};mk||(mk=new hk);a=mk;try{this.g=!ge()&&Te()||!l.indexedDB?new a.a.C:new Yj(ze()?new Zj:new a.a.C);}catch(d){this.g=new Zj,this.h=!0;}try{this.i=new a.a.Ta;}catch(d){this.i=new Zj;}this.u=new Zj;this.f=t(this.Pb,this);this.b={};}var qk;function rk(){qk||(qk=new pk);return qk}function sk(a,b){switch(b){case "session":return a.i;case "none":return a.u;default:return a.g}}
  function tk(a,b){return "firebase:"+a.name+(b?":"+b:"")}function uk(a,b,c){var d=tk(b,c),e=sk(a,b.C);return a.get(b,c).then(function(f){var g=null;try{g=Me(l.localStorage.getItem(d));}catch(h){}if(g&&!f)return l.localStorage.removeItem(d),a.set(b,g,c);g&&f&&"localStorage"!=e.type&&l.localStorage.removeItem(d);})}k=pk.prototype;k.get=function(a,b){return sk(this,a.C).get(tk(a,b))};function vk(a,b,c){c=tk(b,c);"local"==b.C&&(a.b[c]=null);return sk(a,b.C).S(c)}
  k.set=function(a,b,c){var d=tk(a,c),e=this,f=sk(this,a.C);return f.set(d,b).then(function(){return f.get(d)}).then(function(g){"local"==a.C&&(e.b[d]=g);})};k.addListener=function(a,b,c){a=tk(a,b);this.l&&(this.b[a]=l.localStorage.getItem(a));Ta(this.a)&&(sk(this,"local").$(this.f),this.h||(ge()||!Te())&&l.indexedDB||!this.l||wk(this));this.a[a]||(this.a[a]=[]);this.a[a].push(c);};
  k.removeListener=function(a,b,c){a=tk(a,b);this.a[a]&&(Pa(this.a[a],function(d){return d==c}),0==this.a[a].length&&delete this.a[a]);Ta(this.a)&&(sk(this,"local").ea(this.f),xk(this));};function wk(a){xk(a);a.c=setInterval(function(){for(var b in a.a){var c=l.localStorage.getItem(b),d=a.b[b];c!=d&&(a.b[b]=c,c=new Kc({type:"storage",key:b,target:window,oldValue:d,newValue:c,a:!0}),a.Pb(c));}},1E3);}function xk(a){a.c&&(clearInterval(a.c),a.c=null);}
  k.Pb=function(a){if(a&&a.f){var b=a.a.key;if(null==b)for(var c in this.a){var d=this.b[c];"undefined"===typeof d&&(d=null);var e=l.localStorage.getItem(c);e!==d&&(this.b[c]=e,this.$a(c));}else if(0==b.indexOf("firebase:")&&this.a[b]){"undefined"!==typeof a.a.a?sk(this,"local").ea(this.f):xk(this);if(this.m)if(c=l.localStorage.getItem(b),d=a.a.newValue,d!==c)null!==d?l.localStorage.setItem(b,d):l.localStorage.removeItem(b);else if(this.b[b]===d&&"undefined"===typeof a.a.a)return;var f=this;c=function(){if("undefined"!==
  typeof a.a.a||f.b[b]!==l.localStorage.getItem(b))f.b[b]=l.localStorage.getItem(b),f.$a(b);};uc&&Fc&&10==Fc&&l.localStorage.getItem(b)!==a.a.newValue&&a.a.newValue!==a.a.oldValue?setTimeout(c,10):c();}}else x(a,t(this.$a,this));};k.$a=function(a){this.a[a]&&x(this.a[a],function(b){b();});};function yk(a){this.a=a;this.b=rk();}var zk={name:"authEvent",C:"local"};function Ak(a){return a.b.get(zk,a.a).then(function(b){return Zg(b)})}function Bk(){this.a=rk();}function Ck(){this.b=-1;}function Dk(a,b){this.b=Ek;this.f=l.Uint8Array?new Uint8Array(this.b):Array(this.b);this.g=this.c=0;this.a=[];this.i=a;this.h=b;this.l=l.Int32Array?new Int32Array(64):Array(64);void 0!==Fk||(l.Int32Array?Fk=new Int32Array(Gk):Fk=Gk);this.reset();}var Fk;v(Dk,Ck);for(var Ek=64,Hk=Ek-1,Ik=[],Jk=0;Jk<Hk;Jk++)Ik[Jk]=0;var Kk=Qa(128,Ik);Dk.prototype.reset=function(){this.g=this.c=0;this.a=l.Int32Array?new Int32Array(this.h):Ra(this.h);};
  function Lk(a){for(var b=a.f,c=a.l,d=0,e=0;e<b.length;)c[d++]=b[e]<<24|b[e+1]<<16|b[e+2]<<8|b[e+3],e=4*d;for(b=16;64>b;b++){e=c[b-15]|0;d=c[b-2]|0;var f=(c[b-16]|0)+((e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3)|0,g=(c[b-7]|0)+((d>>>17|d<<15)^(d>>>19|d<<13)^d>>>10)|0;c[b]=f+g|0;}d=a.a[0]|0;e=a.a[1]|0;var h=a.a[2]|0,m=a.a[3]|0,p=a.a[4]|0,u=a.a[5]|0,A=a.a[6]|0;f=a.a[7]|0;for(b=0;64>b;b++){var C=((d>>>2|d<<30)^(d>>>13|d<<19)^(d>>>22|d<<10))+(d&e^d&h^e&h)|0;g=p&u^~p&A;f=f+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<
  7))|0;g=g+(Fk[b]|0)|0;g=f+(g+(c[b]|0)|0)|0;f=A;A=u;u=p;p=m+g|0;m=h;h=e;e=d;d=g+C|0;}a.a[0]=a.a[0]+d|0;a.a[1]=a.a[1]+e|0;a.a[2]=a.a[2]+h|0;a.a[3]=a.a[3]+m|0;a.a[4]=a.a[4]+p|0;a.a[5]=a.a[5]+u|0;a.a[6]=a.a[6]+A|0;a.a[7]=a.a[7]+f|0;}
  function Mk(a,b,c){void 0===c&&(c=b.length);var d=0,e=a.c;if(n(b))for(;d<c;)a.f[e++]=b.charCodeAt(d++),e==a.b&&(Lk(a),e=0);else if(oa(b))for(;d<c;){var f=b[d++];if(!("number"==typeof f&&0<=f&&255>=f&&f==(f|0)))throw Error("message must be a byte array");a.f[e++]=f;e==a.b&&(Lk(a),e=0);}else throw Error("message must be string or array");a.c=e;a.g+=c;}
  var Gk=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,
  4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function Nk(){Dk.call(this,8,Ok);}v(Nk,Dk);var Ok=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function Pk(a,b,c,d,e){this.u=a;this.i=b;this.l=c;this.m=d||null;this.o=e||null;this.h=b+":"+c;this.v=new Bk;this.g=new yk(this.h);this.f=null;this.b=[];this.a=this.c=null;}function Qk(a){return new M("invalid-cordova-configuration",a)}k=Pk.prototype;
  k.ia=function(){return this.Da?this.Da:this.Da=ve().then(function(){if("function"!==typeof J("universalLinks.subscribe",l))throw Qk("cordova-universal-links-plugin-fix is not installed");if("undefined"===typeof J("BuildInfo.packageName",l))throw Qk("cordova-plugin-buildinfo is not installed");if("function"!==typeof J("cordova.plugins.browsertab.openUrl",l))throw Qk("cordova-plugin-browsertab is not installed");if("function"!==typeof J("cordova.InAppBrowser.open",l))throw Qk("cordova-plugin-inappbrowser is not installed");
  },function(){throw new M("cordova-not-ready");})};function Rk(){for(var a=20,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}function Sk(a){var b=new Nk;Mk(b,a);a=[];var c=8*b.g;56>b.c?Mk(b,Kk,56-b.c):Mk(b,Kk,b.b-(b.c-56));for(var d=63;56<=d;d--)b.f[d]=c&255,c/=256;Lk(b);for(d=c=0;d<b.i;d++)for(var e=24;0<=e;e-=8)a[c++]=b.a[d]>>e&255;return Kf(a)}
  k.Fb=function(a,b){b(new M("operation-not-supported-in-this-environment"));return D()};k.Db=function(){return E(new M("operation-not-supported-in-this-environment"))};k.Rb=function(){return !1};k.Ob=function(){return !0};k.Jb=function(){return !0};
  k.Eb=function(a,b,c,d){if(this.c)return E(new M("redirect-operation-pending"));var e=this,f=l.document,g=null,h=null,m=null,p=null;return this.c=D().then(function(){Xg(b);return Tk(e)}).then(function(){return Uk(e,a,b,c,d)}).then(function(){return (new B(function(u,A){h=function(){var C=J("cordova.plugins.browsertab.close",l);u();"function"===typeof C&&C();e.a&&"function"===typeof e.a.close&&(e.a.close(),e.a=null);return !1};e.Aa(h);m=function(){g||(g=nd(2E3).then(function(){A(new M("redirect-cancelled-by-user"));}));};
  p=function(){Qe()&&m();};f.addEventListener("resume",m,!1);I().toLowerCase().match(/android/)||f.addEventListener("visibilitychange",p,!1);})).s(function(u){return Vk(e).then(function(){throw u;})})}).ka(function(){m&&f.removeEventListener("resume",m,!1);p&&f.removeEventListener("visibilitychange",p,!1);g&&g.cancel();h&&e.Na(h);e.c=null;})};
  function Uk(a,b,c,d,e){var f=Rk(),g=new Yg(b,d,null,f,new M("no-auth-event"),null,e),h=J("BuildInfo.packageName",l);if("string"!==typeof h)throw new M("invalid-cordova-configuration");var m=J("BuildInfo.displayName",l),p={};if(I().toLowerCase().match(/iphone|ipad|ipod/))p.ibi=h;else if(I().toLowerCase().match(/android/))p.apn=h;else return E(new M("operation-not-supported-in-this-environment"));m&&(p.appDisplayName=m);f=Sk(f);p.sessionId=f;var u=Bj(a.u,a.i,a.l,b,c,null,d,a.m,p,a.o,e);return a.ia().then(function(){var A=
  a.h;return a.v.a.set(zk,g.A(),A)}).then(function(){var A=J("cordova.plugins.browsertab.isAvailable",l);if("function"!==typeof A)throw new M("invalid-cordova-configuration");var C=null;A(function(N){if(N){C=J("cordova.plugins.browsertab.openUrl",l);if("function"!==typeof C)throw new M("invalid-cordova-configuration");C(u);}else{C=J("cordova.InAppBrowser.open",l);if("function"!==typeof C)throw new M("invalid-cordova-configuration");N=I();a.a=C(u,N.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||N.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?
  "_blank":"_system","location=yes");}});})}function Wk(a,b){for(var c=0;c<a.b.length;c++)try{a.b[c](b);}catch(d){}}function Tk(a){a.f||(a.f=a.ia().then(function(){return new B(function(b){function c(d){b(d);a.Na(c);return !1}a.Aa(c);Xk(a);})}));return a.f}function Vk(a){var b=null;return Ak(a.g).then(function(c){b=c;c=a.g;return vk(c.b,zk,c.a)}).then(function(){return b})}
  function Xk(a){function b(g){d=!0;e&&e.cancel();Vk(a).then(function(h){var m=c;if(h&&g&&g.url){var p=null;m=ig(g.url);-1!=m.indexOf("/__/auth/callback")&&(p=Ld(m),p=Me(Kd(p,"firebaseError")||null),p=(p="object"===typeof p?pf(p):null)?new Yg(h.c,h.b,null,null,p,null,h.R()):new Yg(h.c,h.b,m,h.f,null,null,h.R()));m=p||c;}Wk(a,m);});}var c=new Yg("unknown",null,null,null,new M("no-auth-event")),d=!1,e=nd(500).then(function(){return Vk(a).then(function(){d||Wk(a,c);})}),f=l.handleOpenURL;l.handleOpenURL=function(g){0==
  g.toLowerCase().indexOf(J("BuildInfo.packageName",l).toLowerCase()+"://")&&b({url:g});if("function"===typeof f)try{f(g);}catch(h){console.error(h);}};ah||(ah=new $g);bh(b);}k.Aa=function(a){this.b.push(a);Tk(this).s(function(b){"auth/invalid-cordova-configuration"===b.code&&(b=new Yg("unknown",null,null,null,new M("no-auth-event")),a(b));});};k.Na=function(a){Pa(this.b,function(b){return b==a});};function Yk(a){this.a=a;this.b=rk();}var Zk={name:"pendingRedirect",C:"session"};function $k(a){return a.b.set(Zk,"pending",a.a)}function al(a){return vk(a.b,Zk,a.a)}function bl(a){return a.b.get(Zk,a.a).then(function(b){return "pending"==b})}function cl(a,b,c){this.i={};this.v=0;this.B=a;this.u=b;this.m=c;this.h=[];this.f=!1;this.l=t(this.o,this);this.b=new dl;this.w=new el;this.g=new Yk(this.u+":"+this.m);this.c={};this.c.unknown=this.b;this.c.signInViaRedirect=this.b;this.c.linkViaRedirect=this.b;this.c.reauthViaRedirect=this.b;this.c.signInViaPopup=this.w;this.c.linkViaPopup=this.w;this.c.reauthViaPopup=this.w;this.a=fl(this.B,this.u,this.m,Vf);}
  function fl(a,b,c,d){var e=firebase.SDK_VERSION||null;return we()?new Pk(a,b,c,e,d):new vj(a,b,c,e,d)}cl.prototype.reset=function(){this.f=!1;this.a.Na(this.l);this.a=fl(this.B,this.u,this.m);this.i={};};function gl(a){a.f||(a.f=!0,a.a.Aa(a.l));var b=a.a;return a.a.ia().s(function(c){a.a==b&&a.reset();throw c;})}function hl(a){a.a.Ob()&&gl(a).s(function(b){var c=new Yg("unknown",null,null,null,new M("operation-not-supported-in-this-environment"));il(b)&&a.o(c);});a.a.Jb()||jl(a.b);}
  function kl(a,b){Na(a.h,b)||a.h.push(b);a.f||bl(a.g).then(function(c){c?al(a.g).then(function(){gl(a).s(function(d){var e=new Yg("unknown",null,null,null,new M("operation-not-supported-in-this-environment"));il(d)&&a.o(e);});}):hl(a);}).s(function(){hl(a);});}function ll(a,b){Pa(a.h,function(c){return c==b});}
  cl.prototype.o=function(a){if(!a)throw new M("invalid-auth-event");6E5<=ua()-this.v&&(this.i={},this.v=0);if(a&&a.getUid()&&this.i.hasOwnProperty(a.getUid()))return !1;for(var b=!1,c=0;c<this.h.length;c++){var d=this.h[c];if(d.xb(a.c,a.b)){if(b=this.c[a.c])b.h(a,d),a&&(a.f||a.b)&&(this.i[a.getUid()]=!0,this.v=ua());b=!0;break}}jl(this.b);return b};var ml=new Pe(2E3,1E4),nl=new Pe(3E4,6E4);cl.prototype.oa=function(){return this.b.oa()};
  function ol(a,b,c,d,e,f,g){return a.a.Db(b,c,d,function(){a.f||(a.f=!0,a.a.Aa(a.l));},function(){a.reset();},e,f,g)}function il(a){return a&&"auth/cordova-not-ready"==a.code?!0:!1}
  function pl(a,b,c,d,e){var f;return $k(a.g).then(function(){return a.a.Eb(b,c,d,e).s(function(g){if(il(g))throw new M("operation-not-supported-in-this-environment");f=g;return al(a.g).then(function(){throw f;})}).then(function(){return a.a.Rb()?new B(function(){}):al(a.g).then(function(){return a.oa()}).then(function(){}).s(function(){})})})}function ql(a,b,c,d,e){return a.a.Fb(d,function(f){b.ja(c,null,f,e);},ml.get())}var rl={};
  function sl(a,b,c){var d=b+":"+c;rl[d]||(rl[d]=new cl(a,b,c));return rl[d]}function dl(){this.b=null;this.f=[];this.c=[];this.a=null;this.i=this.g=!1;}dl.prototype.reset=function(){this.b=null;this.a&&(this.a.cancel(),this.a=null);};
  dl.prototype.h=function(a,b){if(a){this.reset();this.g=!0;var c=a.c,d=a.b,e=a.a&&"auth/web-storage-unsupported"==a.a.code,f=a.a&&"auth/operation-not-supported-in-this-environment"==a.a.code;this.i=!(!e&&!f);"unknown"!=c||e||f?a.a?(tl(this,!0,null,a.a),D()):b.Ba(c,d)?ul(this,a,b):E(new M("invalid-auth-event")):(tl(this,!1,null,null),D());}else E(new M("invalid-auth-event"));};function jl(a){a.g||(a.g=!0,tl(a,!1,null,null));}function vl(a){a.g&&!a.i&&tl(a,!1,null,null);}
  function ul(a,b,c){c=c.Ba(b.c,b.b);var d=b.g,e=b.f,f=b.i,g=b.R(),h=!!b.c.match(/Redirect$/);c(d,e,g,f).then(function(m){tl(a,h,m,null);}).s(function(m){tl(a,h,null,m);});}function wl(a,b){a.b=function(){return E(b)};if(a.c.length)for(var c=0;c<a.c.length;c++)a.c[c](b);}function xl(a,b){a.b=function(){return D(b)};if(a.f.length)for(var c=0;c<a.f.length;c++)a.f[c](b);}function tl(a,b,c,d){b?d?wl(a,d):xl(a,c):xl(a,{user:null});a.f=[];a.c=[];}
  dl.prototype.oa=function(){var a=this;return new B(function(b,c){a.b?a.b().then(b,c):(a.f.push(b),a.c.push(c),yl(a));})};function yl(a){var b=new M("timeout");a.a&&a.a.cancel();a.a=nd(nl.get()).then(function(){a.b||(a.g=!0,tl(a,!0,null,b));});}function el(){}el.prototype.h=function(a,b){if(a){var c=a.c,d=a.b;a.a?(b.ja(a.c,null,a.a,a.b),D()):b.Ba(c,d)?zl(a,b):E(new M("invalid-auth-event"));}else E(new M("invalid-auth-event"));};
  function zl(a,b){var c=a.b,d=a.c;b.Ba(d,c)(a.g,a.f,a.R(),a.i).then(function(e){b.ja(d,e,null,c);}).s(function(e){b.ja(d,null,e,c);});}function Al(){this.vb=!1;Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.vb},set:function(a){this.vb=a;},enumerable:!1});}function Bl(a,b){this.a=b;K(this,"verificationId",a);}Bl.prototype.confirm=function(a){a=Vg(this.verificationId,a);return this.a(a)};function Cl(a,b,c,d){return (new Tg(a)).Wa(b,c).then(function(e){return new Bl(e,d)})}function Dl(a){var b=Sf(a);if(!(b&&b.exp&&b.auth_time&&b.iat))throw new M("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");L(this,{token:a,expirationTime:Se(1E3*b.exp),authTime:Se(1E3*b.auth_time),issuedAtTime:Se(1E3*b.iat),signInProvider:b.firebase&&b.firebase.sign_in_provider?b.firebase.sign_in_provider:null,claims:b});}function El(a,b,c){this.h=a;this.i=b;this.g=c;this.c=3E4;this.f=96E4;this.b=null;this.a=this.c;if(this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!");}El.prototype.start=function(){this.a=this.c;Fl(this,!0);};function Gl(a,b){if(b)return a.a=a.c,a.g();b=a.a;a.a*=2;a.a>a.f&&(a.a=a.f);return b}function Fl(a,b){a.stop();a.b=nd(Gl(a,b)).then(function(){return Re()}).then(function(){return a.h()}).then(function(){Fl(a,!0);}).s(function(c){a.i(c)&&Fl(a,!1);});}
  El.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null);};function Hl(a){this.f=a;this.b=this.a=null;this.c=0;}Hl.prototype.A=function(){return {apiKey:this.f.c,refreshToken:this.a,accessToken:this.b,expirationTime:this.c}};function Il(a,b){var c=b[lg],d=b.refreshToken;b=Jl(b.expiresIn);a.b=c;a.c=b;a.a=d;}function Kl(a,b){a.b=b.b;a.a=b.a;a.c=b.c;}function Jl(a){return ua()+1E3*parseInt(a,10)}
  function Ll(a,b){return zi(a.f,b).then(function(c){a.b=c.access_token;a.c=Jl(c.expires_in);a.a=c.refresh_token;return {accessToken:a.b,expirationTime:a.c,refreshToken:a.a}}).s(function(c){"auth/user-token-expired"==c.code&&(a.a=null);throw c;})}Hl.prototype.getToken=function(a){a=!!a;return this.b&&!this.a?E(new M("user-token-expired")):a||!this.b||ua()>this.c-3E4?this.a?Ll(this,{grant_type:"refresh_token",refresh_token:this.a}):D(null):D({accessToken:this.b,expirationTime:this.c,refreshToken:this.a})};function Ml(a,b){this.a=a||null;this.b=b||null;L(this,{lastSignInTime:Se(b||null),creationTime:Se(a||null)});}function Nl(a){return new Ml(a.a,a.b)}Ml.prototype.A=function(){return {lastLoginAt:this.b,createdAt:this.a}};function Ol(a,b,c,d,e,f){L(this,{uid:a,displayName:d||null,photoURL:e||null,email:c||null,phoneNumber:f||null,providerId:b});}function Pl(a,b){F.call(this,a);for(var c in b)this[c]=b[c];}v(Pl,F);
  function Q(a,b,c){this.I=[];this.l=a.apiKey;this.m=a.appName;this.o=a.authDomain||null;a=firebase.SDK_VERSION?Ee(firebase.SDK_VERSION):null;this.a=new ni(this.l,Uf(Vf),a);this.b=new Hl(this.a);Ql(this,b[lg]);Il(this.b,b);K(this,"refreshToken",this.b.a);Rl(this,c||{});G.call(this);this.J=!1;this.o&&He()&&(this.i=sl(this.o,this.l,this.m));this.O=[];this.h=null;this.w=Sl(this);this.W=t(this.Ja,this);var d=this;this.ga=null;this.xa=function(e){d.ua(e.g);};this.Z=null;this.P=[];this.wa=function(e){Tl(d,
  e.c);};this.Y=null;}v(Q,G);Q.prototype.ua=function(a){this.ga=a;ti(this.a,a);};Q.prototype.ha=function(){return this.ga};function Ul(a,b){a.Z&&fd(a.Z,"languageCodeChanged",a.xa);(a.Z=b)&&Wc(b,"languageCodeChanged",a.xa);}function Tl(a,b){a.P=b;ui(a.a,firebase.SDK_VERSION?Ee(firebase.SDK_VERSION,a.P):null);}Q.prototype.Ca=function(){return Ra(this.P)};function Vl(a,b){a.Y&&fd(a.Y,"frameworkChanged",a.wa);(a.Y=b)&&Wc(b,"frameworkChanged",a.wa);}Q.prototype.Ja=function(){this.w.b&&(this.w.stop(),this.w.start());};
  function Wl(a){try{return firebase.app(a.m).auth()}catch(b){throw new M("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+a.m+"'!");}}function Sl(a){return new El(function(){return a.G(!0)},function(b){return b&&"auth/network-request-failed"==b.code?!0:!1},function(){var b=a.b.c-ua()-3E5;return 0<b?b:0})}function Xl(a){a.B||a.w.b||(a.w.start(),fd(a,"tokenChanged",a.W),Wc(a,"tokenChanged",a.W));}function Yl(a){fd(a,"tokenChanged",a.W);a.w.stop();}
  function Ql(a,b){a.ma=b;K(a,"_lat",b);}function Zl(a,b){Pa(a.O,function(c){return c==b});}function $l(a){for(var b=[],c=0;c<a.O.length;c++)b.push(a.O[c](a));return bc(b).then(function(){return a})}function am(a){a.i&&!a.J&&(a.J=!0,kl(a.i,a));}
  function Rl(a,b){L(a,{uid:b.uid,displayName:b.displayName||null,photoURL:b.photoURL||null,email:b.email||null,emailVerified:b.emailVerified||!1,phoneNumber:b.phoneNumber||null,isAnonymous:b.isAnonymous||!1,tenantId:b.tenantId||null,metadata:new Ml(b.createdAt,b.lastLoginAt),providerData:[]});a.a.b=a.tenantId;}K(Q.prototype,"providerId","firebase");function bm(){}function cm(a){return D().then(function(){if(a.B)throw new M("app-deleted");})}
  function dm(a){return Ja(a.providerData,function(b){return b.providerId})}function em(a,b){b&&(fm(a,b.providerId),a.providerData.push(b));}function fm(a,b){Pa(a.providerData,function(c){return c.providerId==b});}function gm(a,b,c){("uid"!=b||c)&&a.hasOwnProperty(b)&&K(a,b,c);}
  function hm(a,b){a!=b&&(L(a,{uid:b.uid,displayName:b.displayName,photoURL:b.photoURL,email:b.email,emailVerified:b.emailVerified,phoneNumber:b.phoneNumber,isAnonymous:b.isAnonymous,tenantId:b.tenantId,providerData:[]}),b.metadata?K(a,"metadata",Nl(b.metadata)):K(a,"metadata",new Ml),x(b.providerData,function(c){em(a,c);}),Kl(a.b,b.b),K(a,"refreshToken",a.b.a));}k=Q.prototype;k.reload=function(){var a=this;return R(this,cm(this).then(function(){return im(a).then(function(){return $l(a)}).then(bm)}))};
  function im(a){return a.G().then(function(b){var c=a.isAnonymous;return jm(a,b).then(function(){c||gm(a,"isAnonymous",!1);return b})})}k.dc=function(a){return this.G(a).then(function(b){return new Dl(b)})};k.G=function(a){var b=this;return R(this,cm(this).then(function(){return b.b.getToken(a)}).then(function(c){if(!c)throw new M("internal-error");c.accessToken!=b.ma&&(Ql(b,c.accessToken),b.dispatchEvent(new Pl("tokenChanged")));gm(b,"refreshToken",c.refreshToken);return c.accessToken}))};
  function km(a,b){b[lg]&&a.ma!=b[lg]&&(Il(a.b,b),a.dispatchEvent(new Pl("tokenChanged")),Ql(a,b[lg]),gm(a,"refreshToken",a.b.a));}function jm(a,b){return P(a.a,gj,{idToken:b}).then(t(a.zc,a))}
  k.zc=function(a){a=a.users;if(!a||!a.length)throw new M("internal-error");a=a[0];Rl(this,{uid:a.localId,displayName:a.displayName,photoURL:a.photoUrl,email:a.email,emailVerified:!!a.emailVerified,phoneNumber:a.phoneNumber,lastLoginAt:a.lastLoginAt,createdAt:a.createdAt,tenantId:a.tenantId});for(var b=lm(a),c=0;c<b.length;c++)em(this,b[c]);gm(this,"isAnonymous",!(this.email&&a.passwordHash)&&!(this.providerData&&this.providerData.length));};
  function lm(a){return (a=a.providerUserInfo)&&a.length?Ja(a,function(b){return new Ol(b.rawId,b.providerId,b.email,b.displayName,b.photoUrl,b.phoneNumber)}):[]}k.Ac=function(a){Xe("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead.");return this.hb(a)};
  k.hb=function(a){var b=this,c=null;return R(this,a.f(this.a,this.uid).then(function(d){km(b,d);c=mm(b,d,"reauthenticate");b.h=null;return b.reload()}).then(function(){return c}),!0)};function nm(a,b){return im(a).then(function(){if(Na(dm(a),b))return $l(a).then(function(){throw new M("provider-already-linked");})})}k.rc=function(a){Xe("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead.");return this.fb(a)};
  k.fb=function(a){var b=this,c=null;return R(this,nm(this,a.providerId).then(function(){return b.G()}).then(function(d){return a.b(b.a,d)}).then(function(d){c=mm(b,d,"link");return om(b,d)}).then(function(){return c}))};k.sc=function(a,b){var c=this;return R(this,nm(this,"phone").then(function(){return Cl(Wl(c),a,b,t(c.fb,c))}))};k.Bc=function(a,b){var c=this;return R(this,D().then(function(){return Cl(Wl(c),a,b,t(c.hb,c))}),!0)};
  function mm(a,b,c){var d=Wg(b);b=$f(b);return $e({user:a,credential:d,additionalUserInfo:b,operationType:c})}function om(a,b){km(a,b);return a.reload().then(function(){return a})}k.rb=function(a){var b=this;return R(this,this.G().then(function(c){return b.a.rb(c,a)}).then(function(c){km(b,c);return b.reload()}))};k.Sc=function(a){var b=this;return R(this,this.G().then(function(c){return a.b(b.a,c)}).then(function(c){km(b,c);return b.reload()}))};
  k.sb=function(a){var b=this;return R(this,this.G().then(function(c){return b.a.sb(c,a)}).then(function(c){km(b,c);return b.reload()}))};
  k.tb=function(a){if(void 0===a.displayName&&void 0===a.photoURL)return cm(this);var b=this;return R(this,this.G().then(function(c){return b.a.tb(c,{displayName:a.displayName,photoUrl:a.photoURL})}).then(function(c){km(b,c);gm(b,"displayName",c.displayName||null);gm(b,"photoURL",c.photoUrl||null);x(b.providerData,function(d){"password"===d.providerId&&(K(d,"displayName",b.displayName),K(d,"photoURL",b.photoURL));});return $l(b)}).then(bm))};
  k.Qc=function(a){var b=this;return R(this,im(this).then(function(c){return Na(dm(b),a)?Si(b.a,c,[a]).then(function(d){var e={};x(d.providerUserInfo||[],function(f){e[f.providerId]=!0;});x(dm(b),function(f){e[f]||fm(b,f);});e[Tg.PROVIDER_ID]||K(b,"phoneNumber",null);return $l(b)}):$l(b).then(function(){throw new M("no-such-provider");})}))};
  k.delete=function(){var a=this;return R(this,this.G().then(function(b){return P(a.a,fj,{idToken:b})}).then(function(){a.dispatchEvent(new Pl("userDeleted"));})).then(function(){for(var b=0;b<a.I.length;b++)a.I[b].cancel("app-deleted");Ul(a,null);Vl(a,null);a.I=[];a.B=!0;Yl(a);K(a,"refreshToken",null);a.i&&ll(a.i,a);})};
  k.xb=function(a,b){return "linkViaPopup"==a&&(this.g||null)==b&&this.f||"reauthViaPopup"==a&&(this.g||null)==b&&this.f||"linkViaRedirect"==a&&(this.ca||null)==b||"reauthViaRedirect"==a&&(this.ca||null)==b?!0:!1};k.ja=function(a,b,c,d){"linkViaPopup"!=a&&"reauthViaPopup"!=a||d!=(this.g||null)||(c&&this.v?this.v(c):b&&!c&&this.f&&this.f(b),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v);};
  k.Ba=function(a,b){return "linkViaPopup"==a&&b==(this.g||null)?t(this.Bb,this):"reauthViaPopup"==a&&b==(this.g||null)?t(this.Cb,this):"linkViaRedirect"==a&&(this.ca||null)==b?t(this.Bb,this):"reauthViaRedirect"==a&&(this.ca||null)==b?t(this.Cb,this):null};k.tc=function(a){var b=this;return pm(this,"linkViaPopup",a,function(){return nm(b,a.providerId).then(function(){return $l(b)})},!1)};k.Cc=function(a){return pm(this,"reauthViaPopup",a,function(){return D()},!0)};
  function pm(a,b,c,d,e){if(!He())return E(new M("operation-not-supported-in-this-environment"));if(a.h&&!e)return E(a.h);var f=Zf(c.providerId),g=Ge(a.uid+":::"),h=null;(!Je()||ye())&&a.o&&c.isOAuthProvider&&(h=Bj(a.o,a.l,a.m,b,c,null,g,firebase.SDK_VERSION||null,null,null,a.tenantId));var m=pe(h,f&&f.sa,f&&f.ra);d=d().then(function(){qm(a);if(!e)return a.G().then(function(){})}).then(function(){return ol(a.i,m,b,c,g,!!h,a.tenantId)}).then(function(){return new B(function(p,u){a.ja(b,null,new M("cancelled-popup-request"),
  a.g||null);a.f=p;a.v=u;a.g=g;a.c=ql(a.i,a,b,m,g);})}).then(function(p){m&&oe(m);return p?$e(p):null}).s(function(p){m&&oe(m);throw p;});return R(a,d,e)}k.uc=function(a){var b=this;return rm(this,"linkViaRedirect",a,function(){return nm(b,a.providerId)},!1)};k.Dc=function(a){return rm(this,"reauthViaRedirect",a,function(){return D()},!0)};
  function rm(a,b,c,d,e){if(!He())return E(new M("operation-not-supported-in-this-environment"));if(a.h&&!e)return E(a.h);var f=null,g=Ge(a.uid+":::");d=d().then(function(){qm(a);if(!e)return a.G().then(function(){})}).then(function(){a.ca=g;return $l(a)}).then(function(h){a.da&&(h=a.da,h=h.b.set(sm,a.A(),h.a));return h}).then(function(){return pl(a.i,b,c,g,a.tenantId)}).s(function(h){f=h;if(a.da)return tm(a.da);throw f;}).then(function(){if(f)throw f;});return R(a,d,e)}
  function qm(a){if(!a.i||!a.J){if(a.i&&!a.J)throw new M("internal-error");throw new M("auth-domain-config-required");}}k.Bb=function(a,b,c,d){var e=this;this.c&&(this.c.cancel(),this.c=null);var f=null;c=this.G().then(function(g){return pg(e.a,{requestUri:a,postBody:d,sessionId:b,idToken:g})}).then(function(g){f=mm(e,g,"link");return om(e,g)}).then(function(){return f});return R(this,c)};
  k.Cb=function(a,b,c,d){var e=this;this.c&&(this.c.cancel(),this.c=null);var f=null,g=D().then(function(){return kg(qg(e.a,{requestUri:a,sessionId:b,postBody:d,tenantId:c}),e.uid)}).then(function(h){f=mm(e,h,"reauthenticate");km(e,h);e.h=null;return e.reload()}).then(function(){return f});return R(this,g,!0)};
  k.jb=function(a){var b=this,c=null;return R(this,this.G().then(function(d){c=d;return "undefined"===typeof a||Ta(a)?{}:Jf(new zf(a))}).then(function(d){return b.a.jb(c,d)}).then(function(d){if(b.email!=d)return b.reload()}).then(function(){}))};function R(a,b,c){var d=um(a,b,c);a.I.push(d);d.ka(function(){Oa(a.I,d);});return d}
  function um(a,b,c){return a.h&&!c?(b.cancel(),E(a.h)):b.s(function(d){!d||"auth/user-disabled"!=d.code&&"auth/user-token-expired"!=d.code||(a.h||a.dispatchEvent(new Pl("userInvalidated")),a.h=d);throw d;})}k.toJSON=function(){return this.A()};
  k.A=function(){var a={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.o,stsTokenManager:this.b.A(),redirectEventId:this.ca||null};this.metadata&&Wa(a,this.metadata.A());x(this.providerData,function(b){a.providerData.push(af(b));});return a};
  function vm(a){if(!a.apiKey)return null;var b={apiKey:a.apiKey,authDomain:a.authDomain,appName:a.appName},c={};if(a.stsTokenManager&&a.stsTokenManager.accessToken&&a.stsTokenManager.expirationTime)c[lg]=a.stsTokenManager.accessToken,c.refreshToken=a.stsTokenManager.refreshToken||null,c.expiresIn=(a.stsTokenManager.expirationTime-ua())/1E3;else return null;var d=new Q(b,c,a);a.providerData&&x(a.providerData,function(e){e&&em(d,$e(e));});a.redirectEventId&&(d.ca=a.redirectEventId);return d}
  function wm(a,b,c,d){var e=new Q(a,b);c&&(e.da=c);d&&Tl(e,d);return e.reload().then(function(){return e})}function xm(a,b,c,d){b=b||{apiKey:a.l,authDomain:a.o,appName:a.m};var e=a.b,f={};f[lg]=e.b;f.refreshToken=e.a;f.expiresIn=(e.c-ua())/1E3;b=new Q(b,f);c&&(b.da=c);d&&Tl(b,d);hm(b,a);return b}function ym(a){this.a=a;this.b=rk();}var sm={name:"redirectUser",C:"session"};function tm(a){return vk(a.b,sm,a.a)}function zm(a,b){return a.b.get(sm,a.a).then(function(c){c&&b&&(c.authDomain=b);return vm(c||{})})}function Am(a){this.a=a;this.b=rk();this.c=null;this.f=Bm(this);this.b.addListener(Cm("local"),this.a,t(this.g,this));}Am.prototype.g=function(){var a=this,b=Cm("local");Dm(this,function(){return D().then(function(){return a.c&&"local"!=a.c.C?a.b.get(b,a.a):null}).then(function(c){if(c)return Em(a,"local").then(function(){a.c=b;})})});};function Em(a,b){var c=[],d;for(d in nk)nk[d]!==b&&c.push(vk(a.b,Cm(nk[d]),a.a));c.push(vk(a.b,Fm,a.a));return ac(c)}
  function Bm(a){var b=Cm("local"),c=Cm("session"),d=Cm("none");return uk(a.b,b,a.a).then(function(){return a.b.get(c,a.a)}).then(function(e){return e?c:a.b.get(d,a.a).then(function(f){return f?d:a.b.get(b,a.a).then(function(g){return g?b:a.b.get(Fm,a.a).then(function(h){return h?Cm(h):b})})})}).then(function(e){a.c=e;return Em(a,e.C)}).s(function(){a.c||(a.c=b);})}var Fm={name:"persistence",C:"session"};function Cm(a){return {name:"authUser",C:a}}
  Am.prototype.mb=function(a){var b=null,c=this;ok(a);return Dm(this,function(){return a!=c.c.C?c.b.get(c.c,c.a).then(function(d){b=d;return Em(c,a)}).then(function(){c.c=Cm(a);if(b)return c.b.set(c.c,b,c.a)}):D()})};function Gm(a){return Dm(a,function(){return a.b.set(Fm,a.c.C,a.a)})}function Hm(a,b){return Dm(a,function(){return a.b.set(a.c,b.A(),a.a)})}function Im(a){return Dm(a,function(){return vk(a.b,a.c,a.a)})}
  function Jm(a,b){return Dm(a,function(){return a.b.get(a.c,a.a).then(function(c){c&&b&&(c.authDomain=b);return vm(c||{})})})}function Dm(a,b){a.f=a.f.then(b,b);return a.f}function Km(a){this.l=!1;K(this,"settings",new Al);K(this,"app",a);if(S(this).options&&S(this).options.apiKey)a=firebase.SDK_VERSION?Ee(firebase.SDK_VERSION):null,this.b=new ni(S(this).options&&S(this).options.apiKey,Uf(Vf),a);else throw new M("invalid-api-key");this.O=[];this.m=[];this.J=[];this.Ub=firebase.INTERNAL.createSubscribe(t(this.oc,this));this.W=void 0;this.Vb=firebase.INTERNAL.createSubscribe(t(this.pc,this));Lm(this,null);this.h=new Am(S(this).options.apiKey+":"+S(this).name);this.w=
  new ym(S(this).options.apiKey+":"+S(this).name);this.Y=T(this,Mm(this));this.i=T(this,Nm(this));this.ga=!1;this.ma=t(this.Nc,this);this.ub=t(this.aa,this);this.wa=t(this.bc,this);this.xa=t(this.mc,this);this.Ja=t(this.nc,this);this.a=null;Om(this);this.INTERNAL={};this.INTERNAL["delete"]=t(this.delete,this);this.INTERNAL.logFramework=t(this.vc,this);this.o=0;G.call(this);Pm(this);this.I=[];}v(Km,G);function Qm(a){F.call(this,"languageCodeChanged");this.g=a;}v(Qm,F);
  function Rm(a){F.call(this,"frameworkChanged");this.c=a;}v(Rm,F);k=Km.prototype;k.mb=function(a){a=this.h.mb(a);return T(this,a)};k.ua=function(a){this.Z===a||this.l||(this.Z=a,ti(this.b,this.Z),this.dispatchEvent(new Qm(this.ha())));};k.ha=function(){return this.Z};k.Tc=function(){var a=l.navigator;this.ua(a?a.languages&&a.languages[0]||a.language||a.userLanguage||null:null);};k.vc=function(a){this.I.push(a);ui(this.b,firebase.SDK_VERSION?Ee(firebase.SDK_VERSION,this.I):null);this.dispatchEvent(new Rm(this.I));};
  k.Ca=function(){return Ra(this.I)};k.nb=function(a){this.P===a||this.l||(this.P=a,this.b.b=this.P);};k.R=function(){return this.P};function Pm(a){Object.defineProperty(a,"lc",{get:function(){return this.ha()},set:function(b){this.ua(b);},enumerable:!1});a.Z=null;Object.defineProperty(a,"ti",{get:function(){return this.R()},set:function(b){this.nb(b);},enumerable:!1});a.P=null;}
  k.toJSON=function(){return {apiKey:S(this).options.apiKey,authDomain:S(this).options.authDomain,appName:S(this).name,currentUser:U(this)&&U(this).A()}};function Sm(a){return a.Tb||E(new M("auth-domain-config-required"))}function Om(a){var b=S(a).options.authDomain,c=S(a).options.apiKey;b&&He()&&(a.Tb=a.Y.then(function(){if(!a.l){a.a=sl(b,c,S(a).name);kl(a.a,a);U(a)&&am(U(a));if(a.B){am(a.B);var d=a.B;d.ua(a.ha());Ul(d,a);d=a.B;Tl(d,a.I);Vl(d,a);a.B=null;}return a.a}}));}
  k.xb=function(a,b){switch(a){case "unknown":case "signInViaRedirect":return !0;case "signInViaPopup":return this.g==b&&!!this.f;default:return !1}};k.ja=function(a,b,c,d){"signInViaPopup"==a&&this.g==d&&(c&&this.v?this.v(c):b&&!c&&this.f&&this.f(b),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v);};k.Ba=function(a,b){return "signInViaRedirect"==a||"signInViaPopup"==a&&this.g==b&&this.f?t(this.ac,this):null};
  k.ac=function(a,b,c,d){var e=this;a={requestUri:a,postBody:d,sessionId:b,tenantId:c};this.c&&(this.c.cancel(),this.c=null);var f=null,g=null,h=ng(e.b,a).then(function(m){f=Wg(m);g=$f(m);return m});a=e.Y.then(function(){return h}).then(function(m){return Tm(e,m)}).then(function(){return $e({user:U(e),credential:f,additionalUserInfo:g,operationType:"signIn"})});return T(this,a)};
  k.Lc=function(a){if(!He())return E(new M("operation-not-supported-in-this-environment"));var b=this,c=Zf(a.providerId),d=Ge(),e=null;(!Je()||ye())&&S(this).options.authDomain&&a.isOAuthProvider&&(e=Bj(S(this).options.authDomain,S(this).options.apiKey,S(this).name,"signInViaPopup",a,null,d,firebase.SDK_VERSION||null,null,null,this.R()));var f=pe(e,c&&c.sa,c&&c.ra);c=Sm(this).then(function(g){return ol(g,f,"signInViaPopup",a,d,!!e,b.R())}).then(function(){return new B(function(g,h){b.ja("signInViaPopup",
  null,new M("cancelled-popup-request"),b.g);b.f=g;b.v=h;b.g=d;b.c=ql(b.a,b,"signInViaPopup",f,d);})}).then(function(g){f&&oe(f);return g?$e(g):null}).s(function(g){f&&oe(f);throw g;});return T(this,c)};k.Mc=function(a){if(!He())return E(new M("operation-not-supported-in-this-environment"));var b=this,c=Sm(this).then(function(){return Gm(b.h)}).then(function(){return pl(b.a,"signInViaRedirect",a,void 0,b.R())});return T(this,c)};
  function Um(a){if(!He())return E(new M("operation-not-supported-in-this-environment"));var b=Sm(a).then(function(){return a.a.oa()}).then(function(c){return c?$e(c):null});return T(a,b)}k.oa=function(){var a=this;return Um(this).then(function(b){a.a&&vl(a.a.b);return b}).s(function(b){a.a&&vl(a.a.b);throw b;})};
  k.Rc=function(a){if(!a)return E(new M("null-user"));if(this.P!=a.tenantId)return E(new M("tenant-id-mismatch"));var b=this,c={};c.apiKey=S(this).options.apiKey;c.authDomain=S(this).options.authDomain;c.appName=S(this).name;var d=xm(a,c,b.w,b.Ca());return T(this,this.i.then(function(){if(S(b).options.apiKey!=a.l)return d.reload()}).then(function(){if(U(b)&&a.uid==U(b).uid)return hm(U(b),a),b.aa(a);Lm(b,d);am(d);return b.aa(d)}).then(function(){Vm(b);}))};
  function Tm(a,b){var c={};c.apiKey=S(a).options.apiKey;c.authDomain=S(a).options.authDomain;c.appName=S(a).name;return a.Y.then(function(){return wm(c,b,a.w,a.Ca())}).then(function(d){if(U(a)&&d.uid==U(a).uid)return hm(U(a),d),a.aa(d);Lm(a,d);am(d);return a.aa(d)}).then(function(){Vm(a);})}
  function Lm(a,b){U(a)&&(Zl(U(a),a.ub),fd(U(a),"tokenChanged",a.wa),fd(U(a),"userDeleted",a.xa),fd(U(a),"userInvalidated",a.Ja),Yl(U(a)));b&&(b.O.push(a.ub),Wc(b,"tokenChanged",a.wa),Wc(b,"userDeleted",a.xa),Wc(b,"userInvalidated",a.Ja),0<a.o&&Xl(b));K(a,"currentUser",b);b&&(b.ua(a.ha()),Ul(b,a),Tl(b,a.I),Vl(b,a));}k.pb=function(){var a=this,b=this.i.then(function(){a.a&&vl(a.a.b);if(!U(a))return D();Lm(a,null);return Im(a.h).then(function(){Vm(a);})});return T(this,b)};
  function Wm(a){var b=zm(a.w,S(a).options.authDomain).then(function(c){if(a.B=c)c.da=a.w;return tm(a.w)});return T(a,b)}function Mm(a){var b=S(a).options.authDomain,c=Wm(a).then(function(){return Jm(a.h,b)}).then(function(d){return d?(d.da=a.w,a.B&&(a.B.ca||null)==(d.ca||null)?d:d.reload().then(function(){return Hm(a.h,d).then(function(){return d})}).s(function(e){return "auth/network-request-failed"==e.code?d:Im(a.h)})):null}).then(function(d){Lm(a,d||null);});return T(a,c)}
  function Nm(a){return a.Y.then(function(){return Um(a)}).s(function(){}).then(function(){if(!a.l)return a.ma()}).s(function(){}).then(function(){if(!a.l){a.ga=!0;var b=a.h;b.b.addListener(Cm("local"),b.a,a.ma);}})}
  k.Nc=function(){var a=this;return Jm(this.h,S(this).options.authDomain).then(function(b){if(!a.l){var c;if(c=U(a)&&b){c=U(a).uid;var d=b.uid;c=void 0===c||null===c||""===c||void 0===d||null===d||""===d?!1:c==d;}if(c)return hm(U(a),b),U(a).G();if(U(a)||b)Lm(a,b),b&&(am(b),b.da=a.w),a.a&&kl(a.a,a),Vm(a);}})};k.aa=function(a){return Hm(this.h,a)};k.bc=function(){Vm(this);this.aa(U(this));};k.mc=function(){this.pb();};k.nc=function(){this.pb();};
  function Xm(a,b){var c=null,d=null;return T(a,b.then(function(e){c=Wg(e);d=$f(e);return Tm(a,e)}).then(function(){return $e({user:U(a),credential:c,additionalUserInfo:d,operationType:"signIn"})}))}k.oc=function(a){var b=this;this.addAuthTokenListener(function(){a.next(U(b));});};k.pc=function(a){var b=this;Ym(this,function(){a.next(U(b));});};k.xc=function(a,b,c){var d=this;this.ga&&Promise.resolve().then(function(){q(a)?a(U(d)):q(a.next)&&a.next(U(d));});return this.Ub(a,b,c)};
  k.wc=function(a,b,c){var d=this;this.ga&&Promise.resolve().then(function(){d.W=d.getUid();q(a)?a(U(d)):q(a.next)&&a.next(U(d));});return this.Vb(a,b,c)};k.cc=function(a){var b=this,c=this.i.then(function(){return U(b)?U(b).G(a).then(function(d){return {accessToken:d}}):null});return T(this,c)};k.Hc=function(a){var b=this;return this.i.then(function(){return Xm(b,P(b.b,ij,{token:a}))}).then(function(c){var d=c.user;gm(d,"isAnonymous",!1);b.aa(d);return c})};
  k.Ic=function(a,b){var c=this;return this.i.then(function(){return Xm(c,P(c.b,Ig,{email:a,password:b}))})};k.Xb=function(a,b){var c=this;return this.i.then(function(){return Xm(c,P(c.b,ej,{email:a,password:b}))})};k.Sa=function(a){var b=this;return this.i.then(function(){return Xm(b,a.na(b.b))})};k.Gc=function(a){Xe("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead.");return this.Sa(a)};
  k.ob=function(){var a=this;return this.i.then(function(){var b=U(a);if(b&&b.isAnonymous){var c=$e({providerId:null,isNewUser:!1});return $e({user:b,credential:null,additionalUserInfo:c,operationType:"signIn"})}return Xm(a,a.b.ob()).then(function(d){var e=d.user;gm(e,"isAnonymous",!0);a.aa(e);return d})})};function S(a){return a.app}function U(a){return a.currentUser}k.getUid=function(){return U(this)&&U(this).uid||null};function Zm(a){return U(a)&&U(a)._lat||null}
  function Vm(a){if(a.ga){for(var b=0;b<a.m.length;b++)if(a.m[b])a.m[b](Zm(a));if(a.W!==a.getUid()&&a.J.length)for(a.W=a.getUid(),b=0;b<a.J.length;b++)if(a.J[b])a.J[b](Zm(a));}}k.Wb=function(a){this.addAuthTokenListener(a);this.o++;0<this.o&&U(this)&&Xl(U(this));};k.Ec=function(a){var b=this;x(this.m,function(c){c==a&&b.o--;});0>this.o&&(this.o=0);0==this.o&&U(this)&&Yl(U(this));this.removeAuthTokenListener(a);};
  k.addAuthTokenListener=function(a){var b=this;this.m.push(a);T(this,this.i.then(function(){b.l||Na(b.m,a)&&a(Zm(b));}));};k.removeAuthTokenListener=function(a){Pa(this.m,function(b){return b==a});};function Ym(a,b){a.J.push(b);T(a,a.i.then(function(){!a.l&&Na(a.J,b)&&a.W!==a.getUid()&&(a.W=a.getUid(),b(Zm(a)));}));}
  k.delete=function(){this.l=!0;for(var a=0;a<this.O.length;a++)this.O[a].cancel("app-deleted");this.O=[];this.h&&(a=this.h,a.b.removeListener(Cm("local"),a.a,this.ma));this.a&&(ll(this.a,this),vl(this.a.b));return Promise.resolve()};function T(a,b){a.O.push(b);b.ka(function(){Oa(a.O,b);});return b}k.$b=function(a){return T(this,Ei(this.b,a))};k.qc=function(a){return !!Ng(a)};
  k.lb=function(a,b){var c=this;return T(this,D().then(function(){var d=new zf(b);if(!d.c)throw new M("argument-error",Hf+" must be true when sending sign in link to email");return Jf(d)}).then(function(d){return c.b.lb(a,d)}).then(function(){}))};k.Uc=function(a){return this.Ma(a).then(function(b){return b.data.email})};k.ab=function(a,b){return T(this,this.b.ab(a,b).then(function(){}))};k.Ma=function(a){return T(this,this.b.Ma(a).then(function(b){return new df(b)}))};
  k.Ya=function(a){return T(this,this.b.Ya(a).then(function(){}))};k.kb=function(a,b){var c=this;return T(this,D().then(function(){return "undefined"===typeof b||Ta(b)?{}:Jf(new zf(b))}).then(function(d){return c.b.kb(a,d)}).then(function(){}))};k.Kc=function(a,b){return T(this,Cl(this,a,b,t(this.Sa,this)))};
  k.Jc=function(a,b){var c=this;return T(this,D().then(function(){var d=b||he(),e=Mg(a,d);d=Ng(d);if(!d)throw new M("argument-error","Invalid email link!");if(d.tenantId!==c.R())throw new M("tenant-id-mismatch");return c.Sa(e)}))};function $m(){}$m.prototype.render=function(){};$m.prototype.reset=function(){};$m.prototype.getResponse=function(){};$m.prototype.execute=function(){};function an(){this.a={};this.b=1E12;}var bn=null;an.prototype.render=function(a,b){this.a[this.b.toString()]=new cn(a,b);return this.b++};an.prototype.reset=function(a){var b=dn(this,a);a=en(a);b&&a&&(b.delete(),delete this.a[a]);};an.prototype.getResponse=function(a){return (a=dn(this,a))?a.getResponse():null};an.prototype.execute=function(a){(a=dn(this,a))&&a.execute();};function dn(a,b){return (b=en(b))?a.a[b]||null:null}function en(a){return (a="undefined"===typeof a?1E12:a)?a.toString():null}
  function cn(a,b){this.g=!1;this.c=b;this.a=this.b=null;this.h="invisible"!==this.c.size;this.f=Vd(a);var c=this;this.i=function(){c.execute();};this.h?this.execute():Wc(this.f,"click",this.i);}cn.prototype.getResponse=function(){fn(this);return this.b};
  cn.prototype.execute=function(){fn(this);var a=this;this.a||(this.a=setTimeout(function(){a.b=Ce();var b=a.c.callback,c=a.c["expired-callback"];if(b)try{b(a.b);}catch(d){}a.a=setTimeout(function(){a.a=null;a.b=null;if(c)try{c();}catch(d){}a.h&&a.execute();},6E4);},500));};cn.prototype.delete=function(){fn(this);this.g=!0;clearTimeout(this.a);this.a=null;fd(this.f,"click",this.i);};function fn(a){if(a.g)throw Error("reCAPTCHA mock was already deleted!");}function gn(){}gn.prototype.g=function(){bn||(bn=new an);return D(bn)};gn.prototype.c=function(){};var hn=null;function jn(){this.b=l.grecaptcha?Infinity:0;this.f=null;this.a="__rcb"+Math.floor(1E6*Math.random()).toString();}var kn=new Xa(Ya,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),ln=new Pe(3E4,6E4);
  jn.prototype.g=function(a){var b=this;return new B(function(c,d){var e=setTimeout(function(){d(new M("network-request-failed"));},ln.get());if(!l.grecaptcha||a!==b.f&&!b.b){l[b.a]=function(){if(l.grecaptcha){b.f=a;var g=l.grecaptcha.render;l.grecaptcha.render=function(h,m){h=g(h,m);b.b++;return h};clearTimeout(e);c(l.grecaptcha);}else clearTimeout(e),d(new M("internal-error"));delete l[b.a];};var f=eb(kn,{onload:b.a,hl:a||""});D(gi(f)).s(function(){clearTimeout(e);d(new M("internal-error","Unable to load external reCAPTCHA dependencies!"));});}else clearTimeout(e),
  c(l.grecaptcha);})};jn.prototype.c=function(){this.b--;};var mn=null;function nn(a,b,c,d,e,f,g){K(this,"type","recaptcha");this.c=this.f=null;this.B=!1;this.u=b;this.g=null;g?(hn||(hn=new gn),g=hn):(mn||(mn=new jn),g=mn);this.m=g;this.a=c||{theme:"light",type:"image"};this.h=[];if(this.a[on])throw new M("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");this.i="invisible"===this.a[pn];if(!l.document)throw new M("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
  if(!Vd(b)||!this.i&&Vd(b).hasChildNodes())throw new M("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.o=new ni(a,f||null,e||null);this.v=d||function(){return null};var h=this;this.l=[];var m=this.a[qn];this.a[qn]=function(u){rn(h,u);if("function"===typeof m)m(u);else if("string"===typeof m){var A=J(m,l);"function"===typeof A&&A(u);}};var p=this.a[sn];this.a[sn]=function(){rn(h,null);if("function"===typeof p)p();else if("string"===typeof p){var u=
  J(p,l);"function"===typeof u&&u();}};}var qn="callback",sn="expired-callback",on="sitekey",pn="size";function rn(a,b){for(var c=0;c<a.l.length;c++)try{a.l[c](b);}catch(d){}}function tn(a,b){Pa(a.l,function(c){return c==b});}function un(a,b){a.h.push(b);b.ka(function(){Oa(a.h,b);});return b}k=nn.prototype;
  k.Da=function(){var a=this;return this.f?this.f:this.f=un(this,D().then(function(){if(Ie()&&!ze())return ue();throw new M("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");}).then(function(){return a.m.g(a.v())}).then(function(b){a.g=b;return P(a.o,hj,{})}).then(function(b){a.a[on]=b.recaptchaSiteKey;}).s(function(b){a.f=null;throw b;}))};
  k.render=function(){vn(this);var a=this;return un(this,this.Da().then(function(){if(null===a.c){var b=a.u;if(!a.i){var c=Vd(b);b=Yd("DIV");c.appendChild(b);}a.c=a.g.render(b,a.a);}return a.c}))};k.verify=function(){vn(this);var a=this;return un(this,this.render().then(function(b){return new B(function(c){var d=a.g.getResponse(b);if(d)c(d);else{var e=function(f){f&&(tn(a,e),c(f));};a.l.push(e);a.i&&a.g.execute(a.c);}})}))};k.reset=function(){vn(this);null!==this.c&&this.g.reset(this.c);};
  function vn(a){if(a.B)throw new M("internal-error","RecaptchaVerifier instance has been destroyed.");}k.clear=function(){vn(this);this.B=!0;this.m.c();for(var a=0;a<this.h.length;a++)this.h[a].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){a=Vd(this.u);for(var b;b=a.firstChild;)a.removeChild(b);}};
  function wn(a,b,c){var d=!1;try{this.b=c||firebase.app();}catch(g){throw new M("argument-error","No firebase.app.App instance is currently initialized.");}if(this.b.options&&this.b.options.apiKey)c=this.b.options.apiKey;else throw new M("invalid-api-key");var e=this,f=null;try{f=this.b.auth().Ca();}catch(g){}try{d=this.b.auth().settings.appVerificationDisabledForTesting;}catch(g){}f=firebase.SDK_VERSION?Ee(firebase.SDK_VERSION,f):null;nn.call(this,c,a,b,function(){try{var g=e.b.auth().ha();}catch(h){g=
  null;}return g},f,Uf(Vf),d);}v(wn,nn);function xn(a,b,c,d){a:{c=Array.prototype.slice.call(c);var e=0;for(var f=!1,g=0;g<b.length;g++)if(b[g].optional)f=!0;else{if(f)throw new M("internal-error","Argument validator encountered a required argument after an optional argument.");e++;}f=b.length;if(c.length<e||f<c.length)d="Expected "+(e==f?1==e?"1 argument":e+" arguments":e+"-"+f+" arguments")+" but got "+c.length+".";else{for(e=0;e<c.length;e++)if(f=b[e].optional&&void 0===c[e],!b[e].N(c[e])&&!f){b=b[e];if(0>e||e>=yn.length)throw new M("internal-error",
  "Argument validator received an unsupported number of arguments.");c=yn[e];d=(d?"":c+" argument ")+(b.name?'"'+b.name+'" ':"")+"must be "+b.M+".";break a}d=null;}}if(d)throw new M("argument-error",a+" failed: "+d);}var yn="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function V(a,b){return {name:a||"",M:"a valid string",optional:!!b,N:n}}function zn(a,b){return {name:a||"",M:"a boolean",optional:!!b,N:ha}}
  function W(a,b){return {name:a||"",M:"a valid object",optional:!!b,N:r}}function An(a,b){return {name:a||"",M:"a function",optional:!!b,N:q}}function Bn(a,b){return {name:a||"",M:"null",optional:!!b,N:ma}}function Cn(){return {name:"",M:"an HTML element",optional:!1,N:function(a){return !!(a&&a instanceof Element)}}}function Dn(){return {name:"auth",M:"an instance of Firebase Auth",optional:!0,N:function(a){return !!(a&&a instanceof Km)}}}
  function En(){return {name:"app",M:"an instance of Firebase App",optional:!0,N:function(a){return !!(a&&a instanceof firebase.app.App)}}}function Fn(a){return {name:a?a+"Credential":"credential",M:a?"a valid "+a+" credential":"a valid credential",optional:!1,N:function(b){if(!b)return !1;var c=!a||b.providerId===a;return !(!b.na||!c)}}}
  function Gn(){return {name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(a){return !!(a&&a.providerId&&a.hasOwnProperty&&a.hasOwnProperty("isOAuthProvider"))}}}function Hn(){return {name:"applicationVerifier",M:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,N:function(a){return !!(a&&n(a.type)&&q(a.verify))}}}function X(a,b,c,d){return {name:c||"",M:a.M+" or "+b.M,optional:!!d,N:function(e){return a.N(e)||b.N(e)}}}function Y(a,b){for(var c in b){var d=b[c].name;a[d]=In(d,a[c],b[c].j);}}function Jn(a,b){for(var c in b){var d=b[c].name;d!==c&&Object.defineProperty(a,d,{get:ta(function(e){return this[e]},c),set:ta(function(e,f,g,h){xn(e,[g],[h],!0);this[f]=h;},d,c,b[c].Za),enumerable:!0});}}function Z(a,b,c,d){a[b]=In(b,c,d);}
  function In(a,b,c){function d(){var g=Array.prototype.slice.call(arguments);xn(e,c,g);return b.apply(this,g)}if(!c)return b;var e=Kn(a),f;for(f in b)d[f]=b[f];for(f in b.prototype)d.prototype[f]=b.prototype[f];return d}function Kn(a){a=a.split(".");return a[a.length-1]}Y(Km.prototype,{Ya:{name:"applyActionCode",j:[V("code")]},Ma:{name:"checkActionCode",j:[V("code")]},ab:{name:"confirmPasswordReset",j:[V("code"),V("newPassword")]},Xb:{name:"createUserWithEmailAndPassword",j:[V("email"),V("password")]},$b:{name:"fetchSignInMethodsForEmail",j:[V("email")]},oa:{name:"getRedirectResult",j:[]},qc:{name:"isSignInWithEmailLink",j:[V("emailLink")]},wc:{name:"onAuthStateChanged",j:[X(W(),An(),"nextOrObserver"),An("opt_error",!0),An("opt_completed",!0)]},xc:{name:"onIdTokenChanged",
  j:[X(W(),An(),"nextOrObserver"),An("opt_error",!0),An("opt_completed",!0)]},kb:{name:"sendPasswordResetEmail",j:[V("email"),X(W("opt_actionCodeSettings",!0),Bn(null,!0),"opt_actionCodeSettings",!0)]},lb:{name:"sendSignInLinkToEmail",j:[V("email"),W("actionCodeSettings")]},mb:{name:"setPersistence",j:[V("persistence")]},Gc:{name:"signInAndRetrieveDataWithCredential",j:[Fn()]},ob:{name:"signInAnonymously",j:[]},Sa:{name:"signInWithCredential",j:[Fn()]},Hc:{name:"signInWithCustomToken",j:[V("token")]},
  Ic:{name:"signInWithEmailAndPassword",j:[V("email"),V("password")]},Jc:{name:"signInWithEmailLink",j:[V("email"),V("emailLink",!0)]},Kc:{name:"signInWithPhoneNumber",j:[V("phoneNumber"),Hn()]},Lc:{name:"signInWithPopup",j:[Gn()]},Mc:{name:"signInWithRedirect",j:[Gn()]},Rc:{name:"updateCurrentUser",j:[X(function(a){return {name:"user",M:"an instance of Firebase User",optional:!!a,N:function(b){return !!(b&&b instanceof Q)}}}(),Bn(),"user")]},pb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[V(null,!0)]},
  Tc:{name:"useDeviceLanguage",j:[]},Uc:{name:"verifyPasswordResetCode",j:[V("code")]}});Jn(Km.prototype,{lc:{name:"languageCode",Za:X(V(),Bn(),"languageCode")},ti:{name:"tenantId",Za:X(V(),Bn(),"tenantId")}});Km.Persistence=nk;Km.Persistence.LOCAL="local";Km.Persistence.SESSION="session";Km.Persistence.NONE="none";
  Y(Q.prototype,{"delete":{name:"delete",j:[]},dc:{name:"getIdTokenResult",j:[zn("opt_forceRefresh",!0)]},G:{name:"getIdToken",j:[zn("opt_forceRefresh",!0)]},rc:{name:"linkAndRetrieveDataWithCredential",j:[Fn()]},fb:{name:"linkWithCredential",j:[Fn()]},sc:{name:"linkWithPhoneNumber",j:[V("phoneNumber"),Hn()]},tc:{name:"linkWithPopup",j:[Gn()]},uc:{name:"linkWithRedirect",j:[Gn()]},Ac:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Fn()]},hb:{name:"reauthenticateWithCredential",j:[Fn()]},Bc:{name:"reauthenticateWithPhoneNumber",
  j:[V("phoneNumber"),Hn()]},Cc:{name:"reauthenticateWithPopup",j:[Gn()]},Dc:{name:"reauthenticateWithRedirect",j:[Gn()]},reload:{name:"reload",j:[]},jb:{name:"sendEmailVerification",j:[X(W("opt_actionCodeSettings",!0),Bn(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[V(null,!0)]},Qc:{name:"unlink",j:[V("provider")]},rb:{name:"updateEmail",j:[V("email")]},sb:{name:"updatePassword",j:[V("password")]},Sc:{name:"updatePhoneNumber",j:[Fn("phone")]},tb:{name:"updateProfile",j:[W("profile")]}});
  Y(an.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}});Y($m.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}});Y(B.prototype,{ka:{name:"finally"},s:{name:"catch"},then:{name:"then"}});Jn(Al.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",Za:zn("appVerificationDisabledForTesting")}});Y(Bl.prototype,{confirm:{name:"confirm",j:[V("verificationCode")]}});
  Z(jg,"fromJSON",function(a){a=n(a)?JSON.parse(a):a;for(var b,c=[ug,Lg,Sg,rg],d=0;d<c.length;d++)if(b=c[d](a))return b;return null},[X(V(),W(),"json")]);Z(Gg,"credential",function(a,b){return new Fg(a,b)},[V("email"),V("password")]);Y(Fg.prototype,{A:{name:"toJSON",j:[V(null,!0)]}});Y(xg.prototype,{ya:{name:"addScope",j:[V("scope")]},Ga:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(xg,"credential",yg,[X(V(),W(),"token")]);Z(Gg,"credentialWithLink",Mg,[V("email"),V("emailLink")]);
  Y(zg.prototype,{ya:{name:"addScope",j:[V("scope")]},Ga:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(zg,"credential",Ag,[X(V(),W(),"token")]);Y(Bg.prototype,{ya:{name:"addScope",j:[V("scope")]},Ga:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Bg,"credential",Cg,[X(V(),X(W(),Bn()),"idToken"),X(V(),Bn(),"accessToken",!0)]);Y(Dg.prototype,{Ga:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Dg,"credential",Eg,[X(V(),W(),"token"),V("secret",!0)]);
  Y(O.prototype,{ya:{name:"addScope",j:[V("scope")]},credential:{name:"credential",j:[X(V(),X(W(),Bn()),"optionsOrIdToken"),X(V(),Bn(),"accessToken",!0)]},Ga:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Y(sg.prototype,{A:{name:"toJSON",j:[V(null,!0)]}});Y(mg.prototype,{A:{name:"toJSON",j:[V(null,!0)]}});Z(Tg,"credential",Vg,[V("verificationId"),V("verificationCode")]);Y(Tg.prototype,{Wa:{name:"verifyPhoneNumber",j:[V("phoneNumber"),Hn()]}});
  Y(Og.prototype,{A:{name:"toJSON",j:[V(null,!0)]}});Y(M.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(dh.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(ch.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(wn.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}});Z(qf,"parseLink",yf,[V("link")]);
  (function(){if("undefined"!==typeof firebase&&firebase.INTERNAL&&firebase.INTERNAL.registerService){var a={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:hf,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:Km,AuthCredential:jg,Error:M};Z(a,"EmailAuthProvider",Gg,[]);Z(a,"FacebookAuthProvider",xg,[]);Z(a,"GithubAuthProvider",zg,[]);Z(a,"GoogleAuthProvider",Bg,[]);Z(a,"TwitterAuthProvider",Dg,[]);Z(a,"OAuthProvider",O,[V("providerId")]);Z(a,"SAMLAuthProvider",
  wg,[V("providerId")]);Z(a,"PhoneAuthProvider",Tg,[Dn()]);Z(a,"RecaptchaVerifier",wn,[X(V(),Cn(),"recaptchaContainer"),W("recaptchaParameters",!0),En()]);Z(a,"ActionCodeURL",qf,[]);firebase.INTERNAL.registerService("auth",function(b,c){b=new Km(b);c({INTERNAL:{getUid:t(b.getUid,b),getToken:t(b.cc,b),addAuthTokenListener:t(b.Wb,b),removeAuthTokenListener:t(b.Ec,b)}});return b},a,function(b,c){if("create"===b)try{c.auth();}catch(d){}});firebase.INTERNAL.extendNamespace({User:Q});}else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");
  })();}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});

  //# sourceMappingURL=auth.esm.js.map

  var firebaseConfig = {
    apiKey: 'AIzaSyBSDQTQrnklilGdmyZcEXMGhIwg0dFpNlY',
    authDomain: 'thought-segmentation.firebaseapp.com',
    databaseURL: 'https://thought-segmentation.firebaseio.com',
    projectId: 'thought-segmentation',
    storageBucket: 'thought-segmentation.appspot.com',
    messagingSenderId: '456731753647',
    appId: '1:456731753647:web:079b4e850e4c03f2e1a85a'
  };
  index_cjs$2.initializeApp(firebaseConfig); // Export firebase globals for use elsewhere in the app

  var db = index_cjs$2.database();
  var storage = index_cjs$2.storage();
  var auth = index_cjs$2.auth();
  var serverTime = index_cjs$2.database.ServerValue.TIMESTAMP; // Functions to parse the URL to get workerID, hitID, and assignmentID

  var unescapeURL = function unescapeURL(s) {
    return decodeURIComponent(s.replace(/\+/g, '%20'));
  };

  var getURLParams = function getURLParams() {
    var params = {};
    var m = window.location.href.match(/[\\?&]([^=]+)=([^&#]*)/g);

    if (m) {
      var i = 0;

      while (i < m.length) {
        var a = m[i].match(/.([^=]+)=(.*)/);
        params[unescapeURL(a[1])] = unescapeURL(a[2]);
        i += 1;
      }
    }

    if (!params.workerId && !params.assignmentId && !params.hitId) {
      params.workerId = 'test-worker';
      params.assignmentId = 'test-assignment';
      params.hitId = 'test-hit';
    }

    return params;
  }; // Use those functions to get the window URL params and make them available throughout the app


  var params = getURLParams(); // Shuffle array elements inplace: https://javascript.info/task/shuffle

  var fisherYatesShuffle = function fisherYatesShuffle(array) {
    for (var i = array.length - 1; i > 0; i -= 1) {
      var j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i
      // swap elements array[i] and array[j]
      // we use "destructuring assignment" syntax to achieve that
      // you'll find more details about that syntax in later chapters
      // same can be written as:
      // let t = array[i]; array[i] = array[j]; array[j] = t
      // eslint-disable-next-line no-param-reassign

      var _ref = [array[j], array[i]];
      array[i] = _ref[0];
      array[j] = _ref[1];
    }
  };

  var file = "src/pages/Instructions.svelte"; // (72:14) {:else}

  function create_else_block(ctx) {
    var span;
    var i;
    var block = {
      c: function create() {
        span = element("span");
        i = element("i");
        attr_dev(i, "class", "fas fa-forward");
        add_location(i, file, 73, 18, 3420);
        attr_dev(span, "class", "icon");
        add_location(span, file, 72, 16, 3382);
      },
      m: function mount(target, anchor) {
        insert_dev(target, span, anchor);
        append_dev(span, i);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(span);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_else_block.name,
      type: "else",
      source: "(72:14) {:else}",
      ctx: ctx
    });
    return block;
  } // (70:14) {#if currentPage === instructions.length - 1}


  function create_if_block(ctx) {
    var t;
    var block = {
      c: function create() {
        t = text("Try Practice");
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(t);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block.name,
      type: "if",
      source: "(70:14) {#if currentPage === instructions.length - 1}",
      ctx: ctx
    });
    return block;
  }

  function create_fragment(ctx) {
    var div6;
    var div5;
    var div4;
    var div3;
    var div0;
    var h1;
    var t1;
    var hr;
    var t2;
    var div2;
    var div1;
    var raw_value = ctx.instructions[ctx.currentPage] + "";
    var t3;
    var footer;
    var p0;
    var button0;
    var span;
    var i;
    var t4;
    var p1;
    var button1;
    var dispose;

    function select_block_type(changed, ctx) {
      if (ctx.currentPage === ctx.instructions.length - 1) return create_if_block;
      return create_else_block;
    }

    var current_block_type = select_block_type(null, ctx);
    var if_block = current_block_type(ctx);
    var block = {
      c: function create() {
        div6 = element("div");
        div5 = element("div");
        div4 = element("div");
        div3 = element("div");
        div0 = element("div");
        h1 = element("h1");
        h1.textContent = "Instructions";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div2 = element("div");
        div1 = element("div");
        t3 = space();
        footer = element("footer");
        p0 = element("p");
        button0 = element("button");
        span = element("span");
        i = element("i");
        t4 = space();
        p1 = element("p");
        button1 = element("button");
        if_block.c();
        attr_dev(h1, "class", "title is-2 custom-card-title svelte-1czeazl");
        add_location(h1, file, 51, 10, 2600);
        attr_dev(hr, "class", "no-space-hr svelte-1czeazl");
        add_location(hr, file, 52, 10, 2669);
        attr_dev(div0, "class", "has-text-centered");
        add_location(div0, file, 50, 8, 2558);
        attr_dev(div1, "class", "content");
        add_location(div1, file, 55, 10, 2756);
        attr_dev(div2, "class", "card-content");
        add_location(div2, file, 54, 8, 2719);
        attr_dev(i, "class", "fas fa-backward");
        add_location(i, file, 63, 16, 3055);
        attr_dev(span, "class", "icon");
        add_location(span, file, 62, 14, 3019);
        attr_dev(button0, "class", "button is-link controls svelte-1czeazl");
        add_location(button0, file, 61, 12, 2944);
        attr_dev(p0, "class", "card-footer-item");
        add_location(p0, file, 60, 10, 2903);
        attr_dev(button1, "class", "button is-link controls svelte-1czeazl");
        add_location(button1, file, 68, 12, 3195);
        attr_dev(p1, "class", "card-footer-item");
        add_location(p1, file, 67, 10, 3154);
        attr_dev(footer, "class", "card-footer");
        add_location(footer, file, 59, 8, 2864);
        attr_dev(div3, "class", "card");
        add_location(div3, file, 49, 6, 2531);
        attr_dev(div4, "class", "column is-three-fifths ");
        add_location(div4, file, 48, 4, 2487);
        attr_dev(div5, "class", "columns is-centered");
        add_location(div5, file, 47, 2, 2449);
        attr_dev(div6, "class", "container");
        add_location(div6, file, 46, 0, 2423);
        dispose = [listen_dev(button0, "click", ctx.backward, false, false, false), listen_dev(button1, "click", ctx.forward, false, false, false)];
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, div6, anchor);
        append_dev(div6, div5);
        append_dev(div5, div4);
        append_dev(div4, div3);
        append_dev(div3, div0);
        append_dev(div0, h1);
        append_dev(div0, t1);
        append_dev(div0, hr);
        append_dev(div3, t2);
        append_dev(div3, div2);
        append_dev(div2, div1);
        div1.innerHTML = raw_value;
        append_dev(div3, t3);
        append_dev(div3, footer);
        append_dev(footer, p0);
        append_dev(p0, button0);
        append_dev(button0, span);
        append_dev(span, i);
        append_dev(footer, t4);
        append_dev(footer, p1);
        append_dev(p1, button1);
        if_block.m(button1, null);
      },
      p: function update(changed, ctx) {
        if (changed.currentPage && raw_value !== (raw_value = ctx.instructions[ctx.currentPage] + "")) div1.innerHTML = raw_value;

        if (current_block_type !== (current_block_type = select_block_type(changed, ctx))) {
          if_block.d(1);
          if_block = current_block_type(ctx);

          if (if_block) {
            if_block.c();
            if_block.m(button1, null);
          }
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(div6);
        if_block.d();
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance($$self, $$props, $$invalidate) {
    var instructions = ["In this task, you will listen to a series of audio recordings (~2 min) in which you will hear people describing characters from a television drama. The goal of this task is to divide the audio into separate speech segments or thoughts.<br><br> While listening, pay close attention to where there are natural breaks in the person's speech, demarcating a separate thought.", "You will be able to play and pause each recording using buttons on screen. Click the Tag Thought button to tag a speech segment that you feel represents a complete thought. You can adjust the start and end times of the segment by dragging the sliders on the audio waveform. As you listen keep tagging new thoughts as you detect them.<br><br>You can always go back and edit segments by clicking on them in the table below the controls.", "When you are finished with a recording click the Finish button to move onto the next recording. You will complete a total of <b>N</b> recordings for this HIT.", "If these instructions make sense click the button below to try a practice trial. Otherwise feel free to go back through the instructions to make sure you understand this task"];
    var dispatch = createEventDispatcher();
    var currentPage = 0;

    var backward = function backward() {
      $$invalidate("currentPage", currentPage -= 1);
      $$invalidate("currentPage", currentPage = Math.max(currentPage, 0));
    };

    var forward = function forward() {
      if (currentPage + 1 === instructions.length) {
        dispatch("finished");
      } else {
        $$invalidate("currentPage", currentPage += 1);
        $$invalidate("currentPage", currentPage = Math.min(currentPage, instructions.length - 1));
      }
    };

    $$self.$capture_state = function () {
      return {};
    };

    $$self.$inject_state = function ($$props) {
      if ("currentPage" in $$props) $$invalidate("currentPage", currentPage = $$props.currentPage);
    };

    return {
      instructions: instructions,
      currentPage: currentPage,
      backward: backward,
      forward: forward
    };
  }

  var Instructions =
  /*#__PURE__*/
  function (_SvelteComponentDev) {
    _inherits(Instructions, _SvelteComponentDev);

    function Instructions(options) {
      var _this;

      _classCallCheck(this, Instructions);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Instructions).call(this, options));
      init(_assertThisInitialized(_this), options, instance, create_fragment, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: _assertThisInitialized(_this),
        tagName: "Instructions",
        options: options,
        id: create_fragment.name
      });
      return _this;
    }

    return Instructions;
  }(SvelteComponentDev);

  var nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f;

  var toString$1 = {}.toString;

  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
    ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function (it) {
    try {
      return nativeGetOwnPropertyNames(it);
    } catch (error) {
      return windowNames.slice();
    }
  };

  // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
  var f$6 = function getOwnPropertyNames(it) {
    return windowNames && toString$1.call(it) == '[object Window]'
      ? getWindowNames(it)
      : nativeGetOwnPropertyNames(toIndexedObject(it));
  };

  var objectGetOwnPropertyNamesExternal = {
  	f: f$6
  };

  var f$7 = wellKnownSymbol;

  var wrappedWellKnownSymbol = {
  	f: f$7
  };

  var defineProperty$3 = objectDefineProperty.f;

  var defineWellKnownSymbol = function (NAME) {
    var Symbol = path.Symbol || (path.Symbol = {});
    if (!has(Symbol, NAME)) defineProperty$3(Symbol, NAME, {
      value: wrappedWellKnownSymbol.f(NAME)
    });
  };

  var $forEach$1 = arrayIteration.forEach;

  var HIDDEN = sharedKey('hidden');
  var SYMBOL = 'Symbol';
  var PROTOTYPE$1 = 'prototype';
  var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
  var setInternalState$4 = internalState.set;
  var getInternalState$3 = internalState.getterFor(SYMBOL);
  var ObjectPrototype$1 = Object[PROTOTYPE$1];
  var $Symbol = global_1.Symbol;
  var $stringify = getBuiltIn('JSON', 'stringify');
  var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
  var nativeDefineProperty$1 = objectDefineProperty.f;
  var nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f;
  var nativePropertyIsEnumerable$1 = objectPropertyIsEnumerable.f;
  var AllSymbols = shared('symbols');
  var ObjectPrototypeSymbols = shared('op-symbols');
  var StringToSymbolRegistry = shared('string-to-symbol-registry');
  var SymbolToStringRegistry = shared('symbol-to-string-registry');
  var WellKnownSymbolsStore$1 = shared('wks');
  var QObject = global_1.QObject;
  // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
  var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild;

  // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
  var setSymbolDescriptor = descriptors && fails(function () {
    return objectCreate(nativeDefineProperty$1({}, 'a', {
      get: function () { return nativeDefineProperty$1(this, 'a', { value: 7 }).a; }
    })).a != 7;
  }) ? function (O, P, Attributes) {
    var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype$1, P);
    if (ObjectPrototypeDescriptor) delete ObjectPrototype$1[P];
    nativeDefineProperty$1(O, P, Attributes);
    if (ObjectPrototypeDescriptor && O !== ObjectPrototype$1) {
      nativeDefineProperty$1(ObjectPrototype$1, P, ObjectPrototypeDescriptor);
    }
  } : nativeDefineProperty$1;

  var wrap = function (tag, description) {
    var symbol = AllSymbols[tag] = objectCreate($Symbol[PROTOTYPE$1]);
    setInternalState$4(symbol, {
      type: SYMBOL,
      tag: tag,
      description: description
    });
    if (!descriptors) symbol.description = description;
    return symbol;
  };

  var isSymbol = nativeSymbol && typeof $Symbol.iterator == 'symbol' ? function (it) {
    return typeof it == 'symbol';
  } : function (it) {
    return Object(it) instanceof $Symbol;
  };

  var $defineProperty = function defineProperty(O, P, Attributes) {
    if (O === ObjectPrototype$1) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
    anObject(O);
    var key = toPrimitive(P, true);
    anObject(Attributes);
    if (has(AllSymbols, key)) {
      if (!Attributes.enumerable) {
        if (!has(O, HIDDEN)) nativeDefineProperty$1(O, HIDDEN, createPropertyDescriptor(1, {}));
        O[HIDDEN][key] = true;
      } else {
        if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
        Attributes = objectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
      } return setSymbolDescriptor(O, key, Attributes);
    } return nativeDefineProperty$1(O, key, Attributes);
  };

  var $defineProperties = function defineProperties(O, Properties) {
    anObject(O);
    var properties = toIndexedObject(Properties);
    var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
    $forEach$1(keys, function (key) {
      if (!descriptors || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
    });
    return O;
  };

  var $create = function create(O, Properties) {
    return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
  };

  var $propertyIsEnumerable = function propertyIsEnumerable(V) {
    var P = toPrimitive(V, true);
    var enumerable = nativePropertyIsEnumerable$1.call(this, P);
    if (this === ObjectPrototype$1 && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
    return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
  };

  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
    var it = toIndexedObject(O);
    var key = toPrimitive(P, true);
    if (it === ObjectPrototype$1 && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
    var descriptor = nativeGetOwnPropertyDescriptor$1(it, key);
    if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
      descriptor.enumerable = true;
    }
    return descriptor;
  };

  var $getOwnPropertyNames = function getOwnPropertyNames(O) {
    var names = nativeGetOwnPropertyNames$1(toIndexedObject(O));
    var result = [];
    $forEach$1(names, function (key) {
      if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
    });
    return result;
  };

  var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
    var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$1;
    var names = nativeGetOwnPropertyNames$1(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
    var result = [];
    $forEach$1(names, function (key) {
      if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype$1, key))) {
        result.push(AllSymbols[key]);
      }
    });
    return result;
  };

  // `Symbol` constructor
  // https://tc39.github.io/ecma262/#sec-symbol-constructor
  if (!nativeSymbol) {
    $Symbol = function Symbol() {
      if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
      var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
      var tag = uid(description);
      var setter = function (value) {
        if (this === ObjectPrototype$1) setter.call(ObjectPrototypeSymbols, value);
        if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
      };
      if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype$1, tag, { configurable: true, set: setter });
      return wrap(tag, description);
    };

    redefine($Symbol[PROTOTYPE$1], 'toString', function toString() {
      return getInternalState$3(this).tag;
    });

    objectPropertyIsEnumerable.f = $propertyIsEnumerable;
    objectDefineProperty.f = $defineProperty;
    objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
    objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
    objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;

    if (descriptors) {
      // https://github.com/tc39/proposal-Symbol-description
      nativeDefineProperty$1($Symbol[PROTOTYPE$1], 'description', {
        configurable: true,
        get: function description() {
          return getInternalState$3(this).description;
        }
      });
      {
        redefine(ObjectPrototype$1, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
      }
    }
  }

  if (!useSymbolAsUid) {
    wrappedWellKnownSymbol.f = function (name) {
      return wrap(wellKnownSymbol(name), name);
    };
  }

  _export({ global: true, wrap: true, forced: !nativeSymbol, sham: !nativeSymbol }, {
    Symbol: $Symbol
  });

  $forEach$1(objectKeys(WellKnownSymbolsStore$1), function (name) {
    defineWellKnownSymbol(name);
  });

  _export({ target: SYMBOL, stat: true, forced: !nativeSymbol }, {
    // `Symbol.for` method
    // https://tc39.github.io/ecma262/#sec-symbol.for
    'for': function (key) {
      var string = String(key);
      if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
      var symbol = $Symbol(string);
      StringToSymbolRegistry[string] = symbol;
      SymbolToStringRegistry[symbol] = string;
      return symbol;
    },
    // `Symbol.keyFor` method
    // https://tc39.github.io/ecma262/#sec-symbol.keyfor
    keyFor: function keyFor(sym) {
      if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
      if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
    },
    useSetter: function () { USE_SETTER = true; },
    useSimple: function () { USE_SETTER = false; }
  });

  _export({ target: 'Object', stat: true, forced: !nativeSymbol, sham: !descriptors }, {
    // `Object.create` method
    // https://tc39.github.io/ecma262/#sec-object.create
    create: $create,
    // `Object.defineProperty` method
    // https://tc39.github.io/ecma262/#sec-object.defineproperty
    defineProperty: $defineProperty,
    // `Object.defineProperties` method
    // https://tc39.github.io/ecma262/#sec-object.defineproperties
    defineProperties: $defineProperties,
    // `Object.getOwnPropertyDescriptor` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor
  });

  _export({ target: 'Object', stat: true, forced: !nativeSymbol }, {
    // `Object.getOwnPropertyNames` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
    getOwnPropertyNames: $getOwnPropertyNames,
    // `Object.getOwnPropertySymbols` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
    getOwnPropertySymbols: $getOwnPropertySymbols
  });

  // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
  // https://bugs.chromium.org/p/v8/issues/detail?id=3443
  _export({ target: 'Object', stat: true, forced: fails(function () { objectGetOwnPropertySymbols.f(1); }) }, {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
      return objectGetOwnPropertySymbols.f(toObject(it));
    }
  });

  // `JSON.stringify` method behavior with symbols
  // https://tc39.github.io/ecma262/#sec-json.stringify
  if ($stringify) {
    var FORCED_JSON_STRINGIFY = !nativeSymbol || fails(function () {
      var symbol = $Symbol();
      // MS Edge converts symbol values to JSON as {}
      return $stringify([symbol]) != '[null]'
        // WebKit converts symbol values to JSON as null
        || $stringify({ a: symbol }) != '{}'
        // V8 throws on boxed symbols
        || $stringify(Object(symbol)) != '{}';
    });

    _export({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
      // eslint-disable-next-line no-unused-vars
      stringify: function stringify(it, replacer, space) {
        var args = [it];
        var index = 1;
        var $replacer;
        while (arguments.length > index) args.push(arguments[index++]);
        $replacer = replacer;
        if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
        if (!isArray(replacer)) replacer = function (key, value) {
          if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
          if (!isSymbol(value)) return value;
        };
        args[1] = replacer;
        return $stringify.apply(null, args);
      }
    });
  }

  // `Symbol.prototype[@@toPrimitive]` method
  // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
  if (!$Symbol[PROTOTYPE$1][TO_PRIMITIVE]) {
    createNonEnumerableProperty($Symbol[PROTOTYPE$1], TO_PRIMITIVE, $Symbol[PROTOTYPE$1].valueOf);
  }
  // `Symbol.prototype[@@toStringTag]` property
  // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
  setToStringTag($Symbol, SYMBOL);

  hiddenKeys[HIDDEN] = true;

  var defineProperty$4 = objectDefineProperty.f;


  var NativeSymbol = global_1.Symbol;

  if (descriptors && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
    // Safari 12 bug
    NativeSymbol().description !== undefined
  )) {
    var EmptyStringDescriptionStore = {};
    // wrap Symbol constructor for correct work with undefined description
    var SymbolWrapper = function Symbol() {
      var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
      var result = this instanceof SymbolWrapper
        ? new NativeSymbol(description)
        // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
        : description === undefined ? NativeSymbol() : NativeSymbol(description);
      if (description === '') EmptyStringDescriptionStore[result] = true;
      return result;
    };
    copyConstructorProperties(SymbolWrapper, NativeSymbol);
    var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
    symbolPrototype.constructor = SymbolWrapper;

    var symbolToString = symbolPrototype.toString;
    var native = String(NativeSymbol('test')) == 'Symbol(test)';
    var regexp = /^Symbol\((.*)\)[^)]+$/;
    defineProperty$4(symbolPrototype, 'description', {
      configurable: true,
      get: function description() {
        var symbol = isObject(this) ? this.valueOf() : this;
        var string = symbolToString.call(symbol);
        if (has(EmptyStringDescriptionStore, symbol)) return '';
        var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
        return desc === '' ? undefined : desc;
      }
    });

    _export({ global: true, forced: true }, {
      Symbol: SymbolWrapper
    });
  }

  // `Symbol.iterator` well-known symbol
  // https://tc39.github.io/ecma262/#sec-symbol.iterator
  defineWellKnownSymbol('iterator');

  var $includes = arrayIncludes.includes;


  // `Array.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
  _export({ target: 'Array', proto: true }, {
    includes: function includes(el /* , fromIndex = 0 */) {
      return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
  addToUnscopables('includes');

  // `thisNumberValue` abstract operation
  // https://tc39.github.io/ecma262/#sec-thisnumbervalue
  var thisNumberValue = function (value) {
    if (typeof value != 'number' && classofRaw(value) != 'Number') {
      throw TypeError('Incorrect invocation');
    }
    return +value;
  };

  // `String.prototype.repeat` method implementation
  // https://tc39.github.io/ecma262/#sec-string.prototype.repeat
  var stringRepeat = ''.repeat || function repeat(count) {
    var str = String(requireObjectCoercible(this));
    var result = '';
    var n = toInteger(count);
    if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
    for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
    return result;
  };

  var nativeToFixed = 1.0.toFixed;
  var floor$2 = Math.floor;

  var pow = function (x, n, acc) {
    return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
  };

  var log = function (x) {
    var n = 0;
    var x2 = x;
    while (x2 >= 4096) {
      n += 12;
      x2 /= 4096;
    }
    while (x2 >= 2) {
      n += 1;
      x2 /= 2;
    } return n;
  };

  var FORCED$2 = nativeToFixed && (
    0.00008.toFixed(3) !== '0.000' ||
    0.9.toFixed(0) !== '1' ||
    1.255.toFixed(2) !== '1.25' ||
    1000000000000000128.0.toFixed(0) !== '1000000000000000128'
  ) || !fails(function () {
    // V8 ~ Android 4.3-
    nativeToFixed.call({});
  });

  // `Number.prototype.toFixed` method
  // https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
  _export({ target: 'Number', proto: true, forced: FORCED$2 }, {
    // eslint-disable-next-line max-statements
    toFixed: function toFixed(fractionDigits) {
      var number = thisNumberValue(this);
      var fractDigits = toInteger(fractionDigits);
      var data = [0, 0, 0, 0, 0, 0];
      var sign = '';
      var result = '0';
      var e, z, j, k;

      var multiply = function (n, c) {
        var index = -1;
        var c2 = c;
        while (++index < 6) {
          c2 += n * data[index];
          data[index] = c2 % 1e7;
          c2 = floor$2(c2 / 1e7);
        }
      };

      var divide = function (n) {
        var index = 6;
        var c = 0;
        while (--index >= 0) {
          c += data[index];
          data[index] = floor$2(c / n);
          c = (c % n) * 1e7;
        }
      };

      var dataToString = function () {
        var index = 6;
        var s = '';
        while (--index >= 0) {
          if (s !== '' || index === 0 || data[index] !== 0) {
            var t = String(data[index]);
            s = s === '' ? t : s + stringRepeat.call('0', 7 - t.length) + t;
          }
        } return s;
      };

      if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
      // eslint-disable-next-line no-self-compare
      if (number != number) return 'NaN';
      if (number <= -1e21 || number >= 1e21) return String(number);
      if (number < 0) {
        sign = '-';
        number = -number;
      }
      if (number > 1e-21) {
        e = log(number * pow(2, 69, 1)) - 69;
        z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
        z *= 0x10000000000000;
        e = 52 - e;
        if (e > 0) {
          multiply(0, z);
          j = fractDigits;
          while (j >= 7) {
            multiply(1e7, 0);
            j -= 7;
          }
          multiply(pow(10, j, 1), 0);
          j = e - 1;
          while (j >= 23) {
            divide(1 << 23);
            j -= 23;
          }
          divide(1 << j);
          multiply(1, 1);
          divide(2);
          result = dataToString();
        } else {
          multiply(0, z);
          multiply(1 << -e, 0);
          result = dataToString() + stringRepeat.call('0', fractDigits);
        }
      }
      if (fractDigits > 0) {
        k = result.length;
        result = sign + (k <= fractDigits
          ? '0.' + stringRepeat.call('0', fractDigits - k) + result
          : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
      } else {
        result = sign + result;
      } return result;
    }
  });

  // a string of all valid unicode whitespaces
  // eslint-disable-next-line max-len
  var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

  var whitespace = '[' + whitespaces + ']';
  var ltrim = RegExp('^' + whitespace + whitespace + '*');
  var rtrim = RegExp(whitespace + whitespace + '*$');

  // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
  var createMethod$3 = function (TYPE) {
    return function ($this) {
      var string = String(requireObjectCoercible($this));
      if (TYPE & 1) string = string.replace(ltrim, '');
      if (TYPE & 2) string = string.replace(rtrim, '');
      return string;
    };
  };

  var stringTrim = {
    // `String.prototype.{ trimLeft, trimStart }` methods
    // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
    start: createMethod$3(1),
    // `String.prototype.{ trimRight, trimEnd }` methods
    // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
    end: createMethod$3(2),
    // `String.prototype.trim` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.trim
    trim: createMethod$3(3)
  };

  var trim = stringTrim.trim;


  var nativeParseInt = global_1.parseInt;
  var hex = /^[+-]?0[Xx]/;
  var FORCED$3 = nativeParseInt(whitespaces + '08') !== 8 || nativeParseInt(whitespaces + '0x16') !== 22;

  // `parseInt` method
  // https://tc39.github.io/ecma262/#sec-parseint-string-radix
  var _parseInt = FORCED$3 ? function parseInt(string, radix) {
    var S = trim(String(string));
    return nativeParseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));
  } : nativeParseInt;

  // `parseInt` method
  // https://tc39.github.io/ecma262/#sec-parseint-string-radix
  _export({ global: true, forced: parseInt != _parseInt }, {
    parseInt: _parseInt
  });

  var TO_STRING$1 = 'toString';
  var RegExpPrototype = RegExp.prototype;
  var nativeToString = RegExpPrototype[TO_STRING$1];

  var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
  // FF44- RegExp#toString has a wrong name
  var INCORRECT_NAME = nativeToString.name != TO_STRING$1;

  // `RegExp.prototype.toString` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
  if (NOT_GENERIC || INCORRECT_NAME) {
    redefine(RegExp.prototype, TO_STRING$1, function toString() {
      var R = anObject(this);
      var p = String(R.source);
      var rf = R.flags;
      var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? regexpFlags.call(R) : rf);
      return '/' + p + '/' + f;
    }, { unsafe: true });
  }

  var notARegexp = function (it) {
    if (isRegexp(it)) {
      throw TypeError("The method doesn't accept regular expressions");
    } return it;
  };

  var MATCH$1 = wellKnownSymbol('match');

  var correctIsRegexpLogic = function (METHOD_NAME) {
    var regexp = /./;
    try {
      '/./'[METHOD_NAME](regexp);
    } catch (e) {
      try {
        regexp[MATCH$1] = false;
        return '/./'[METHOD_NAME](regexp);
      } catch (f) { /* empty */ }
    } return false;
  };

  // `String.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.includes
  _export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {
    includes: function includes(searchString /* , position = 0 */) {
      return !!~String(requireObjectCoercible(this))
        .indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var peaks = createCommonjsModule(function (module, exports) {
  (function(f){{module.exports=f();}})(function(){return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof commonjsRequire&&commonjsRequire;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t);}return n[i].exports}for(var u="function"==typeof commonjsRequire&&commonjsRequire,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){
  (function() {
    var colors = {
      aqua:    '#7fdbff',
      blue:    '#0074d9',
      lime:    '#01ff70',
      navy:    '#001f3f',
      teal:    '#39cccc',
      olive:   '#3d9970',
      green:   '#2ecc40',
      red:     '#ff4136',
      maroon:  '#85144b',
      orange:  '#ff851b',
      purple:  '#b10dc9',
      yellow:  '#ffdc00',
      fuchsia: '#f012be',
      gray:    '#aaaaaa',
      white:   '#ffffff',
      black:   '#111111',
      silver:  '#dddddd'
    };

    if(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
      module.exports = colors;
    } else {
      window.colors = colors;
    }
  })();

  },{}],2:[function(_dereq_,module,exports){
  (function (process){
  !function(undefined$1) {

    var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {
      return Object.prototype.toString.call(obj) === "[object Array]";
    };
    var defaultMaxListeners = 10;

    function init() {
      this._events = {};
      if (this._conf) {
        configure.call(this, this._conf);
      }
    }

    function configure(conf) {
      if (conf) {
        this._conf = conf;

        conf.delimiter && (this.delimiter = conf.delimiter);
        this._maxListeners = conf.maxListeners !== undefined$1 ? conf.maxListeners : defaultMaxListeners;

        conf.wildcard && (this.wildcard = conf.wildcard);
        conf.newListener && (this._newListener = conf.newListener);
        conf.removeListener && (this._removeListener = conf.removeListener);
        conf.verboseMemoryLeak && (this.verboseMemoryLeak = conf.verboseMemoryLeak);

        if (this.wildcard) {
          this.listenerTree = {};
        }
      } else {
        this._maxListeners = defaultMaxListeners;
      }
    }

    function logPossibleMemoryLeak(count, eventName) {
      var errorMsg = '(node) warning: possible EventEmitter memory ' +
          'leak detected. ' + count + ' listeners added. ' +
          'Use emitter.setMaxListeners() to increase limit.';

      if(this.verboseMemoryLeak){
        errorMsg += ' Event name: ' + eventName + '.';
      }

      if(typeof process !== 'undefined' && process.emitWarning){
        var e = new Error(errorMsg);
        e.name = 'MaxListenersExceededWarning';
        e.emitter = this;
        e.count = count;
        process.emitWarning(e);
      } else {
        console.error(errorMsg);

        if (console.trace){
          console.trace();
        }
      }
    }

    function EventEmitter(conf) {
      this._events = {};
      this._newListener = false;
      this._removeListener = false;
      this.verboseMemoryLeak = false;
      configure.call(this, conf);
    }
    EventEmitter.EventEmitter2 = EventEmitter; // backwards compatibility for exporting EventEmitter property

    //
    // Attention, function return type now is array, always !
    // It has zero elements if no any matches found and one or more
    // elements (leafs) if there are matches
    //
    function searchListenerTree(handlers, type, tree, i) {
      if (!tree) {
        return [];
      }
      var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,
          typeLength = type.length, currentType = type[i], nextType = type[i+1];
      if (i === typeLength && tree._listeners) {
        //
        // If at the end of the event(s) list and the tree has listeners
        // invoke those listeners.
        //
        if (typeof tree._listeners === 'function') {
          handlers && handlers.push(tree._listeners);
          return [tree];
        } else {
          for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {
            handlers && handlers.push(tree._listeners[leaf]);
          }
          return [tree];
        }
      }

      if ((currentType === '*' || currentType === '**') || tree[currentType]) {
        //
        // If the event emitted is '*' at this part
        // or there is a concrete match at this patch
        //
        if (currentType === '*') {
          for (branch in tree) {
            if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {
              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));
            }
          }
          return listeners;
        } else if(currentType === '**') {
          endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));
          if(endReached && tree._listeners) {
            // The next element has a _listeners, add it to the handlers.
            listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));
          }

          for (branch in tree) {
            if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {
              if(branch === '*' || branch === '**') {
                if(tree[branch]._listeners && !endReached) {
                  listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));
                }
                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));
              } else if(branch === nextType) {
                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));
              } else {
                // No match on this one, shift into the tree but not in the type array.
                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));
              }
            }
          }
          return listeners;
        }

        listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));
      }

      xTree = tree['*'];
      if (xTree) {
        //
        // If the listener tree will allow any match for this part,
        // then recursively explore all branches of the tree
        //
        searchListenerTree(handlers, type, xTree, i+1);
      }

      xxTree = tree['**'];
      if(xxTree) {
        if(i < typeLength) {
          if(xxTree._listeners) {
            // If we have a listener on a '**', it will catch all, so add its handler.
            searchListenerTree(handlers, type, xxTree, typeLength);
          }

          // Build arrays of matching next branches and others.
          for(branch in xxTree) {
            if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {
              if(branch === nextType) {
                // We know the next element will match, so jump twice.
                searchListenerTree(handlers, type, xxTree[branch], i+2);
              } else if(branch === currentType) {
                // Current node matches, move into the tree.
                searchListenerTree(handlers, type, xxTree[branch], i+1);
              } else {
                isolatedBranch = {};
                isolatedBranch[branch] = xxTree[branch];
                searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);
              }
            }
          }
        } else if(xxTree._listeners) {
          // We have reached the end and still on a '**'
          searchListenerTree(handlers, type, xxTree, typeLength);
        } else if(xxTree['*'] && xxTree['*']._listeners) {
          searchListenerTree(handlers, type, xxTree['*'], typeLength);
        }
      }

      return listeners;
    }

    function growListenerTree(type, listener) {

      type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();

      //
      // Looks for two consecutive '**', if so, don't add the event at all.
      //
      for(var i = 0, len = type.length; i+1 < len; i++) {
        if(type[i] === '**' && type[i+1] === '**') {
          return;
        }
      }

      var tree = this.listenerTree;
      var name = type.shift();

      while (name !== undefined$1) {

        if (!tree[name]) {
          tree[name] = {};
        }

        tree = tree[name];

        if (type.length === 0) {

          if (!tree._listeners) {
            tree._listeners = listener;
          }
          else {
            if (typeof tree._listeners === 'function') {
              tree._listeners = [tree._listeners];
            }

            tree._listeners.push(listener);

            if (
              !tree._listeners.warned &&
              this._maxListeners > 0 &&
              tree._listeners.length > this._maxListeners
            ) {
              tree._listeners.warned = true;
              logPossibleMemoryLeak.call(this, tree._listeners.length, name);
            }
          }
          return true;
        }
        name = type.shift();
      }
      return true;
    }

    // By default EventEmitters will print a warning if more than
    // 10 listeners are added to it. This is a useful default which
    // helps finding memory leaks.
    //
    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.

    EventEmitter.prototype.delimiter = '.';

    EventEmitter.prototype.setMaxListeners = function(n) {
      if (n !== undefined$1) {
        this._maxListeners = n;
        if (!this._conf) this._conf = {};
        this._conf.maxListeners = n;
      }
    };

    EventEmitter.prototype.event = '';


    EventEmitter.prototype.once = function(event, fn) {
      return this._once(event, fn, false);
    };

    EventEmitter.prototype.prependOnceListener = function(event, fn) {
      return this._once(event, fn, true);
    };

    EventEmitter.prototype._once = function(event, fn, prepend) {
      this._many(event, 1, fn, prepend);
      return this;
    };

    EventEmitter.prototype.many = function(event, ttl, fn) {
      return this._many(event, ttl, fn, false);
    };

    EventEmitter.prototype.prependMany = function(event, ttl, fn) {
      return this._many(event, ttl, fn, true);
    };

    EventEmitter.prototype._many = function(event, ttl, fn, prepend) {
      var self = this;

      if (typeof fn !== 'function') {
        throw new Error('many only accepts instances of Function');
      }

      function listener() {
        if (--ttl === 0) {
          self.off(event, listener);
        }
        return fn.apply(this, arguments);
      }

      listener._origin = fn;

      this._on(event, listener, prepend);

      return self;
    };

    EventEmitter.prototype.emit = function() {

      this._events || init.call(this);

      var type = arguments[0];

      if (type === 'newListener' && !this._newListener) {
        if (!this._events.newListener) {
          return false;
        }
      }

      var al = arguments.length;
      var args,l,i,j;
      var handler;

      if (this._all && this._all.length) {
        handler = this._all.slice();
        if (al > 3) {
          args = new Array(al);
          for (j = 0; j < al; j++) args[j] = arguments[j];
        }

        for (i = 0, l = handler.length; i < l; i++) {
          this.event = type;
          switch (al) {
          case 1:
            handler[i].call(this, type);
            break;
          case 2:
            handler[i].call(this, type, arguments[1]);
            break;
          case 3:
            handler[i].call(this, type, arguments[1], arguments[2]);
            break;
          default:
            handler[i].apply(this, args);
          }
        }
      }

      if (this.wildcard) {
        handler = [];
        var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
        searchListenerTree.call(this, handler, ns, this.listenerTree, 0);
      } else {
        handler = this._events[type];
        if (typeof handler === 'function') {
          this.event = type;
          switch (al) {
          case 1:
            handler.call(this);
            break;
          case 2:
            handler.call(this, arguments[1]);
            break;
          case 3:
            handler.call(this, arguments[1], arguments[2]);
            break;
          default:
            args = new Array(al - 1);
            for (j = 1; j < al; j++) args[j - 1] = arguments[j];
            handler.apply(this, args);
          }
          return true;
        } else if (handler) {
          // need to make copy of handlers because list can change in the middle
          // of emit call
          handler = handler.slice();
        }
      }

      if (handler && handler.length) {
        if (al > 3) {
          args = new Array(al - 1);
          for (j = 1; j < al; j++) args[j - 1] = arguments[j];
        }
        for (i = 0, l = handler.length; i < l; i++) {
          this.event = type;
          switch (al) {
          case 1:
            handler[i].call(this);
            break;
          case 2:
            handler[i].call(this, arguments[1]);
            break;
          case 3:
            handler[i].call(this, arguments[1], arguments[2]);
            break;
          default:
            handler[i].apply(this, args);
          }
        }
        return true;
      } else if (!this._all && type === 'error') {
        if (arguments[1] instanceof Error) {
          throw arguments[1]; // Unhandled 'error' event
        } else {
          throw new Error("Uncaught, unspecified 'error' event.");
        }
      }

      return !!this._all;
    };

    EventEmitter.prototype.emitAsync = function() {

      this._events || init.call(this);

      var type = arguments[0];

      if (type === 'newListener' && !this._newListener) {
          if (!this._events.newListener) { return Promise.resolve([false]); }
      }

      var promises= [];

      var al = arguments.length;
      var args,l,i,j;
      var handler;

      if (this._all) {
        if (al > 3) {
          args = new Array(al);
          for (j = 1; j < al; j++) args[j] = arguments[j];
        }
        for (i = 0, l = this._all.length; i < l; i++) {
          this.event = type;
          switch (al) {
          case 1:
            promises.push(this._all[i].call(this, type));
            break;
          case 2:
            promises.push(this._all[i].call(this, type, arguments[1]));
            break;
          case 3:
            promises.push(this._all[i].call(this, type, arguments[1], arguments[2]));
            break;
          default:
            promises.push(this._all[i].apply(this, args));
          }
        }
      }

      if (this.wildcard) {
        handler = [];
        var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
        searchListenerTree.call(this, handler, ns, this.listenerTree, 0);
      } else {
        handler = this._events[type];
      }

      if (typeof handler === 'function') {
        this.event = type;
        switch (al) {
        case 1:
          promises.push(handler.call(this));
          break;
        case 2:
          promises.push(handler.call(this, arguments[1]));
          break;
        case 3:
          promises.push(handler.call(this, arguments[1], arguments[2]));
          break;
        default:
          args = new Array(al - 1);
          for (j = 1; j < al; j++) args[j - 1] = arguments[j];
          promises.push(handler.apply(this, args));
        }
      } else if (handler && handler.length) {
        handler = handler.slice();
        if (al > 3) {
          args = new Array(al - 1);
          for (j = 1; j < al; j++) args[j - 1] = arguments[j];
        }
        for (i = 0, l = handler.length; i < l; i++) {
          this.event = type;
          switch (al) {
          case 1:
            promises.push(handler[i].call(this));
            break;
          case 2:
            promises.push(handler[i].call(this, arguments[1]));
            break;
          case 3:
            promises.push(handler[i].call(this, arguments[1], arguments[2]));
            break;
          default:
            promises.push(handler[i].apply(this, args));
          }
        }
      } else if (!this._all && type === 'error') {
        if (arguments[1] instanceof Error) {
          return Promise.reject(arguments[1]); // Unhandled 'error' event
        } else {
          return Promise.reject("Uncaught, unspecified 'error' event.");
        }
      }

      return Promise.all(promises);
    };

    EventEmitter.prototype.on = function(type, listener) {
      return this._on(type, listener, false);
    };

    EventEmitter.prototype.prependListener = function(type, listener) {
      return this._on(type, listener, true);
    };

    EventEmitter.prototype.onAny = function(fn) {
      return this._onAny(fn, false);
    };

    EventEmitter.prototype.prependAny = function(fn) {
      return this._onAny(fn, true);
    };

    EventEmitter.prototype.addListener = EventEmitter.prototype.on;

    EventEmitter.prototype._onAny = function(fn, prepend){
      if (typeof fn !== 'function') {
        throw new Error('onAny only accepts instances of Function');
      }

      if (!this._all) {
        this._all = [];
      }

      // Add the function to the event listener collection.
      if(prepend){
        this._all.unshift(fn);
      }else{
        this._all.push(fn);
      }

      return this;
    };

    EventEmitter.prototype._on = function(type, listener, prepend) {
      if (typeof type === 'function') {
        this._onAny(type, listener);
        return this;
      }

      if (typeof listener !== 'function') {
        throw new Error('on only accepts instances of Function');
      }
      this._events || init.call(this);

      // To avoid recursion in the case that type == "newListeners"! Before
      // adding it to the listeners, first emit "newListeners".
      if (this._newListener)
         this.emit('newListener', type, listener);

      if (this.wildcard) {
        growListenerTree.call(this, type, listener);
        return this;
      }

      if (!this._events[type]) {
        // Optimize the case of one listener. Don't need the extra array object.
        this._events[type] = listener;
      }
      else {
        if (typeof this._events[type] === 'function') {
          // Change to array.
          this._events[type] = [this._events[type]];
        }

        // If we've already got an array, just add
        if(prepend){
          this._events[type].unshift(listener);
        }else{
          this._events[type].push(listener);
        }

        // Check for listener leak
        if (
          !this._events[type].warned &&
          this._maxListeners > 0 &&
          this._events[type].length > this._maxListeners
        ) {
          this._events[type].warned = true;
          logPossibleMemoryLeak.call(this, this._events[type].length, type);
        }
      }

      return this;
    };

    EventEmitter.prototype.off = function(type, listener) {
      if (typeof listener !== 'function') {
        throw new Error('removeListener only takes instances of Function');
      }

      var handlers,leafs=[];

      if(this.wildcard) {
        var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
        leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);
      }
      else {
        // does not use listeners(), so no side effect of creating _events[type]
        if (!this._events[type]) return this;
        handlers = this._events[type];
        leafs.push({_listeners:handlers});
      }

      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {
        var leaf = leafs[iLeaf];
        handlers = leaf._listeners;
        if (isArray(handlers)) {

          var position = -1;

          for (var i = 0, length = handlers.length; i < length; i++) {
            if (handlers[i] === listener ||
              (handlers[i].listener && handlers[i].listener === listener) ||
              (handlers[i]._origin && handlers[i]._origin === listener)) {
              position = i;
              break;
            }
          }

          if (position < 0) {
            continue;
          }

          if(this.wildcard) {
            leaf._listeners.splice(position, 1);
          }
          else {
            this._events[type].splice(position, 1);
          }

          if (handlers.length === 0) {
            if(this.wildcard) {
              delete leaf._listeners;
            }
            else {
              delete this._events[type];
            }
          }
          if (this._removeListener)
            this.emit("removeListener", type, listener);

          return this;
        }
        else if (handlers === listener ||
          (handlers.listener && handlers.listener === listener) ||
          (handlers._origin && handlers._origin === listener)) {
          if(this.wildcard) {
            delete leaf._listeners;
          }
          else {
            delete this._events[type];
          }
          if (this._removeListener)
            this.emit("removeListener", type, listener);
        }
      }

      function recursivelyGarbageCollect(root) {
        if (root === undefined$1) {
          return;
        }
        var keys = Object.keys(root);
        for (var i in keys) {
          var key = keys[i];
          var obj = root[key];
          if ((obj instanceof Function) || (typeof obj !== "object") || (obj === null))
            continue;
          if (Object.keys(obj).length > 0) {
            recursivelyGarbageCollect(root[key]);
          }
          if (Object.keys(obj).length === 0) {
            delete root[key];
          }
        }
      }
      recursivelyGarbageCollect(this.listenerTree);

      return this;
    };

    EventEmitter.prototype.offAny = function(fn) {
      var i = 0, l = 0, fns;
      if (fn && this._all && this._all.length > 0) {
        fns = this._all;
        for(i = 0, l = fns.length; i < l; i++) {
          if(fn === fns[i]) {
            fns.splice(i, 1);
            if (this._removeListener)
              this.emit("removeListenerAny", fn);
            return this;
          }
        }
      } else {
        fns = this._all;
        if (this._removeListener) {
          for(i = 0, l = fns.length; i < l; i++)
            this.emit("removeListenerAny", fns[i]);
        }
        this._all = [];
      }
      return this;
    };

    EventEmitter.prototype.removeListener = EventEmitter.prototype.off;

    EventEmitter.prototype.removeAllListeners = function(type) {
      if (type === undefined$1) {
        !this._events || init.call(this);
        return this;
      }

      if (this.wildcard) {
        var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
        var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);

        for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {
          var leaf = leafs[iLeaf];
          leaf._listeners = null;
        }
      }
      else if (this._events) {
        this._events[type] = null;
      }
      return this;
    };

    EventEmitter.prototype.listeners = function(type) {
      if (this.wildcard) {
        var handlers = [];
        var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
        searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);
        return handlers;
      }

      this._events || init.call(this);

      if (!this._events[type]) this._events[type] = [];
      if (!isArray(this._events[type])) {
        this._events[type] = [this._events[type]];
      }
      return this._events[type];
    };

    EventEmitter.prototype.eventNames = function(){
      return Object.keys(this._events);
    };

    EventEmitter.prototype.listenerCount = function(type) {
      return this.listeners(type).length;
    };

    EventEmitter.prototype.listenersAny = function() {

      if(this._all) {
        return this._all;
      }
      else {
        return [];
      }

    };

    if (typeof exports === 'object') {
      // CommonJS
      module.exports = EventEmitter;
    }
    else {
      // Browser global.
      window.EventEmitter2 = EventEmitter;
    }
  }();

  }).call(this,_dereq_('_process'));

  },{"_process":61}],3:[function(_dereq_,module,exports){
  (function (global){
  var WORKER_ENABLED = !!(global === global.window && global.URL && global.Blob && global.Worker);

  function InlineWorker(func, self) {
    var _this = this;
    var functionBody;

    self = self || {};

    if (WORKER_ENABLED) {
      functionBody = func.toString().trim().match(
        /^function\s*\w*\s*\([\w\s,]*\)\s*{([\w\W]*?)}$/
      )[1];

      return new global.Worker(global.URL.createObjectURL(
        new global.Blob([ functionBody ], { type: "text/javascript" })
      ));
    }

    function postMessage(data) {
      setTimeout(function() {
        _this.onmessage({ data: data });
      }, 0);
    }

    this.self = self;
    this.self.postMessage = postMessage;

    setTimeout(func.bind(self, self), 0);
  }

  InlineWorker.prototype.postMessage = function postMessage(data) {
    var _this = this;

    setTimeout(function() {
      _this.self.onmessage({ data: data });
    }, 0);
  };

  module.exports = InlineWorker;

  }).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});

  },{}],4:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Global_1 = _dereq_("./Global");
  var now = (function () {
      if (Global_1.glob.performance && Global_1.glob.performance.now) {
          return function () {
              return Global_1.glob.performance.now();
          };
      }
      return function () {
          return new Date().getTime();
      };
  })();
  var Animation = (function () {
      function Animation(func, layers) {
          this.id = Animation.animIdCounter++;
          this.frame = {
              time: 0,
              timeDiff: 0,
              lastTime: now(),
              frameRate: 0
          };
          this.func = func;
          this.setLayers(layers);
      }
      Animation.prototype.setLayers = function (layers) {
          var lays = [];
          if (!layers) {
              lays = [];
          }
          else if (layers.length > 0) {
              lays = layers;
          }
          else {
              lays = [layers];
          }
          this.layers = lays;
          return this;
      };
      Animation.prototype.getLayers = function () {
          return this.layers;
      };
      Animation.prototype.addLayer = function (layer) {
          var layers = this.layers, len = layers.length, n;
          for (n = 0; n < len; n++) {
              if (layers[n]._id === layer._id) {
                  return false;
              }
          }
          this.layers.push(layer);
          return true;
      };
      Animation.prototype.isRunning = function () {
          var a = Animation, animations = a.animations, len = animations.length, n;
          for (n = 0; n < len; n++) {
              if (animations[n].id === this.id) {
                  return true;
              }
          }
          return false;
      };
      Animation.prototype.start = function () {
          this.stop();
          this.frame.timeDiff = 0;
          this.frame.lastTime = now();
          Animation._addAnimation(this);
          return this;
      };
      Animation.prototype.stop = function () {
          Animation._removeAnimation(this);
          return this;
      };
      Animation.prototype._updateFrameObject = function (time) {
          this.frame.timeDiff = time - this.frame.lastTime;
          this.frame.lastTime = time;
          this.frame.time += this.frame.timeDiff;
          this.frame.frameRate = 1000 / this.frame.timeDiff;
      };
      Animation._addAnimation = function (anim) {
          this.animations.push(anim);
          this._handleAnimation();
      };
      Animation._removeAnimation = function (anim) {
          var id = anim.id, animations = this.animations, len = animations.length, n;
          for (n = 0; n < len; n++) {
              if (animations[n].id === id) {
                  this.animations.splice(n, 1);
                  break;
              }
          }
      };
      Animation._runFrames = function () {
          var layerHash = {}, animations = this.animations, anim, layers, func, n, i, layersLen, layer, key, needRedraw;
          for (n = 0; n < animations.length; n++) {
              anim = animations[n];
              layers = anim.layers;
              func = anim.func;
              anim._updateFrameObject(now());
              layersLen = layers.length;
              if (func) {
                  needRedraw = func.call(anim, anim.frame) !== false;
              }
              else {
                  needRedraw = true;
              }
              if (!needRedraw) {
                  continue;
              }
              for (i = 0; i < layersLen; i++) {
                  layer = layers[i];
                  if (layer._id !== undefined) {
                      layerHash[layer._id] = layer;
                  }
              }
          }
          for (key in layerHash) {
              if (!layerHash.hasOwnProperty(key)) {
                  continue;
              }
              layerHash[key].draw();
          }
      };
      Animation._animationLoop = function () {
          var Anim = Animation;
          if (Anim.animations.length) {
              Anim._runFrames();
              requestAnimationFrame(Anim._animationLoop);
          }
          else {
              Anim.animRunning = false;
          }
      };
      Animation._handleAnimation = function () {
          if (!this.animRunning) {
              this.animRunning = true;
              requestAnimationFrame(this._animationLoop);
          }
      };
      Animation.animations = [];
      Animation.animIdCounter = 0;
      Animation.animRunning = false;
      return Animation;
  }());
  exports.Animation = Animation;

  },{"./Global":12}],5:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("./Util");
  var Container_1 = _dereq_("./Container");
  var Node_1 = _dereq_("./Node");
  var Factory_1 = _dereq_("./Factory");
  var Canvas_1 = _dereq_("./Canvas");
  var BaseLayer = (function (_super) {
      __extends(BaseLayer, _super);
      function BaseLayer(config) {
          var _this = _super.call(this, config) || this;
          _this.canvas = new Canvas_1.SceneCanvas();
          _this._waitingForDraw = false;
          _this.on('visibleChange', _this._checkVisibility);
          _this._checkVisibility();
          _this.on('imageSmoothingEnabledChange', _this._checkSmooth);
          _this._checkSmooth();
          return _this;
      }
      BaseLayer.prototype.createPNGStream = function () {
          var c = this.canvas._canvas;
          return c.createPNGStream();
      };
      BaseLayer.prototype.getCanvas = function () {
          return this.canvas;
      };
      BaseLayer.prototype.getHitCanvas = function () {
          return this.hitCanvas;
      };
      BaseLayer.prototype.getContext = function () {
          return this.getCanvas().getContext();
      };
      BaseLayer.prototype.clear = function (bounds) {
          this.getContext().clear(bounds);
          return this;
      };
      BaseLayer.prototype.setZIndex = function (index) {
          _super.prototype.setZIndex.call(this, index);
          var stage = this.getStage();
          if (stage) {
              stage.content.removeChild(this.getCanvas()._canvas);
              if (index < stage.getChildren().length - 1) {
                  stage.content.insertBefore(this.getCanvas()._canvas, stage.getChildren()[index + 1].getCanvas()._canvas);
              }
              else {
                  stage.content.appendChild(this.getCanvas()._canvas);
              }
          }
          return this;
      };
      BaseLayer.prototype.moveToTop = function () {
          Node_1.Node.prototype.moveToTop.call(this);
          var stage = this.getStage();
          if (stage) {
              stage.content.removeChild(this.getCanvas()._canvas);
              stage.content.appendChild(this.getCanvas()._canvas);
          }
          return true;
      };
      BaseLayer.prototype.moveUp = function () {
          var moved = Node_1.Node.prototype.moveUp.call(this);
          if (!moved) {
              return false;
          }
          var stage = this.getStage();
          if (!stage) {
              return false;
          }
          stage.content.removeChild(this.getCanvas()._canvas);
          if (this.index < stage.getChildren().length - 1) {
              stage.content.insertBefore(this.getCanvas()._canvas, stage.getChildren()[this.index + 1].getCanvas()._canvas);
          }
          else {
              stage.content.appendChild(this.getCanvas()._canvas);
          }
          return true;
      };
      BaseLayer.prototype.moveDown = function () {
          if (Node_1.Node.prototype.moveDown.call(this)) {
              var stage = this.getStage();
              if (stage) {
                  var children = stage.getChildren();
                  stage.content.removeChild(this.getCanvas()._canvas);
                  stage.content.insertBefore(this.getCanvas()._canvas, children[this.index + 1].getCanvas()._canvas);
              }
              return true;
          }
          return false;
      };
      BaseLayer.prototype.moveToBottom = function () {
          if (Node_1.Node.prototype.moveToBottom.call(this)) {
              var stage = this.getStage();
              if (stage) {
                  var children = stage.getChildren();
                  stage.content.removeChild(this.getCanvas()._canvas);
                  stage.content.insertBefore(this.getCanvas()._canvas, children[1].getCanvas()._canvas);
              }
              return true;
          }
          return false;
      };
      BaseLayer.prototype.getLayer = function () {
          return this;
      };
      BaseLayer.prototype.hitGraphEnabled = function () {
          return true;
      };
      BaseLayer.prototype.remove = function () {
          var _canvas = this.getCanvas()._canvas;
          Node_1.Node.prototype.remove.call(this);
          if (_canvas && _canvas.parentNode && Util_1.Util._isInDocument(_canvas)) {
              _canvas.parentNode.removeChild(_canvas);
          }
          return this;
      };
      BaseLayer.prototype.getStage = function () {
          return this.parent;
      };
      BaseLayer.prototype.setSize = function (_a) {
          var width = _a.width, height = _a.height;
          this.canvas.setSize(width, height);
          return this;
      };
      BaseLayer.prototype._toKonvaCanvas = function (config) {
          config = config || {};
          config.width = config.width || this.getWidth();
          config.height = config.height || this.getHeight();
          config.x = config.x !== undefined ? config.x : this.x();
          config.y = config.y !== undefined ? config.y : this.y();
          return Node_1.Node.prototype._toKonvaCanvas.call(this, config);
      };
      BaseLayer.prototype._checkVisibility = function () {
          var visible = this.visible();
          if (visible) {
              this.canvas._canvas.style.display = 'block';
          }
          else {
              this.canvas._canvas.style.display = 'none';
          }
      };
      BaseLayer.prototype._checkSmooth = function () {
          this.getContext()._context.imageSmoothingEnabled = this.imageSmoothingEnabled();
      };
      BaseLayer.prototype.getWidth = function () {
          if (this.parent) {
              return this.parent.width();
          }
      };
      BaseLayer.prototype.setWidth = function () {
          Util_1.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.');
      };
      BaseLayer.prototype.getHeight = function () {
          if (this.parent) {
              return this.parent.height();
          }
      };
      BaseLayer.prototype.setHeight = function () {
          Util_1.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.');
      };
      BaseLayer.prototype.getIntersection = function (pos, selector) {
          return null;
      };
      BaseLayer.prototype.batchDraw = function () {
          var _this = this;
          if (!this._waitingForDraw) {
              this._waitingForDraw = true;
              Util_1.Util.requestAnimFrame(function () {
                  _this.draw();
                  _this._waitingForDraw = false;
              });
          }
          return this;
      };
      BaseLayer.prototype._applyTransform = function (shape, context, top) {
          var m = shape.getAbsoluteTransform(top).getMatrix();
          context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
      };
      return BaseLayer;
  }(Container_1.Container));
  exports.BaseLayer = BaseLayer;
  BaseLayer.prototype.nodeType = 'BaseLayer';
  Factory_1.Factory.addGetterSetter(BaseLayer, 'imageSmoothingEnabled', true);
  Factory_1.Factory.addGetterSetter(BaseLayer, 'clearBeforeDraw', true);
  Util_1.Collection.mapMethods(BaseLayer);

  },{"./Canvas":6,"./Container":7,"./Factory":10,"./Node":15,"./Util":20}],6:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("./Util");
  var Context_1 = _dereq_("./Context");
  var Global_1 = _dereq_("./Global");
  var Factory_1 = _dereq_("./Factory");
  var Validators_1 = _dereq_("./Validators");
  var _pixelRatio;
  function getDevicePixelRatio() {
      if (_pixelRatio) {
          return _pixelRatio;
      }
      var canvas = Util_1.Util.createCanvasElement();
      var context = canvas.getContext('2d');
      _pixelRatio = (function () {
          var devicePixelRatio = Global_1.Konva._global.devicePixelRatio || 1, backingStoreRatio = context.webkitBackingStorePixelRatio ||
              context.mozBackingStorePixelRatio ||
              context.msBackingStorePixelRatio ||
              context.oBackingStorePixelRatio ||
              context.backingStorePixelRatio ||
              1;
          return devicePixelRatio / backingStoreRatio;
      })();
      return _pixelRatio;
  }
  var Canvas = (function () {
      function Canvas(config) {
          this.pixelRatio = 1;
          this.width = 0;
          this.height = 0;
          this.isCache = false;
          var conf = config || {};
          var pixelRatio = conf.pixelRatio || Global_1.Konva.pixelRatio || getDevicePixelRatio();
          this.pixelRatio = pixelRatio;
          this._canvas = Util_1.Util.createCanvasElement();
          this._canvas.style.padding = '0';
          this._canvas.style.margin = '0';
          this._canvas.style.border = '0';
          this._canvas.style.background = 'transparent';
          this._canvas.style.position = 'absolute';
          this._canvas.style.top = '0';
          this._canvas.style.left = '0';
      }
      Canvas.prototype.getContext = function () {
          return this.context;
      };
      Canvas.prototype.getPixelRatio = function () {
          return this.pixelRatio;
      };
      Canvas.prototype.setPixelRatio = function (pixelRatio) {
          var previousRatio = this.pixelRatio;
          this.pixelRatio = pixelRatio;
          this.setSize(this.getWidth() / previousRatio, this.getHeight() / previousRatio);
      };
      Canvas.prototype.setWidth = function (width) {
          this.width = this._canvas.width = width * this.pixelRatio;
          this._canvas.style.width = width + 'px';
          var pixelRatio = this.pixelRatio, _context = this.getContext()._context;
          _context.scale(pixelRatio, pixelRatio);
      };
      Canvas.prototype.setHeight = function (height) {
          this.height = this._canvas.height = height * this.pixelRatio;
          this._canvas.style.height = height + 'px';
          var pixelRatio = this.pixelRatio, _context = this.getContext()._context;
          _context.scale(pixelRatio, pixelRatio);
      };
      Canvas.prototype.getWidth = function () {
          return this.width;
      };
      Canvas.prototype.getHeight = function () {
          return this.height;
      };
      Canvas.prototype.setSize = function (width, height) {
          this.setWidth(width);
          this.setHeight(height);
      };
      Canvas.prototype.toDataURL = function (mimeType, quality) {
          try {
              return this._canvas.toDataURL(mimeType, quality);
          }
          catch (e) {
              try {
                  return this._canvas.toDataURL();
              }
              catch (err) {
                  Util_1.Util.error('Unable to get data URL. ' + err.message);
                  return '';
              }
          }
      };
      return Canvas;
  }());
  exports.Canvas = Canvas;
  Factory_1.Factory.addGetterSetter(Canvas, 'pixelRatio', undefined, Validators_1.getNumberValidator());
  var SceneCanvas = (function (_super) {
      __extends(SceneCanvas, _super);
      function SceneCanvas(config) {
          if (config === void 0) { config = { width: 0, height: 0 }; }
          var _this = _super.call(this, config) || this;
          _this.context = new Context_1.SceneContext(_this);
          _this.setSize(config.width, config.height);
          return _this;
      }
      return SceneCanvas;
  }(Canvas));
  exports.SceneCanvas = SceneCanvas;
  var HitCanvas = (function (_super) {
      __extends(HitCanvas, _super);
      function HitCanvas(config) {
          if (config === void 0) { config = { width: 0, height: 0 }; }
          var _this = _super.call(this, config) || this;
          _this.hitCanvas = true;
          _this.context = new Context_1.HitContext(_this);
          _this.setSize(config.width, config.height);
          return _this;
      }
      return HitCanvas;
  }(Canvas));
  exports.HitCanvas = HitCanvas;

  },{"./Context":8,"./Factory":10,"./Global":12,"./Util":20,"./Validators":21}],7:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("./Util");
  var Factory_1 = _dereq_("./Factory");
  var Node_1 = _dereq_("./Node");
  var DragAndDrop_1 = _dereq_("./DragAndDrop");
  var Validators_1 = _dereq_("./Validators");
  var Global_1 = _dereq_("./Global");
  var Container = (function (_super) {
      __extends(Container, _super);
      function Container() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.children = new Util_1.Collection();
          return _this;
      }
      Container.prototype.getChildren = function (filterFunc) {
          if (!filterFunc) {
              return this.children;
          }
          var results = new Util_1.Collection();
          this.children.each(function (child) {
              if (filterFunc(child)) {
                  results.push(child);
              }
          });
          return results;
      };
      Container.prototype.hasChildren = function () {
          return this.getChildren().length > 0;
      };
      Container.prototype.removeChildren = function () {
          var child;
          for (var i = 0; i < this.children.length; i++) {
              child = this.children[i];
              child.parent = null;
              child.index = 0;
              child.remove();
          }
          this.children = new Util_1.Collection();
          return this;
      };
      Container.prototype.destroyChildren = function () {
          var child;
          for (var i = 0; i < this.children.length; i++) {
              child = this.children[i];
              child.parent = null;
              child.index = 0;
              child.destroy();
          }
          this.children = new Util_1.Collection();
          return this;
      };
      Container.prototype.add = function (child) {
          if (arguments.length > 1) {
              for (var i = 0; i < arguments.length; i++) {
                  this.add(arguments[i]);
              }
              return this;
          }
          if (child.getParent()) {
              child.moveTo(this);
              return this;
          }
          var children = this.children;
          this._validateAdd(child);
          child.index = children.length;
          child.parent = this;
          children.push(child);
          this._fire('add', {
              child: child
          });
          return this;
      };
      Container.prototype.destroy = function () {
          if (this.hasChildren()) {
              this.destroyChildren();
          }
          _super.prototype.destroy.call(this);
          return this;
      };
      Container.prototype.find = function (selector) {
          return this._generalFind(selector, false);
      };
      Container.prototype.get = function (selector) {
          Util_1.Util.warn('collection.get() method is deprecated. Please use collection.find() instead.');
          return this.find(selector);
      };
      Container.prototype.findOne = function (selector) {
          var result = this._generalFind(selector, true);
          return result.length > 0 ? result[0] : undefined;
      };
      Container.prototype._generalFind = function (selector, findOne) {
          var retArr = [];
          this._descendants(function (node) {
              var valid = node._isMatch(selector);
              if (valid) {
                  retArr.push(node);
              }
              if (valid && findOne) {
                  return true;
              }
              return false;
          });
          return Util_1.Collection.toCollection(retArr);
      };
      Container.prototype._descendants = function (fn) {
          var shouldStop = false;
          for (var i = 0; i < this.children.length; i++) {
              var child = this.children[i];
              shouldStop = fn(child);
              if (shouldStop) {
                  return true;
              }
              if (!child.hasChildren()) {
                  continue;
              }
              shouldStop = child._descendants(fn);
              if (shouldStop) {
                  return true;
              }
          }
          return false;
      };
      Container.prototype.toObject = function () {
          var obj = Node_1.Node.prototype.toObject.call(this);
          obj.children = [];
          var children = this.getChildren();
          var len = children.length;
          for (var n = 0; n < len; n++) {
              var child = children[n];
              obj.children.push(child.toObject());
          }
          return obj;
      };
      Container.prototype._getDescendants = function (arr) {
          var retArr = [];
          var len = arr.length;
          for (var n = 0; n < len; n++) {
              var node = arr[n];
              if (this.isAncestorOf(node)) {
                  retArr.push(node);
              }
          }
          return retArr;
      };
      Container.prototype.isAncestorOf = function (node) {
          var parent = node.getParent();
          while (parent) {
              if (parent._id === this._id) {
                  return true;
              }
              parent = parent.getParent();
          }
          return false;
      };
      Container.prototype.clone = function (obj) {
          var node = Node_1.Node.prototype.clone.call(this, obj);
          this.getChildren().each(function (no) {
              node.add(no.clone());
          });
          return node;
      };
      Container.prototype.getAllIntersections = function (pos) {
          var arr = [];
          this.find('Shape').each(function (shape) {
              if (shape.isVisible() && shape.intersects(pos)) {
                  arr.push(shape);
              }
          });
          return arr;
      };
      Container.prototype._setChildrenIndices = function () {
          this.children.each(function (child, n) {
              child.index = n;
          });
      };
      Container.prototype.drawScene = function (can, top, caching) {
          var layer = this.getLayer(), canvas = can || (layer && layer.getCanvas()), context = canvas && canvas.getContext(), cachedCanvas = this._getCanvasCache(), cachedSceneCanvas = cachedCanvas && cachedCanvas.scene;
          if (this.isVisible() || caching) {
              if (!caching && cachedSceneCanvas) {
                  context.save();
                  layer._applyTransform(this, context, top);
                  this._drawCachedSceneCanvas(context);
                  context.restore();
              }
              else {
                  this._drawChildren(canvas, 'drawScene', top, false, caching, caching);
              }
          }
          return this;
      };
      Container.prototype.drawHit = function (can, top, caching) {
          var layer = this.getLayer(), canvas = can || (layer && layer.hitCanvas), context = canvas && canvas.getContext(), cachedCanvas = this._getCanvasCache(), cachedHitCanvas = cachedCanvas && cachedCanvas.hit;
          if (this.shouldDrawHit(canvas) || caching) {
              if (!caching && cachedHitCanvas) {
                  context.save();
                  layer._applyTransform(this, context, top);
                  this._drawCachedHitCanvas(context);
                  context.restore();
              }
              else {
                  this._drawChildren(canvas, 'drawHit', top, false, caching, caching);
              }
          }
          return this;
      };
      Container.prototype._drawChildren = function (canvas, drawMethod, top, caching, skipBuffer, skipComposition) {
          var layer = this.getLayer(), context = canvas && canvas.getContext(), clipWidth = this.clipWidth(), clipHeight = this.clipHeight(), clipFunc = this.clipFunc(), hasClip = (clipWidth && clipHeight) || clipFunc, clipX, clipY;
          if (hasClip && layer) {
              context.save();
              var transform = this.getAbsoluteTransform(top);
              var m = transform.getMatrix();
              context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
              context.beginPath();
              if (clipFunc) {
                  clipFunc.call(this, context, this);
              }
              else {
                  clipX = this.clipX();
                  clipY = this.clipY();
                  context.rect(clipX, clipY, clipWidth, clipHeight);
              }
              context.clip();
              m = transform
                  .copy()
                  .invert()
                  .getMatrix();
              context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
          }
          var hasComposition = this.globalCompositeOperation() !== 'source-over' &&
              !skipComposition &&
              drawMethod === 'drawScene';
          if (hasComposition && layer) {
              context.save();
              context._applyGlobalCompositeOperation(this);
          }
          this.children.each(function (child) {
              child[drawMethod](canvas, top, caching, skipBuffer);
          });
          if (hasComposition && layer) {
              context.restore();
          }
          if (hasClip && layer) {
              context.restore();
          }
      };
      Container.prototype.shouldDrawHit = function (canvas) {
          if (canvas && canvas.isCache) {
              return true;
          }
          var layer = this.getLayer();
          var layerUnderDrag = false;
          DragAndDrop_1.DD._dragElements.forEach(function (elem) {
              if (elem.dragStatus === 'dragging' && elem.node.getLayer() === layer) {
                  layerUnderDrag = true;
              }
          });
          var dragSkip = !Global_1.Konva.hitOnDragEnabled && layerUnderDrag;
          return layer && layer.hitGraphEnabled() && this.isVisible() && !dragSkip;
      };
      Container.prototype.getClientRect = function (attrs) {
          attrs = attrs || {};
          var skipTransform = attrs.skipTransform;
          var relativeTo = attrs.relativeTo;
          var minX, minY, maxX, maxY;
          var selfRect = {
              x: Infinity,
              y: Infinity,
              width: 0,
              height: 0
          };
          var that = this;
          this.children.each(function (child) {
              if (!child.visible()) {
                  return;
              }
              var rect = child.getClientRect({
                  relativeTo: that,
                  skipShadow: attrs.skipShadow,
                  skipStroke: attrs.skipStroke
              });
              if (rect.width === 0 && rect.height === 0) {
                  return;
              }
              if (minX === undefined) {
                  minX = rect.x;
                  minY = rect.y;
                  maxX = rect.x + rect.width;
                  maxY = rect.y + rect.height;
              }
              else {
                  minX = Math.min(minX, rect.x);
                  minY = Math.min(minY, rect.y);
                  maxX = Math.max(maxX, rect.x + rect.width);
                  maxY = Math.max(maxY, rect.y + rect.height);
              }
          });
          var shapes = this.find('Shape');
          var hasVisible = false;
          for (var i = 0; i < shapes.length; i++) {
              var shape = shapes[i];
              if (shape._isVisible(this)) {
                  hasVisible = true;
                  break;
              }
          }
          if (hasVisible) {
              selfRect = {
                  x: minX,
                  y: minY,
                  width: maxX - minX,
                  height: maxY - minY
              };
          }
          else {
              selfRect = {
                  x: 0,
                  y: 0,
                  width: 0,
                  height: 0
              };
          }
          if (!skipTransform) {
              return this._transformedRect(selfRect, relativeTo);
          }
          return selfRect;
      };
      return Container;
  }(Node_1.Node));
  exports.Container = Container;
  Factory_1.Factory.addComponentsGetterSetter(Container, 'clip', [
      'x',
      'y',
      'width',
      'height'
  ]);
  Factory_1.Factory.addGetterSetter(Container, 'clipX', undefined, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Container, 'clipY', undefined, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Container, 'clipWidth', undefined, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Container, 'clipHeight', undefined, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Container, 'clipFunc');
  Util_1.Collection.mapMethods(Container);

  },{"./DragAndDrop":9,"./Factory":10,"./Global":12,"./Node":15,"./Util":20,"./Validators":21}],8:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("./Util");
  var Global_1 = _dereq_("./Global");
  var COMMA = ',', OPEN_PAREN = '(', CLOSE_PAREN = ')', OPEN_PAREN_BRACKET = '([', CLOSE_BRACKET_PAREN = '])', SEMICOLON = ';', DOUBLE_PAREN = '()', EQUALS = '=', CONTEXT_METHODS = [
      'arc',
      'arcTo',
      'beginPath',
      'bezierCurveTo',
      'clearRect',
      'clip',
      'closePath',
      'createLinearGradient',
      'createPattern',
      'createRadialGradient',
      'drawImage',
      'ellipse',
      'fill',
      'fillText',
      'getImageData',
      'createImageData',
      'lineTo',
      'moveTo',
      'putImageData',
      'quadraticCurveTo',
      'rect',
      'restore',
      'rotate',
      'save',
      'scale',
      'setLineDash',
      'setTransform',
      'stroke',
      'strokeText',
      'transform',
      'translate'
  ];
  var CONTEXT_PROPERTIES = [
      'fillStyle',
      'strokeStyle',
      'shadowColor',
      'shadowBlur',
      'shadowOffsetX',
      'shadowOffsetY',
      'lineCap',
      'lineDashOffset',
      'lineJoin',
      'lineWidth',
      'miterLimit',
      'font',
      'textAlign',
      'textBaseline',
      'globalAlpha',
      'globalCompositeOperation',
      'imageSmoothingEnabled'
  ];
  var traceArrMax = 100;
  var Context = (function () {
      function Context(canvas) {
          this.canvas = canvas;
          this._context = canvas._canvas.getContext('2d');
          if (Global_1.Konva.enableTrace) {
              this.traceArr = [];
              this._enableTrace();
          }
      }
      Context.prototype.fillShape = function (shape) {
          if (shape.getFillEnabled()) {
              this._fill(shape);
          }
      };
      Context.prototype._fill = function (shape) {
      };
      Context.prototype.strokeShape = function (shape) {
          if (shape.getStrokeEnabled()) {
              this._stroke(shape);
          }
      };
      Context.prototype._stroke = function (shape) {
      };
      Context.prototype.fillStrokeShape = function (shape) {
          if (shape.getFillEnabled()) {
              this._fill(shape);
          }
          if (shape.getStrokeEnabled()) {
              this._stroke(shape);
          }
      };
      Context.prototype.getTrace = function (relaxed) {
          var traceArr = this.traceArr, len = traceArr.length, str = '', n, trace, method, args;
          for (n = 0; n < len; n++) {
              trace = traceArr[n];
              method = trace.method;
              if (method) {
                  args = trace.args;
                  str += method;
                  if (relaxed) {
                      str += DOUBLE_PAREN;
                  }
                  else {
                      if (Util_1.Util._isArray(args[0])) {
                          str += OPEN_PAREN_BRACKET + args.join(COMMA) + CLOSE_BRACKET_PAREN;
                      }
                      else {
                          str += OPEN_PAREN + args.join(COMMA) + CLOSE_PAREN;
                      }
                  }
              }
              else {
                  str += trace.property;
                  if (!relaxed) {
                      str += EQUALS + trace.val;
                  }
              }
              str += SEMICOLON;
          }
          return str;
      };
      Context.prototype.clearTrace = function () {
          this.traceArr = [];
      };
      Context.prototype._trace = function (str) {
          var traceArr = this.traceArr, len;
          traceArr.push(str);
          len = traceArr.length;
          if (len >= traceArrMax) {
              traceArr.shift();
          }
      };
      Context.prototype.reset = function () {
          var pixelRatio = this.getCanvas().getPixelRatio();
          this.setTransform(1 * pixelRatio, 0, 0, 1 * pixelRatio, 0, 0);
      };
      Context.prototype.getCanvas = function () {
          return this.canvas;
      };
      Context.prototype.clear = function (bounds) {
          var canvas = this.getCanvas();
          if (bounds) {
              this.clearRect(bounds.x || 0, bounds.y || 0, bounds.width || 0, bounds.height || 0);
          }
          else {
              this.clearRect(0, 0, canvas.getWidth() / canvas.pixelRatio, canvas.getHeight() / canvas.pixelRatio);
          }
      };
      Context.prototype._applyLineCap = function (shape) {
          var lineCap = shape.getLineCap();
          if (lineCap) {
              this.setAttr('lineCap', lineCap);
          }
      };
      Context.prototype._applyOpacity = function (shape) {
          var absOpacity = shape.getAbsoluteOpacity();
          if (absOpacity !== 1) {
              this.setAttr('globalAlpha', absOpacity);
          }
      };
      Context.prototype._applyLineJoin = function (shape) {
          var lineJoin = shape.getLineJoin();
          if (lineJoin) {
              this.setAttr('lineJoin', lineJoin);
          }
      };
      Context.prototype.setAttr = function (attr, val) {
          this._context[attr] = val;
      };
      Context.prototype.arc = function (a0, a1, a2, a3, a4, a5) {
          this._context.arc(a0, a1, a2, a3, a4, a5);
      };
      Context.prototype.arcTo = function (a0, a1, a2, a3, a4) {
          this._context.arcTo(a0, a1, a2, a3, a4);
      };
      Context.prototype.beginPath = function () {
          this._context.beginPath();
      };
      Context.prototype.bezierCurveTo = function (a0, a1, a2, a3, a4, a5) {
          this._context.bezierCurveTo(a0, a1, a2, a3, a4, a5);
      };
      Context.prototype.clearRect = function (a0, a1, a2, a3) {
          this._context.clearRect(a0, a1, a2, a3);
      };
      Context.prototype.clip = function () {
          this._context.clip();
      };
      Context.prototype.closePath = function () {
          this._context.closePath();
      };
      Context.prototype.createImageData = function (a0, a1) {
          var a = arguments;
          if (a.length === 2) {
              return this._context.createImageData(a0, a1);
          }
          else if (a.length === 1) {
              return this._context.createImageData(a0);
          }
      };
      Context.prototype.createLinearGradient = function (a0, a1, a2, a3) {
          return this._context.createLinearGradient(a0, a1, a2, a3);
      };
      Context.prototype.createPattern = function (a0, a1) {
          return this._context.createPattern(a0, a1);
      };
      Context.prototype.createRadialGradient = function (a0, a1, a2, a3, a4, a5) {
          return this._context.createRadialGradient(a0, a1, a2, a3, a4, a5);
      };
      Context.prototype.drawImage = function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
          var a = arguments, _context = this._context;
          if (a.length === 3) {
              _context.drawImage(a0, a1, a2);
          }
          else if (a.length === 5) {
              _context.drawImage(a0, a1, a2, a3, a4);
          }
          else if (a.length === 9) {
              _context.drawImage(a0, a1, a2, a3, a4, a5, a6, a7, a8);
          }
      };
      Context.prototype.ellipse = function (a0, a1, a2, a3, a4, a5, a6, a7) {
          this._context.ellipse(a0, a1, a2, a3, a4, a5, a6, a7);
      };
      Context.prototype.isPointInPath = function (x, y) {
          return this._context.isPointInPath(x, y);
      };
      Context.prototype.fill = function () {
          this._context.fill();
      };
      Context.prototype.fillRect = function (x, y, width, height) {
          this._context.fillRect(x, y, width, height);
      };
      Context.prototype.strokeRect = function (x, y, width, height) {
          this._context.strokeRect(x, y, width, height);
      };
      Context.prototype.fillText = function (a0, a1, a2) {
          this._context.fillText(a0, a1, a2);
      };
      Context.prototype.measureText = function (text) {
          return this._context.measureText(text);
      };
      Context.prototype.getImageData = function (a0, a1, a2, a3) {
          return this._context.getImageData(a0, a1, a2, a3);
      };
      Context.prototype.lineTo = function (a0, a1) {
          this._context.lineTo(a0, a1);
      };
      Context.prototype.moveTo = function (a0, a1) {
          this._context.moveTo(a0, a1);
      };
      Context.prototype.rect = function (a0, a1, a2, a3) {
          this._context.rect(a0, a1, a2, a3);
      };
      Context.prototype.putImageData = function (a0, a1, a2) {
          this._context.putImageData(a0, a1, a2);
      };
      Context.prototype.quadraticCurveTo = function (a0, a1, a2, a3) {
          this._context.quadraticCurveTo(a0, a1, a2, a3);
      };
      Context.prototype.restore = function () {
          this._context.restore();
      };
      Context.prototype.rotate = function (a0) {
          this._context.rotate(a0);
      };
      Context.prototype.save = function () {
          this._context.save();
      };
      Context.prototype.scale = function (a0, a1) {
          this._context.scale(a0, a1);
      };
      Context.prototype.setLineDash = function (a0) {
          if (this._context.setLineDash) {
              this._context.setLineDash(a0);
          }
          else if ('mozDash' in this._context) {
              this._context['mozDash'] = a0;
          }
          else if ('webkitLineDash' in this._context) {
              this._context['webkitLineDash'] = a0;
          }
      };
      Context.prototype.getLineDash = function () {
          return this._context.getLineDash();
      };
      Context.prototype.setTransform = function (a0, a1, a2, a3, a4, a5) {
          this._context.setTransform(a0, a1, a2, a3, a4, a5);
      };
      Context.prototype.stroke = function () {
          this._context.stroke();
      };
      Context.prototype.strokeText = function (a0, a1, a2, a3) {
          this._context.strokeText(a0, a1, a2, a3);
      };
      Context.prototype.transform = function (a0, a1, a2, a3, a4, a5) {
          this._context.transform(a0, a1, a2, a3, a4, a5);
      };
      Context.prototype.translate = function (a0, a1) {
          this._context.translate(a0, a1);
      };
      Context.prototype._enableTrace = function () {
          var that = this, len = CONTEXT_METHODS.length, _simplifyArray = Util_1.Util._simplifyArray, origSetter = this.setAttr, n, args;
          var func = function (methodName) {
              var origMethod = that[methodName], ret;
              that[methodName] = function () {
                  args = _simplifyArray(Array.prototype.slice.call(arguments, 0));
                  ret = origMethod.apply(that, arguments);
                  that._trace({
                      method: methodName,
                      args: args
                  });
                  return ret;
              };
          };
          for (n = 0; n < len; n++) {
              func(CONTEXT_METHODS[n]);
          }
          that.setAttr = function () {
              origSetter.apply(that, arguments);
              var prop = arguments[0];
              var val = arguments[1];
              if (prop === 'shadowOffsetX' ||
                  prop === 'shadowOffsetY' ||
                  prop === 'shadowBlur') {
                  val = val / this.canvas.getPixelRatio();
              }
              that._trace({
                  property: prop,
                  val: val
              });
          };
      };
      Context.prototype._applyGlobalCompositeOperation = function (node) {
          var globalCompositeOperation = node.getGlobalCompositeOperation();
          if (globalCompositeOperation !== 'source-over') {
              this.setAttr('globalCompositeOperation', globalCompositeOperation);
          }
      };
      return Context;
  }());
  exports.Context = Context;
  CONTEXT_PROPERTIES.forEach(function (prop) {
      Object.defineProperty(Context.prototype, prop, {
          get: function () {
              return this._context[prop];
          },
          set: function (val) {
              this._context[prop] = val;
          }
      });
  });
  var SceneContext = (function (_super) {
      __extends(SceneContext, _super);
      function SceneContext() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      SceneContext.prototype._fillColor = function (shape) {
          var fill = shape.fill();
          this.setAttr('fillStyle', fill);
          shape._fillFunc(this);
      };
      SceneContext.prototype._fillPattern = function (shape) {
          var fillPatternX = shape.getFillPatternX(), fillPatternY = shape.getFillPatternY(), fillPatternRotation = Global_1.Konva.getAngle(shape.getFillPatternRotation()), fillPatternOffsetX = shape.getFillPatternOffsetX(), fillPatternOffsetY = shape.getFillPatternOffsetY(), fillPatternScaleX = shape.getFillPatternScaleX(), fillPatternScaleY = shape.getFillPatternScaleY();
          if (fillPatternX || fillPatternY) {
              this.translate(fillPatternX || 0, fillPatternY || 0);
          }
          if (fillPatternRotation) {
              this.rotate(fillPatternRotation);
          }
          if (fillPatternScaleX || fillPatternScaleY) {
              this.scale(fillPatternScaleX, fillPatternScaleY);
          }
          if (fillPatternOffsetX || fillPatternOffsetY) {
              this.translate(-1 * fillPatternOffsetX, -1 * fillPatternOffsetY);
          }
          this.setAttr('fillStyle', shape._getFillPattern());
          shape._fillFunc(this);
      };
      SceneContext.prototype._fillLinearGradient = function (shape) {
          var grd = shape._getLinearGradient();
          if (grd) {
              this.setAttr('fillStyle', grd);
              shape._fillFunc(this);
          }
      };
      SceneContext.prototype._fillRadialGradient = function (shape) {
          var grd = shape._getRadialGradient();
          if (grd) {
              this.setAttr('fillStyle', grd);
              shape._fillFunc(this);
          }
      };
      SceneContext.prototype._fill = function (shape) {
          var hasColor = shape.fill(), fillPriority = shape.getFillPriority();
          if (hasColor && fillPriority === 'color') {
              this._fillColor(shape);
              return;
          }
          var hasPattern = shape.getFillPatternImage();
          if (hasPattern && fillPriority === 'pattern') {
              this._fillPattern(shape);
              return;
          }
          var hasLinearGradient = shape.getFillLinearGradientColorStops();
          if (hasLinearGradient && fillPriority === 'linear-gradient') {
              this._fillLinearGradient(shape);
              return;
          }
          var hasRadialGradient = shape.getFillRadialGradientColorStops();
          if (hasRadialGradient && fillPriority === 'radial-gradient') {
              this._fillRadialGradient(shape);
              return;
          }
          if (hasColor) {
              this._fillColor(shape);
          }
          else if (hasPattern) {
              this._fillPattern(shape);
          }
          else if (hasLinearGradient) {
              this._fillLinearGradient(shape);
          }
          else if (hasRadialGradient) {
              this._fillRadialGradient(shape);
          }
      };
      SceneContext.prototype._strokeLinearGradient = function (shape) {
          var start = shape.getStrokeLinearGradientStartPoint(), end = shape.getStrokeLinearGradientEndPoint(), colorStops = shape.getStrokeLinearGradientColorStops(), grd = this.createLinearGradient(start.x, start.y, end.x, end.y);
          if (colorStops) {
              for (var n = 0; n < colorStops.length; n += 2) {
                  grd.addColorStop(colorStops[n], colorStops[n + 1]);
              }
              this.setAttr('strokeStyle', grd);
          }
      };
      SceneContext.prototype._stroke = function (shape) {
          var dash = shape.dash(), strokeScaleEnabled = shape.getStrokeScaleEnabled();
          if (shape.hasStroke()) {
              if (!strokeScaleEnabled) {
                  this.save();
                  var pixelRatio = this.getCanvas().getPixelRatio();
                  this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
              }
              this._applyLineCap(shape);
              if (dash && shape.dashEnabled()) {
                  this.setLineDash(dash);
                  this.setAttr('lineDashOffset', shape.dashOffset());
              }
              this.setAttr('lineWidth', shape.strokeWidth());
              if (!shape.getShadowForStrokeEnabled()) {
                  this.setAttr('shadowColor', 'rgba(0,0,0,0)');
              }
              var hasLinearGradient = shape.getStrokeLinearGradientColorStops();
              if (hasLinearGradient) {
                  this._strokeLinearGradient(shape);
              }
              else {
                  this.setAttr('strokeStyle', shape.stroke());
              }
              shape._strokeFunc(this);
              if (!strokeScaleEnabled) {
                  this.restore();
              }
          }
      };
      SceneContext.prototype._applyShadow = function (shape) {
          var util = Util_1.Util, color = util.get(shape.getShadowRGBA(), 'black'), blur = util.get(shape.getShadowBlur(), 5), offset = util.get(shape.getShadowOffset(), {
              x: 0,
              y: 0
          }), scale = shape.getAbsoluteScale(), ratio = this.canvas.getPixelRatio(), scaleX = scale.x * ratio, scaleY = scale.y * ratio;
          this.setAttr('shadowColor', color);
          this.setAttr('shadowBlur', blur * Math.min(Math.abs(scaleX), Math.abs(scaleY)));
          this.setAttr('shadowOffsetX', offset.x * scaleX);
          this.setAttr('shadowOffsetY', offset.y * scaleY);
      };
      return SceneContext;
  }(Context));
  exports.SceneContext = SceneContext;
  var HitContext = (function (_super) {
      __extends(HitContext, _super);
      function HitContext() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      HitContext.prototype._fill = function (shape) {
          this.save();
          this.setAttr('fillStyle', shape.colorKey);
          shape._fillFuncHit(this);
          this.restore();
      };
      HitContext.prototype._stroke = function (shape) {
          if (shape.hasStroke() && shape.hitStrokeWidth()) {
              var strokeScaleEnabled = shape.getStrokeScaleEnabled();
              if (!strokeScaleEnabled) {
                  this.save();
                  var pixelRatio = this.getCanvas().getPixelRatio();
                  this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
              }
              this._applyLineCap(shape);
              var hitStrokeWidth = shape.hitStrokeWidth();
              var strokeWidth = hitStrokeWidth === 'auto' ? shape.strokeWidth() : hitStrokeWidth;
              this.setAttr('lineWidth', strokeWidth);
              this.setAttr('strokeStyle', shape.colorKey);
              shape._strokeFuncHit(this);
              if (!strokeScaleEnabled) {
                  this.restore();
              }
          }
      };
      return HitContext;
  }(Context));
  exports.HitContext = HitContext;

  },{"./Global":12,"./Util":20}],9:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Global_1 = _dereq_("./Global");
  var Util_1 = _dereq_("./Util");
  exports.DD = {
      get isDragging() {
          var flag = false;
          exports.DD._dragElements.forEach(function (elem) {
              if (elem.dragStatus === 'dragging') {
                  flag = true;
              }
          });
          return flag;
      },
      justDragged: false,
      get node() {
          var node;
          exports.DD._dragElements.forEach(function (elem) {
              node = elem.node;
          });
          return node;
      },
      _dragElements: new Map(),
      _drag: function (evt) {
          exports.DD._dragElements.forEach(function (elem, key) {
              var node = elem.node;
              var stage = node.getStage();
              stage.setPointersPositions(evt);
              if (elem.pointerId === undefined) {
                  elem.pointerId = Util_1.Util._getFirstPointerId(evt);
              }
              var pos = stage._changedPointerPositions.find(function (pos) { return pos.id === elem.pointerId; });
              if (!pos) {
                  return;
              }
              if (elem.dragStatus !== 'dragging') {
                  var dragDistance = node.dragDistance();
                  var distance = Math.max(Math.abs(pos.x - elem.startPointerPos.x), Math.abs(pos.y - elem.startPointerPos.y));
                  if (distance < dragDistance) {
                      return;
                  }
                  node.startDrag({ evt: evt });
                  if (!node.isDragging()) {
                      return;
                  }
              }
              node._setDragPosition(evt, elem);
              node.fire('dragmove', {
                  type: 'dragmove',
                  target: node,
                  evt: evt
              }, true);
          });
      },
      _endDragBefore: function (evt) {
          exports.DD._dragElements.forEach(function (elem, key) {
              var node = elem.node;
              var stage = node.getStage();
              if (evt) {
                  stage.setPointersPositions(evt);
              }
              var pos = stage._changedPointerPositions.find(function (pos) { return pos.id === elem.pointerId; });
              if (!pos) {
                  return;
              }
              if (elem.dragStatus === 'dragging') {
                  exports.DD.justDragged = true;
                  Global_1.Konva.listenClickTap = false;
                  elem.dragStatus = 'stopped';
              }
              var drawNode = elem.node.getLayer() ||
                  (elem.node instanceof Global_1.Konva['Stage'] && elem.node);
              if (drawNode) {
                  drawNode.draw();
              }
          });
      },
      _endDragAfter: function (evt) {
          exports.DD._dragElements.forEach(function (elem, key) {
              if (elem.dragStatus === 'stopped') {
                  elem.node.fire('dragend', {
                      type: 'dragend',
                      target: elem.node,
                      evt: evt
                  }, true);
              }
              if (elem.dragStatus !== 'dragging') {
                  exports.DD._dragElements.delete(key);
              }
          });
      }
  };
  if (Global_1.Konva.isBrowser) {
      window.addEventListener('mouseup', exports.DD._endDragBefore, true);
      window.addEventListener('touchend', exports.DD._endDragBefore, true);
      window.addEventListener('mousemove', exports.DD._drag);
      window.addEventListener('touchmove', exports.DD._drag);
      window.addEventListener('mouseup', exports.DD._endDragAfter, false);
      window.addEventListener('touchend', exports.DD._endDragAfter, false);
  }

  },{"./Global":12,"./Util":20}],10:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("./Util");
  var Validators_1 = _dereq_("./Validators");
  var GET = 'get', SET = 'set';
  exports.Factory = {
      addGetterSetter: function (constructor, attr, def, validator, after) {
          this.addGetter(constructor, attr, def);
          this.addSetter(constructor, attr, validator, after);
          this.addOverloadedGetterSetter(constructor, attr);
      },
      addGetter: function (constructor, attr, def) {
          var method = GET + Util_1.Util._capitalize(attr);
          constructor.prototype[method] =
              constructor.prototype[method] ||
                  function () {
                      var val = this.attrs[attr];
                      return val === undefined ? def : val;
                  };
      },
      addSetter: function (constructor, attr, validator, after) {
          var method = SET + Util_1.Util._capitalize(attr);
          if (!constructor.prototype[method]) {
              exports.Factory.overWriteSetter(constructor, attr, validator, after);
          }
      },
      overWriteSetter: function (constructor, attr, validator, after) {
          var method = SET + Util_1.Util._capitalize(attr);
          constructor.prototype[method] = function (val) {
              if (validator && val !== undefined && val !== null) {
                  val = validator.call(this, val, attr);
              }
              this._setAttr(attr, val);
              if (after) {
                  after.call(this);
              }
              return this;
          };
      },
      addComponentsGetterSetter: function (constructor, attr, components, validator, after) {
          var len = components.length, capitalize = Util_1.Util._capitalize, getter = GET + capitalize(attr), setter = SET + capitalize(attr), n, component;
          constructor.prototype[getter] = function () {
              var ret = {};
              for (n = 0; n < len; n++) {
                  component = components[n];
                  ret[component] = this.getAttr(attr + capitalize(component));
              }
              return ret;
          };
          var basicValidator = Validators_1.getComponentValidator(components);
          constructor.prototype[setter] = function (val) {
              var oldVal = this.attrs[attr], key;
              if (validator) {
                  val = validator.call(this, val);
              }
              if (basicValidator) {
                  basicValidator.call(this, val, attr);
              }
              for (key in val) {
                  if (!val.hasOwnProperty(key)) {
                      continue;
                  }
                  this._setAttr(attr + capitalize(key), val[key]);
              }
              this._fireChangeEvent(attr, oldVal, val);
              if (after) {
                  after.call(this);
              }
              return this;
          };
          this.addOverloadedGetterSetter(constructor, attr);
      },
      addOverloadedGetterSetter: function (constructor, attr) {
          var capitalizedAttr = Util_1.Util._capitalize(attr), setter = SET + capitalizedAttr, getter = GET + capitalizedAttr;
          constructor.prototype[attr] = function () {
              if (arguments.length) {
                  this[setter](arguments[0]);
                  return this;
              }
              return this[getter]();
          };
      },
      addDeprecatedGetterSetter: function (constructor, attr, def, validator) {
          Util_1.Util.error('Adding deprecated ' + attr);
          var method = GET + Util_1.Util._capitalize(attr);
          var message = attr +
              ' property is deprecated and will be removed soon. Look at Konva change log for more information.';
          constructor.prototype[method] = function () {
              Util_1.Util.error(message);
              var val = this.attrs[attr];
              return val === undefined ? def : val;
          };
          this.addSetter(constructor, attr, validator, function () {
              Util_1.Util.error(message);
          });
          this.addOverloadedGetterSetter(constructor, attr);
      },
      backCompat: function (constructor, methods) {
          Util_1.Util.each(methods, function (oldMethodName, newMethodName) {
              var method = constructor.prototype[newMethodName];
              var oldGetter = GET + Util_1.Util._capitalize(oldMethodName);
              var oldSetter = SET + Util_1.Util._capitalize(oldMethodName);
              function deprecated() {
                  method.apply(this, arguments);
                  Util_1.Util.error('"' +
                      oldMethodName +
                      '" method is deprecated and will be removed soon. Use ""' +
                      newMethodName +
                      '" instead.');
              }
              constructor.prototype[oldMethodName] = deprecated;
              constructor.prototype[oldGetter] = deprecated;
              constructor.prototype[oldSetter] = deprecated;
          });
      },
      afterSetFilter: function () {
          this._filterUpToDate = false;
      }
  };

  },{"./Util":20,"./Validators":21}],11:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("./Util");
  var Container_1 = _dereq_("./Container");
  var BaseLayer_1 = _dereq_("./BaseLayer");
  var Global_1 = _dereq_("./Global");
  var FastLayer = (function (_super) {
      __extends(FastLayer, _super);
      function FastLayer() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      FastLayer.prototype._validateAdd = function (child) {
          var type = child.getType();
          if (type !== 'Shape') {
              Util_1.Util.throw('You may only add shapes to a fast layer.');
          }
      };
      FastLayer.prototype._setCanvasSize = function (width, height) {
          this.canvas.setSize(width, height);
          this._checkSmooth();
      };
      FastLayer.prototype.hitGraphEnabled = function () {
          return false;
      };
      FastLayer.prototype.drawScene = function (can) {
          var layer = this.getLayer(), canvas = can || (layer && layer.getCanvas());
          if (this.clearBeforeDraw()) {
              canvas.getContext().clear();
          }
          Container_1.Container.prototype.drawScene.call(this, canvas);
          return this;
      };
      FastLayer.prototype.draw = function () {
          this.drawScene();
          return this;
      };
      return FastLayer;
  }(BaseLayer_1.BaseLayer));
  exports.FastLayer = FastLayer;
  FastLayer.prototype.nodeType = 'FastLayer';
  Global_1._registerNode(FastLayer);
  Util_1.Collection.mapMethods(FastLayer);

  },{"./BaseLayer":5,"./Container":7,"./Global":12,"./Util":20}],12:[function(_dereq_,module,exports){
  (function (global){
  Object.defineProperty(exports, "__esModule", { value: true });
  var PI_OVER_180 = Math.PI / 180;
  function detectBrowser() {
      return (typeof window !== 'undefined' &&
          ({}.toString.call(window) === '[object Window]' ||
              {}.toString.call(window) === '[object global]'));
  }
  var _detectIE = function (ua) {
      var msie = ua.indexOf('msie ');
      if (msie > 0) {
          return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
      }
      var trident = ua.indexOf('trident/');
      if (trident > 0) {
          var rv = ua.indexOf('rv:');
          return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
      }
      var edge = ua.indexOf('edge/');
      if (edge > 0) {
          return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
      }
      return false;
  };
  exports._parseUA = function (userAgent) {
      var ua = userAgent.toLowerCase(), match = /(chrome)[ /]([\w.]+)/.exec(ua) ||
          /(webkit)[ /]([\w.]+)/.exec(ua) ||
          /(opera)(?:.*version|)[ /]([\w.]+)/.exec(ua) ||
          /(msie) ([\w.]+)/.exec(ua) ||
          (ua.indexOf('compatible') < 0 &&
              /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua)) ||
          [], mobile = !!userAgent.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i), ieMobile = !!userAgent.match(/IEMobile/i);
      return {
          browser: match[1] || '',
          version: match[2] || '0',
          isIE: _detectIE(ua),
          mobile: mobile,
          ieMobile: ieMobile
      };
  };
  exports.glob = typeof global !== 'undefined'
      ? global
      : typeof window !== 'undefined'
          ? window
          : typeof WorkerGlobalScope !== 'undefined'
              ? self
              : {};
  exports.Konva = {
      _global: exports.glob,
      version: '4.0.16',
      isBrowser: detectBrowser(),
      isUnminified: /param/.test(function (param) { }.toString()),
      dblClickWindow: 400,
      getAngle: function (angle) {
          return exports.Konva.angleDeg ? angle * PI_OVER_180 : angle;
      },
      enableTrace: false,
      _pointerEventsEnabled: false,
      hitOnDragEnabled: false,
      captureTouchEventsEnabled: false,
      listenClickTap: false,
      inDblClickWindow: false,
      pixelRatio: undefined,
      dragDistance: 3,
      angleDeg: true,
      showWarnings: true,
      dragButtons: [0, 1],
      isDragging: function () {
          return exports.Konva['DD'].isDragging;
      },
      isDragReady: function () {
          return !!exports.Konva['DD'].node;
      },
      UA: exports._parseUA((exports.glob.navigator && exports.glob.navigator.userAgent) || ''),
      document: exports.glob.document,
      _injectGlobal: function (Konva) {
          exports.glob.Konva = Konva;
      },
      _parseUA: exports._parseUA
  };
  exports._NODES_REGISTRY = {};
  exports._registerNode = function (NodeClass) {
      exports._NODES_REGISTRY[NodeClass.prototype.getClassName()] = NodeClass;
      exports.Konva[NodeClass.prototype.getClassName()] = NodeClass;
  };

  }).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});

  },{}],13:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("./Util");
  var Container_1 = _dereq_("./Container");
  var Global_1 = _dereq_("./Global");
  var Group = (function (_super) {
      __extends(Group, _super);
      function Group() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      Group.prototype._validateAdd = function (child) {
          var type = child.getType();
          if (type !== 'Group' && type !== 'Shape') {
              Util_1.Util.throw('You may only add groups and shapes to groups.');
          }
      };
      return Group;
  }(Container_1.Container));
  exports.Group = Group;
  Group.prototype.nodeType = 'Group';
  Global_1._registerNode(Group);
  Util_1.Collection.mapMethods(Group);

  },{"./Container":7,"./Global":12,"./Util":20}],14:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("./Util");
  var Container_1 = _dereq_("./Container");
  var Factory_1 = _dereq_("./Factory");
  var BaseLayer_1 = _dereq_("./BaseLayer");
  var Canvas_1 = _dereq_("./Canvas");
  var Shape_1 = _dereq_("./Shape");
  var Validators_1 = _dereq_("./Validators");
  var Global_1 = _dereq_("./Global");
  var HASH = '#', BEFORE_DRAW = 'beforeDraw', DRAW = 'draw', INTERSECTION_OFFSETS = [
      { x: 0, y: 0 },
      { x: -1, y: -1 },
      { x: 1, y: -1 },
      { x: 1, y: 1 },
      { x: -1, y: 1 }
  ], INTERSECTION_OFFSETS_LEN = INTERSECTION_OFFSETS.length;
  var Layer = (function (_super) {
      __extends(Layer, _super);
      function Layer() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.hitCanvas = new Canvas_1.HitCanvas({
              pixelRatio: 1
          });
          return _this;
      }
      Layer.prototype._setCanvasSize = function (width, height) {
          this.canvas.setSize(width, height);
          this.hitCanvas.setSize(width, height);
          this._checkSmooth();
      };
      Layer.prototype._validateAdd = function (child) {
          var type = child.getType();
          if (type !== 'Group' && type !== 'Shape') {
              Util_1.Util.throw('You may only add groups and shapes to a layer.');
          }
      };
      Layer.prototype.getIntersection = function (pos, selector) {
          var obj, i, intersectionOffset, shape;
          if (!this.hitGraphEnabled() || !this.isVisible()) {
              return null;
          }
          var spiralSearchDistance = 1;
          var continueSearch = false;
          while (true) {
              for (i = 0; i < INTERSECTION_OFFSETS_LEN; i++) {
                  intersectionOffset = INTERSECTION_OFFSETS[i];
                  obj = this._getIntersection({
                      x: pos.x + intersectionOffset.x * spiralSearchDistance,
                      y: pos.y + intersectionOffset.y * spiralSearchDistance
                  });
                  shape = obj.shape;
                  if (shape && selector) {
                      return shape.findAncestor(selector, true);
                  }
                  else if (shape) {
                      return shape;
                  }
                  continueSearch = !!obj.antialiased;
                  if (!obj.antialiased) {
                      break;
                  }
              }
              if (continueSearch) {
                  spiralSearchDistance += 1;
              }
              else {
                  return null;
              }
          }
      };
      Layer.prototype._getIntersection = function (pos) {
          var ratio = this.hitCanvas.pixelRatio;
          var p = this.hitCanvas.context.getImageData(Math.round(pos.x * ratio), Math.round(pos.y * ratio), 1, 1).data, p3 = p[3], colorKey, shape;
          if (p3 === 255) {
              colorKey = Util_1.Util._rgbToHex(p[0], p[1], p[2]);
              shape = Shape_1.shapes[HASH + colorKey];
              if (shape) {
                  return {
                      shape: shape
                  };
              }
              return {
                  antialiased: true
              };
          }
          else if (p3 > 0) {
              return {
                  antialiased: true
              };
          }
          return {};
      };
      Layer.prototype.drawScene = function (can, top) {
          var layer = this.getLayer(), canvas = can || (layer && layer.getCanvas());
          this._fire(BEFORE_DRAW, {
              node: this
          });
          if (this.clearBeforeDraw()) {
              canvas.getContext().clear();
          }
          Container_1.Container.prototype.drawScene.call(this, canvas, top);
          this._fire(DRAW, {
              node: this
          });
          return this;
      };
      Layer.prototype.drawHit = function (can, top) {
          var layer = this.getLayer(), canvas = can || (layer && layer.hitCanvas);
          if (layer && layer.clearBeforeDraw()) {
              layer
                  .getHitCanvas()
                  .getContext()
                  .clear();
          }
          Container_1.Container.prototype.drawHit.call(this, canvas, top);
          return this;
      };
      Layer.prototype.clear = function (bounds) {
          BaseLayer_1.BaseLayer.prototype.clear.call(this, bounds);
          this.getHitCanvas()
              .getContext()
              .clear(bounds);
          return this;
      };
      Layer.prototype.enableHitGraph = function () {
          this.hitGraphEnabled(true);
          return this;
      };
      Layer.prototype.disableHitGraph = function () {
          this.hitGraphEnabled(false);
          return this;
      };
      Layer.prototype.toggleHitCanvas = function () {
          if (!this.parent) {
              return;
          }
          var parent = this.parent;
          var added = !!this.hitCanvas._canvas.parentNode;
          if (added) {
              parent.content.removeChild(this.hitCanvas._canvas);
          }
          else {
              parent.content.appendChild(this.hitCanvas._canvas);
          }
      };
      Layer.prototype.setSize = function (_a) {
          var width = _a.width, height = _a.height;
          _super.prototype.setSize.call(this, { width: width, height: height });
          this.hitCanvas.setSize(width, height);
          return this;
      };
      return Layer;
  }(BaseLayer_1.BaseLayer));
  exports.Layer = Layer;
  Layer.prototype.nodeType = 'Layer';
  Global_1._registerNode(Layer);
  Factory_1.Factory.addGetterSetter(Layer, 'hitGraphEnabled', true, Validators_1.getBooleanValidator());
  Util_1.Collection.mapMethods(Layer);

  },{"./BaseLayer":5,"./Canvas":6,"./Container":7,"./Factory":10,"./Global":12,"./Shape":17,"./Util":20,"./Validators":21}],15:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("./Util");
  var Factory_1 = _dereq_("./Factory");
  var Canvas_1 = _dereq_("./Canvas");
  var Global_1 = _dereq_("./Global");
  var DragAndDrop_1 = _dereq_("./DragAndDrop");
  var Validators_1 = _dereq_("./Validators");
  exports.ids = {};
  exports.names = {};
  var _addId = function (node, id) {
      if (!id) {
          return;
      }
      exports.ids[id] = node;
  };
  exports._removeId = function (id, node) {
      if (!id) {
          return;
      }
      if (exports.ids[id] !== node) {
          return;
      }
      delete exports.ids[id];
  };
  exports._addName = function (node, name) {
      if (name) {
          if (!exports.names[name]) {
              exports.names[name] = [];
          }
          exports.names[name].push(node);
      }
  };
  exports._removeName = function (name, _id) {
      if (!name) {
          return;
      }
      var nodes = exports.names[name];
      if (!nodes) {
          return;
      }
      for (var n = 0; n < nodes.length; n++) {
          var no = nodes[n];
          if (no._id === _id) {
              nodes.splice(n, 1);
          }
      }
      if (nodes.length === 0) {
          delete exports.names[name];
      }
  };
  var ABSOLUTE_OPACITY = 'absoluteOpacity', ABSOLUTE_TRANSFORM = 'absoluteTransform', ABSOLUTE_SCALE = 'absoluteScale', CANVAS = 'canvas', CHANGE = 'Change', CHILDREN = 'children', KONVA = 'konva', LISTENING = 'listening', MOUSEENTER = 'mouseenter', MOUSELEAVE = 'mouseleave', NAME = 'name', SET = 'set', SHAPE = 'Shape', SPACE = ' ', STAGE = 'stage', TRANSFORM = 'transform', UPPER_STAGE = 'Stage', VISIBLE = 'visible', CLONE_BLACK_LIST = ['id'], TRANSFORM_CHANGE_STR = [
      'xChange.konva',
      'yChange.konva',
      'scaleXChange.konva',
      'scaleYChange.konva',
      'skewXChange.konva',
      'skewYChange.konva',
      'rotationChange.konva',
      'offsetXChange.konva',
      'offsetYChange.konva',
      'transformsEnabledChange.konva'
  ].join(SPACE), SCALE_CHANGE_STR = ['scaleXChange.konva', 'scaleYChange.konva'].join(SPACE);
  var emptyChildren = new Util_1.Collection();
  var idCounter = 1;
  var Node = (function () {
      function Node(config) {
          var _this = this;
          this._id = idCounter++;
          this.eventListeners = {};
          this.attrs = {};
          this.index = 0;
          this.parent = null;
          this._cache = new Map();
          this._lastPos = null;
          this._filterUpToDate = false;
          this._isUnderCache = false;
          this.children = emptyChildren;
          this._dragEventId = null;
          this.setAttrs(config);
          this.on(TRANSFORM_CHANGE_STR, function () {
              _this._clearCache(TRANSFORM);
              _this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
          });
          this.on(SCALE_CHANGE_STR, function () {
              _this._clearSelfAndDescendantCache(ABSOLUTE_SCALE);
          });
          this.on('visibleChange.konva', function () {
              _this._clearSelfAndDescendantCache(VISIBLE);
          });
          this.on('listeningChange.konva', function () {
              _this._clearSelfAndDescendantCache(LISTENING);
          });
          this.on('opacityChange.konva', function () {
              _this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
          });
      }
      Node.prototype.hasChildren = function () {
          return false;
      };
      Node.prototype.getChildren = function () {
          return emptyChildren;
      };
      Node.prototype._clearCache = function (attr) {
          if (attr) {
              this._cache.delete(attr);
          }
          else {
              this._cache.clear();
          }
      };
      Node.prototype._getCache = function (attr, privateGetter) {
          var cache = this._cache.get(attr);
          if (cache === undefined) {
              cache = privateGetter.call(this);
              this._cache.set(attr, cache);
          }
          return cache;
      };
      Node.prototype._getCanvasCache = function () {
          return this._cache.get(CANVAS);
      };
      Node.prototype._clearSelfAndDescendantCache = function (attr) {
          this._clearCache(attr);
          if (this.isCached()) {
              return;
          }
          if (this.children) {
              this.children.each(function (node) {
                  node._clearSelfAndDescendantCache(attr);
              });
          }
      };
      Node.prototype.clearCache = function () {
          this._cache.delete(CANVAS);
          this._clearSelfAndDescendantCache();
          return this;
      };
      Node.prototype.cache = function (config) {
          var conf = config || {};
          var rect = {};
          if (conf.x === undefined ||
              conf.y === undefined ||
              conf.width === undefined ||
              conf.height === undefined) {
              rect = this.getClientRect({
                  skipTransform: true,
                  relativeTo: this.getParent()
              });
          }
          var width = conf.width || rect.width, height = conf.height || rect.height, pixelRatio = conf.pixelRatio, x = conf.x === undefined ? rect.x : conf.x, y = conf.y === undefined ? rect.y : conf.y, offset = conf.offset || 0, drawBorder = conf.drawBorder || false;
          if (!width || !height) {
              Util_1.Util.error('Can not cache the node. Width or height of the node equals 0. Caching is skipped.');
              return;
          }
          width += offset * 2;
          height += offset * 2;
          x -= offset;
          y -= offset;
          var cachedSceneCanvas = new Canvas_1.SceneCanvas({
              pixelRatio: pixelRatio,
              width: width,
              height: height
          }), cachedFilterCanvas = new Canvas_1.SceneCanvas({
              pixelRatio: pixelRatio,
              width: width,
              height: height
          }), cachedHitCanvas = new Canvas_1.HitCanvas({
              pixelRatio: 1,
              width: width,
              height: height
          }), sceneContext = cachedSceneCanvas.getContext(), hitContext = cachedHitCanvas.getContext();
          cachedHitCanvas.isCache = true;
          this._cache.delete('canvas');
          this._filterUpToDate = false;
          if (conf.imageSmoothingEnabled === false) {
              cachedSceneCanvas.getContext()._context.imageSmoothingEnabled = false;
              cachedFilterCanvas.getContext()._context.imageSmoothingEnabled = false;
              cachedHitCanvas.getContext()._context.imageSmoothingEnabled = false;
          }
          sceneContext.save();
          hitContext.save();
          sceneContext.translate(-x, -y);
          hitContext.translate(-x, -y);
          this._isUnderCache = true;
          this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
          this._clearSelfAndDescendantCache(ABSOLUTE_SCALE);
          this.drawScene(cachedSceneCanvas, this, true);
          this.drawHit(cachedHitCanvas, this, true);
          this._isUnderCache = false;
          sceneContext.restore();
          hitContext.restore();
          if (drawBorder) {
              sceneContext.save();
              sceneContext.beginPath();
              sceneContext.rect(0, 0, width, height);
              sceneContext.closePath();
              sceneContext.setAttr('strokeStyle', 'red');
              sceneContext.setAttr('lineWidth', 5);
              sceneContext.stroke();
              sceneContext.restore();
          }
          this._cache.set(CANVAS, {
              scene: cachedSceneCanvas,
              filter: cachedFilterCanvas,
              hit: cachedHitCanvas,
              x: x,
              y: y
          });
          return this;
      };
      Node.prototype.isCached = function () {
          return this._cache.has('canvas');
      };
      Node.prototype.getClientRect = function (config) {
          throw new Error('abstract "getClientRect" method call');
      };
      Node.prototype._transformedRect = function (rect, top) {
          var points = [
              { x: rect.x, y: rect.y },
              { x: rect.x + rect.width, y: rect.y },
              { x: rect.x + rect.width, y: rect.y + rect.height },
              { x: rect.x, y: rect.y + rect.height }
          ];
          var minX, minY, maxX, maxY;
          var trans = this.getAbsoluteTransform(top);
          points.forEach(function (point) {
              var transformed = trans.point(point);
              if (minX === undefined) {
                  minX = maxX = transformed.x;
                  minY = maxY = transformed.y;
              }
              minX = Math.min(minX, transformed.x);
              minY = Math.min(minY, transformed.y);
              maxX = Math.max(maxX, transformed.x);
              maxY = Math.max(maxY, transformed.y);
          });
          return {
              x: minX,
              y: minY,
              width: maxX - minX,
              height: maxY - minY
          };
      };
      Node.prototype._drawCachedSceneCanvas = function (context) {
          context.save();
          context._applyOpacity(this);
          context._applyGlobalCompositeOperation(this);
          var canvasCache = this._getCanvasCache();
          context.translate(canvasCache.x, canvasCache.y);
          var cacheCanvas = this._getCachedSceneCanvas();
          var ratio = cacheCanvas.pixelRatio;
          context.drawImage(cacheCanvas._canvas, 0, 0, cacheCanvas.width / ratio, cacheCanvas.height / ratio);
          context.restore();
      };
      Node.prototype._drawCachedHitCanvas = function (context) {
          var canvasCache = this._getCanvasCache(), hitCanvas = canvasCache.hit;
          context.save();
          context.translate(canvasCache.x, canvasCache.y);
          context.drawImage(hitCanvas._canvas, 0, 0);
          context.restore();
      };
      Node.prototype._getCachedSceneCanvas = function () {
          var filters = this.filters(), cachedCanvas = this._getCanvasCache(), sceneCanvas = cachedCanvas.scene, filterCanvas = cachedCanvas.filter, filterContext = filterCanvas.getContext(), len, imageData, n, filter;
          if (filters) {
              if (!this._filterUpToDate) {
                  var ratio = sceneCanvas.pixelRatio;
                  try {
                      len = filters.length;
                      filterContext.clear();
                      filterContext.drawImage(sceneCanvas._canvas, 0, 0, sceneCanvas.getWidth() / ratio, sceneCanvas.getHeight() / ratio);
                      imageData = filterContext.getImageData(0, 0, filterCanvas.getWidth(), filterCanvas.getHeight());
                      for (n = 0; n < len; n++) {
                          filter = filters[n];
                          if (typeof filter !== 'function') {
                              Util_1.Util.error('Filter should be type of function, but got ' +
                                  typeof filter +
                                  ' insted. Please check correct filters');
                              continue;
                          }
                          filter.call(this, imageData);
                          filterContext.putImageData(imageData, 0, 0);
                      }
                  }
                  catch (e) {
                      Util_1.Util.error('Unable to apply filter. ' + e.message);
                  }
                  this._filterUpToDate = true;
              }
              return filterCanvas;
          }
          return sceneCanvas;
      };
      Node.prototype.on = function (evtStr, handler) {
          if (arguments.length === 3) {
              return this._delegate.apply(this, arguments);
          }
          var events = evtStr.split(SPACE), len = events.length, n, event, parts, baseEvent, name;
          for (n = 0; n < len; n++) {
              event = events[n];
              parts = event.split('.');
              baseEvent = parts[0];
              name = parts[1] || '';
              if (!this.eventListeners[baseEvent]) {
                  this.eventListeners[baseEvent] = [];
              }
              this.eventListeners[baseEvent].push({
                  name: name,
                  handler: handler
              });
          }
          return this;
      };
      Node.prototype.off = function (evtStr, callback) {
          var events = (evtStr || '').split(SPACE), len = events.length, n, t, event, parts, baseEvent, name;
          if (!evtStr) {
              for (t in this.eventListeners) {
                  this._off(t);
              }
          }
          for (n = 0; n < len; n++) {
              event = events[n];
              parts = event.split('.');
              baseEvent = parts[0];
              name = parts[1];
              if (baseEvent) {
                  if (this.eventListeners[baseEvent]) {
                      this._off(baseEvent, name, callback);
                  }
              }
              else {
                  for (t in this.eventListeners) {
                      this._off(t, name, callback);
                  }
              }
          }
          return this;
      };
      Node.prototype.dispatchEvent = function (evt) {
          var e = {
              target: this,
              type: evt.type,
              evt: evt
          };
          this.fire(evt.type, e);
          return this;
      };
      Node.prototype.addEventListener = function (type, handler) {
          this.on(type, function (evt) {
              handler.call(this, evt.evt);
          });
          return this;
      };
      Node.prototype.removeEventListener = function (type) {
          this.off(type);
          return this;
      };
      Node.prototype._delegate = function (event, selector, handler) {
          var stopNode = this;
          this.on(event, function (evt) {
              var targets = evt.target.findAncestors(selector, true, stopNode);
              for (var i = 0; i < targets.length; i++) {
                  evt = Util_1.Util.cloneObject(evt);
                  evt.currentTarget = targets[i];
                  handler.call(targets[i], evt);
              }
          });
      };
      Node.prototype.remove = function () {
          if (this.isDragging()) {
              this.stopDrag();
          }
          DragAndDrop_1.DD._dragElements.delete(this._id);
          this._remove();
          return this;
      };
      Node.prototype._remove = function () {
          this._clearSelfAndDescendantCache(STAGE);
          this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
          this._clearSelfAndDescendantCache(VISIBLE);
          this._clearSelfAndDescendantCache(LISTENING);
          this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
          var parent = this.getParent();
          if (parent && parent.children) {
              parent.children.splice(this.index, 1);
              parent._setChildrenIndices();
              this.parent = null;
          }
      };
      Node.prototype.destroy = function () {
          exports._removeId(this.id(), this);
          var names = (this.name() || '').split(/\s/g);
          for (var i = 0; i < names.length; i++) {
              var subname = names[i];
              exports._removeName(subname, this._id);
          }
          this.remove();
          return this;
      };
      Node.prototype.getAttr = function (attr) {
          var method = 'get' + Util_1.Util._capitalize(attr);
          if (Util_1.Util._isFunction(this[method])) {
              return this[method]();
          }
          return this.attrs[attr];
      };
      Node.prototype.getAncestors = function () {
          var parent = this.getParent(), ancestors = new Util_1.Collection();
          while (parent) {
              ancestors.push(parent);
              parent = parent.getParent();
          }
          return ancestors;
      };
      Node.prototype.getAttrs = function () {
          return this.attrs || {};
      };
      Node.prototype.setAttrs = function (config) {
          var key, method;
          if (!config) {
              return this;
          }
          for (key in config) {
              if (key === CHILDREN) {
                  continue;
              }
              method = SET + Util_1.Util._capitalize(key);
              if (Util_1.Util._isFunction(this[method])) {
                  this[method](config[key]);
              }
              else {
                  this._setAttr(key, config[key]);
              }
          }
          return this;
      };
      Node.prototype.isListening = function () {
          return this._getCache(LISTENING, this._isListening);
      };
      Node.prototype._isListening = function () {
          var listening = this.listening(), parent = this.getParent();
          if (listening === 'inherit') {
              if (parent) {
                  return parent.isListening();
              }
              else {
                  return true;
              }
          }
          else {
              return listening;
          }
      };
      Node.prototype.isVisible = function () {
          return this._getCache(VISIBLE, this._isVisible);
      };
      Node.prototype._isVisible = function (relativeTo) {
          var visible = this.visible(), parent = this.getParent();
          if (visible === 'inherit') {
              if (parent && parent !== relativeTo) {
                  return parent._isVisible(relativeTo);
              }
              else {
                  return true;
              }
          }
          else if (relativeTo && relativeTo !== parent) {
              return visible && parent._isVisible(relativeTo);
          }
          else {
              return visible;
          }
      };
      Node.prototype.shouldDrawHit = function () {
          var layer = this.getLayer();
          return ((!layer && this.isListening() && this.isVisible()) ||
              (layer &&
                  layer.hitGraphEnabled() &&
                  this.isListening() &&
                  this.isVisible()));
      };
      Node.prototype.show = function () {
          this.visible(true);
          return this;
      };
      Node.prototype.hide = function () {
          this.visible(false);
          return this;
      };
      Node.prototype.getZIndex = function () {
          return this.index || 0;
      };
      Node.prototype.getAbsoluteZIndex = function () {
          var depth = this.getDepth(), that = this, index = 0, nodes, len, n, child;
          function addChildren(children) {
              nodes = [];
              len = children.length;
              for (n = 0; n < len; n++) {
                  child = children[n];
                  index++;
                  if (child.nodeType !== SHAPE) {
                      nodes = nodes.concat(child.getChildren().toArray());
                  }
                  if (child._id === that._id) {
                      n = len;
                  }
              }
              if (nodes.length > 0 && nodes[0].getDepth() <= depth) {
                  addChildren(nodes);
              }
          }
          if (that.nodeType !== UPPER_STAGE) {
              addChildren(that.getStage().getChildren());
          }
          return index;
      };
      Node.prototype.getDepth = function () {
          var depth = 0, parent = this.parent;
          while (parent) {
              depth++;
              parent = parent.parent;
          }
          return depth;
      };
      Node.prototype.setPosition = function (pos) {
          this.x(pos.x);
          this.y(pos.y);
          return this;
      };
      Node.prototype.getPosition = function () {
          return {
              x: this.x(),
              y: this.y()
          };
      };
      Node.prototype.getAbsolutePosition = function (top) {
          var haveCachedParent = false;
          var parent = this.parent;
          while (parent) {
              if (parent.isCached()) {
                  haveCachedParent = true;
                  break;
              }
              parent = parent.parent;
          }
          if (haveCachedParent && !top) {
              top = true;
          }
          var absoluteMatrix = this.getAbsoluteTransform(top).getMatrix(), absoluteTransform = new Util_1.Transform(), offset = this.offset();
          absoluteTransform.m = absoluteMatrix.slice();
          absoluteTransform.translate(offset.x, offset.y);
          return absoluteTransform.getTranslation();
      };
      Node.prototype.setAbsolutePosition = function (pos) {
          var origTrans = this._clearTransform(), it;
          this.attrs.x = origTrans.x;
          this.attrs.y = origTrans.y;
          delete origTrans.x;
          delete origTrans.y;
          it = this.getAbsoluteTransform();
          it.invert();
          it.translate(pos.x, pos.y);
          pos = {
              x: this.attrs.x + it.getTranslation().x,
              y: this.attrs.y + it.getTranslation().y
          };
          this.setPosition({ x: pos.x, y: pos.y });
          this._setTransform(origTrans);
          return this;
      };
      Node.prototype._setTransform = function (trans) {
          var key;
          for (key in trans) {
              this.attrs[key] = trans[key];
          }
          this._clearCache(TRANSFORM);
          this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
      };
      Node.prototype._clearTransform = function () {
          var trans = {
              x: this.x(),
              y: this.y(),
              rotation: this.rotation(),
              scaleX: this.scaleX(),
              scaleY: this.scaleY(),
              offsetX: this.offsetX(),
              offsetY: this.offsetY(),
              skewX: this.skewX(),
              skewY: this.skewY()
          };
          this.attrs.x = 0;
          this.attrs.y = 0;
          this.attrs.rotation = 0;
          this.attrs.scaleX = 1;
          this.attrs.scaleY = 1;
          this.attrs.offsetX = 0;
          this.attrs.offsetY = 0;
          this.attrs.skewX = 0;
          this.attrs.skewY = 0;
          this._clearCache(TRANSFORM);
          this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
          return trans;
      };
      Node.prototype.move = function (change) {
          var changeX = change.x, changeY = change.y, x = this.x(), y = this.y();
          if (changeX !== undefined) {
              x += changeX;
          }
          if (changeY !== undefined) {
              y += changeY;
          }
          this.setPosition({ x: x, y: y });
          return this;
      };
      Node.prototype._eachAncestorReverse = function (func, top) {
          var family = [], parent = this.getParent(), len, n;
          if (top && top._id === this._id) {
              func(this);
              return;
          }
          family.unshift(this);
          while (parent && (!top || parent._id !== top._id)) {
              family.unshift(parent);
              parent = parent.parent;
          }
          len = family.length;
          for (n = 0; n < len; n++) {
              func(family[n]);
          }
      };
      Node.prototype.rotate = function (theta) {
          this.rotation(this.rotation() + theta);
          return this;
      };
      Node.prototype.moveToTop = function () {
          if (!this.parent) {
              Util_1.Util.warn('Node has no parent. moveToTop function is ignored.');
              return false;
          }
          var index = this.index;
          this.parent.children.splice(index, 1);
          this.parent.children.push(this);
          this.parent._setChildrenIndices();
          return true;
      };
      Node.prototype.moveUp = function () {
          if (!this.parent) {
              Util_1.Util.warn('Node has no parent. moveUp function is ignored.');
              return false;
          }
          var index = this.index, len = this.parent.getChildren().length;
          if (index < len - 1) {
              this.parent.children.splice(index, 1);
              this.parent.children.splice(index + 1, 0, this);
              this.parent._setChildrenIndices();
              return true;
          }
          return false;
      };
      Node.prototype.moveDown = function () {
          if (!this.parent) {
              Util_1.Util.warn('Node has no parent. moveDown function is ignored.');
              return false;
          }
          var index = this.index;
          if (index > 0) {
              this.parent.children.splice(index, 1);
              this.parent.children.splice(index - 1, 0, this);
              this.parent._setChildrenIndices();
              return true;
          }
          return false;
      };
      Node.prototype.moveToBottom = function () {
          if (!this.parent) {
              Util_1.Util.warn('Node has no parent. moveToBottom function is ignored.');
              return false;
          }
          var index = this.index;
          if (index > 0) {
              this.parent.children.splice(index, 1);
              this.parent.children.unshift(this);
              this.parent._setChildrenIndices();
              return true;
          }
          return false;
      };
      Node.prototype.setZIndex = function (zIndex) {
          if (!this.parent) {
              Util_1.Util.warn('Node has no parent. zIndex parameter is ignored.');
              return this;
          }
          if (zIndex < 0 || zIndex >= this.parent.children.length) {
              Util_1.Util.warn('Unexpected value ' +
                  zIndex +
                  ' for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to ' +
                  (this.parent.children.length - 1) +
                  '.');
          }
          var index = this.index;
          this.parent.children.splice(index, 1);
          this.parent.children.splice(zIndex, 0, this);
          this.parent._setChildrenIndices();
          return this;
      };
      Node.prototype.getAbsoluteOpacity = function () {
          return this._getCache(ABSOLUTE_OPACITY, this._getAbsoluteOpacity);
      };
      Node.prototype._getAbsoluteOpacity = function () {
          var absOpacity = this.opacity();
          var parent = this.getParent();
          if (parent && !parent._isUnderCache) {
              absOpacity *= parent.getAbsoluteOpacity();
          }
          return absOpacity;
      };
      Node.prototype.moveTo = function (newContainer) {
          if (this.getParent() !== newContainer) {
              this._remove();
              newContainer.add(this);
          }
          return this;
      };
      Node.prototype.toObject = function () {
          var obj = {}, attrs = this.getAttrs(), key, val, getter, defaultValue, nonPlainObject;
          obj.attrs = {};
          for (key in attrs) {
              val = attrs[key];
              nonPlainObject =
                  Util_1.Util.isObject(val) && !Util_1.Util._isPlainObject(val) && !Util_1.Util._isArray(val);
              if (nonPlainObject) {
                  continue;
              }
              getter = typeof this[key] === 'function' && this[key];
              delete attrs[key];
              defaultValue = getter ? getter.call(this) : null;
              attrs[key] = val;
              if (defaultValue !== val) {
                  obj.attrs[key] = val;
              }
          }
          obj.className = this.getClassName();
          return Util_1.Util._prepareToStringify(obj);
      };
      Node.prototype.toJSON = function () {
          return JSON.stringify(this.toObject());
      };
      Node.prototype.getParent = function () {
          return this.parent;
      };
      Node.prototype.findAncestors = function (selector, includeSelf, stopNode) {
          var res = [];
          if (includeSelf && this._isMatch(selector)) {
              res.push(this);
          }
          var ancestor = this.parent;
          while (ancestor) {
              if (ancestor === stopNode) {
                  return res;
              }
              if (ancestor._isMatch(selector)) {
                  res.push(ancestor);
              }
              ancestor = ancestor.parent;
          }
          return res;
      };
      Node.prototype.isAncestorOf = function (node) {
          return false;
      };
      Node.prototype.findAncestor = function (selector, includeSelf, stopNode) {
          return this.findAncestors(selector, includeSelf, stopNode)[0];
      };
      Node.prototype._isMatch = function (selector) {
          if (!selector) {
              return false;
          }
          if (typeof selector === 'function') {
              return selector(this);
          }
          var selectorArr = selector.replace(/ /g, '').split(','), len = selectorArr.length, n, sel;
          for (n = 0; n < len; n++) {
              sel = selectorArr[n];
              if (!Util_1.Util.isValidSelector(sel)) {
                  Util_1.Util.warn('Selector "' +
                      sel +
                      '" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".');
                  Util_1.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".');
                  Util_1.Util.warn('Konva is awesome, right?');
              }
              if (sel.charAt(0) === '#') {
                  if (this.id() === sel.slice(1)) {
                      return true;
                  }
              }
              else if (sel.charAt(0) === '.') {
                  if (this.hasName(sel.slice(1))) {
                      return true;
                  }
              }
              else if (this.className === sel || this.nodeType === sel) {
                  return true;
              }
          }
          return false;
      };
      Node.prototype.getLayer = function () {
          var parent = this.getParent();
          return parent ? parent.getLayer() : null;
      };
      Node.prototype.getStage = function () {
          return this._getCache(STAGE, this._getStage);
      };
      Node.prototype._getStage = function () {
          var parent = this.getParent();
          if (parent) {
              return parent.getStage();
          }
          else {
              return undefined;
          }
      };
      Node.prototype.fire = function (eventType, evt, bubble) {
          evt = evt || {};
          evt.target = evt.target || this;
          if (bubble) {
              this._fireAndBubble(eventType, evt);
          }
          else {
              this._fire(eventType, evt);
          }
          return this;
      };
      Node.prototype.getAbsoluteTransform = function (top) {
          if (top) {
              return this._getAbsoluteTransform(top);
          }
          else {
              return this._getCache(ABSOLUTE_TRANSFORM, this._getAbsoluteTransform);
          }
      };
      Node.prototype._getAbsoluteTransform = function (top) {
          var at = new Util_1.Transform();
          this._eachAncestorReverse(function (node) {
              var transformsEnabled = node.getTransformsEnabled();
              if (transformsEnabled === 'all') {
                  at.multiply(node.getTransform());
              }
              else if (transformsEnabled === 'position') {
                  at.translate(node.getX() - node.getOffsetX(), node.getY() - node.getOffsetY());
              }
          }, top);
          return at;
      };
      Node.prototype.getAbsoluteScale = function (top) {
          if (top) {
              return this._getAbsoluteScale(top);
          }
          else {
              return this._getCache(ABSOLUTE_SCALE, this._getAbsoluteScale);
          }
      };
      Node.prototype._getAbsoluteScale = function (top) {
          var parent = this;
          while (parent) {
              if (parent._isUnderCache) {
                  top = parent;
              }
              parent = parent.getParent();
          }
          var scaleX = 1, scaleY = 1;
          this._eachAncestorReverse(function (node) {
              scaleX *= node.scaleX();
              scaleY *= node.scaleY();
          }, top);
          return {
              x: scaleX,
              y: scaleY
          };
      };
      Node.prototype.getTransform = function () {
          return this._getCache(TRANSFORM, this._getTransform);
      };
      Node.prototype._getTransform = function () {
          var m = new Util_1.Transform(), x = this.x(), y = this.y(), rotation = Global_1.Konva.getAngle(this.rotation()), scaleX = this.scaleX(), scaleY = this.scaleY(), skewX = this.skewX(), skewY = this.skewY(), offsetX = this.offsetX(), offsetY = this.offsetY();
          if (x !== 0 || y !== 0) {
              m.translate(x, y);
          }
          if (rotation !== 0) {
              m.rotate(rotation);
          }
          if (skewX !== 0 || skewY !== 0) {
              m.skew(skewX, skewY);
          }
          if (scaleX !== 1 || scaleY !== 1) {
              m.scale(scaleX, scaleY);
          }
          if (offsetX !== 0 || offsetY !== 0) {
              m.translate(-1 * offsetX, -1 * offsetY);
          }
          return m;
      };
      Node.prototype.clone = function (obj) {
          var attrs = Util_1.Util.cloneObject(this.attrs), key, allListeners, len, n, listener;
          for (var i in CLONE_BLACK_LIST) {
              var blockAttr = CLONE_BLACK_LIST[i];
              delete attrs[blockAttr];
          }
          for (key in obj) {
              attrs[key] = obj[key];
          }
          var node = new this.constructor(attrs);
          for (key in this.eventListeners) {
              allListeners = this.eventListeners[key];
              len = allListeners.length;
              for (n = 0; n < len; n++) {
                  listener = allListeners[n];
                  if (listener.name.indexOf(KONVA) < 0) {
                      if (!node.eventListeners[key]) {
                          node.eventListeners[key] = [];
                      }
                      node.eventListeners[key].push(listener);
                  }
              }
          }
          return node;
      };
      Node.prototype._toKonvaCanvas = function (config) {
          config = config || {};
          var box = this.getClientRect();
          var stage = this.getStage(), x = config.x !== undefined ? config.x : box.x, y = config.y !== undefined ? config.y : box.y, pixelRatio = config.pixelRatio || 1, canvas = new Canvas_1.SceneCanvas({
              width: config.width || box.width || (stage ? stage.width() : 0),
              height: config.height || box.height || (stage ? stage.height() : 0),
              pixelRatio: pixelRatio
          }), context = canvas.getContext();
          context.save();
          if (x || y) {
              context.translate(-1 * x, -1 * y);
          }
          this.drawScene(canvas);
          context.restore();
          return canvas;
      };
      Node.prototype.toCanvas = function (config) {
          return this._toKonvaCanvas(config)._canvas;
      };
      Node.prototype.toDataURL = function (config) {
          config = config || {};
          var mimeType = config.mimeType || null, quality = config.quality || null;
          var url = this._toKonvaCanvas(config).toDataURL(mimeType, quality);
          if (config.callback) {
              config.callback(url);
          }
          return url;
      };
      Node.prototype.toImage = function (config) {
          if (!config || !config.callback) {
              throw 'callback required for toImage method config argument';
          }
          var callback = config.callback;
          delete config.callback;
          Util_1.Util._urlToImage(this.toDataURL(config), function (img) {
              callback(img);
          });
      };
      Node.prototype.setSize = function (size) {
          this.width(size.width);
          this.height(size.height);
          return this;
      };
      Node.prototype.getSize = function () {
          return {
              width: this.width(),
              height: this.height()
          };
      };
      Node.prototype.getClassName = function () {
          return this.className || this.nodeType;
      };
      Node.prototype.getType = function () {
          return this.nodeType;
      };
      Node.prototype.getDragDistance = function () {
          if (this.attrs.dragDistance !== undefined) {
              return this.attrs.dragDistance;
          }
          else if (this.parent) {
              return this.parent.getDragDistance();
          }
          else {
              return Global_1.Konva.dragDistance;
          }
      };
      Node.prototype._off = function (type, name, callback) {
          var evtListeners = this.eventListeners[type], i, evtName, handler;
          for (i = 0; i < evtListeners.length; i++) {
              evtName = evtListeners[i].name;
              handler = evtListeners[i].handler;
              if ((evtName !== 'konva' || name === 'konva') &&
                  (!name || evtName === name) &&
                  (!callback || callback === handler)) {
                  evtListeners.splice(i, 1);
                  if (evtListeners.length === 0) {
                      delete this.eventListeners[type];
                      break;
                  }
                  i--;
              }
          }
      };
      Node.prototype._fireChangeEvent = function (attr, oldVal, newVal) {
          this._fire(attr + CHANGE, {
              oldVal: oldVal,
              newVal: newVal
          });
      };
      Node.prototype.setId = function (id) {
          var oldId = this.id();
          exports._removeId(oldId, this);
          _addId(this, id);
          this._setAttr('id', id);
          return this;
      };
      Node.prototype.setName = function (name) {
          var oldNames = (this.name() || '').split(/\s/g);
          var newNames = (name || '').split(/\s/g);
          var subname, i;
          for (i = 0; i < oldNames.length; i++) {
              subname = oldNames[i];
              if (newNames.indexOf(subname) === -1 && subname) {
                  exports._removeName(subname, this._id);
              }
          }
          for (i = 0; i < newNames.length; i++) {
              subname = newNames[i];
              if (oldNames.indexOf(subname) === -1 && subname) {
                  exports._addName(this, subname);
              }
          }
          this._setAttr(NAME, name);
          return this;
      };
      Node.prototype.addName = function (name) {
          if (!this.hasName(name)) {
              var oldName = this.name();
              var newName = oldName ? oldName + ' ' + name : name;
              this.setName(newName);
          }
          return this;
      };
      Node.prototype.hasName = function (name) {
          if (!name) {
              return false;
          }
          var fullName = this.name();
          if (!fullName) {
              return false;
          }
          var names = (fullName || '').split(/\s/g);
          return names.indexOf(name) !== -1;
      };
      Node.prototype.removeName = function (name) {
          var names = (this.name() || '').split(/\s/g);
          var index = names.indexOf(name);
          if (index !== -1) {
              names.splice(index, 1);
              this.setName(names.join(' '));
          }
          return this;
      };
      Node.prototype.setAttr = function (attr, val) {
          var func = this[SET + Util_1.Util._capitalize(attr)];
          if (Util_1.Util._isFunction(func)) {
              func.call(this, val);
          }
          else {
              this._setAttr(attr, val);
          }
          return this;
      };
      Node.prototype._setAttr = function (key, val) {
          var oldVal = this.attrs[key];
          if (oldVal === val && !Util_1.Util.isObject(val)) {
              return;
          }
          if (val === undefined || val === null) {
              delete this.attrs[key];
          }
          else {
              this.attrs[key] = val;
          }
          this._fireChangeEvent(key, oldVal, val);
      };
      Node.prototype._setComponentAttr = function (key, component, val) {
          var oldVal;
          if (val !== undefined) {
              oldVal = this.attrs[key];
              if (!oldVal) {
                  this.attrs[key] = this.getAttr(key);
              }
              this.attrs[key][component] = val;
              this._fireChangeEvent(key, oldVal, val);
          }
      };
      Node.prototype._fireAndBubble = function (eventType, evt, compareShape) {
          if (evt && this.nodeType === SHAPE) {
              evt.target = this;
          }
          var shouldStop = (eventType === MOUSEENTER || eventType === MOUSELEAVE) &&
              ((compareShape &&
                  (this === compareShape ||
                      (this.isAncestorOf && this.isAncestorOf(compareShape)))) ||
                  (this.nodeType === 'Stage' && !compareShape));
          if (!shouldStop) {
              this._fire(eventType, evt);
              var stopBubble = (eventType === MOUSEENTER || eventType === MOUSELEAVE) &&
                  (compareShape &&
                      compareShape.isAncestorOf &&
                      compareShape.isAncestorOf(this) &&
                      !compareShape.isAncestorOf(this.parent));
              if (((evt && !evt.cancelBubble) || !evt) &&
                  this.parent &&
                  this.parent.isListening() &&
                  !stopBubble) {
                  if (compareShape && compareShape.parent) {
                      this._fireAndBubble.call(this.parent, eventType, evt, compareShape.parent);
                  }
                  else {
                      this._fireAndBubble.call(this.parent, eventType, evt);
                  }
              }
          }
      };
      Node.prototype._fire = function (eventType, evt) {
          var events = this.eventListeners[eventType], i;
          if (events) {
              evt = evt || {};
              evt.currentTarget = this;
              evt.type = eventType;
              for (i = 0; i < events.length; i++) {
                  events[i].handler.call(this, evt);
              }
          }
      };
      Node.prototype.draw = function () {
          this.drawScene();
          this.drawHit();
          return this;
      };
      Node.prototype._createDragElement = function (evt) {
          var pointerId = evt ? evt.pointerId : undefined;
          var stage = this.getStage();
          var ap = this.getAbsolutePosition();
          var pos = stage._getPointerById(pointerId) ||
              stage._changedPointerPositions[0] ||
              ap;
          DragAndDrop_1.DD._dragElements.set(this._id, {
              node: this,
              startPointerPos: pos,
              offset: {
                  x: pos.x - ap.x,
                  y: pos.y - ap.y
              },
              dragStatus: 'ready',
              pointerId: pointerId
          });
      };
      Node.prototype.startDrag = function (evt) {
          if (!DragAndDrop_1.DD._dragElements.has(this._id)) {
              this._createDragElement(evt);
          }
          var elem = DragAndDrop_1.DD._dragElements.get(this._id);
          elem.dragStatus = 'dragging';
          this.fire('dragstart', {
              type: 'dragstart',
              target: this,
              evt: evt && evt.evt
          }, true);
      };
      Node.prototype._setDragPosition = function (evt, elem) {
          var pos = this.getStage()._getPointerById(elem.pointerId);
          if (!pos) {
              return;
          }
          var newNodePos = {
              x: pos.x - elem.offset.x,
              y: pos.y - elem.offset.y
          };
          var dbf = this.dragBoundFunc();
          if (dbf !== undefined) {
              var bounded = dbf.call(this, newNodePos, evt);
              if (!bounded) {
                  Util_1.Util.warn('dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.');
              }
              else {
                  newNodePos = bounded;
              }
          }
          if (!this._lastPos ||
              this._lastPos.x !== newNodePos.x ||
              this._lastPos.y !== newNodePos.y) {
              this.setAbsolutePosition(newNodePos);
              if (this.getLayer()) {
                  this.getLayer().batchDraw();
              }
              else if (this.getStage()) {
                  this.getStage().batchDraw();
              }
          }
          this._lastPos = newNodePos;
      };
      Node.prototype.stopDrag = function (evt) {
          var elem = DragAndDrop_1.DD._dragElements.get(this._id);
          if (elem) {
              elem.dragStatus = 'stopped';
          }
          DragAndDrop_1.DD._endDragBefore(evt);
          DragAndDrop_1.DD._endDragAfter(evt);
      };
      Node.prototype.setDraggable = function (draggable) {
          this._setAttr('draggable', draggable);
          this._dragChange();
      };
      Node.prototype.isDragging = function () {
          var elem = DragAndDrop_1.DD._dragElements.get(this._id);
          return elem ? elem.dragStatus === 'dragging' : false;
      };
      Node.prototype._listenDrag = function () {
          this._dragCleanup();
          this.on('mousedown.konva touchstart.konva', function (evt) {
              var _this = this;
              var shouldCheckButton = evt.evt['button'] !== undefined;
              var canDrag = !shouldCheckButton || Global_1.Konva.dragButtons.indexOf(evt.evt['button']) >= 0;
              if (!canDrag) {
                  return;
              }
              if (this.isDragging()) {
                  return;
              }
              var hasDraggingChild = false;
              DragAndDrop_1.DD._dragElements.forEach(function (elem) {
                  if (_this.isAncestorOf(elem.node)) {
                      hasDraggingChild = true;
                  }
              });
              if (!hasDraggingChild) {
                  this._createDragElement(evt);
              }
          });
      };
      Node.prototype._dragChange = function () {
          if (this.attrs.draggable) {
              this._listenDrag();
          }
          else {
              this._dragCleanup();
              var stage = this.getStage();
              if (stage && DragAndDrop_1.DD._dragElements.has(this._id)) {
                  this.stopDrag();
              }
          }
      };
      Node.prototype._dragCleanup = function () {
          this.off('mousedown.konva');
          this.off('touchstart.konva');
      };
      Node.create = function (data, container) {
          if (Util_1.Util._isString(data)) {
              data = JSON.parse(data);
          }
          return this._createNode(data, container);
      };
      Node._createNode = function (obj, container) {
          var className = Node.prototype.getClassName.call(obj), children = obj.children, no, len, n;
          if (container) {
              obj.attrs.container = container;
          }
          if (!Global_1._NODES_REGISTRY[className]) {
              Util_1.Util.warn('Can not find a node with class name "' +
                  className +
                  '". Fallback to "Shape".');
              className = 'Shape';
          }
          var Class = Global_1._NODES_REGISTRY[className];
          no = new Class(obj.attrs);
          if (children) {
              len = children.length;
              for (n = 0; n < len; n++) {
                  no.add(Node._createNode(children[n]));
              }
          }
          return no;
      };
      return Node;
  }());
  exports.Node = Node;
  Node.prototype.nodeType = 'Node';
  Node.prototype._attrsAffectingSize = [];
  Factory_1.Factory.addGetterSetter(Node, 'zIndex');
  Factory_1.Factory.addGetterSetter(Node, 'absolutePosition');
  Factory_1.Factory.addGetterSetter(Node, 'position');
  Factory_1.Factory.addGetterSetter(Node, 'x', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Node, 'y', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Node, 'globalCompositeOperation', 'source-over', Validators_1.getStringValidator());
  Factory_1.Factory.addGetterSetter(Node, 'opacity', 1, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Node, 'name', '', Validators_1.getStringValidator());
  Factory_1.Factory.addGetterSetter(Node, 'id', '', Validators_1.getStringValidator());
  Factory_1.Factory.addGetterSetter(Node, 'rotation', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addComponentsGetterSetter(Node, 'scale', ['x', 'y']);
  Factory_1.Factory.addGetterSetter(Node, 'scaleX', 1, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Node, 'scaleY', 1, Validators_1.getNumberValidator());
  Factory_1.Factory.addComponentsGetterSetter(Node, 'skew', ['x', 'y']);
  Factory_1.Factory.addGetterSetter(Node, 'skewX', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Node, 'skewY', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addComponentsGetterSetter(Node, 'offset', ['x', 'y']);
  Factory_1.Factory.addGetterSetter(Node, 'offsetX', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Node, 'offsetY', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Node, 'dragDistance', null, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Node, 'width', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Node, 'height', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Node, 'listening', 'inherit', function (val) {
      var isValid = val === true || val === false || val === 'inherit';
      if (!isValid) {
          Util_1.Util.warn(val +
              ' is a not valid value for "listening" attribute. The value may be true, false or "inherit".');
      }
      return val;
  });
  Factory_1.Factory.addGetterSetter(Node, 'preventDefault', true, Validators_1.getBooleanValidator());
  Factory_1.Factory.addGetterSetter(Node, 'filters', null, function (val) {
      this._filterUpToDate = false;
      return val;
  });
  Factory_1.Factory.addGetterSetter(Node, 'visible', 'inherit', function (val) {
      var isValid = val === true || val === false || val === 'inherit';
      if (!isValid) {
          Util_1.Util.warn(val +
              ' is a not valid value for "visible" attribute. The value may be true, false or "inherit".');
      }
      return val;
  });
  Factory_1.Factory.addGetterSetter(Node, 'transformsEnabled', 'all', Validators_1.getStringValidator());
  Factory_1.Factory.addGetterSetter(Node, 'size');
  Factory_1.Factory.addGetterSetter(Node, 'dragBoundFunc');
  Factory_1.Factory.addGetterSetter(Node, 'draggable', false, Validators_1.getBooleanValidator());
  Factory_1.Factory.backCompat(Node, {
      rotateDeg: 'rotate',
      setRotationDeg: 'setRotation',
      getRotationDeg: 'getRotation'
  });
  Util_1.Collection.mapMethods(Node);

  },{"./Canvas":6,"./DragAndDrop":9,"./Factory":10,"./Global":12,"./Util":20,"./Validators":21}],16:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Global_1 = _dereq_("./Global");
  var Captures = new Map();
  var SUPPORT_POINTER_EVENTS = Global_1.Konva._global['PointerEvent'] !== undefined;
  function getCapturedShape(pointerId) {
      return Captures.get(pointerId);
  }
  exports.getCapturedShape = getCapturedShape;
  function createEvent(evt) {
      return {
          evt: evt,
          pointerId: evt.pointerId
      };
  }
  exports.createEvent = createEvent;
  function hasPointerCapture(pointerId, shape) {
      return Captures.get(pointerId) === shape;
  }
  exports.hasPointerCapture = hasPointerCapture;
  function setPointerCapture(pointerId, shape) {
      releaseCapture(pointerId);
      var stage = shape.getStage();
      if (!stage)
          return;
      Captures.set(pointerId, shape);
      if (SUPPORT_POINTER_EVENTS) {
          shape._fire('gotpointercapture', createEvent(new PointerEvent('gotpointercapture')));
      }
  }
  exports.setPointerCapture = setPointerCapture;
  function releaseCapture(pointerId, target) {
      var shape = Captures.get(pointerId);
      if (!shape)
          return;
      var stage = shape.getStage();
      if (stage && stage.content) ;
      Captures.delete(pointerId);
      if (SUPPORT_POINTER_EVENTS) {
          shape._fire('lostpointercapture', createEvent(new PointerEvent('lostpointercapture')));
      }
  }
  exports.releaseCapture = releaseCapture;

  },{"./Global":12}],17:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("./Util");
  var Factory_1 = _dereq_("./Factory");
  var Node_1 = _dereq_("./Node");
  var Validators_1 = _dereq_("./Validators");
  var Global_1 = _dereq_("./Global");
  var PointerEvents = _dereq_("./PointerEvents");
  var HAS_SHADOW = 'hasShadow';
  var SHADOW_RGBA = 'shadowRGBA';
  var patternImage = 'patternImage';
  var linearGradient = 'linearGradient';
  var radialGradient = 'radialGradient';
  var dummyContext;
  function getDummyContext() {
      if (dummyContext) {
          return dummyContext;
      }
      dummyContext = Util_1.Util.createCanvasElement().getContext('2d');
      return dummyContext;
  }
  exports.shapes = {};
  function _fillFunc(context) {
      context.fill();
  }
  function _strokeFunc(context) {
      context.stroke();
  }
  function _fillFuncHit(context) {
      context.fill();
  }
  function _strokeFuncHit(context) {
      context.stroke();
  }
  function _clearHasShadowCache() {
      this._clearCache(HAS_SHADOW);
  }
  function _clearGetShadowRGBACache() {
      this._clearCache(SHADOW_RGBA);
  }
  function _clearFillPatternCache() {
      this._clearCache(patternImage);
  }
  function _clearLinearGradientCache() {
      this._clearCache(linearGradient);
  }
  function _clearRadialGradientCache() {
      this._clearCache(radialGradient);
  }
  var Shape = (function (_super) {
      __extends(Shape, _super);
      function Shape(config) {
          var _this = _super.call(this, config) || this;
          var key;
          while (true) {
              key = Util_1.Util.getRandomColor();
              if (key && !(key in exports.shapes)) {
                  break;
              }
          }
          _this.colorKey = key;
          exports.shapes[key] = _this;
          _this.on('shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva', _clearHasShadowCache);
          _this.on('shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva', _clearGetShadowRGBACache);
          _this.on('fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva', _clearFillPatternCache);
          _this.on('fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva', _clearLinearGradientCache);
          _this.on('fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva', _clearRadialGradientCache);
          return _this;
      }
      Shape.prototype.getContext = function () {
          return this.getLayer().getContext();
      };
      Shape.prototype.getCanvas = function () {
          return this.getLayer().getCanvas();
      };
      Shape.prototype.getSceneFunc = function () {
          return this.attrs.sceneFunc || this['_sceneFunc'];
      };
      Shape.prototype.getHitFunc = function () {
          return this.attrs.hitFunc || this['_hitFunc'];
      };
      Shape.prototype.hasShadow = function () {
          return this._getCache(HAS_SHADOW, this._hasShadow);
      };
      Shape.prototype._hasShadow = function () {
          return (this.shadowEnabled() &&
              (this.shadowOpacity() !== 0 &&
                  !!(this.shadowColor() ||
                      this.shadowBlur() ||
                      this.shadowOffsetX() ||
                      this.shadowOffsetY())));
      };
      Shape.prototype._getFillPattern = function () {
          return this._getCache(patternImage, this.__getFillPattern);
      };
      Shape.prototype.__getFillPattern = function () {
          if (this.fillPatternImage()) {
              var ctx = getDummyContext();
              var pattern = ctx.createPattern(this.fillPatternImage(), this.fillPatternRepeat() || 'repeat');
              return pattern;
          }
      };
      Shape.prototype._getLinearGradient = function () {
          return this._getCache(linearGradient, this.__getLinearGradient);
      };
      Shape.prototype.__getLinearGradient = function () {
          var colorStops = this.fillLinearGradientColorStops();
          if (colorStops) {
              var ctx = getDummyContext();
              var start = this.fillLinearGradientStartPoint();
              var end = this.fillLinearGradientEndPoint();
              var grd = ctx.createLinearGradient(start.x, start.y, end.x, end.y);
              for (var n = 0; n < colorStops.length; n += 2) {
                  grd.addColorStop(colorStops[n], colorStops[n + 1]);
              }
              return grd;
          }
      };
      Shape.prototype._getRadialGradient = function () {
          return this._getCache(radialGradient, this.__getRadialGradient);
      };
      Shape.prototype.__getRadialGradient = function () {
          var colorStops = this.fillRadialGradientColorStops();
          if (colorStops) {
              var ctx = getDummyContext();
              var start = this.fillRadialGradientStartPoint();
              var end = this.fillRadialGradientEndPoint();
              var grd = ctx.createRadialGradient(start.x, start.y, this.fillRadialGradientStartRadius(), end.x, end.y, this.fillRadialGradientEndRadius());
              for (var n = 0; n < colorStops.length; n += 2) {
                  grd.addColorStop(colorStops[n], colorStops[n + 1]);
              }
              return grd;
          }
      };
      Shape.prototype.getShadowRGBA = function () {
          return this._getCache(SHADOW_RGBA, this._getShadowRGBA);
      };
      Shape.prototype._getShadowRGBA = function () {
          if (this.hasShadow()) {
              var rgba = Util_1.Util.colorToRGBA(this.shadowColor());
              return ('rgba(' +
                  rgba.r +
                  ',' +
                  rgba.g +
                  ',' +
                  rgba.b +
                  ',' +
                  rgba.a * (this.shadowOpacity() || 1) +
                  ')');
          }
      };
      Shape.prototype.hasFill = function () {
          return !!(this.fill() ||
              this.fillPatternImage() ||
              this.fillLinearGradientColorStops() ||
              this.fillRadialGradientColorStops());
      };
      Shape.prototype.hasStroke = function () {
          return (this.strokeEnabled() &&
              this.strokeWidth() &&
              !!(this.stroke() || this.strokeLinearGradientColorStops()));
      };
      Shape.prototype.intersects = function (point) {
          var stage = this.getStage(), bufferHitCanvas = stage.bufferHitCanvas, p;
          bufferHitCanvas.getContext().clear();
          this.drawHit(bufferHitCanvas);
          p = bufferHitCanvas.context.getImageData(Math.round(point.x), Math.round(point.y), 1, 1).data;
          return p[3] > 0;
      };
      Shape.prototype.destroy = function () {
          Node_1.Node.prototype.destroy.call(this);
          delete exports.shapes[this.colorKey];
          delete this.colorKey;
          return this;
      };
      Shape.prototype._useBufferCanvas = function (caching) {
          return !!((!caching || this.hasShadow()) &&
              this.perfectDrawEnabled() &&
              this.getAbsoluteOpacity() !== 1 &&
              this.hasFill() &&
              this.hasStroke() &&
              this.getStage());
      };
      Shape.prototype.setStrokeHitEnabled = function (val) {
          if (val) {
              this.hitStrokeWidth('auto');
          }
          else {
              this.hitStrokeWidth(0);
          }
      };
      Shape.prototype.getStrokeHitEnabled = function () {
          if (this.hitStrokeWidth() === 0) {
              return false;
          }
          else {
              return true;
          }
      };
      Shape.prototype.getSelfRect = function () {
          var size = this.size();
          return {
              x: this._centroid ? Math.round(-size.width / 2) : 0,
              y: this._centroid ? Math.round(-size.height / 2) : 0,
              width: size.width,
              height: size.height
          };
      };
      Shape.prototype.getClientRect = function (attrs) {
          attrs = attrs || {};
          var skipTransform = attrs.skipTransform;
          var relativeTo = attrs.relativeTo;
          var fillRect = this.getSelfRect();
          var applyStroke = !attrs.skipStroke && this.hasStroke();
          var strokeWidth = (applyStroke && this.strokeWidth()) || 0;
          var fillAndStrokeWidth = fillRect.width + strokeWidth;
          var fillAndStrokeHeight = fillRect.height + strokeWidth;
          var applyShadow = !attrs.skipShadow && this.hasShadow();
          var shadowOffsetX = applyShadow ? this.shadowOffsetX() : 0;
          var shadowOffsetY = applyShadow ? this.shadowOffsetY() : 0;
          var preWidth = fillAndStrokeWidth + Math.abs(shadowOffsetX);
          var preHeight = fillAndStrokeHeight + Math.abs(shadowOffsetY);
          var blurRadius = (applyShadow && this.shadowBlur()) || 0;
          var width = preWidth + blurRadius * 2;
          var height = preHeight + blurRadius * 2;
          var roundingOffset = 0;
          if (Math.round(strokeWidth / 2) !== strokeWidth / 2) {
              roundingOffset = 1;
          }
          var rect = {
              width: width + roundingOffset,
              height: height + roundingOffset,
              x: -Math.round(strokeWidth / 2 + blurRadius) +
                  Math.min(shadowOffsetX, 0) +
                  fillRect.x,
              y: -Math.round(strokeWidth / 2 + blurRadius) +
                  Math.min(shadowOffsetY, 0) +
                  fillRect.y
          };
          if (!skipTransform) {
              return this._transformedRect(rect, relativeTo);
          }
          return rect;
      };
      Shape.prototype.drawScene = function (can, top, caching, skipBuffer) {
          var layer = this.getLayer(), canvas = can || layer.getCanvas(), context = canvas.getContext(), cachedCanvas = this._getCanvasCache(), drawFunc = this.sceneFunc(), hasShadow = this.hasShadow(), hasStroke = this.hasStroke(), stage, bufferCanvas, bufferContext;
          if (!this.isVisible() && !caching) {
              return this;
          }
          if (cachedCanvas) {
              context.save();
              layer._applyTransform(this, context, top);
              this._drawCachedSceneCanvas(context);
              context.restore();
              return this;
          }
          if (!drawFunc) {
              return this;
          }
          context.save();
          if (this._useBufferCanvas(caching) && !skipBuffer) {
              stage = this.getStage();
              bufferCanvas = stage.bufferCanvas;
              bufferContext = bufferCanvas.getContext();
              bufferContext.clear();
              bufferContext.save();
              bufferContext._applyLineJoin(this);
              if (!caching) {
                  if (layer) {
                      layer._applyTransform(this, bufferContext, top);
                  }
                  else {
                      var m = this.getAbsoluteTransform(top).getMatrix();
                      context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
                  }
              }
              drawFunc.call(this, bufferContext, this);
              bufferContext.restore();
              var ratio = bufferCanvas.pixelRatio;
              if (hasShadow && !canvas.hitCanvas) {
                  context.save();
                  context._applyShadow(this);
                  context._applyOpacity(this);
                  context._applyGlobalCompositeOperation(this);
                  context.drawImage(bufferCanvas._canvas, 0, 0, bufferCanvas.width / ratio, bufferCanvas.height / ratio);
                  context.restore();
              }
              else {
                  context._applyOpacity(this);
                  context._applyGlobalCompositeOperation(this);
                  context.drawImage(bufferCanvas._canvas, 0, 0, bufferCanvas.width / ratio, bufferCanvas.height / ratio);
              }
          }
          else {
              context._applyLineJoin(this);
              if (!caching) {
                  if (layer) {
                      layer._applyTransform(this, context, top);
                  }
                  else {
                      var o = this.getAbsoluteTransform(top).getMatrix();
                      context.transform(o[0], o[1], o[2], o[3], o[4], o[5]);
                  }
              }
              if (hasShadow && hasStroke && !canvas.hitCanvas) {
                  context.save();
                  if (!caching) {
                      context._applyOpacity(this);
                      context._applyGlobalCompositeOperation(this);
                  }
                  context._applyShadow(this);
                  drawFunc.call(this, context, this);
                  context.restore();
                  if (this.hasFill() && this.shadowForStrokeEnabled()) {
                      drawFunc.call(this, context, this);
                  }
              }
              else if (hasShadow && !canvas.hitCanvas) {
                  context.save();
                  if (!caching) {
                      context._applyOpacity(this);
                      context._applyGlobalCompositeOperation(this);
                  }
                  context._applyShadow(this);
                  drawFunc.call(this, context, this);
                  context.restore();
              }
              else {
                  if (!caching) {
                      context._applyOpacity(this);
                      context._applyGlobalCompositeOperation(this);
                  }
                  drawFunc.call(this, context, this);
              }
          }
          context.restore();
          return this;
      };
      Shape.prototype.drawHit = function (can, top, caching) {
          var layer = this.getLayer(), canvas = can || layer.hitCanvas, context = canvas && canvas.getContext(), drawFunc = this.hitFunc() || this.sceneFunc(), cachedCanvas = this._getCanvasCache(), cachedHitCanvas = cachedCanvas && cachedCanvas.hit;
          if (!this.colorKey) {
              console.log(this);
              Util_1.Util.warn('Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. See the shape in logs above. If you want to reuse shape you should call remove() instead of destroy()');
          }
          if (!this.shouldDrawHit() && !caching) {
              return this;
          }
          if (cachedHitCanvas) {
              context.save();
              layer._applyTransform(this, context, top);
              this._drawCachedHitCanvas(context);
              context.restore();
              return this;
          }
          if (!drawFunc) {
              return this;
          }
          context.save();
          context._applyLineJoin(this);
          if (!caching) {
              if (layer) {
                  layer._applyTransform(this, context, top);
              }
              else {
                  var o = this.getAbsoluteTransform(top).getMatrix();
                  context.transform(o[0], o[1], o[2], o[3], o[4], o[5]);
              }
          }
          drawFunc.call(this, context, this);
          context.restore();
          return this;
      };
      Shape.prototype.drawHitFromCache = function (alphaThreshold) {
          if (alphaThreshold === void 0) { alphaThreshold = 0; }
          var cachedCanvas = this._getCanvasCache(), sceneCanvas = this._getCachedSceneCanvas(), hitCanvas = cachedCanvas.hit, hitContext = hitCanvas.getContext(), hitWidth = hitCanvas.getWidth(), hitHeight = hitCanvas.getHeight(), hitImageData, hitData, len, rgbColorKey, i, alpha;
          hitContext.clear();
          hitContext.drawImage(sceneCanvas._canvas, 0, 0, hitWidth, hitHeight);
          try {
              hitImageData = hitContext.getImageData(0, 0, hitWidth, hitHeight);
              hitData = hitImageData.data;
              len = hitData.length;
              rgbColorKey = Util_1.Util._hexToRgb(this.colorKey);
              for (i = 0; i < len; i += 4) {
                  alpha = hitData[i + 3];
                  if (alpha > alphaThreshold) {
                      hitData[i] = rgbColorKey.r;
                      hitData[i + 1] = rgbColorKey.g;
                      hitData[i + 2] = rgbColorKey.b;
                      hitData[i + 3] = 255;
                  }
                  else {
                      hitData[i + 3] = 0;
                  }
              }
              hitContext.putImageData(hitImageData, 0, 0);
          }
          catch (e) {
              Util_1.Util.error('Unable to draw hit graph from cached scene canvas. ' + e.message);
          }
          return this;
      };
      Shape.prototype.hasPointerCapture = function (pointerId) {
          return PointerEvents.hasPointerCapture(pointerId, this);
      };
      Shape.prototype.setPointerCapture = function (pointerId) {
          PointerEvents.setPointerCapture(pointerId, this);
      };
      Shape.prototype.releaseCapture = function (pointerId) {
          PointerEvents.releaseCapture(pointerId, this);
      };
      return Shape;
  }(Node_1.Node));
  exports.Shape = Shape;
  Shape.prototype._fillFunc = _fillFunc;
  Shape.prototype._strokeFunc = _strokeFunc;
  Shape.prototype._fillFuncHit = _fillFuncHit;
  Shape.prototype._strokeFuncHit = _strokeFuncHit;
  Shape.prototype._centroid = false;
  Shape.prototype.nodeType = 'Shape';
  Global_1._registerNode(Shape);
  Factory_1.Factory.addGetterSetter(Shape, 'stroke', undefined, Validators_1.getStringValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'strokeWidth', 2, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'hitStrokeWidth', 'auto', Validators_1.getNumberOrAutoValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'strokeHitEnabled', true, Validators_1.getBooleanValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'perfectDrawEnabled', true, Validators_1.getBooleanValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'shadowForStrokeEnabled', true, Validators_1.getBooleanValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'lineJoin');
  Factory_1.Factory.addGetterSetter(Shape, 'lineCap');
  Factory_1.Factory.addGetterSetter(Shape, 'sceneFunc');
  Factory_1.Factory.addGetterSetter(Shape, 'hitFunc');
  Factory_1.Factory.addGetterSetter(Shape, 'dash');
  Factory_1.Factory.addGetterSetter(Shape, 'dashOffset', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'shadowColor', undefined, Validators_1.getStringValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'shadowBlur', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'shadowOpacity', 1, Validators_1.getNumberValidator());
  Factory_1.Factory.addComponentsGetterSetter(Shape, 'shadowOffset', ['x', 'y']);
  Factory_1.Factory.addGetterSetter(Shape, 'shadowOffsetX', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'shadowOffsetY', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'fillPatternImage');
  Factory_1.Factory.addGetterSetter(Shape, 'fill', undefined, Validators_1.getStringValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'fillPatternX', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'fillPatternY', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientColorStops');
  Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientColorStops');
  Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientStartRadius', 0);
  Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientEndRadius', 0);
  Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientColorStops');
  Factory_1.Factory.addGetterSetter(Shape, 'fillPatternRepeat', 'repeat');
  Factory_1.Factory.addGetterSetter(Shape, 'fillEnabled', true);
  Factory_1.Factory.addGetterSetter(Shape, 'strokeEnabled', true);
  Factory_1.Factory.addGetterSetter(Shape, 'shadowEnabled', true);
  Factory_1.Factory.addGetterSetter(Shape, 'dashEnabled', true);
  Factory_1.Factory.addGetterSetter(Shape, 'strokeScaleEnabled', true);
  Factory_1.Factory.addGetterSetter(Shape, 'fillPriority', 'color');
  Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillPatternOffset', ['x', 'y']);
  Factory_1.Factory.addGetterSetter(Shape, 'fillPatternOffsetX', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'fillPatternOffsetY', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillPatternScale', ['x', 'y']);
  Factory_1.Factory.addGetterSetter(Shape, 'fillPatternScaleX', 1, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Shape, 'fillPatternScaleY', 1, Validators_1.getNumberValidator());
  Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillLinearGradientStartPoint', [
      'x',
      'y'
  ]);
  Factory_1.Factory.addComponentsGetterSetter(Shape, 'strokeLinearGradientStartPoint', [
      'x',
      'y'
  ]);
  Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientStartPointX', 0);
  Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientStartPointX', 0);
  Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientStartPointY', 0);
  Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientStartPointY', 0);
  Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillLinearGradientEndPoint', [
      'x',
      'y'
  ]);
  Factory_1.Factory.addComponentsGetterSetter(Shape, 'strokeLinearGradientEndPoint', [
      'x',
      'y'
  ]);
  Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientEndPointX', 0);
  Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientEndPointX', 0);
  Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientEndPointY', 0);
  Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientEndPointY', 0);
  Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillRadialGradientStartPoint', [
      'x',
      'y'
  ]);
  Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientStartPointX', 0);
  Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientStartPointY', 0);
  Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillRadialGradientEndPoint', [
      'x',
      'y'
  ]);
  Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientEndPointX', 0);
  Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientEndPointY', 0);
  Factory_1.Factory.addGetterSetter(Shape, 'fillPatternRotation', 0);
  Factory_1.Factory.backCompat(Shape, {
      dashArray: 'dash',
      getDashArray: 'getDash',
      setDashArray: 'getDash',
      drawFunc: 'sceneFunc',
      getDrawFunc: 'getSceneFunc',
      setDrawFunc: 'setSceneFunc',
      drawHitFunc: 'hitFunc',
      getDrawHitFunc: 'getHitFunc',
      setDrawHitFunc: 'setHitFunc'
  });
  Util_1.Collection.mapMethods(Shape);

  },{"./Factory":10,"./Global":12,"./Node":15,"./PointerEvents":16,"./Util":20,"./Validators":21}],18:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("./Util");
  var Factory_1 = _dereq_("./Factory");
  var Container_1 = _dereq_("./Container");
  var Global_1 = _dereq_("./Global");
  var Canvas_1 = _dereq_("./Canvas");
  var DragAndDrop_1 = _dereq_("./DragAndDrop");
  var Global_2 = _dereq_("./Global");
  var PointerEvents = _dereq_("./PointerEvents");
  var STAGE = 'Stage', STRING = 'string', PX = 'px', MOUSEOUT = 'mouseout', MOUSELEAVE = 'mouseleave', MOUSEOVER = 'mouseover', MOUSEENTER = 'mouseenter', MOUSEMOVE = 'mousemove', MOUSEDOWN = 'mousedown', MOUSEUP = 'mouseup', POINTERMOVE = 'pointermove', POINTERDOWN = 'pointerdown', POINTERUP = 'pointerup', POINTERCANCEL = 'pointercancel', LOSTPOINTERCAPTURE = 'lostpointercapture', CONTEXTMENU = 'contextmenu', CLICK = 'click', DBL_CLICK = 'dblclick', TOUCHSTART = 'touchstart', TOUCHEND = 'touchend', TAP = 'tap', DBL_TAP = 'dbltap', TOUCHMOVE = 'touchmove', WHEEL = 'wheel', CONTENT_MOUSEOUT = 'contentMouseout', CONTENT_MOUSEOVER = 'contentMouseover', CONTENT_MOUSEMOVE = 'contentMousemove', CONTENT_MOUSEDOWN = 'contentMousedown', CONTENT_MOUSEUP = 'contentMouseup', CONTENT_CONTEXTMENU = 'contentContextmenu', CONTENT_CLICK = 'contentClick', CONTENT_DBL_CLICK = 'contentDblclick', CONTENT_TOUCHSTART = 'contentTouchstart', CONTENT_TOUCHEND = 'contentTouchend', CONTENT_DBL_TAP = 'contentDbltap', CONTENT_TAP = 'contentTap', CONTENT_TOUCHMOVE = 'contentTouchmove', CONTENT_WHEEL = 'contentWheel', RELATIVE = 'relative', KONVA_CONTENT = 'konvajs-content', UNDERSCORE = '_', CONTAINER = 'container', MAX_LAYERS_NUMBER = 5, EMPTY_STRING = '', EVENTS = [
      MOUSEENTER,
      MOUSEDOWN,
      MOUSEMOVE,
      MOUSEUP,
      MOUSEOUT,
      TOUCHSTART,
      TOUCHMOVE,
      TOUCHEND,
      MOUSEOVER,
      WHEEL,
      CONTEXTMENU,
      POINTERDOWN,
      POINTERMOVE,
      POINTERUP,
      POINTERCANCEL,
      LOSTPOINTERCAPTURE
  ], eventsLength = EVENTS.length;
  function addEvent(ctx, eventName) {
      ctx.content.addEventListener(eventName, function (evt) {
          ctx[UNDERSCORE + eventName](evt);
      }, false);
  }
  var NO_POINTERS_MESSAGE = "Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);";
  exports.stages = [];
  function checkNoClip(attrs) {
      if (attrs === void 0) { attrs = {}; }
      if (attrs.clipFunc || attrs.clipWidth || attrs.clipHeight) {
          Util_1.Util.warn('Stage does not support clipping. Please use clip for Layers or Groups.');
      }
      return attrs;
  }
  var Stage = (function (_super) {
      __extends(Stage, _super);
      function Stage(config) {
          var _this = _super.call(this, checkNoClip(config)) || this;
          _this._pointerPositions = [];
          _this._changedPointerPositions = [];
          _this._buildDOM();
          _this._bindContentEvents();
          exports.stages.push(_this);
          _this.on('widthChange.konva heightChange.konva', _this._resizeDOM);
          _this.on('visibleChange.konva', _this._checkVisibility);
          _this.on('clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva', function () {
              checkNoClip(_this.attrs);
          });
          _this._checkVisibility();
          return _this;
      }
      Stage.prototype._validateAdd = function (child) {
          var isLayer = child.getType() === 'Layer';
          var isFastLayer = child.getType() === 'FastLayer';
          var valid = isLayer || isFastLayer;
          if (!valid) {
              Util_1.Util.throw('You may only add layers to the stage.');
          }
      };
      Stage.prototype._checkVisibility = function () {
          var style = this.visible() ? '' : 'none';
          this.content.style.display = style;
      };
      Stage.prototype.setContainer = function (container) {
          if (typeof container === STRING) {
              if (container.charAt(0) === '.') {
                  var className = container.slice(1);
                  container = document.getElementsByClassName(className)[0];
              }
              else {
                  var id;
                  if (container.charAt(0) !== '#') {
                      id = container;
                  }
                  else {
                      id = container.slice(1);
                  }
                  container = document.getElementById(id);
              }
              if (!container) {
                  throw 'Can not find container in document with id ' + id;
              }
          }
          this._setAttr(CONTAINER, container);
          if (this.content) {
              if (this.content.parentElement) {
                  this.content.parentElement.removeChild(this.content);
              }
              container.appendChild(this.content);
          }
          return this;
      };
      Stage.prototype.shouldDrawHit = function () {
          return true;
      };
      Stage.prototype.clear = function () {
          var layers = this.children, len = layers.length, n;
          for (n = 0; n < len; n++) {
              layers[n].clear();
          }
          return this;
      };
      Stage.prototype.clone = function (obj) {
          if (!obj) {
              obj = {};
          }
          obj.container = document.createElement('div');
          return Container_1.Container.prototype.clone.call(this, obj);
      };
      Stage.prototype.destroy = function () {
          _super.prototype.destroy.call(this);
          var content = this.content;
          if (content && Util_1.Util._isInDocument(content)) {
              this.container().removeChild(content);
          }
          var index = exports.stages.indexOf(this);
          if (index > -1) {
              exports.stages.splice(index, 1);
          }
          return this;
      };
      Stage.prototype.getPointerPosition = function () {
          var pos = this._pointerPositions[0] || this._changedPointerPositions[0];
          if (!pos) {
              Util_1.Util.warn(NO_POINTERS_MESSAGE);
              return null;
          }
          return {
              x: pos.x,
              y: pos.y
          };
      };
      Stage.prototype._getPointerById = function (id) {
          return this._pointerPositions.find(function (p) { return p.id === id; });
      };
      Stage.prototype.getPointersPositions = function () {
          return this._pointerPositions;
      };
      Stage.prototype.getStage = function () {
          return this;
      };
      Stage.prototype.getContent = function () {
          return this.content;
      };
      Stage.prototype._toKonvaCanvas = function (config) {
          config = config || {};
          var x = config.x || 0, y = config.y || 0, canvas = new Canvas_1.SceneCanvas({
              width: config.width || this.width(),
              height: config.height || this.height(),
              pixelRatio: config.pixelRatio || 1
          }), _context = canvas.getContext()._context, layers = this.children;
          if (x || y) {
              _context.translate(-1 * x, -1 * y);
          }
          layers.each(function (layer) {
              if (!layer.isVisible()) {
                  return;
              }
              var layerCanvas = layer._toKonvaCanvas(config);
              _context.drawImage(layerCanvas._canvas, x, y, layerCanvas.getWidth() / layerCanvas.getPixelRatio(), layerCanvas.getHeight() / layerCanvas.getPixelRatio());
          });
          return canvas;
      };
      Stage.prototype.getIntersection = function (pos, selector) {
          if (!pos) {
              return null;
          }
          var layers = this.children, len = layers.length, end = len - 1, n, shape;
          for (n = end; n >= 0; n--) {
              shape = layers[n].getIntersection(pos, selector);
              if (shape) {
                  return shape;
              }
          }
          return null;
      };
      Stage.prototype._resizeDOM = function () {
          if (this.content) {
              var width = this.width(), height = this.height(), layers = this.getChildren(), len = layers.length, n, layer;
              this.content.style.width = width + PX;
              this.content.style.height = height + PX;
              this.bufferCanvas.setSize(width, height);
              this.bufferHitCanvas.setSize(width, height);
              for (n = 0; n < len; n++) {
                  layer = layers[n];
                  layer.setSize({ width: width, height: height });
                  layer.draw();
              }
          }
      };
      Stage.prototype.add = function (layer) {
          if (arguments.length > 1) {
              for (var i = 0; i < arguments.length; i++) {
                  this.add(arguments[i]);
              }
              return this;
          }
          _super.prototype.add.call(this, layer);
          var length = this.children.length;
          if (length > MAX_LAYERS_NUMBER) {
              Util_1.Util.warn('The stage has ' +
                  length +
                  ' layers. Recommended maximin number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group.');
          }
          layer._setCanvasSize(this.width(), this.height());
          layer.draw();
          if (Global_1.Konva.isBrowser) {
              this.content.appendChild(layer.canvas._canvas);
          }
          return this;
      };
      Stage.prototype.getParent = function () {
          return null;
      };
      Stage.prototype.getLayer = function () {
          return null;
      };
      Stage.prototype.hasPointerCapture = function (pointerId) {
          return PointerEvents.hasPointerCapture(pointerId, this);
      };
      Stage.prototype.setPointerCapture = function (pointerId) {
          PointerEvents.setPointerCapture(pointerId, this);
      };
      Stage.prototype.releaseCapture = function (pointerId) {
          PointerEvents.releaseCapture(pointerId, this);
      };
      Stage.prototype.getLayers = function () {
          return this.getChildren();
      };
      Stage.prototype._bindContentEvents = function () {
          if (!Global_1.Konva.isBrowser) {
              return;
          }
          for (var n = 0; n < eventsLength; n++) {
              addEvent(this, EVENTS[n]);
          }
      };
      Stage.prototype._mouseenter = function (evt) {
          this.setPointersPositions(evt);
          this._fire(MOUSEENTER, { evt: evt, target: this, currentTarget: this });
      };
      Stage.prototype._mouseover = function (evt) {
          this.setPointersPositions(evt);
          this._fire(CONTENT_MOUSEOVER, { evt: evt });
          this._fire(MOUSEOVER, { evt: evt, target: this, currentTarget: this });
      };
      Stage.prototype._mouseout = function (evt) {
          this.setPointersPositions(evt);
          var targetShape = this.targetShape;
          var eventsEnabled = !DragAndDrop_1.DD.isDragging || Global_1.Konva.hitOnDragEnabled;
          if (targetShape && eventsEnabled) {
              targetShape._fireAndBubble(MOUSEOUT, { evt: evt });
              targetShape._fireAndBubble(MOUSELEAVE, { evt: evt });
              this.targetShape = null;
          }
          else if (eventsEnabled) {
              this._fire(MOUSELEAVE, {
                  evt: evt,
                  target: this,
                  currentTarget: this
              });
              this._fire(MOUSEOUT, {
                  evt: evt,
                  target: this,
                  currentTarget: this
              });
          }
          this.pointerPos = undefined;
          this._pointerPositions = [];
          this._fire(CONTENT_MOUSEOUT, { evt: evt });
      };
      Stage.prototype._mousemove = function (evt) {
          if (Global_1.Konva.UA.ieMobile) {
              return this._touchmove(evt);
          }
          this.setPointersPositions(evt);
          var pointerId = Util_1.Util._getFirstPointerId(evt);
          var shape;
          var eventsEnabled = !DragAndDrop_1.DD.isDragging || Global_1.Konva.hitOnDragEnabled;
          if (eventsEnabled) {
              shape = this.getIntersection(this.getPointerPosition());
              if (shape && shape.isListening()) {
                  var differentTarget = !this.targetShape || this.targetShape !== shape;
                  if (eventsEnabled && differentTarget) {
                      if (this.targetShape) {
                          this.targetShape._fireAndBubble(MOUSEOUT, { evt: evt, pointerId: pointerId }, shape);
                          this.targetShape._fireAndBubble(MOUSELEAVE, { evt: evt, pointerId: pointerId }, shape);
                      }
                      shape._fireAndBubble(MOUSEOVER, { evt: evt, pointerId: pointerId }, this.targetShape);
                      shape._fireAndBubble(MOUSEENTER, { evt: evt, pointerId: pointerId }, this.targetShape);
                      shape._fireAndBubble(MOUSEMOVE, { evt: evt, pointerId: pointerId });
                      this.targetShape = shape;
                  }
                  else {
                      shape._fireAndBubble(MOUSEMOVE, { evt: evt, pointerId: pointerId });
                  }
              }
              else {
                  if (this.targetShape && eventsEnabled) {
                      this.targetShape._fireAndBubble(MOUSEOUT, { evt: evt, pointerId: pointerId });
                      this.targetShape._fireAndBubble(MOUSELEAVE, { evt: evt, pointerId: pointerId });
                      this._fire(MOUSEOVER, {
                          evt: evt,
                          target: this,
                          currentTarget: this,
                          pointerId: pointerId
                      });
                      this.targetShape = null;
                  }
                  this._fire(MOUSEMOVE, {
                      evt: evt,
                      target: this,
                      currentTarget: this,
                      pointerId: pointerId
                  });
              }
              this._fire(CONTENT_MOUSEMOVE, { evt: evt });
          }
          if (evt.cancelable) {
              evt.preventDefault();
          }
      };
      Stage.prototype._mousedown = function (evt) {
          if (Global_1.Konva.UA.ieMobile) {
              return this._touchstart(evt);
          }
          this.setPointersPositions(evt);
          var pointerId = Util_1.Util._getFirstPointerId(evt);
          var shape = this.getIntersection(this.getPointerPosition());
          Global_1.Konva.listenClickTap = true;
          if (shape && shape.isListening()) {
              this.clickStartShape = shape;
              shape._fireAndBubble(MOUSEDOWN, { evt: evt, pointerId: pointerId });
          }
          else {
              this._fire(MOUSEDOWN, {
                  evt: evt,
                  target: this,
                  currentTarget: this,
                  pointerId: pointerId
              });
          }
          this._fire(CONTENT_MOUSEDOWN, { evt: evt });
      };
      Stage.prototype._mouseup = function (evt) {
          if (Global_1.Konva.UA.ieMobile) {
              return this._touchend(evt);
          }
          this.setPointersPositions(evt);
          var pointerId = Util_1.Util._getFirstPointerId(evt);
          var shape = this.getIntersection(this.getPointerPosition()), clickStartShape = this.clickStartShape, clickEndShape = this.clickEndShape, fireDblClick = false;
          if (Global_1.Konva.inDblClickWindow) {
              fireDblClick = true;
              clearTimeout(this.dblTimeout);
          }
          else if (!DragAndDrop_1.DD.justDragged) {
              Global_1.Konva.inDblClickWindow = true;
              clearTimeout(this.dblTimeout);
          }
          else if (DragAndDrop_1.DD) {
              DragAndDrop_1.DD.justDragged = false;
          }
          this.dblTimeout = setTimeout(function () {
              Global_1.Konva.inDblClickWindow = false;
          }, Global_1.Konva.dblClickWindow);
          if (shape && shape.isListening()) {
              this.clickEndShape = shape;
              shape._fireAndBubble(MOUSEUP, { evt: evt, pointerId: pointerId });
              if (Global_1.Konva.listenClickTap &&
                  clickStartShape &&
                  clickStartShape._id === shape._id) {
                  shape._fireAndBubble(CLICK, { evt: evt, pointerId: pointerId });
                  if (fireDblClick && clickEndShape && clickEndShape === shape) {
                      shape._fireAndBubble(DBL_CLICK, { evt: evt, pointerId: pointerId });
                  }
              }
          }
          else {
              this._fire(MOUSEUP, {
                  evt: evt,
                  target: this,
                  currentTarget: this,
                  pointerId: pointerId
              });
              if (Global_1.Konva.listenClickTap) {
                  this._fire(CLICK, {
                      evt: evt,
                      target: this,
                      currentTarget: this,
                      pointerId: pointerId
                  });
              }
              if (fireDblClick) {
                  this._fire(DBL_CLICK, {
                      evt: evt,
                      target: this,
                      currentTarget: this,
                      pointerId: pointerId
                  });
              }
          }
          this._fire(CONTENT_MOUSEUP, { evt: evt });
          if (Global_1.Konva.listenClickTap) {
              this._fire(CONTENT_CLICK, { evt: evt });
              if (fireDblClick) {
                  this._fire(CONTENT_DBL_CLICK, { evt: evt });
              }
          }
          Global_1.Konva.listenClickTap = false;
          if (evt.cancelable) {
              evt.preventDefault();
          }
      };
      Stage.prototype._contextmenu = function (evt) {
          this.setPointersPositions(evt);
          var shape = this.getIntersection(this.getPointerPosition());
          if (shape && shape.isListening()) {
              shape._fireAndBubble(CONTEXTMENU, { evt: evt });
          }
          else {
              this._fire(CONTEXTMENU, {
                  evt: evt,
                  target: this,
                  currentTarget: this
              });
          }
          this._fire(CONTENT_CONTEXTMENU, { evt: evt });
      };
      Stage.prototype._touchstart = function (evt) {
          var _this = this;
          this.setPointersPositions(evt);
          var triggeredOnShape = false;
          this._changedPointerPositions.forEach(function (pos) {
              var shape = _this.getIntersection(pos);
              Global_1.Konva.listenClickTap = true;
              var hasShape = shape && shape.isListening();
              if (!hasShape) {
                  return;
              }
              if (Global_1.Konva.captureTouchEventsEnabled) {
                  shape.setPointerCapture(pos.id);
              }
              _this.tapStartShape = shape;
              shape._fireAndBubble(TOUCHSTART, { evt: evt, pointerId: pos.id }, _this);
              triggeredOnShape = true;
              if (shape.isListening() && shape.preventDefault() && evt.cancelable) {
                  evt.preventDefault();
              }
          });
          if (!triggeredOnShape) {
              this._fire(TOUCHSTART, {
                  evt: evt,
                  target: this,
                  currentTarget: this,
                  pointerId: this._changedPointerPositions[0].id
              });
          }
          this._fire(CONTENT_TOUCHSTART, { evt: evt });
      };
      Stage.prototype._touchmove = function (evt) {
          var _this = this;
          this.setPointersPositions(evt);
          var eventsEnabled = !DragAndDrop_1.DD.isDragging || Global_1.Konva.hitOnDragEnabled;
          if (eventsEnabled) {
              var triggeredOnShape = false;
              var processedShapesIds = {};
              this._changedPointerPositions.forEach(function (pos) {
                  var shape = PointerEvents.getCapturedShape(pos.id) || _this.getIntersection(pos);
                  var hasShape = shape && shape.isListening();
                  if (!hasShape) {
                      return;
                  }
                  if (processedShapesIds[shape._id]) {
                      return;
                  }
                  processedShapesIds[shape._id] = true;
                  shape._fireAndBubble(TOUCHMOVE, { evt: evt, pointerId: pos.id });
                  triggeredOnShape = true;
                  if (shape.isListening() && shape.preventDefault() && evt.cancelable) {
                      evt.preventDefault();
                  }
              });
              if (!triggeredOnShape) {
                  this._fire(TOUCHMOVE, {
                      evt: evt,
                      target: this,
                      currentTarget: this,
                      pointerId: this._changedPointerPositions[0].id
                  });
              }
              this._fire(CONTENT_TOUCHMOVE, { evt: evt });
          }
          if (DragAndDrop_1.DD.isDragging && DragAndDrop_1.DD.node.preventDefault() && evt.cancelable) {
              evt.preventDefault();
          }
      };
      Stage.prototype._touchend = function (evt) {
          var _this = this;
          this.setPointersPositions(evt);
          var clickEndShape = this.clickEndShape, fireDblClick = false;
          if (Global_1.Konva.inDblClickWindow) {
              fireDblClick = true;
              clearTimeout(this.dblTimeout);
          }
          else if (!DragAndDrop_1.DD.justDragged) {
              Global_1.Konva.inDblClickWindow = true;
              clearTimeout(this.dblTimeout);
          }
          this.dblTimeout = setTimeout(function () {
              Global_1.Konva.inDblClickWindow = false;
          }, Global_1.Konva.dblClickWindow);
          var triggeredOnShape = false;
          var processedShapesIds = {};
          var tapTriggered = false;
          var dblTapTriggered = false;
          this._changedPointerPositions.forEach(function (pos) {
              var shape = PointerEvents.getCapturedShape(pos.id) ||
                  _this.getIntersection(pos);
              if (shape) {
                  shape.releaseCapture(pos.id);
              }
              var hasShape = shape && shape.isListening();
              if (!hasShape) {
                  return;
              }
              if (processedShapesIds[shape._id]) {
                  return;
              }
              processedShapesIds[shape._id] = true;
              _this.clickEndShape = shape;
              shape._fireAndBubble(TOUCHEND, { evt: evt, pointerId: pos.id });
              triggeredOnShape = true;
              if (Global_1.Konva.listenClickTap && shape === _this.tapStartShape) {
                  tapTriggered = true;
                  shape._fireAndBubble(TAP, { evt: evt, pointerId: pos.id });
                  if (fireDblClick && clickEndShape && clickEndShape === shape) {
                      dblTapTriggered = true;
                      shape._fireAndBubble(DBL_TAP, { evt: evt, pointerId: pos.id });
                  }
              }
              if (shape.isListening() && shape.preventDefault() && evt.cancelable) {
                  evt.preventDefault();
              }
          });
          if (!triggeredOnShape) {
              this._fire(TOUCHEND, {
                  evt: evt,
                  target: this,
                  currentTarget: this,
                  pointerId: this._changedPointerPositions[0].id
              });
          }
          if (Global_1.Konva.listenClickTap && !tapTriggered) {
              this._fire(TAP, {
                  evt: evt,
                  target: this,
                  currentTarget: this,
                  pointerId: this._changedPointerPositions[0].id
              });
          }
          if (fireDblClick && !dblTapTriggered) {
              this._fire(DBL_TAP, {
                  evt: evt,
                  target: this,
                  currentTarget: this,
                  pointerId: this._changedPointerPositions[0].id
              });
          }
          this._fire(CONTENT_TOUCHEND, { evt: evt });
          if (Global_1.Konva.listenClickTap) {
              this._fire(CONTENT_TAP, { evt: evt });
              if (fireDblClick) {
                  this._fire(CONTENT_DBL_TAP, { evt: evt });
              }
          }
          Global_1.Konva.listenClickTap = false;
      };
      Stage.prototype._wheel = function (evt) {
          this.setPointersPositions(evt);
          var shape = this.getIntersection(this.getPointerPosition());
          if (shape && shape.isListening()) {
              shape._fireAndBubble(WHEEL, { evt: evt });
          }
          else {
              this._fire(WHEEL, {
                  evt: evt,
                  target: this,
                  currentTarget: this
              });
          }
          this._fire(CONTENT_WHEEL, { evt: evt });
      };
      Stage.prototype._pointerdown = function (evt) {
          if (!Global_1.Konva._pointerEventsEnabled) {
              return;
          }
          this.setPointersPositions(evt);
          var shape = PointerEvents.getCapturedShape(evt.pointerId) ||
              this.getIntersection(this.getPointerPosition());
          if (shape) {
              shape._fireAndBubble(POINTERDOWN, PointerEvents.createEvent(evt));
          }
      };
      Stage.prototype._pointermove = function (evt) {
          if (!Global_1.Konva._pointerEventsEnabled) {
              return;
          }
          this.setPointersPositions(evt);
          var shape = PointerEvents.getCapturedShape(evt.pointerId) ||
              this.getIntersection(this.getPointerPosition());
          if (shape) {
              shape._fireAndBubble(POINTERMOVE, PointerEvents.createEvent(evt));
          }
      };
      Stage.prototype._pointerup = function (evt) {
          if (!Global_1.Konva._pointerEventsEnabled) {
              return;
          }
          this.setPointersPositions(evt);
          var shape = PointerEvents.getCapturedShape(evt.pointerId) ||
              this.getIntersection(this.getPointerPosition());
          if (shape) {
              shape._fireAndBubble(POINTERUP, PointerEvents.createEvent(evt));
          }
          PointerEvents.releaseCapture(evt.pointerId);
      };
      Stage.prototype._pointercancel = function (evt) {
          if (!Global_1.Konva._pointerEventsEnabled) {
              return;
          }
          this.setPointersPositions(evt);
          var shape = PointerEvents.getCapturedShape(evt.pointerId) ||
              this.getIntersection(this.getPointerPosition());
          if (shape) {
              shape._fireAndBubble(POINTERUP, PointerEvents.createEvent(evt));
          }
          PointerEvents.releaseCapture(evt.pointerId);
      };
      Stage.prototype._lostpointercapture = function (evt) {
          PointerEvents.releaseCapture(evt.pointerId);
      };
      Stage.prototype.setPointersPositions = function (evt) {
          var _this = this;
          var contentPosition = this._getContentPosition(), x = null, y = null;
          evt = evt ? evt : window.event;
          if (evt.touches !== undefined) {
              this._pointerPositions = [];
              this._changedPointerPositions = [];
              Util_1.Collection.prototype.each.call(evt.touches, function (touch) {
                  _this._pointerPositions.push({
                      id: touch.identifier,
                      x: touch.clientX - contentPosition.left,
                      y: touch.clientY - contentPosition.top
                  });
              });
              Util_1.Collection.prototype.each.call(evt.changedTouches || evt.touches, function (touch) {
                  _this._changedPointerPositions.push({
                      id: touch.identifier,
                      x: touch.clientX - contentPosition.left,
                      y: touch.clientY - contentPosition.top
                  });
              });
              if (evt.touches.length > 0) {
                  var touch = evt.touches[0];
                  x = touch.clientX - contentPosition.left;
                  y = touch.clientY - contentPosition.top;
              }
          }
          else {
              x = evt.clientX - contentPosition.left;
              y = evt.clientY - contentPosition.top;
              this.pointerPos = {
                  x: x,
                  y: y
              };
              this._pointerPositions = [{ x: x, y: y, id: Util_1.Util._getFirstPointerId(evt) }];
              this._changedPointerPositions = [
                  { x: x, y: y, id: Util_1.Util._getFirstPointerId(evt) }
              ];
          }
      };
      Stage.prototype._setPointerPosition = function (evt) {
          Util_1.Util.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.');
          this.setPointersPositions(evt);
      };
      Stage.prototype._getContentPosition = function () {
          var rect = this.content.getBoundingClientRect
              ? this.content.getBoundingClientRect()
              : { top: 0, left: 0 };
          return {
              top: rect.top,
              left: rect.left
          };
      };
      Stage.prototype._buildDOM = function () {
          this.bufferCanvas = new Canvas_1.SceneCanvas();
          this.bufferHitCanvas = new Canvas_1.HitCanvas({ pixelRatio: 1 });
          if (!Global_1.Konva.isBrowser) {
              return;
          }
          var container = this.container();
          if (!container) {
              throw 'Stage has no container. A container is required.';
          }
          container.innerHTML = EMPTY_STRING;
          this.content = document.createElement('div');
          this.content.style.position = RELATIVE;
          this.content.style.userSelect = 'none';
          this.content.className = KONVA_CONTENT;
          this.content.setAttribute('role', 'presentation');
          container.appendChild(this.content);
          this._resizeDOM();
      };
      Stage.prototype.cache = function () {
          Util_1.Util.warn('Cache function is not allowed for stage. You may use cache only for layers, groups and shapes.');
          return this;
      };
      Stage.prototype.clearCache = function () {
          return this;
      };
      Stage.prototype.batchDraw = function () {
          this.children.each(function (layer) {
              layer.batchDraw();
          });
          return this;
      };
      return Stage;
  }(Container_1.Container));
  exports.Stage = Stage;
  Stage.prototype.nodeType = STAGE;
  Global_2._registerNode(Stage);
  Factory_1.Factory.addGetterSetter(Stage, 'container');

  },{"./Canvas":6,"./Container":7,"./DragAndDrop":9,"./Factory":10,"./Global":12,"./PointerEvents":16,"./Util":20}],19:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("./Util");
  var Animation_1 = _dereq_("./Animation");
  var Node_1 = _dereq_("./Node");
  var Global_1 = _dereq_("./Global");
  var blacklist = {
      node: 1,
      duration: 1,
      easing: 1,
      onFinish: 1,
      yoyo: 1
  }, PAUSED = 1, PLAYING = 2, REVERSING = 3, idCounter = 0, colorAttrs = ['fill', 'stroke', 'shadowColor'];
  var TweenEngine = (function () {
      function TweenEngine(prop, propFunc, func, begin, finish, duration, yoyo) {
          this.prop = prop;
          this.propFunc = propFunc;
          this.begin = begin;
          this._pos = begin;
          this.duration = duration;
          this._change = 0;
          this.prevPos = 0;
          this.yoyo = yoyo;
          this._time = 0;
          this._position = 0;
          this._startTime = 0;
          this._finish = 0;
          this.func = func;
          this._change = finish - this.begin;
          this.pause();
      }
      TweenEngine.prototype.fire = function (str) {
          var handler = this[str];
          if (handler) {
              handler();
          }
      };
      TweenEngine.prototype.setTime = function (t) {
          if (t > this.duration) {
              if (this.yoyo) {
                  this._time = this.duration;
                  this.reverse();
              }
              else {
                  this.finish();
              }
          }
          else if (t < 0) {
              if (this.yoyo) {
                  this._time = 0;
                  this.play();
              }
              else {
                  this.reset();
              }
          }
          else {
              this._time = t;
              this.update();
          }
      };
      TweenEngine.prototype.getTime = function () {
          return this._time;
      };
      TweenEngine.prototype.setPosition = function (p) {
          this.prevPos = this._pos;
          this.propFunc(p);
          this._pos = p;
      };
      TweenEngine.prototype.getPosition = function (t) {
          if (t === undefined) {
              t = this._time;
          }
          return this.func(t, this.begin, this._change, this.duration);
      };
      TweenEngine.prototype.play = function () {
          this.state = PLAYING;
          this._startTime = this.getTimer() - this._time;
          this.onEnterFrame();
          this.fire('onPlay');
      };
      TweenEngine.prototype.reverse = function () {
          this.state = REVERSING;
          this._time = this.duration - this._time;
          this._startTime = this.getTimer() - this._time;
          this.onEnterFrame();
          this.fire('onReverse');
      };
      TweenEngine.prototype.seek = function (t) {
          this.pause();
          this._time = t;
          this.update();
          this.fire('onSeek');
      };
      TweenEngine.prototype.reset = function () {
          this.pause();
          this._time = 0;
          this.update();
          this.fire('onReset');
      };
      TweenEngine.prototype.finish = function () {
          this.pause();
          this._time = this.duration;
          this.update();
          this.fire('onFinish');
      };
      TweenEngine.prototype.update = function () {
          this.setPosition(this.getPosition(this._time));
      };
      TweenEngine.prototype.onEnterFrame = function () {
          var t = this.getTimer() - this._startTime;
          if (this.state === PLAYING) {
              this.setTime(t);
          }
          else if (this.state === REVERSING) {
              this.setTime(this.duration - t);
          }
      };
      TweenEngine.prototype.pause = function () {
          this.state = PAUSED;
          this.fire('onPause');
      };
      TweenEngine.prototype.getTimer = function () {
          return new Date().getTime();
      };
      return TweenEngine;
  }());
  var Tween = (function () {
      function Tween(config) {
          var that = this, node = config.node, nodeId = node._id, duration, easing = config.easing || exports.Easings.Linear, yoyo = !!config.yoyo, key;
          if (typeof config.duration === 'undefined') {
              duration = 0.3;
          }
          else if (config.duration === 0) {
              duration = 0.001;
          }
          else {
              duration = config.duration;
          }
          this.node = node;
          this._id = idCounter++;
          var layers = node.getLayer() ||
              (node instanceof Global_1.Konva['Stage'] ? node.getLayers() : null);
          if (!layers) {
              Util_1.Util.error('Tween constructor have `node` that is not in a layer. Please add node into layer first.');
          }
          this.anim = new Animation_1.Animation(function () {
              that.tween.onEnterFrame();
          }, layers);
          this.tween = new TweenEngine(key, function (i) {
              that._tweenFunc(i);
          }, easing, 0, 1, duration * 1000, yoyo);
          this._addListeners();
          if (!Tween.attrs[nodeId]) {
              Tween.attrs[nodeId] = {};
          }
          if (!Tween.attrs[nodeId][this._id]) {
              Tween.attrs[nodeId][this._id] = {};
          }
          if (!Tween.tweens[nodeId]) {
              Tween.tweens[nodeId] = {};
          }
          for (key in config) {
              if (blacklist[key] === undefined) {
                  this._addAttr(key, config[key]);
              }
          }
          this.reset();
          this.onFinish = config.onFinish;
          this.onReset = config.onReset;
      }
      Tween.prototype._addAttr = function (key, end) {
          var node = this.node, nodeId = node._id, start, diff, tweenId, n, len, trueEnd, trueStart, endRGBA;
          tweenId = Tween.tweens[nodeId][key];
          if (tweenId) {
              delete Tween.attrs[nodeId][tweenId][key];
          }
          start = node.getAttr(key);
          if (Util_1.Util._isArray(end)) {
              diff = [];
              len = Math.max(end.length, start.length);
              if (key === 'points' && end.length !== start.length) {
                  if (end.length > start.length) {
                      trueStart = start;
                      start = Util_1.Util._prepareArrayForTween(start, end, node.closed());
                  }
                  else {
                      trueEnd = end;
                      end = Util_1.Util._prepareArrayForTween(end, start, node.closed());
                  }
              }
              if (key.indexOf('fill') === 0) {
                  for (n = 0; n < len; n++) {
                      if (n % 2 === 0) {
                          diff.push(end[n] - start[n]);
                      }
                      else {
                          var startRGBA = Util_1.Util.colorToRGBA(start[n]);
                          endRGBA = Util_1.Util.colorToRGBA(end[n]);
                          start[n] = startRGBA;
                          diff.push({
                              r: endRGBA.r - startRGBA.r,
                              g: endRGBA.g - startRGBA.g,
                              b: endRGBA.b - startRGBA.b,
                              a: endRGBA.a - startRGBA.a
                          });
                      }
                  }
              }
              else {
                  for (n = 0; n < len; n++) {
                      diff.push(end[n] - start[n]);
                  }
              }
          }
          else if (colorAttrs.indexOf(key) !== -1) {
              start = Util_1.Util.colorToRGBA(start);
              endRGBA = Util_1.Util.colorToRGBA(end);
              diff = {
                  r: endRGBA.r - start.r,
                  g: endRGBA.g - start.g,
                  b: endRGBA.b - start.b,
                  a: endRGBA.a - start.a
              };
          }
          else {
              diff = end - start;
          }
          Tween.attrs[nodeId][this._id][key] = {
              start: start,
              diff: diff,
              end: end,
              trueEnd: trueEnd,
              trueStart: trueStart
          };
          Tween.tweens[nodeId][key] = this._id;
      };
      Tween.prototype._tweenFunc = function (i) {
          var node = this.node, attrs = Tween.attrs[node._id][this._id], key, attr, start, diff, newVal, n, len, end;
          for (key in attrs) {
              attr = attrs[key];
              start = attr.start;
              diff = attr.diff;
              end = attr.end;
              if (Util_1.Util._isArray(start)) {
                  newVal = [];
                  len = Math.max(start.length, end.length);
                  if (key.indexOf('fill') === 0) {
                      for (n = 0; n < len; n++) {
                          if (n % 2 === 0) {
                              newVal.push((start[n] || 0) + diff[n] * i);
                          }
                          else {
                              newVal.push('rgba(' +
                                  Math.round(start[n].r + diff[n].r * i) +
                                  ',' +
                                  Math.round(start[n].g + diff[n].g * i) +
                                  ',' +
                                  Math.round(start[n].b + diff[n].b * i) +
                                  ',' +
                                  (start[n].a + diff[n].a * i) +
                                  ')');
                          }
                      }
                  }
                  else {
                      for (n = 0; n < len; n++) {
                          newVal.push((start[n] || 0) + diff[n] * i);
                      }
                  }
              }
              else if (colorAttrs.indexOf(key) !== -1) {
                  newVal =
                      'rgba(' +
                          Math.round(start.r + diff.r * i) +
                          ',' +
                          Math.round(start.g + diff.g * i) +
                          ',' +
                          Math.round(start.b + diff.b * i) +
                          ',' +
                          (start.a + diff.a * i) +
                          ')';
              }
              else {
                  newVal = start + diff * i;
              }
              node.setAttr(key, newVal);
          }
      };
      Tween.prototype._addListeners = function () {
          var _this = this;
          this.tween.onPlay = function () {
              _this.anim.start();
          };
          this.tween.onReverse = function () {
              _this.anim.start();
          };
          this.tween.onPause = function () {
              _this.anim.stop();
          };
          this.tween.onFinish = function () {
              var node = _this.node;
              var attrs = Tween.attrs[node._id][_this._id];
              if (attrs.points && attrs.points.trueEnd) {
                  node.setAttr('points', attrs.points.trueEnd);
              }
              if (_this.onFinish) {
                  _this.onFinish.call(_this);
              }
          };
          this.tween.onReset = function () {
              var node = _this.node;
              var attrs = Tween.attrs[node._id][_this._id];
              if (attrs.points && attrs.points.trueStart) {
                  node.points(attrs.points.trueStart);
              }
              if (_this.onReset) {
                  _this.onReset();
              }
          };
      };
      Tween.prototype.play = function () {
          this.tween.play();
          return this;
      };
      Tween.prototype.reverse = function () {
          this.tween.reverse();
          return this;
      };
      Tween.prototype.reset = function () {
          this.tween.reset();
          return this;
      };
      Tween.prototype.seek = function (t) {
          this.tween.seek(t * 1000);
          return this;
      };
      Tween.prototype.pause = function () {
          this.tween.pause();
          return this;
      };
      Tween.prototype.finish = function () {
          this.tween.finish();
          return this;
      };
      Tween.prototype.destroy = function () {
          var nodeId = this.node._id, thisId = this._id, attrs = Tween.tweens[nodeId], key;
          this.pause();
          for (key in attrs) {
              delete Tween.tweens[nodeId][key];
          }
          delete Tween.attrs[nodeId][thisId];
      };
      Tween.attrs = {};
      Tween.tweens = {};
      return Tween;
  }());
  exports.Tween = Tween;
  Node_1.Node.prototype.to = function (params) {
      var onFinish = params.onFinish;
      params.node = this;
      params.onFinish = function () {
          this.destroy();
          if (onFinish) {
              onFinish();
          }
      };
      var tween = new Tween(params);
      tween.play();
  };
  exports.Easings = {
      BackEaseIn: function (t, b, c, d) {
          var s = 1.70158;
          return c * (t /= d) * t * ((s + 1) * t - s) + b;
      },
      BackEaseOut: function (t, b, c, d) {
          var s = 1.70158;
          return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
      },
      BackEaseInOut: function (t, b, c, d) {
          var s = 1.70158;
          if ((t /= d / 2) < 1) {
              return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
          }
          return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
      },
      ElasticEaseIn: function (t, b, c, d, a, p) {
          var s = 0;
          if (t === 0) {
              return b;
          }
          if ((t /= d) === 1) {
              return b + c;
          }
          if (!p) {
              p = d * 0.3;
          }
          if (!a || a < Math.abs(c)) {
              a = c;
              s = p / 4;
          }
          else {
              s = (p / (2 * Math.PI)) * Math.asin(c / a);
          }
          return (-(a *
              Math.pow(2, 10 * (t -= 1)) *
              Math.sin(((t * d - s) * (2 * Math.PI)) / p)) + b);
      },
      ElasticEaseOut: function (t, b, c, d, a, p) {
          var s = 0;
          if (t === 0) {
              return b;
          }
          if ((t /= d) === 1) {
              return b + c;
          }
          if (!p) {
              p = d * 0.3;
          }
          if (!a || a < Math.abs(c)) {
              a = c;
              s = p / 4;
          }
          else {
              s = (p / (2 * Math.PI)) * Math.asin(c / a);
          }
          return (a * Math.pow(2, -10 * t) * Math.sin(((t * d - s) * (2 * Math.PI)) / p) +
              c +
              b);
      },
      ElasticEaseInOut: function (t, b, c, d, a, p) {
          var s = 0;
          if (t === 0) {
              return b;
          }
          if ((t /= d / 2) === 2) {
              return b + c;
          }
          if (!p) {
              p = d * (0.3 * 1.5);
          }
          if (!a || a < Math.abs(c)) {
              a = c;
              s = p / 4;
          }
          else {
              s = (p / (2 * Math.PI)) * Math.asin(c / a);
          }
          if (t < 1) {
              return (-0.5 *
                  (a *
                      Math.pow(2, 10 * (t -= 1)) *
                      Math.sin(((t * d - s) * (2 * Math.PI)) / p)) +
                  b);
          }
          return (a *
              Math.pow(2, -10 * (t -= 1)) *
              Math.sin(((t * d - s) * (2 * Math.PI)) / p) *
              0.5 +
              c +
              b);
      },
      BounceEaseOut: function (t, b, c, d) {
          if ((t /= d) < 1 / 2.75) {
              return c * (7.5625 * t * t) + b;
          }
          else if (t < 2 / 2.75) {
              return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
          }
          else if (t < 2.5 / 2.75) {
              return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
          }
          else {
              return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
          }
      },
      BounceEaseIn: function (t, b, c, d) {
          return c - exports.Easings.BounceEaseOut(d - t, 0, c, d) + b;
      },
      BounceEaseInOut: function (t, b, c, d) {
          if (t < d / 2) {
              return exports.Easings.BounceEaseIn(t * 2, 0, c, d) * 0.5 + b;
          }
          else {
              return exports.Easings.BounceEaseOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
          }
      },
      EaseIn: function (t, b, c, d) {
          return c * (t /= d) * t + b;
      },
      EaseOut: function (t, b, c, d) {
          return -c * (t /= d) * (t - 2) + b;
      },
      EaseInOut: function (t, b, c, d) {
          if ((t /= d / 2) < 1) {
              return (c / 2) * t * t + b;
          }
          return (-c / 2) * (--t * (t - 2) - 1) + b;
      },
      StrongEaseIn: function (t, b, c, d) {
          return c * (t /= d) * t * t * t * t + b;
      },
      StrongEaseOut: function (t, b, c, d) {
          return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
      },
      StrongEaseInOut: function (t, b, c, d) {
          if ((t /= d / 2) < 1) {
              return (c / 2) * t * t * t * t * t + b;
          }
          return (c / 2) * ((t -= 2) * t * t * t * t + 2) + b;
      },
      Linear: function (t, b, c, d) {
          return (c * t) / d + b;
      }
  };

  },{"./Animation":4,"./Global":12,"./Node":15,"./Util":20}],20:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Global_1 = _dereq_("./Global");
  var Collection = (function () {
      function Collection() {
      }
      Collection.toCollection = function (arr) {
          var collection = new Collection(), len = arr.length, n;
          for (n = 0; n < len; n++) {
              collection.push(arr[n]);
          }
          return collection;
      };
      Collection._mapMethod = function (methodName) {
          Collection.prototype[methodName] = function () {
              var len = this.length, i;
              var args = [].slice.call(arguments);
              for (i = 0; i < len; i++) {
                  this[i][methodName].apply(this[i], args);
              }
              return this;
          };
      };
      Collection.mapMethods = function (constructor) {
          var prot = constructor.prototype;
          for (var methodName in prot) {
              Collection._mapMethod(methodName);
          }
      };
      return Collection;
  }());
  exports.Collection = Collection;
  Collection.prototype = [];
  Collection.prototype.each = function (func) {
      for (var n = 0; n < this.length; n++) {
          func(this[n], n);
      }
  };
  Collection.prototype.toArray = function () {
      var arr = [], len = this.length, n;
      for (n = 0; n < len; n++) {
          arr.push(this[n]);
      }
      return arr;
  };
  var Transform = (function () {
      function Transform(m) {
          if (m === void 0) { m = [1, 0, 0, 1, 0, 0]; }
          this.m = (m && m.slice()) || [1, 0, 0, 1, 0, 0];
      }
      Transform.prototype.copy = function () {
          return new Transform(this.m);
      };
      Transform.prototype.point = function (point) {
          var m = this.m;
          return {
              x: m[0] * point.x + m[2] * point.y + m[4],
              y: m[1] * point.x + m[3] * point.y + m[5]
          };
      };
      Transform.prototype.translate = function (x, y) {
          this.m[4] += this.m[0] * x + this.m[2] * y;
          this.m[5] += this.m[1] * x + this.m[3] * y;
          return this;
      };
      Transform.prototype.scale = function (sx, sy) {
          this.m[0] *= sx;
          this.m[1] *= sx;
          this.m[2] *= sy;
          this.m[3] *= sy;
          return this;
      };
      Transform.prototype.rotate = function (rad) {
          var c = Math.cos(rad);
          var s = Math.sin(rad);
          var m11 = this.m[0] * c + this.m[2] * s;
          var m12 = this.m[1] * c + this.m[3] * s;
          var m21 = this.m[0] * -s + this.m[2] * c;
          var m22 = this.m[1] * -s + this.m[3] * c;
          this.m[0] = m11;
          this.m[1] = m12;
          this.m[2] = m21;
          this.m[3] = m22;
          return this;
      };
      Transform.prototype.getTranslation = function () {
          return {
              x: this.m[4],
              y: this.m[5]
          };
      };
      Transform.prototype.skew = function (sx, sy) {
          var m11 = this.m[0] + this.m[2] * sy;
          var m12 = this.m[1] + this.m[3] * sy;
          var m21 = this.m[2] + this.m[0] * sx;
          var m22 = this.m[3] + this.m[1] * sx;
          this.m[0] = m11;
          this.m[1] = m12;
          this.m[2] = m21;
          this.m[3] = m22;
          return this;
      };
      Transform.prototype.multiply = function (matrix) {
          var m11 = this.m[0] * matrix.m[0] + this.m[2] * matrix.m[1];
          var m12 = this.m[1] * matrix.m[0] + this.m[3] * matrix.m[1];
          var m21 = this.m[0] * matrix.m[2] + this.m[2] * matrix.m[3];
          var m22 = this.m[1] * matrix.m[2] + this.m[3] * matrix.m[3];
          var dx = this.m[0] * matrix.m[4] + this.m[2] * matrix.m[5] + this.m[4];
          var dy = this.m[1] * matrix.m[4] + this.m[3] * matrix.m[5] + this.m[5];
          this.m[0] = m11;
          this.m[1] = m12;
          this.m[2] = m21;
          this.m[3] = m22;
          this.m[4] = dx;
          this.m[5] = dy;
          return this;
      };
      Transform.prototype.invert = function () {
          var d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]);
          var m0 = this.m[3] * d;
          var m1 = -this.m[1] * d;
          var m2 = -this.m[2] * d;
          var m3 = this.m[0] * d;
          var m4 = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]);
          var m5 = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);
          this.m[0] = m0;
          this.m[1] = m1;
          this.m[2] = m2;
          this.m[3] = m3;
          this.m[4] = m4;
          this.m[5] = m5;
          return this;
      };
      Transform.prototype.getMatrix = function () {
          return this.m;
      };
      Transform.prototype.setAbsolutePosition = function (x, y) {
          var m0 = this.m[0], m1 = this.m[1], m2 = this.m[2], m3 = this.m[3], m4 = this.m[4], m5 = this.m[5], yt = (m0 * (y - m5) - m1 * (x - m4)) / (m0 * m3 - m1 * m2), xt = (x - m4 - m2 * yt) / m0;
          return this.translate(xt, yt);
      };
      return Transform;
  }());
  exports.Transform = Transform;
  var OBJECT_ARRAY = '[object Array]', OBJECT_NUMBER = '[object Number]', OBJECT_STRING = '[object String]', OBJECT_BOOLEAN = '[object Boolean]', PI_OVER_DEG180 = Math.PI / 180, DEG180_OVER_PI = 180 / Math.PI, HASH = '#', EMPTY_STRING = '', ZERO = '0', KONVA_WARNING = 'Konva warning: ', KONVA_ERROR = 'Konva error: ', RGB_PAREN = 'rgb(', COLORS = {
      aliceblue: [240, 248, 255],
      antiquewhite: [250, 235, 215],
      aqua: [0, 255, 255],
      aquamarine: [127, 255, 212],
      azure: [240, 255, 255],
      beige: [245, 245, 220],
      bisque: [255, 228, 196],
      black: [0, 0, 0],
      blanchedalmond: [255, 235, 205],
      blue: [0, 0, 255],
      blueviolet: [138, 43, 226],
      brown: [165, 42, 42],
      burlywood: [222, 184, 135],
      cadetblue: [95, 158, 160],
      chartreuse: [127, 255, 0],
      chocolate: [210, 105, 30],
      coral: [255, 127, 80],
      cornflowerblue: [100, 149, 237],
      cornsilk: [255, 248, 220],
      crimson: [220, 20, 60],
      cyan: [0, 255, 255],
      darkblue: [0, 0, 139],
      darkcyan: [0, 139, 139],
      darkgoldenrod: [184, 132, 11],
      darkgray: [169, 169, 169],
      darkgreen: [0, 100, 0],
      darkgrey: [169, 169, 169],
      darkkhaki: [189, 183, 107],
      darkmagenta: [139, 0, 139],
      darkolivegreen: [85, 107, 47],
      darkorange: [255, 140, 0],
      darkorchid: [153, 50, 204],
      darkred: [139, 0, 0],
      darksalmon: [233, 150, 122],
      darkseagreen: [143, 188, 143],
      darkslateblue: [72, 61, 139],
      darkslategray: [47, 79, 79],
      darkslategrey: [47, 79, 79],
      darkturquoise: [0, 206, 209],
      darkviolet: [148, 0, 211],
      deeppink: [255, 20, 147],
      deepskyblue: [0, 191, 255],
      dimgray: [105, 105, 105],
      dimgrey: [105, 105, 105],
      dodgerblue: [30, 144, 255],
      firebrick: [178, 34, 34],
      floralwhite: [255, 255, 240],
      forestgreen: [34, 139, 34],
      fuchsia: [255, 0, 255],
      gainsboro: [220, 220, 220],
      ghostwhite: [248, 248, 255],
      gold: [255, 215, 0],
      goldenrod: [218, 165, 32],
      gray: [128, 128, 128],
      green: [0, 128, 0],
      greenyellow: [173, 255, 47],
      grey: [128, 128, 128],
      honeydew: [240, 255, 240],
      hotpink: [255, 105, 180],
      indianred: [205, 92, 92],
      indigo: [75, 0, 130],
      ivory: [255, 255, 240],
      khaki: [240, 230, 140],
      lavender: [230, 230, 250],
      lavenderblush: [255, 240, 245],
      lawngreen: [124, 252, 0],
      lemonchiffon: [255, 250, 205],
      lightblue: [173, 216, 230],
      lightcoral: [240, 128, 128],
      lightcyan: [224, 255, 255],
      lightgoldenrodyellow: [250, 250, 210],
      lightgray: [211, 211, 211],
      lightgreen: [144, 238, 144],
      lightgrey: [211, 211, 211],
      lightpink: [255, 182, 193],
      lightsalmon: [255, 160, 122],
      lightseagreen: [32, 178, 170],
      lightskyblue: [135, 206, 250],
      lightslategray: [119, 136, 153],
      lightslategrey: [119, 136, 153],
      lightsteelblue: [176, 196, 222],
      lightyellow: [255, 255, 224],
      lime: [0, 255, 0],
      limegreen: [50, 205, 50],
      linen: [250, 240, 230],
      magenta: [255, 0, 255],
      maroon: [128, 0, 0],
      mediumaquamarine: [102, 205, 170],
      mediumblue: [0, 0, 205],
      mediumorchid: [186, 85, 211],
      mediumpurple: [147, 112, 219],
      mediumseagreen: [60, 179, 113],
      mediumslateblue: [123, 104, 238],
      mediumspringgreen: [0, 250, 154],
      mediumturquoise: [72, 209, 204],
      mediumvioletred: [199, 21, 133],
      midnightblue: [25, 25, 112],
      mintcream: [245, 255, 250],
      mistyrose: [255, 228, 225],
      moccasin: [255, 228, 181],
      navajowhite: [255, 222, 173],
      navy: [0, 0, 128],
      oldlace: [253, 245, 230],
      olive: [128, 128, 0],
      olivedrab: [107, 142, 35],
      orange: [255, 165, 0],
      orangered: [255, 69, 0],
      orchid: [218, 112, 214],
      palegoldenrod: [238, 232, 170],
      palegreen: [152, 251, 152],
      paleturquoise: [175, 238, 238],
      palevioletred: [219, 112, 147],
      papayawhip: [255, 239, 213],
      peachpuff: [255, 218, 185],
      peru: [205, 133, 63],
      pink: [255, 192, 203],
      plum: [221, 160, 203],
      powderblue: [176, 224, 230],
      purple: [128, 0, 128],
      rebeccapurple: [102, 51, 153],
      red: [255, 0, 0],
      rosybrown: [188, 143, 143],
      royalblue: [65, 105, 225],
      saddlebrown: [139, 69, 19],
      salmon: [250, 128, 114],
      sandybrown: [244, 164, 96],
      seagreen: [46, 139, 87],
      seashell: [255, 245, 238],
      sienna: [160, 82, 45],
      silver: [192, 192, 192],
      skyblue: [135, 206, 235],
      slateblue: [106, 90, 205],
      slategray: [119, 128, 144],
      slategrey: [119, 128, 144],
      snow: [255, 255, 250],
      springgreen: [0, 255, 127],
      steelblue: [70, 130, 180],
      tan: [210, 180, 140],
      teal: [0, 128, 128],
      thistle: [216, 191, 216],
      transparent: [255, 255, 255, 0],
      tomato: [255, 99, 71],
      turquoise: [64, 224, 208],
      violet: [238, 130, 238],
      wheat: [245, 222, 179],
      white: [255, 255, 255],
      whitesmoke: [245, 245, 245],
      yellow: [255, 255, 0],
      yellowgreen: [154, 205, 5]
  }, RGB_REGEX = /rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/, animQueue = [];
  exports.Util = {
      _isElement: function (obj) {
          return !!(obj && obj.nodeType == 1);
      },
      _isFunction: function (obj) {
          return !!(obj && obj.constructor && obj.call && obj.apply);
      },
      _isPlainObject: function (obj) {
          return !!obj && obj.constructor === Object;
      },
      _isArray: function (obj) {
          return Object.prototype.toString.call(obj) === OBJECT_ARRAY;
      },
      _isNumber: function (obj) {
          return (Object.prototype.toString.call(obj) === OBJECT_NUMBER &&
              !isNaN(obj) &&
              isFinite(obj));
      },
      _isString: function (obj) {
          return Object.prototype.toString.call(obj) === OBJECT_STRING;
      },
      _isBoolean: function (obj) {
          return Object.prototype.toString.call(obj) === OBJECT_BOOLEAN;
      },
      isObject: function (val) {
          return val instanceof Object;
      },
      isValidSelector: function (selector) {
          if (typeof selector !== 'string') {
              return false;
          }
          var firstChar = selector[0];
          return (firstChar === '#' ||
              firstChar === '.' ||
              firstChar === firstChar.toUpperCase());
      },
      _sign: function (number) {
          if (number === 0) {
              return 0;
          }
          if (number > 0) {
              return 1;
          }
          else {
              return -1;
          }
      },
      requestAnimFrame: function (callback) {
          animQueue.push(callback);
          if (animQueue.length === 1) {
              requestAnimationFrame(function () {
                  var queue = animQueue;
                  animQueue = [];
                  queue.forEach(function (cb) {
                      cb();
                  });
              });
          }
      },
      createCanvasElement: function () {
          var canvas = document.createElement('canvas');
          try {
              canvas.style = canvas.style || {};
          }
          catch (e) { }
          return canvas;
      },
      createImageElement: function () {
          return document.createElement('img');
      },
      _isInDocument: function (el) {
          while ((el = el.parentNode)) {
              if (el == document) {
                  return true;
              }
          }
          return false;
      },
      _simplifyArray: function (arr) {
          var retArr = [], len = arr.length, util = exports.Util, n, val;
          for (n = 0; n < len; n++) {
              val = arr[n];
              if (util._isNumber(val)) {
                  val = Math.round(val * 1000) / 1000;
              }
              else if (!util._isString(val)) {
                  val = val.toString();
              }
              retArr.push(val);
          }
          return retArr;
      },
      _urlToImage: function (url, callback) {
          var imageObj = new Global_1.glob.Image();
          imageObj.onload = function () {
              callback(imageObj);
          };
          imageObj.src = url;
      },
      _rgbToHex: function (r, g, b) {
          return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
      },
      _hexToRgb: function (hex) {
          hex = hex.replace(HASH, EMPTY_STRING);
          var bigint = parseInt(hex, 16);
          return {
              r: (bigint >> 16) & 255,
              g: (bigint >> 8) & 255,
              b: bigint & 255
          };
      },
      getRandomColor: function () {
          var randColor = ((Math.random() * 0xffffff) << 0).toString(16);
          while (randColor.length < 6) {
              randColor = ZERO + randColor;
          }
          return HASH + randColor;
      },
      get: function (val, def) {
          if (val === undefined) {
              return def;
          }
          else {
              return val;
          }
      },
      getRGB: function (color) {
          var rgb;
          if (color in COLORS) {
              rgb = COLORS[color];
              return {
                  r: rgb[0],
                  g: rgb[1],
                  b: rgb[2]
              };
          }
          else if (color[0] === HASH) {
              return this._hexToRgb(color.substring(1));
          }
          else if (color.substr(0, 4) === RGB_PAREN) {
              rgb = RGB_REGEX.exec(color.replace(/ /g, ''));
              return {
                  r: parseInt(rgb[1], 10),
                  g: parseInt(rgb[2], 10),
                  b: parseInt(rgb[3], 10)
              };
          }
          else {
              return {
                  r: 0,
                  g: 0,
                  b: 0
              };
          }
      },
      colorToRGBA: function (str) {
          str = str || 'black';
          return (exports.Util._namedColorToRBA(str) ||
              exports.Util._hex3ColorToRGBA(str) ||
              exports.Util._hex6ColorToRGBA(str) ||
              exports.Util._rgbColorToRGBA(str) ||
              exports.Util._rgbaColorToRGBA(str) ||
              exports.Util._hslColorToRGBA(str));
      },
      _namedColorToRBA: function (str) {
          var c = COLORS[str.toLowerCase()];
          if (!c) {
              return null;
          }
          return {
              r: c[0],
              g: c[1],
              b: c[2],
              a: 1
          };
      },
      _rgbColorToRGBA: function (str) {
          if (str.indexOf('rgb(') === 0) {
              str = str.match(/rgb\(([^)]+)\)/)[1];
              var parts = str.split(/ *, */).map(Number);
              return {
                  r: parts[0],
                  g: parts[1],
                  b: parts[2],
                  a: 1
              };
          }
      },
      _rgbaColorToRGBA: function (str) {
          if (str.indexOf('rgba(') === 0) {
              str = str.match(/rgba\(([^)]+)\)/)[1];
              var parts = str.split(/ *, */).map(Number);
              return {
                  r: parts[0],
                  g: parts[1],
                  b: parts[2],
                  a: parts[3]
              };
          }
      },
      _hex6ColorToRGBA: function (str) {
          if (str[0] === '#' && str.length === 7) {
              return {
                  r: parseInt(str.slice(1, 3), 16),
                  g: parseInt(str.slice(3, 5), 16),
                  b: parseInt(str.slice(5, 7), 16),
                  a: 1
              };
          }
      },
      _hex3ColorToRGBA: function (str) {
          if (str[0] === '#' && str.length === 4) {
              return {
                  r: parseInt(str[1] + str[1], 16),
                  g: parseInt(str[2] + str[2], 16),
                  b: parseInt(str[3] + str[3], 16),
                  a: 1
              };
          }
      },
      _hslColorToRGBA: function (str) {
          if (/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(str)) {
              var _a = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(str), _ = _a[0], hsl = _a.slice(1);
              var h = Number(hsl[0]) / 360;
              var s = Number(hsl[1]) / 100;
              var l = Number(hsl[2]) / 100;
              var t2 = void 0;
              var t3 = void 0;
              var val = void 0;
              if (s === 0) {
                  val = l * 255;
                  return {
                      r: Math.round(val),
                      g: Math.round(val),
                      b: Math.round(val),
                      a: 1
                  };
              }
              if (l < 0.5) {
                  t2 = l * (1 + s);
              }
              else {
                  t2 = l + s - l * s;
              }
              var t1 = 2 * l - t2;
              var rgb = [0, 0, 0];
              for (var i = 0; i < 3; i++) {
                  t3 = h + (1 / 3) * -(i - 1);
                  if (t3 < 0) {
                      t3++;
                  }
                  if (t3 > 1) {
                      t3--;
                  }
                  if (6 * t3 < 1) {
                      val = t1 + (t2 - t1) * 6 * t3;
                  }
                  else if (2 * t3 < 1) {
                      val = t2;
                  }
                  else if (3 * t3 < 2) {
                      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
                  }
                  else {
                      val = t1;
                  }
                  rgb[i] = val * 255;
              }
              return {
                  r: Math.round(rgb[0]),
                  g: Math.round(rgb[1]),
                  b: Math.round(rgb[2]),
                  a: 1
              };
          }
      },
      haveIntersection: function (r1, r2) {
          return !(r2.x > r1.x + r1.width ||
              r2.x + r2.width < r1.x ||
              r2.y > r1.y + r1.height ||
              r2.y + r2.height < r1.y);
      },
      cloneObject: function (obj) {
          var retObj = {};
          for (var key in obj) {
              if (this._isPlainObject(obj[key])) {
                  retObj[key] = this.cloneObject(obj[key]);
              }
              else if (this._isArray(obj[key])) {
                  retObj[key] = this.cloneArray(obj[key]);
              }
              else {
                  retObj[key] = obj[key];
              }
          }
          return retObj;
      },
      cloneArray: function (arr) {
          return arr.slice(0);
      },
      _degToRad: function (deg) {
          return deg * PI_OVER_DEG180;
      },
      _radToDeg: function (rad) {
          return rad * DEG180_OVER_PI;
      },
      _capitalize: function (str) {
          return str.charAt(0).toUpperCase() + str.slice(1);
      },
      throw: function (str) {
          throw new Error(KONVA_ERROR + str);
      },
      error: function (str) {
          console.error(KONVA_ERROR + str);
      },
      warn: function (str) {
          if (!Global_1.Konva.showWarnings) {
              return;
          }
          console.warn(KONVA_WARNING + str);
      },
      extend: function (child, parent) {
          function Ctor() {
              this.constructor = child;
          }
          Ctor.prototype = parent.prototype;
          var oldProto = child.prototype;
          child.prototype = new Ctor();
          for (var key in oldProto) {
              if (oldProto.hasOwnProperty(key)) {
                  child.prototype[key] = oldProto[key];
              }
          }
          child.__super__ = parent.prototype;
          child.super = parent;
      },
      _getControlPoints: function (x0, y0, x1, y1, x2, y2, t) {
          var d01 = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2)), d12 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)), fa = (t * d01) / (d01 + d12), fb = (t * d12) / (d01 + d12), p1x = x1 - fa * (x2 - x0), p1y = y1 - fa * (y2 - y0), p2x = x1 + fb * (x2 - x0), p2y = y1 + fb * (y2 - y0);
          return [p1x, p1y, p2x, p2y];
      },
      _expandPoints: function (p, tension) {
          var len = p.length, allPoints = [], n, cp;
          for (n = 2; n < len - 2; n += 2) {
              cp = exports.Util._getControlPoints(p[n - 2], p[n - 1], p[n], p[n + 1], p[n + 2], p[n + 3], tension);
              allPoints.push(cp[0]);
              allPoints.push(cp[1]);
              allPoints.push(p[n]);
              allPoints.push(p[n + 1]);
              allPoints.push(cp[2]);
              allPoints.push(cp[3]);
          }
          return allPoints;
      },
      each: function (obj, func) {
          for (var key in obj) {
              func(key, obj[key]);
          }
      },
      _inRange: function (val, left, right) {
          return left <= val && val < right;
      },
      _getProjectionToSegment: function (x1, y1, x2, y2, x3, y3) {
          var x, y, dist;
          var pd2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
          if (pd2 == 0) {
              x = x1;
              y = y1;
              dist = (x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2);
          }
          else {
              var u = ((x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1)) / pd2;
              if (u < 0) {
                  x = x1;
                  y = y1;
                  dist = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3);
              }
              else if (u > 1.0) {
                  x = x2;
                  y = y2;
                  dist = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3);
              }
              else {
                  x = x1 + u * (x2 - x1);
                  y = y1 + u * (y2 - y1);
                  dist = (x - x3) * (x - x3) + (y - y3) * (y - y3);
              }
          }
          return [x, y, dist];
      },
      _getProjectionToLine: function (pt, line, isClosed) {
          var pc = exports.Util.cloneObject(pt);
          var dist = Number.MAX_VALUE;
          line.forEach(function (p1, i) {
              if (!isClosed && i === line.length - 1) {
                  return;
              }
              var p2 = line[(i + 1) % line.length];
              var proj = exports.Util._getProjectionToSegment(p1.x, p1.y, p2.x, p2.y, pt.x, pt.y);
              var px = proj[0], py = proj[1], pdist = proj[2];
              if (pdist < dist) {
                  pc.x = px;
                  pc.y = py;
                  dist = pdist;
              }
          });
          return pc;
      },
      _prepareArrayForTween: function (startArray, endArray, isClosed) {
          var n, start = [], end = [];
          if (startArray.length > endArray.length) {
              var temp = endArray;
              endArray = startArray;
              startArray = temp;
          }
          for (n = 0; n < startArray.length; n += 2) {
              start.push({
                  x: startArray[n],
                  y: startArray[n + 1]
              });
          }
          for (n = 0; n < endArray.length; n += 2) {
              end.push({
                  x: endArray[n],
                  y: endArray[n + 1]
              });
          }
          var newStart = [];
          end.forEach(function (point) {
              var pr = exports.Util._getProjectionToLine(point, start, isClosed);
              newStart.push(pr.x);
              newStart.push(pr.y);
          });
          return newStart;
      },
      _prepareToStringify: function (obj) {
          var desc;
          obj.visitedByCircularReferenceRemoval = true;
          for (var key in obj) {
              if (!(obj.hasOwnProperty(key) && obj[key] && typeof obj[key] == 'object')) {
                  continue;
              }
              desc = Object.getOwnPropertyDescriptor(obj, key);
              if (obj[key].visitedByCircularReferenceRemoval ||
                  exports.Util._isElement(obj[key])) {
                  if (desc.configurable) {
                      delete obj[key];
                  }
                  else {
                      return null;
                  }
              }
              else if (exports.Util._prepareToStringify(obj[key]) === null) {
                  if (desc.configurable) {
                      delete obj[key];
                  }
                  else {
                      return null;
                  }
              }
          }
          delete obj.visitedByCircularReferenceRemoval;
          return obj;
      },
      _assign: function (target, source) {
          for (var key in source) {
              target[key] = source[key];
          }
          return target;
      },
      _getFirstPointerId: function (evt) {
          if (!evt.touches) {
              return 999;
          }
          else {
              return evt.changedTouches[0].identifier;
          }
      }
  };

  },{"./Global":12}],21:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Global_1 = _dereq_("./Global");
  var Util_1 = _dereq_("./Util");
  function _formatValue(val) {
      if (Util_1.Util._isString(val)) {
          return '"' + val + '"';
      }
      if (Object.prototype.toString.call(val) === '[object Number]') {
          return val;
      }
      if (Util_1.Util._isBoolean(val)) {
          return val;
      }
      return Object.prototype.toString.call(val);
  }
  function RGBComponent(val) {
      if (val > 255) {
          return 255;
      }
      else if (val < 0) {
          return 0;
      }
      return Math.round(val);
  }
  exports.RGBComponent = RGBComponent;
  function alphaComponent(val) {
      if (val > 1) {
          return 1;
      }
      else if (val < 0.0001) {
          return 0.0001;
      }
      return val;
  }
  exports.alphaComponent = alphaComponent;
  function getNumberValidator() {
      if (Global_1.Konva.isUnminified) {
          return function (val, attr) {
              if (!Util_1.Util._isNumber(val)) {
                  Util_1.Util.warn(_formatValue(val) +
                      ' is a not valid value for "' +
                      attr +
                      '" attribute. The value should be a number.');
              }
              return val;
          };
      }
  }
  exports.getNumberValidator = getNumberValidator;
  function getNumberOrAutoValidator() {
      if (Global_1.Konva.isUnminified) {
          return function (val, attr) {
              var isNumber = Util_1.Util._isNumber(val);
              var isAuto = val === 'auto';
              if (!(isNumber || isAuto)) {
                  Util_1.Util.warn(_formatValue(val) +
                      ' is a not valid value for "' +
                      attr +
                      '" attribute. The value should be a number or "auto".');
              }
              return val;
          };
      }
  }
  exports.getNumberOrAutoValidator = getNumberOrAutoValidator;
  function getStringValidator() {
      if (Global_1.Konva.isUnminified) {
          return function (val, attr) {
              if (!Util_1.Util._isString(val)) {
                  Util_1.Util.warn(_formatValue(val) +
                      ' is a not valid value for "' +
                      attr +
                      '" attribute. The value should be a string.');
              }
              return val;
          };
      }
  }
  exports.getStringValidator = getStringValidator;
  function getFunctionValidator() {
      if (Global_1.Konva.isUnminified) {
          return function (val, attr) {
              if (!Util_1.Util._isFunction(val)) {
                  Util_1.Util.warn(_formatValue(val) +
                      ' is a not valid value for "' +
                      attr +
                      '" attribute. The value should be a function.');
              }
              return val;
          };
      }
  }
  exports.getFunctionValidator = getFunctionValidator;
  function getNumberArrayValidator() {
      if (Global_1.Konva.isUnminified) {
          return function (val, attr) {
              if (!Util_1.Util._isArray(val)) {
                  Util_1.Util.warn(_formatValue(val) +
                      ' is a not valid value for "' +
                      attr +
                      '" attribute. The value should be a array of numbers.');
              }
              else {
                  val.forEach(function (item) {
                      if (!Util_1.Util._isNumber(item)) {
                          Util_1.Util.warn('"' +
                              attr +
                              '" attribute has non numeric element ' +
                              item +
                              '. Make sure that all elements are numbers.');
                      }
                  });
              }
              return val;
          };
      }
  }
  exports.getNumberArrayValidator = getNumberArrayValidator;
  function getBooleanValidator() {
      if (Global_1.Konva.isUnminified) {
          return function (val, attr) {
              var isBool = val === true || val === false;
              if (!isBool) {
                  Util_1.Util.warn(_formatValue(val) +
                      ' is a not valid value for "' +
                      attr +
                      '" attribute. The value should be a boolean.');
              }
              return val;
          };
      }
  }
  exports.getBooleanValidator = getBooleanValidator;
  function getComponentValidator(components) {
      if (Global_1.Konva.isUnminified) {
          return function (val, attr) {
              if (!Util_1.Util.isObject(val)) {
                  Util_1.Util.warn(_formatValue(val) +
                      ' is a not valid value for "' +
                      attr +
                      '" attribute. The value should be an object with properties ' +
                      components);
              }
              return val;
          };
      }
  }
  exports.getComponentValidator = getComponentValidator;

  },{"./Global":12,"./Util":20}],22:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Global_1 = _dereq_("./Global");
  var Util_1 = _dereq_("./Util");
  var Node_1 = _dereq_("./Node");
  var Container_1 = _dereq_("./Container");
  var Stage_1 = _dereq_("./Stage");
  var Layer_1 = _dereq_("./Layer");
  var FastLayer_1 = _dereq_("./FastLayer");
  var Group_1 = _dereq_("./Group");
  var DragAndDrop_1 = _dereq_("./DragAndDrop");
  var Shape_1 = _dereq_("./Shape");
  var Animation_1 = _dereq_("./Animation");
  var Tween_1 = _dereq_("./Tween");
  var Context_1 = _dereq_("./Context");
  var Canvas_1 = _dereq_("./Canvas");
  exports.Konva = Util_1.Util._assign(Global_1.Konva, {
      Collection: Util_1.Collection,
      Util: Util_1.Util,
      Node: Node_1.Node,
      ids: Node_1.ids,
      names: Node_1.names,
      Container: Container_1.Container,
      Stage: Stage_1.Stage,
      stages: Stage_1.stages,
      Layer: Layer_1.Layer,
      FastLayer: FastLayer_1.FastLayer,
      Group: Group_1.Group,
      DD: DragAndDrop_1.DD,
      Shape: Shape_1.Shape,
      shapes: Shape_1.shapes,
      Animation: Animation_1.Animation,
      Tween: Tween_1.Tween,
      Easings: Tween_1.Easings,
      Context: Context_1.Context,
      Canvas: Canvas_1.Canvas
  });

  },{"./Animation":4,"./Canvas":6,"./Container":7,"./Context":8,"./DragAndDrop":9,"./FastLayer":11,"./Global":12,"./Group":13,"./Layer":14,"./Node":15,"./Shape":17,"./Stage":18,"./Tween":19,"./Util":20}],23:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var _CoreInternals_1 = _dereq_("./_CoreInternals");
  var Arc_1 = _dereq_("./shapes/Arc");
  var Arrow_1 = _dereq_("./shapes/Arrow");
  var Circle_1 = _dereq_("./shapes/Circle");
  var Ellipse_1 = _dereq_("./shapes/Ellipse");
  var Image_1 = _dereq_("./shapes/Image");
  var Label_1 = _dereq_("./shapes/Label");
  var Line_1 = _dereq_("./shapes/Line");
  var Path_1 = _dereq_("./shapes/Path");
  var Rect_1 = _dereq_("./shapes/Rect");
  var RegularPolygon_1 = _dereq_("./shapes/RegularPolygon");
  var Ring_1 = _dereq_("./shapes/Ring");
  var Sprite_1 = _dereq_("./shapes/Sprite");
  var Star_1 = _dereq_("./shapes/Star");
  var Text_1 = _dereq_("./shapes/Text");
  var TextPath_1 = _dereq_("./shapes/TextPath");
  var Transformer_1 = _dereq_("./shapes/Transformer");
  var Wedge_1 = _dereq_("./shapes/Wedge");
  var Blur_1 = _dereq_("./filters/Blur");
  var Brighten_1 = _dereq_("./filters/Brighten");
  var Contrast_1 = _dereq_("./filters/Contrast");
  var Emboss_1 = _dereq_("./filters/Emboss");
  var Enhance_1 = _dereq_("./filters/Enhance");
  var Grayscale_1 = _dereq_("./filters/Grayscale");
  var HSL_1 = _dereq_("./filters/HSL");
  var HSV_1 = _dereq_("./filters/HSV");
  var Invert_1 = _dereq_("./filters/Invert");
  var Kaleidoscope_1 = _dereq_("./filters/Kaleidoscope");
  var Mask_1 = _dereq_("./filters/Mask");
  var Noise_1 = _dereq_("./filters/Noise");
  var Pixelate_1 = _dereq_("./filters/Pixelate");
  var Posterize_1 = _dereq_("./filters/Posterize");
  var RGB_1 = _dereq_("./filters/RGB");
  var RGBA_1 = _dereq_("./filters/RGBA");
  var Sepia_1 = _dereq_("./filters/Sepia");
  var Solarize_1 = _dereq_("./filters/Solarize");
  var Threshold_1 = _dereq_("./filters/Threshold");
  exports.Konva = _CoreInternals_1.Konva.Util._assign(_CoreInternals_1.Konva, {
      Arc: Arc_1.Arc,
      Arrow: Arrow_1.Arrow,
      Circle: Circle_1.Circle,
      Ellipse: Ellipse_1.Ellipse,
      Image: Image_1.Image,
      Label: Label_1.Label,
      Tag: Label_1.Tag,
      Line: Line_1.Line,
      Path: Path_1.Path,
      Rect: Rect_1.Rect,
      RegularPolygon: RegularPolygon_1.RegularPolygon,
      Ring: Ring_1.Ring,
      Sprite: Sprite_1.Sprite,
      Star: Star_1.Star,
      Text: Text_1.Text,
      TextPath: TextPath_1.TextPath,
      Transformer: Transformer_1.Transformer,
      Wedge: Wedge_1.Wedge,
      Filters: {
          Blur: Blur_1.Blur,
          Brighten: Brighten_1.Brighten,
          Contrast: Contrast_1.Contrast,
          Emboss: Emboss_1.Emboss,
          Enhance: Enhance_1.Enhance,
          Grayscale: Grayscale_1.Grayscale,
          HSL: HSL_1.HSL,
          HSV: HSV_1.HSV,
          Invert: Invert_1.Invert,
          Kaleidoscope: Kaleidoscope_1.Kaleidoscope,
          Mask: Mask_1.Mask,
          Noise: Noise_1.Noise,
          Pixelate: Pixelate_1.Pixelate,
          Posterize: Posterize_1.Posterize,
          RGB: RGB_1.RGB,
          RGBA: RGBA_1.RGBA,
          Sepia: Sepia_1.Sepia,
          Solarize: Solarize_1.Solarize,
          Threshold: Threshold_1.Threshold
      }
  });

  },{"./_CoreInternals":22,"./filters/Blur":24,"./filters/Brighten":25,"./filters/Contrast":26,"./filters/Emboss":27,"./filters/Enhance":28,"./filters/Grayscale":29,"./filters/HSL":30,"./filters/HSV":31,"./filters/Invert":32,"./filters/Kaleidoscope":33,"./filters/Mask":34,"./filters/Noise":35,"./filters/Pixelate":36,"./filters/Posterize":37,"./filters/RGB":38,"./filters/RGBA":39,"./filters/Sepia":40,"./filters/Solarize":41,"./filters/Threshold":42,"./shapes/Arc":44,"./shapes/Arrow":45,"./shapes/Circle":46,"./shapes/Ellipse":47,"./shapes/Image":48,"./shapes/Label":49,"./shapes/Line":50,"./shapes/Path":51,"./shapes/Rect":52,"./shapes/RegularPolygon":53,"./shapes/Ring":54,"./shapes/Sprite":55,"./shapes/Star":56,"./shapes/Text":57,"./shapes/TextPath":58,"./shapes/Transformer":59,"./shapes/Wedge":60}],24:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Validators_1 = _dereq_("../Validators");
  function BlurStack() {
      this.r = 0;
      this.g = 0;
      this.b = 0;
      this.a = 0;
      this.next = null;
  }
  var mul_table = [
      512,
      512,
      456,
      512,
      328,
      456,
      335,
      512,
      405,
      328,
      271,
      456,
      388,
      335,
      292,
      512,
      454,
      405,
      364,
      328,
      298,
      271,
      496,
      456,
      420,
      388,
      360,
      335,
      312,
      292,
      273,
      512,
      482,
      454,
      428,
      405,
      383,
      364,
      345,
      328,
      312,
      298,
      284,
      271,
      259,
      496,
      475,
      456,
      437,
      420,
      404,
      388,
      374,
      360,
      347,
      335,
      323,
      312,
      302,
      292,
      282,
      273,
      265,
      512,
      497,
      482,
      468,
      454,
      441,
      428,
      417,
      405,
      394,
      383,
      373,
      364,
      354,
      345,
      337,
      328,
      320,
      312,
      305,
      298,
      291,
      284,
      278,
      271,
      265,
      259,
      507,
      496,
      485,
      475,
      465,
      456,
      446,
      437,
      428,
      420,
      412,
      404,
      396,
      388,
      381,
      374,
      367,
      360,
      354,
      347,
      341,
      335,
      329,
      323,
      318,
      312,
      307,
      302,
      297,
      292,
      287,
      282,
      278,
      273,
      269,
      265,
      261,
      512,
      505,
      497,
      489,
      482,
      475,
      468,
      461,
      454,
      447,
      441,
      435,
      428,
      422,
      417,
      411,
      405,
      399,
      394,
      389,
      383,
      378,
      373,
      368,
      364,
      359,
      354,
      350,
      345,
      341,
      337,
      332,
      328,
      324,
      320,
      316,
      312,
      309,
      305,
      301,
      298,
      294,
      291,
      287,
      284,
      281,
      278,
      274,
      271,
      268,
      265,
      262,
      259,
      257,
      507,
      501,
      496,
      491,
      485,
      480,
      475,
      470,
      465,
      460,
      456,
      451,
      446,
      442,
      437,
      433,
      428,
      424,
      420,
      416,
      412,
      408,
      404,
      400,
      396,
      392,
      388,
      385,
      381,
      377,
      374,
      370,
      367,
      363,
      360,
      357,
      354,
      350,
      347,
      344,
      341,
      338,
      335,
      332,
      329,
      326,
      323,
      320,
      318,
      315,
      312,
      310,
      307,
      304,
      302,
      299,
      297,
      294,
      292,
      289,
      287,
      285,
      282,
      280,
      278,
      275,
      273,
      271,
      269,
      267,
      265,
      263,
      261,
      259
  ];
  var shg_table = [
      9,
      11,
      12,
      13,
      13,
      14,
      14,
      15,
      15,
      15,
      15,
      16,
      16,
      16,
      16,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      18,
      19,
      19,
      19,
      19,
      19,
      19,
      19,
      19,
      19,
      19,
      19,
      19,
      19,
      19,
      20,
      20,
      20,
      20,
      20,
      20,
      20,
      20,
      20,
      20,
      20,
      20,
      20,
      20,
      20,
      20,
      20,
      20,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      21,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24
  ];
  function filterGaussBlurRGBA(imageData, radius) {
      var pixels = imageData.data, width = imageData.width, height = imageData.height;
      var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;
      var div = radius + radius + 1, widthMinus1 = width - 1, heightMinus1 = height - 1, radiusPlus1 = radius + 1, sumFactor = (radiusPlus1 * (radiusPlus1 + 1)) / 2, stackStart = new BlurStack(), stackEnd = null, stack = stackStart, stackIn = null, stackOut = null, mul_sum = mul_table[radius], shg_sum = shg_table[radius];
      for (i = 1; i < div; i++) {
          stack = stack.next = new BlurStack();
          if (i === radiusPlus1) {
              stackEnd = stack;
          }
      }
      stack.next = stackStart;
      yw = yi = 0;
      for (y = 0; y < height; y++) {
          r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;
          r_out_sum = radiusPlus1 * (pr = pixels[yi]);
          g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
          b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
          a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
          r_sum += sumFactor * pr;
          g_sum += sumFactor * pg;
          b_sum += sumFactor * pb;
          a_sum += sumFactor * pa;
          stack = stackStart;
          for (i = 0; i < radiusPlus1; i++) {
              stack.r = pr;
              stack.g = pg;
              stack.b = pb;
              stack.a = pa;
              stack = stack.next;
          }
          for (i = 1; i < radiusPlus1; i++) {
              p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);
              r_sum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);
              g_sum += (stack.g = pg = pixels[p + 1]) * rbs;
              b_sum += (stack.b = pb = pixels[p + 2]) * rbs;
              a_sum += (stack.a = pa = pixels[p + 3]) * rbs;
              r_in_sum += pr;
              g_in_sum += pg;
              b_in_sum += pb;
              a_in_sum += pa;
              stack = stack.next;
          }
          stackIn = stackStart;
          stackOut = stackEnd;
          for (x = 0; x < width; x++) {
              pixels[yi + 3] = pa = (a_sum * mul_sum) >> shg_sum;
              if (pa !== 0) {
                  pa = 255 / pa;
                  pixels[yi] = ((r_sum * mul_sum) >> shg_sum) * pa;
                  pixels[yi + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;
                  pixels[yi + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;
              }
              else {
                  pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
              }
              r_sum -= r_out_sum;
              g_sum -= g_out_sum;
              b_sum -= b_out_sum;
              a_sum -= a_out_sum;
              r_out_sum -= stackIn.r;
              g_out_sum -= stackIn.g;
              b_out_sum -= stackIn.b;
              a_out_sum -= stackIn.a;
              p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;
              r_in_sum += stackIn.r = pixels[p];
              g_in_sum += stackIn.g = pixels[p + 1];
              b_in_sum += stackIn.b = pixels[p + 2];
              a_in_sum += stackIn.a = pixels[p + 3];
              r_sum += r_in_sum;
              g_sum += g_in_sum;
              b_sum += b_in_sum;
              a_sum += a_in_sum;
              stackIn = stackIn.next;
              r_out_sum += pr = stackOut.r;
              g_out_sum += pg = stackOut.g;
              b_out_sum += pb = stackOut.b;
              a_out_sum += pa = stackOut.a;
              r_in_sum -= pr;
              g_in_sum -= pg;
              b_in_sum -= pb;
              a_in_sum -= pa;
              stackOut = stackOut.next;
              yi += 4;
          }
          yw += width;
      }
      for (x = 0; x < width; x++) {
          g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;
          yi = x << 2;
          r_out_sum = radiusPlus1 * (pr = pixels[yi]);
          g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
          b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
          a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
          r_sum += sumFactor * pr;
          g_sum += sumFactor * pg;
          b_sum += sumFactor * pb;
          a_sum += sumFactor * pa;
          stack = stackStart;
          for (i = 0; i < radiusPlus1; i++) {
              stack.r = pr;
              stack.g = pg;
              stack.b = pb;
              stack.a = pa;
              stack = stack.next;
          }
          yp = width;
          for (i = 1; i <= radius; i++) {
              yi = (yp + x) << 2;
              r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);
              g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;
              b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;
              a_sum += (stack.a = pa = pixels[yi + 3]) * rbs;
              r_in_sum += pr;
              g_in_sum += pg;
              b_in_sum += pb;
              a_in_sum += pa;
              stack = stack.next;
              if (i < heightMinus1) {
                  yp += width;
              }
          }
          yi = x;
          stackIn = stackStart;
          stackOut = stackEnd;
          for (y = 0; y < height; y++) {
              p = yi << 2;
              pixels[p + 3] = pa = (a_sum * mul_sum) >> shg_sum;
              if (pa > 0) {
                  pa = 255 / pa;
                  pixels[p] = ((r_sum * mul_sum) >> shg_sum) * pa;
                  pixels[p + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;
                  pixels[p + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;
              }
              else {
                  pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;
              }
              r_sum -= r_out_sum;
              g_sum -= g_out_sum;
              b_sum -= b_out_sum;
              a_sum -= a_out_sum;
              r_out_sum -= stackIn.r;
              g_out_sum -= stackIn.g;
              b_out_sum -= stackIn.b;
              a_out_sum -= stackIn.a;
              p =
                  (x +
                      ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width) <<
                      2;
              r_sum += r_in_sum += stackIn.r = pixels[p];
              g_sum += g_in_sum += stackIn.g = pixels[p + 1];
              b_sum += b_in_sum += stackIn.b = pixels[p + 2];
              a_sum += a_in_sum += stackIn.a = pixels[p + 3];
              stackIn = stackIn.next;
              r_out_sum += pr = stackOut.r;
              g_out_sum += pg = stackOut.g;
              b_out_sum += pb = stackOut.b;
              a_out_sum += pa = stackOut.a;
              r_in_sum -= pr;
              g_in_sum -= pg;
              b_in_sum -= pb;
              a_in_sum -= pa;
              stackOut = stackOut.next;
              yi += width;
          }
      }
  }
  exports.Blur = function Blur(imageData) {
      var radius = Math.round(this.blurRadius());
      if (radius > 0) {
          filterGaussBlurRGBA(imageData, radius);
      }
  };
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'blurRadius', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

  },{"../Factory":10,"../Node":15,"../Validators":21}],25:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Validators_1 = _dereq_("../Validators");
  exports.Brighten = function (imageData) {
      var brightness = this.brightness() * 255, data = imageData.data, len = data.length, i;
      for (i = 0; i < len; i += 4) {
          data[i] += brightness;
          data[i + 1] += brightness;
          data[i + 2] += brightness;
      }
  };
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'brightness', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

  },{"../Factory":10,"../Node":15,"../Validators":21}],26:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Validators_1 = _dereq_("../Validators");
  exports.Contrast = function (imageData) {
      var adjust = Math.pow((this.contrast() + 100) / 100, 2);
      var data = imageData.data, nPixels = data.length, red = 150, green = 150, blue = 150, i;
      for (i = 0; i < nPixels; i += 4) {
          red = data[i];
          green = data[i + 1];
          blue = data[i + 2];
          red /= 255;
          red -= 0.5;
          red *= adjust;
          red += 0.5;
          red *= 255;
          green /= 255;
          green -= 0.5;
          green *= adjust;
          green += 0.5;
          green *= 255;
          blue /= 255;
          blue -= 0.5;
          blue *= adjust;
          blue += 0.5;
          blue *= 255;
          red = red < 0 ? 0 : red > 255 ? 255 : red;
          green = green < 0 ? 0 : green > 255 ? 255 : green;
          blue = blue < 0 ? 0 : blue > 255 ? 255 : blue;
          data[i] = red;
          data[i + 1] = green;
          data[i + 2] = blue;
      }
  };
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'contrast', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

  },{"../Factory":10,"../Node":15,"../Validators":21}],27:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Util_1 = _dereq_("../Util");
  var Validators_1 = _dereq_("../Validators");
  exports.Emboss = function (imageData) {
      var strength = this.embossStrength() * 10, greyLevel = this.embossWhiteLevel() * 255, direction = this.embossDirection(), blend = this.embossBlend(), dirY = 0, dirX = 0, data = imageData.data, w = imageData.width, h = imageData.height, w4 = w * 4, y = h;
      switch (direction) {
          case 'top-left':
              dirY = -1;
              dirX = -1;
              break;
          case 'top':
              dirY = -1;
              dirX = 0;
              break;
          case 'top-right':
              dirY = -1;
              dirX = 1;
              break;
          case 'right':
              dirY = 0;
              dirX = 1;
              break;
          case 'bottom-right':
              dirY = 1;
              dirX = 1;
              break;
          case 'bottom':
              dirY = 1;
              dirX = 0;
              break;
          case 'bottom-left':
              dirY = 1;
              dirX = -1;
              break;
          case 'left':
              dirY = 0;
              dirX = -1;
              break;
          default:
              Util_1.Util.error('Unknown emboss direction: ' + direction);
      }
      do {
          var offsetY = (y - 1) * w4;
          var otherY = dirY;
          if (y + otherY < 1) {
              otherY = 0;
          }
          if (y + otherY > h) {
              otherY = 0;
          }
          var offsetYOther = (y - 1 + otherY) * w * 4;
          var x = w;
          do {
              var offset = offsetY + (x - 1) * 4;
              var otherX = dirX;
              if (x + otherX < 1) {
                  otherX = 0;
              }
              if (x + otherX > w) {
                  otherX = 0;
              }
              var offsetOther = offsetYOther + (x - 1 + otherX) * 4;
              var dR = data[offset] - data[offsetOther];
              var dG = data[offset + 1] - data[offsetOther + 1];
              var dB = data[offset + 2] - data[offsetOther + 2];
              var dif = dR;
              var absDif = dif > 0 ? dif : -dif;
              var absG = dG > 0 ? dG : -dG;
              var absB = dB > 0 ? dB : -dB;
              if (absG > absDif) {
                  dif = dG;
              }
              if (absB > absDif) {
                  dif = dB;
              }
              dif *= strength;
              if (blend) {
                  var r = data[offset] + dif;
                  var g = data[offset + 1] + dif;
                  var b = data[offset + 2] + dif;
                  data[offset] = r > 255 ? 255 : r < 0 ? 0 : r;
                  data[offset + 1] = g > 255 ? 255 : g < 0 ? 0 : g;
                  data[offset + 2] = b > 255 ? 255 : b < 0 ? 0 : b;
              }
              else {
                  var grey = greyLevel - dif;
                  if (grey < 0) {
                      grey = 0;
                  }
                  else if (grey > 255) {
                      grey = 255;
                  }
                  data[offset] = data[offset + 1] = data[offset + 2] = grey;
              }
          } while (--x);
      } while (--y);
  };
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossStrength', 0.5, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossWhiteLevel', 0.5, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossDirection', 'top-left', null, Factory_1.Factory.afterSetFilter);
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossBlend', false, null, Factory_1.Factory.afterSetFilter);

  },{"../Factory":10,"../Node":15,"../Util":20,"../Validators":21}],28:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Validators_1 = _dereq_("../Validators");
  function remap(fromValue, fromMin, fromMax, toMin, toMax) {
      var fromRange = fromMax - fromMin, toRange = toMax - toMin, toValue;
      if (fromRange === 0) {
          return toMin + toRange / 2;
      }
      if (toRange === 0) {
          return toMin;
      }
      toValue = (fromValue - fromMin) / fromRange;
      toValue = toRange * toValue + toMin;
      return toValue;
  }
  exports.Enhance = function (imageData) {
      var data = imageData.data, nSubPixels = data.length, rMin = data[0], rMax = rMin, r, gMin = data[1], gMax = gMin, g, bMin = data[2], bMax = bMin, b, i;
      var enhanceAmount = this.enhance();
      if (enhanceAmount === 0) {
          return;
      }
      for (i = 0; i < nSubPixels; i += 4) {
          r = data[i + 0];
          if (r < rMin) {
              rMin = r;
          }
          else if (r > rMax) {
              rMax = r;
          }
          g = data[i + 1];
          if (g < gMin) {
              gMin = g;
          }
          else if (g > gMax) {
              gMax = g;
          }
          b = data[i + 2];
          if (b < bMin) {
              bMin = b;
          }
          else if (b > bMax) {
              bMax = b;
          }
      }
      if (rMax === rMin) {
          rMax = 255;
          rMin = 0;
      }
      if (gMax === gMin) {
          gMax = 255;
          gMin = 0;
      }
      if (bMax === bMin) {
          bMax = 255;
          bMin = 0;
      }
      var rMid, rGoalMax, rGoalMin, gMid, gGoalMax, gGoalMin, bMid, bGoalMax, bGoalMin;
      if (enhanceAmount > 0) {
          rGoalMax = rMax + enhanceAmount * (255 - rMax);
          rGoalMin = rMin - enhanceAmount * (rMin - 0);
          gGoalMax = gMax + enhanceAmount * (255 - gMax);
          gGoalMin = gMin - enhanceAmount * (gMin - 0);
          bGoalMax = bMax + enhanceAmount * (255 - bMax);
          bGoalMin = bMin - enhanceAmount * (bMin - 0);
      }
      else {
          rMid = (rMax + rMin) * 0.5;
          rGoalMax = rMax + enhanceAmount * (rMax - rMid);
          rGoalMin = rMin + enhanceAmount * (rMin - rMid);
          gMid = (gMax + gMin) * 0.5;
          gGoalMax = gMax + enhanceAmount * (gMax - gMid);
          gGoalMin = gMin + enhanceAmount * (gMin - gMid);
          bMid = (bMax + bMin) * 0.5;
          bGoalMax = bMax + enhanceAmount * (bMax - bMid);
          bGoalMin = bMin + enhanceAmount * (bMin - bMid);
      }
      for (i = 0; i < nSubPixels; i += 4) {
          data[i + 0] = remap(data[i + 0], rMin, rMax, rGoalMin, rGoalMax);
          data[i + 1] = remap(data[i + 1], gMin, gMax, gGoalMin, gGoalMax);
          data[i + 2] = remap(data[i + 2], bMin, bMax, bGoalMin, bGoalMax);
      }
  };
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'enhance', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

  },{"../Factory":10,"../Node":15,"../Validators":21}],29:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Grayscale = function (imageData) {
      var data = imageData.data, len = data.length, i, brightness;
      for (i = 0; i < len; i += 4) {
          brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
          data[i] = brightness;
          data[i + 1] = brightness;
          data[i + 2] = brightness;
      }
  };

  },{}],30:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Validators_1 = _dereq_("../Validators");
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'hue', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'saturation', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'luminance', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
  exports.HSL = function (imageData) {
      var data = imageData.data, nPixels = data.length, v = 1, s = Math.pow(2, this.saturation()), h = Math.abs(this.hue() + 360) % 360, l = this.luminance() * 127, i;
      var vsu = v * s * Math.cos((h * Math.PI) / 180), vsw = v * s * Math.sin((h * Math.PI) / 180);
      var rr = 0.299 * v + 0.701 * vsu + 0.167 * vsw, rg = 0.587 * v - 0.587 * vsu + 0.33 * vsw, rb = 0.114 * v - 0.114 * vsu - 0.497 * vsw;
      var gr = 0.299 * v - 0.299 * vsu - 0.328 * vsw, gg = 0.587 * v + 0.413 * vsu + 0.035 * vsw, gb = 0.114 * v - 0.114 * vsu + 0.293 * vsw;
      var br = 0.299 * v - 0.3 * vsu + 1.25 * vsw, bg = 0.587 * v - 0.586 * vsu - 1.05 * vsw, bb = 0.114 * v + 0.886 * vsu - 0.2 * vsw;
      var r, g, b, a;
      for (i = 0; i < nPixels; i += 4) {
          r = data[i + 0];
          g = data[i + 1];
          b = data[i + 2];
          a = data[i + 3];
          data[i + 0] = rr * r + rg * g + rb * b + l;
          data[i + 1] = gr * r + gg * g + gb * b + l;
          data[i + 2] = br * r + bg * g + bb * b + l;
          data[i + 3] = a;
      }
  };

  },{"../Factory":10,"../Node":15,"../Validators":21}],31:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Validators_1 = _dereq_("../Validators");
  exports.HSV = function (imageData) {
      var data = imageData.data, nPixels = data.length, v = Math.pow(2, this.value()), s = Math.pow(2, this.saturation()), h = Math.abs(this.hue() + 360) % 360, i;
      var vsu = v * s * Math.cos((h * Math.PI) / 180), vsw = v * s * Math.sin((h * Math.PI) / 180);
      var rr = 0.299 * v + 0.701 * vsu + 0.167 * vsw, rg = 0.587 * v - 0.587 * vsu + 0.33 * vsw, rb = 0.114 * v - 0.114 * vsu - 0.497 * vsw;
      var gr = 0.299 * v - 0.299 * vsu - 0.328 * vsw, gg = 0.587 * v + 0.413 * vsu + 0.035 * vsw, gb = 0.114 * v - 0.114 * vsu + 0.293 * vsw;
      var br = 0.299 * v - 0.3 * vsu + 1.25 * vsw, bg = 0.587 * v - 0.586 * vsu - 1.05 * vsw, bb = 0.114 * v + 0.886 * vsu - 0.2 * vsw;
      var r, g, b, a;
      for (i = 0; i < nPixels; i += 4) {
          r = data[i + 0];
          g = data[i + 1];
          b = data[i + 2];
          a = data[i + 3];
          data[i + 0] = rr * r + rg * g + rb * b;
          data[i + 1] = gr * r + gg * g + gb * b;
          data[i + 2] = br * r + bg * g + bb * b;
          data[i + 3] = a;
      }
  };
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'hue', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'saturation', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'value', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

  },{"../Factory":10,"../Node":15,"../Validators":21}],32:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Invert = function (imageData) {
      var data = imageData.data, len = data.length, i;
      for (i = 0; i < len; i += 4) {
          data[i] = 255 - data[i];
          data[i + 1] = 255 - data[i + 1];
          data[i + 2] = 255 - data[i + 2];
      }
  };

  },{}],33:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Util_1 = _dereq_("../Util");
  var Validators_1 = _dereq_("../Validators");
  var ToPolar = function (src, dst, opt) {
      var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, r = 0, g = 0, b = 0, a = 0;
      var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);
      x = xSize - xMid;
      y = ySize - yMid;
      rad = Math.sqrt(x * x + y * y);
      rMax = rad > rMax ? rad : rMax;
      var rSize = ySize, tSize = xSize, radius, theta;
      var conversion = ((360 / tSize) * Math.PI) / 180, sin, cos;
      for (theta = 0; theta < tSize; theta += 1) {
          sin = Math.sin(theta * conversion);
          cos = Math.cos(theta * conversion);
          for (radius = 0; radius < rSize; radius += 1) {
              x = Math.floor(xMid + ((rMax * radius) / rSize) * cos);
              y = Math.floor(yMid + ((rMax * radius) / rSize) * sin);
              i = (y * xSize + x) * 4;
              r = srcPixels[i + 0];
              g = srcPixels[i + 1];
              b = srcPixels[i + 2];
              a = srcPixels[i + 3];
              i = (theta + radius * xSize) * 4;
              dstPixels[i + 0] = r;
              dstPixels[i + 1] = g;
              dstPixels[i + 2] = b;
              dstPixels[i + 3] = a;
          }
      }
  };
  var FromPolar = function (src, dst, opt) {
      var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, dx, dy, r = 0, g = 0, b = 0, a = 0;
      var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);
      x = xSize - xMid;
      y = ySize - yMid;
      rad = Math.sqrt(x * x + y * y);
      rMax = rad > rMax ? rad : rMax;
      var rSize = ySize, tSize = xSize, radius, theta, phaseShift = opt.polarRotation || 0;
      var x1, y1;
      for (x = 0; x < xSize; x += 1) {
          for (y = 0; y < ySize; y += 1) {
              dx = x - xMid;
              dy = y - yMid;
              radius = (Math.sqrt(dx * dx + dy * dy) * rSize) / rMax;
              theta = ((Math.atan2(dy, dx) * 180) / Math.PI + 360 + phaseShift) % 360;
              theta = (theta * tSize) / 360;
              x1 = Math.floor(theta);
              y1 = Math.floor(radius);
              i = (y1 * xSize + x1) * 4;
              r = srcPixels[i + 0];
              g = srcPixels[i + 1];
              b = srcPixels[i + 2];
              a = srcPixels[i + 3];
              i = (y * xSize + x) * 4;
              dstPixels[i + 0] = r;
              dstPixels[i + 1] = g;
              dstPixels[i + 2] = b;
              dstPixels[i + 3] = a;
          }
      }
  };
  exports.Kaleidoscope = function (imageData) {
      var xSize = imageData.width, ySize = imageData.height;
      var x, y, xoff, i, r, g, b, a, srcPos, dstPos;
      var power = Math.round(this.kaleidoscopePower());
      var angle = Math.round(this.kaleidoscopeAngle());
      var offset = Math.floor((xSize * (angle % 360)) / 360);
      if (power < 1) {
          return;
      }
      var tempCanvas = Util_1.Util.createCanvasElement();
      tempCanvas.width = xSize;
      tempCanvas.height = ySize;
      var scratchData = tempCanvas
          .getContext('2d')
          .getImageData(0, 0, xSize, ySize);
      ToPolar(imageData, scratchData, {
          polarCenterX: xSize / 2,
          polarCenterY: ySize / 2
      });
      var minSectionSize = xSize / Math.pow(2, power);
      while (minSectionSize <= 8) {
          minSectionSize = minSectionSize * 2;
          power -= 1;
      }
      minSectionSize = Math.ceil(minSectionSize);
      var sectionSize = minSectionSize;
      var xStart = 0, xEnd = sectionSize, xDelta = 1;
      if (offset + minSectionSize > xSize) {
          xStart = sectionSize;
          xEnd = 0;
          xDelta = -1;
      }
      for (y = 0; y < ySize; y += 1) {
          for (x = xStart; x !== xEnd; x += xDelta) {
              xoff = Math.round(x + offset) % xSize;
              srcPos = (xSize * y + xoff) * 4;
              r = scratchData.data[srcPos + 0];
              g = scratchData.data[srcPos + 1];
              b = scratchData.data[srcPos + 2];
              a = scratchData.data[srcPos + 3];
              dstPos = (xSize * y + x) * 4;
              scratchData.data[dstPos + 0] = r;
              scratchData.data[dstPos + 1] = g;
              scratchData.data[dstPos + 2] = b;
              scratchData.data[dstPos + 3] = a;
          }
      }
      for (y = 0; y < ySize; y += 1) {
          sectionSize = Math.floor(minSectionSize);
          for (i = 0; i < power; i += 1) {
              for (x = 0; x < sectionSize + 1; x += 1) {
                  srcPos = (xSize * y + x) * 4;
                  r = scratchData.data[srcPos + 0];
                  g = scratchData.data[srcPos + 1];
                  b = scratchData.data[srcPos + 2];
                  a = scratchData.data[srcPos + 3];
                  dstPos = (xSize * y + sectionSize * 2 - x - 1) * 4;
                  scratchData.data[dstPos + 0] = r;
                  scratchData.data[dstPos + 1] = g;
                  scratchData.data[dstPos + 2] = b;
                  scratchData.data[dstPos + 3] = a;
              }
              sectionSize *= 2;
          }
      }
      FromPolar(scratchData, imageData, { polarRotation: 0 });
  };
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopePower', 2, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopeAngle', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

  },{"../Factory":10,"../Node":15,"../Util":20,"../Validators":21}],34:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Validators_1 = _dereq_("../Validators");
  function pixelAt(idata, x, y) {
      var idx = (y * idata.width + x) * 4;
      var d = [];
      d.push(idata.data[idx++], idata.data[idx++], idata.data[idx++], idata.data[idx++]);
      return d;
  }
  function rgbDistance(p1, p2) {
      return Math.sqrt(Math.pow(p1[0] - p2[0], 2) +
          Math.pow(p1[1] - p2[1], 2) +
          Math.pow(p1[2] - p2[2], 2));
  }
  function rgbMean(pTab) {
      var m = [0, 0, 0];
      for (var i = 0; i < pTab.length; i++) {
          m[0] += pTab[i][0];
          m[1] += pTab[i][1];
          m[2] += pTab[i][2];
      }
      m[0] /= pTab.length;
      m[1] /= pTab.length;
      m[2] /= pTab.length;
      return m;
  }
  function backgroundMask(idata, threshold) {
      var rgbv_no = pixelAt(idata, 0, 0);
      var rgbv_ne = pixelAt(idata, idata.width - 1, 0);
      var rgbv_so = pixelAt(idata, 0, idata.height - 1);
      var rgbv_se = pixelAt(idata, idata.width - 1, idata.height - 1);
      var thres = threshold || 10;
      if (rgbDistance(rgbv_no, rgbv_ne) < thres &&
          rgbDistance(rgbv_ne, rgbv_se) < thres &&
          rgbDistance(rgbv_se, rgbv_so) < thres &&
          rgbDistance(rgbv_so, rgbv_no) < thres) {
          var mean = rgbMean([rgbv_ne, rgbv_no, rgbv_se, rgbv_so]);
          var mask = [];
          for (var i = 0; i < idata.width * idata.height; i++) {
              var d = rgbDistance(mean, [
                  idata.data[i * 4],
                  idata.data[i * 4 + 1],
                  idata.data[i * 4 + 2]
              ]);
              mask[i] = d < thres ? 0 : 255;
          }
          return mask;
      }
  }
  function applyMask(idata, mask) {
      for (var i = 0; i < idata.width * idata.height; i++) {
          idata.data[4 * i + 3] = mask[i];
      }
  }
  function erodeMask(mask, sw, sh) {
      var weights = [1, 1, 1, 1, 0, 1, 1, 1, 1];
      var side = Math.round(Math.sqrt(weights.length));
      var halfSide = Math.floor(side / 2);
      var maskResult = [];
      for (var y = 0; y < sh; y++) {
          for (var x = 0; x < sw; x++) {
              var so = y * sw + x;
              var a = 0;
              for (var cy = 0; cy < side; cy++) {
                  for (var cx = 0; cx < side; cx++) {
                      var scy = y + cy - halfSide;
                      var scx = x + cx - halfSide;
                      if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
                          var srcOff = scy * sw + scx;
                          var wt = weights[cy * side + cx];
                          a += mask[srcOff] * wt;
                      }
                  }
              }
              maskResult[so] = a === 255 * 8 ? 255 : 0;
          }
      }
      return maskResult;
  }
  function dilateMask(mask, sw, sh) {
      var weights = [1, 1, 1, 1, 1, 1, 1, 1, 1];
      var side = Math.round(Math.sqrt(weights.length));
      var halfSide = Math.floor(side / 2);
      var maskResult = [];
      for (var y = 0; y < sh; y++) {
          for (var x = 0; x < sw; x++) {
              var so = y * sw + x;
              var a = 0;
              for (var cy = 0; cy < side; cy++) {
                  for (var cx = 0; cx < side; cx++) {
                      var scy = y + cy - halfSide;
                      var scx = x + cx - halfSide;
                      if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
                          var srcOff = scy * sw + scx;
                          var wt = weights[cy * side + cx];
                          a += mask[srcOff] * wt;
                      }
                  }
              }
              maskResult[so] = a >= 255 * 4 ? 255 : 0;
          }
      }
      return maskResult;
  }
  function smoothEdgeMask(mask, sw, sh) {
      var weights = [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9];
      var side = Math.round(Math.sqrt(weights.length));
      var halfSide = Math.floor(side / 2);
      var maskResult = [];
      for (var y = 0; y < sh; y++) {
          for (var x = 0; x < sw; x++) {
              var so = y * sw + x;
              var a = 0;
              for (var cy = 0; cy < side; cy++) {
                  for (var cx = 0; cx < side; cx++) {
                      var scy = y + cy - halfSide;
                      var scx = x + cx - halfSide;
                      if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
                          var srcOff = scy * sw + scx;
                          var wt = weights[cy * side + cx];
                          a += mask[srcOff] * wt;
                      }
                  }
              }
              maskResult[so] = a;
          }
      }
      return maskResult;
  }
  exports.Mask = function (imageData) {
      var threshold = this.threshold(), mask = backgroundMask(imageData, threshold);
      if (mask) {
          mask = erodeMask(mask, imageData.width, imageData.height);
          mask = dilateMask(mask, imageData.width, imageData.height);
          mask = smoothEdgeMask(mask, imageData.width, imageData.height);
          applyMask(imageData, mask);
      }
      return imageData;
  };
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'threshold', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

  },{"../Factory":10,"../Node":15,"../Validators":21}],35:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Validators_1 = _dereq_("../Validators");
  exports.Noise = function (imageData) {
      var amount = this.noise() * 255, data = imageData.data, nPixels = data.length, half = amount / 2, i;
      for (i = 0; i < nPixels; i += 4) {
          data[i + 0] += half - 2 * half * Math.random();
          data[i + 1] += half - 2 * half * Math.random();
          data[i + 2] += half - 2 * half * Math.random();
      }
  };
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'noise', 0.2, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

  },{"../Factory":10,"../Node":15,"../Validators":21}],36:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Util_1 = _dereq_("../Util");
  var Node_1 = _dereq_("../Node");
  var Validators_1 = _dereq_("../Validators");
  exports.Pixelate = function (imageData) {
      var pixelSize = Math.ceil(this.pixelSize()), width = imageData.width, height = imageData.height, x, y, i, red, green, blue, alpha, nBinsX = Math.ceil(width / pixelSize), nBinsY = Math.ceil(height / pixelSize), xBinStart, xBinEnd, yBinStart, yBinEnd, xBin, yBin, pixelsInBin, data = imageData.data;
      if (pixelSize <= 0) {
          Util_1.Util.error('pixelSize value can not be <= 0');
          return;
      }
      for (xBin = 0; xBin < nBinsX; xBin += 1) {
          for (yBin = 0; yBin < nBinsY; yBin += 1) {
              red = 0;
              green = 0;
              blue = 0;
              alpha = 0;
              xBinStart = xBin * pixelSize;
              xBinEnd = xBinStart + pixelSize;
              yBinStart = yBin * pixelSize;
              yBinEnd = yBinStart + pixelSize;
              pixelsInBin = 0;
              for (x = xBinStart; x < xBinEnd; x += 1) {
                  if (x >= width) {
                      continue;
                  }
                  for (y = yBinStart; y < yBinEnd; y += 1) {
                      if (y >= height) {
                          continue;
                      }
                      i = (width * y + x) * 4;
                      red += data[i + 0];
                      green += data[i + 1];
                      blue += data[i + 2];
                      alpha += data[i + 3];
                      pixelsInBin += 1;
                  }
              }
              red = red / pixelsInBin;
              green = green / pixelsInBin;
              blue = blue / pixelsInBin;
              alpha = alpha / pixelsInBin;
              for (x = xBinStart; x < xBinEnd; x += 1) {
                  if (x >= width) {
                      continue;
                  }
                  for (y = yBinStart; y < yBinEnd; y += 1) {
                      if (y >= height) {
                          continue;
                      }
                      i = (width * y + x) * 4;
                      data[i + 0] = red;
                      data[i + 1] = green;
                      data[i + 2] = blue;
                      data[i + 3] = alpha;
                  }
              }
          }
      }
  };
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'pixelSize', 8, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

  },{"../Factory":10,"../Node":15,"../Util":20,"../Validators":21}],37:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Validators_1 = _dereq_("../Validators");
  exports.Posterize = function (imageData) {
      var levels = Math.round(this.levels() * 254) + 1, data = imageData.data, len = data.length, scale = 255 / levels, i;
      for (i = 0; i < len; i += 1) {
          data[i] = Math.floor(data[i] / scale) * scale;
      }
  };
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'levels', 0.5, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

  },{"../Factory":10,"../Node":15,"../Validators":21}],38:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Validators_1 = _dereq_("../Validators");
  exports.RGB = function (imageData) {
      var data = imageData.data, nPixels = data.length, red = this.red(), green = this.green(), blue = this.blue(), i, brightness;
      for (i = 0; i < nPixels; i += 4) {
          brightness =
              (0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2]) / 255;
          data[i] = brightness * red;
          data[i + 1] = brightness * green;
          data[i + 2] = brightness * blue;
          data[i + 3] = data[i + 3];
      }
  };
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'red', 0, function (val) {
      this._filterUpToDate = false;
      if (val > 255) {
          return 255;
      }
      else if (val < 0) {
          return 0;
      }
      else {
          return Math.round(val);
      }
  });
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'green', 0, function (val) {
      this._filterUpToDate = false;
      if (val > 255) {
          return 255;
      }
      else if (val < 0) {
          return 0;
      }
      else {
          return Math.round(val);
      }
  });
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'blue', 0, Validators_1.RGBComponent, Factory_1.Factory.afterSetFilter);

  },{"../Factory":10,"../Node":15,"../Validators":21}],39:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Validators_1 = _dereq_("../Validators");
  exports.RGBA = function (imageData) {
      var data = imageData.data, nPixels = data.length, red = this.red(), green = this.green(), blue = this.blue(), alpha = this.alpha(), i, ia;
      for (i = 0; i < nPixels; i += 4) {
          ia = 1 - alpha;
          data[i] = red * alpha + data[i] * ia;
          data[i + 1] = green * alpha + data[i + 1] * ia;
          data[i + 2] = blue * alpha + data[i + 2] * ia;
      }
  };
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'red', 0, function (val) {
      this._filterUpToDate = false;
      if (val > 255) {
          return 255;
      }
      else if (val < 0) {
          return 0;
      }
      else {
          return Math.round(val);
      }
  });
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'green', 0, function (val) {
      this._filterUpToDate = false;
      if (val > 255) {
          return 255;
      }
      else if (val < 0) {
          return 0;
      }
      else {
          return Math.round(val);
      }
  });
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'blue', 0, Validators_1.RGBComponent, Factory_1.Factory.afterSetFilter);
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'alpha', 1, function (val) {
      this._filterUpToDate = false;
      if (val > 1) {
          return 1;
      }
      else if (val < 0) {
          return 0;
      }
      else {
          return val;
      }
  });

  },{"../Factory":10,"../Node":15,"../Validators":21}],40:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Sepia = function (imageData) {
      var data = imageData.data, nPixels = data.length, i, r, g, b;
      for (i = 0; i < nPixels; i += 4) {
          r = data[i + 0];
          g = data[i + 1];
          b = data[i + 2];
          data[i + 0] = Math.min(255, r * 0.393 + g * 0.769 + b * 0.189);
          data[i + 1] = Math.min(255, r * 0.349 + g * 0.686 + b * 0.168);
          data[i + 2] = Math.min(255, r * 0.272 + g * 0.534 + b * 0.131);
      }
  };

  },{}],41:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Solarize = function (imageData) {
      var data = imageData.data, w = imageData.width, h = imageData.height, w4 = w * 4, y = h;
      do {
          var offsetY = (y - 1) * w4;
          var x = w;
          do {
              var offset = offsetY + (x - 1) * 4;
              var r = data[offset];
              var g = data[offset + 1];
              var b = data[offset + 2];
              if (r > 127) {
                  r = 255 - r;
              }
              if (g > 127) {
                  g = 255 - g;
              }
              if (b > 127) {
                  b = 255 - b;
              }
              data[offset] = r;
              data[offset + 1] = g;
              data[offset + 2] = b;
          } while (--x);
      } while (--y);
  };

  },{}],42:[function(_dereq_,module,exports){
  Object.defineProperty(exports, "__esModule", { value: true });
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Validators_1 = _dereq_("../Validators");
  exports.Threshold = function (imageData) {
      var level = this.threshold() * 255, data = imageData.data, len = data.length, i;
      for (i = 0; i < len; i += 1) {
          data[i] = data[i] < level ? 0 : 255;
      }
  };
  Factory_1.Factory.addGetterSetter(Node_1.Node, 'threshold', 0.5, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);

  },{"../Factory":10,"../Node":15,"../Validators":21}],43:[function(_dereq_,module,exports){
  var Konva = _dereq_('./_FullInternals').Konva;
  Konva._injectGlobal(Konva);
  exports['default'] = Konva;
  module.exports = exports['default'];

  },{"./_FullInternals":23}],44:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Global_1 = _dereq_("../Global");
  var Validators_1 = _dereq_("../Validators");
  var Global_2 = _dereq_("../Global");
  var Arc = (function (_super) {
      __extends(Arc, _super);
      function Arc() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      Arc.prototype._sceneFunc = function (context) {
          var angle = Global_1.Konva.getAngle(this.angle()), clockwise = this.clockwise();
          context.beginPath();
          context.arc(0, 0, this.outerRadius(), 0, angle, clockwise);
          context.arc(0, 0, this.innerRadius(), angle, 0, !clockwise);
          context.closePath();
          context.fillStrokeShape(this);
      };
      Arc.prototype.getWidth = function () {
          return this.outerRadius() * 2;
      };
      Arc.prototype.getHeight = function () {
          return this.outerRadius() * 2;
      };
      Arc.prototype.setWidth = function (width) {
          this.outerRadius(width / 2);
      };
      Arc.prototype.setHeight = function (height) {
          this.outerRadius(height / 2);
      };
      return Arc;
  }(Shape_1.Shape));
  exports.Arc = Arc;
  Arc.prototype._centroid = true;
  Arc.prototype.className = 'Arc';
  Arc.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];
  Global_2._registerNode(Arc);
  Factory_1.Factory.addGetterSetter(Arc, 'innerRadius', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Arc, 'outerRadius', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Arc, 'angle', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Arc, 'clockwise', false, Validators_1.getBooleanValidator());
  Util_1.Collection.mapMethods(Arc);

  },{"../Factory":10,"../Global":12,"../Shape":17,"../Util":20,"../Validators":21}],45:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Line_1 = _dereq_("./Line");
  var Validators_1 = _dereq_("../Validators");
  var Global_1 = _dereq_("../Global");
  var Arrow = (function (_super) {
      __extends(Arrow, _super);
      function Arrow() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      Arrow.prototype._sceneFunc = function (ctx) {
          _super.prototype._sceneFunc.call(this, ctx);
          var PI2 = Math.PI * 2;
          var points = this.points();
          var tp = points;
          var fromTension = this.tension() !== 0 && points.length > 4;
          if (fromTension) {
              tp = this.getTensionPoints();
          }
          var n = points.length;
          var dx, dy;
          if (fromTension) {
              dx = points[n - 2] - (tp[tp.length - 2] + tp[tp.length - 4]) / 2;
              dy = points[n - 1] - (tp[tp.length - 1] + tp[tp.length - 3]) / 2;
          }
          else {
              dx = points[n - 2] - points[n - 4];
              dy = points[n - 1] - points[n - 3];
          }
          var radians = (Math.atan2(dy, dx) + PI2) % PI2;
          var length = this.pointerLength();
          var width = this.pointerWidth();
          ctx.save();
          ctx.beginPath();
          ctx.translate(points[n - 2], points[n - 1]);
          ctx.rotate(radians);
          ctx.moveTo(0, 0);
          ctx.lineTo(-length, width / 2);
          ctx.lineTo(-length, -width / 2);
          ctx.closePath();
          ctx.restore();
          if (this.pointerAtBeginning()) {
              ctx.save();
              ctx.translate(points[0], points[1]);
              if (fromTension) {
                  dx = (tp[0] + tp[2]) / 2 - points[0];
                  dy = (tp[1] + tp[3]) / 2 - points[1];
              }
              else {
                  dx = points[2] - points[0];
                  dy = points[3] - points[1];
              }
              ctx.rotate((Math.atan2(-dy, -dx) + PI2) % PI2);
              ctx.moveTo(0, 0);
              ctx.lineTo(-length, width / 2);
              ctx.lineTo(-length, -width / 2);
              ctx.closePath();
              ctx.restore();
          }
          var isDashEnabled = this.dashEnabled();
          if (isDashEnabled) {
              this.attrs.dashEnabled = false;
              ctx.setLineDash([]);
          }
          ctx.fillStrokeShape(this);
          if (isDashEnabled) {
              this.attrs.dashEnabled = true;
          }
      };
      return Arrow;
  }(Line_1.Line));
  exports.Arrow = Arrow;
  Arrow.prototype.className = 'Arrow';
  Global_1._registerNode(Arrow);
  Factory_1.Factory.addGetterSetter(Arrow, 'pointerLength', 10, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Arrow, 'pointerWidth', 10, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Arrow, 'pointerAtBeginning', false);
  Util_1.Collection.mapMethods(Arrow);

  },{"../Factory":10,"../Global":12,"../Util":20,"../Validators":21,"./Line":50}],46:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Validators_1 = _dereq_("../Validators");
  var Global_1 = _dereq_("../Global");
  var Circle = (function (_super) {
      __extends(Circle, _super);
      function Circle() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      Circle.prototype._sceneFunc = function (context) {
          context.beginPath();
          context.arc(0, 0, this.radius(), 0, Math.PI * 2, false);
          context.closePath();
          context.fillStrokeShape(this);
      };
      Circle.prototype.getWidth = function () {
          return this.radius() * 2;
      };
      Circle.prototype.getHeight = function () {
          return this.radius() * 2;
      };
      Circle.prototype.setWidth = function (width) {
          if (this.radius() !== width / 2) {
              this.radius(width / 2);
          }
      };
      Circle.prototype.setHeight = function (height) {
          if (this.radius() !== height / 2) {
              this.radius(height / 2);
          }
      };
      return Circle;
  }(Shape_1.Shape));
  exports.Circle = Circle;
  Circle.prototype._centroid = true;
  Circle.prototype.className = 'Circle';
  Circle.prototype._attrsAffectingSize = ['radius'];
  Global_1._registerNode(Circle);
  Factory_1.Factory.addGetterSetter(Circle, 'radius', 0, Validators_1.getNumberValidator());
  Util_1.Collection.mapMethods(Circle);

  },{"../Factory":10,"../Global":12,"../Shape":17,"../Util":20,"../Validators":21}],47:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Validators_1 = _dereq_("../Validators");
  var Global_1 = _dereq_("../Global");
  var Ellipse = (function (_super) {
      __extends(Ellipse, _super);
      function Ellipse() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      Ellipse.prototype._sceneFunc = function (context) {
          var rx = this.radiusX(), ry = this.radiusY();
          context.beginPath();
          context.save();
          if (rx !== ry) {
              context.scale(1, ry / rx);
          }
          context.arc(0, 0, rx, 0, Math.PI * 2, false);
          context.restore();
          context.closePath();
          context.fillStrokeShape(this);
      };
      Ellipse.prototype.getWidth = function () {
          return this.radiusX() * 2;
      };
      Ellipse.prototype.getHeight = function () {
          return this.radiusY() * 2;
      };
      Ellipse.prototype.setWidth = function (width) {
          this.radiusX(width / 2);
      };
      Ellipse.prototype.setHeight = function (height) {
          this.radiusY(height / 2);
      };
      return Ellipse;
  }(Shape_1.Shape));
  exports.Ellipse = Ellipse;
  Ellipse.prototype.className = 'Ellipse';
  Ellipse.prototype._centroid = true;
  Ellipse.prototype._attrsAffectingSize = ['radiusX', 'radiusY'];
  Global_1._registerNode(Ellipse);
  Factory_1.Factory.addComponentsGetterSetter(Ellipse, 'radius', ['x', 'y']);
  Factory_1.Factory.addGetterSetter(Ellipse, 'radiusX', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Ellipse, 'radiusY', 0, Validators_1.getNumberValidator());
  Util_1.Collection.mapMethods(Ellipse);

  },{"../Factory":10,"../Global":12,"../Shape":17,"../Util":20,"../Validators":21}],48:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Validators_1 = _dereq_("../Validators");
  var Global_1 = _dereq_("../Global");
  var Image = (function (_super) {
      __extends(Image, _super);
      function Image() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      Image.prototype._useBufferCanvas = function () {
          return !!((this.hasShadow() || this.getAbsoluteOpacity() !== 1) &&
              this.hasStroke() &&
              this.getStage());
      };
      Image.prototype._sceneFunc = function (context) {
          var width = this.width(), height = this.height(), image = this.image(), cropWidth, cropHeight, params;
          if (image) {
              cropWidth = this.cropWidth();
              cropHeight = this.cropHeight();
              if (cropWidth && cropHeight) {
                  params = [
                      image,
                      this.cropX(),
                      this.cropY(),
                      cropWidth,
                      cropHeight,
                      0,
                      0,
                      width,
                      height
                  ];
              }
              else {
                  params = [image, 0, 0, width, height];
              }
          }
          if (this.hasFill() || this.hasStroke()) {
              context.beginPath();
              context.rect(0, 0, width, height);
              context.closePath();
              context.fillStrokeShape(this);
          }
          if (image) {
              context.drawImage.apply(context, params);
          }
      };
      Image.prototype._hitFunc = function (context) {
          var width = this.width(), height = this.height();
          context.beginPath();
          context.rect(0, 0, width, height);
          context.closePath();
          context.fillStrokeShape(this);
      };
      Image.prototype.getWidth = function () {
          var image = this.image();
          return this.attrs.width || (image ? image.width : 0);
      };
      Image.prototype.getHeight = function () {
          var image = this.image();
          return this.attrs.height || (image ? image.height : 0);
      };
      Image.fromURL = function (url, callback) {
          var img = Util_1.Util.createImageElement();
          img.onload = function () {
              var image = new Image({
                  image: img
              });
              callback(image);
          };
          img.crossOrigin = 'Anonymous';
          img.src = url;
      };
      return Image;
  }(Shape_1.Shape));
  exports.Image = Image;
  Image.prototype.className = 'Image';
  Global_1._registerNode(Image);
  Factory_1.Factory.addGetterSetter(Image, 'image');
  Factory_1.Factory.addComponentsGetterSetter(Image, 'crop', ['x', 'y', 'width', 'height']);
  Factory_1.Factory.addGetterSetter(Image, 'cropX', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Image, 'cropY', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Image, 'cropWidth', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Image, 'cropHeight', 0, Validators_1.getNumberValidator());
  Util_1.Collection.mapMethods(Image);

  },{"../Factory":10,"../Global":12,"../Shape":17,"../Util":20,"../Validators":21}],49:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Group_1 = _dereq_("../Group");
  var Validators_1 = _dereq_("../Validators");
  var Global_1 = _dereq_("../Global");
  var ATTR_CHANGE_LIST = [
      'fontFamily',
      'fontSize',
      'fontStyle',
      'padding',
      'lineHeight',
      'text',
      'width'
  ], CHANGE_KONVA = 'Change.konva', NONE = 'none', UP = 'up', RIGHT = 'right', DOWN = 'down', LEFT = 'left', attrChangeListLen = ATTR_CHANGE_LIST.length;
  var Label = (function (_super) {
      __extends(Label, _super);
      function Label(config) {
          var _this = _super.call(this, config) || this;
          _this.on('add.konva', function (evt) {
              this._addListeners(evt.child);
              this._sync();
          });
          return _this;
      }
      Label.prototype.getText = function () {
          return this.find('Text')[0];
      };
      Label.prototype.getTag = function () {
          return this.find('Tag')[0];
      };
      Label.prototype._addListeners = function (text) {
          var that = this, n;
          var func = function () {
              that._sync();
          };
          for (n = 0; n < attrChangeListLen; n++) {
              text.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, func);
          }
      };
      Label.prototype.getWidth = function () {
          return this.getText().width();
      };
      Label.prototype.getHeight = function () {
          return this.getText().height();
      };
      Label.prototype._sync = function () {
          var text = this.getText(), tag = this.getTag(), width, height, pointerDirection, pointerWidth, x, y, pointerHeight;
          if (text && tag) {
              width = text.width();
              height = text.height();
              pointerDirection = tag.pointerDirection();
              pointerWidth = tag.pointerWidth();
              pointerHeight = tag.pointerHeight();
              x = 0;
              y = 0;
              switch (pointerDirection) {
                  case UP:
                      x = width / 2;
                      y = -1 * pointerHeight;
                      break;
                  case RIGHT:
                      x = width + pointerWidth;
                      y = height / 2;
                      break;
                  case DOWN:
                      x = width / 2;
                      y = height + pointerHeight;
                      break;
                  case LEFT:
                      x = -1 * pointerWidth;
                      y = height / 2;
                      break;
              }
              tag.setAttrs({
                  x: -1 * x,
                  y: -1 * y,
                  width: width,
                  height: height
              });
              text.setAttrs({
                  x: -1 * x,
                  y: -1 * y
              });
          }
      };
      return Label;
  }(Group_1.Group));
  exports.Label = Label;
  Label.prototype.className = 'Label';
  Global_1._registerNode(Label);
  Util_1.Collection.mapMethods(Label);
  var Tag = (function (_super) {
      __extends(Tag, _super);
      function Tag() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      Tag.prototype._sceneFunc = function (context) {
          var width = this.width(), height = this.height(), pointerDirection = this.pointerDirection(), pointerWidth = this.pointerWidth(), pointerHeight = this.pointerHeight(), cornerRadius = Math.min(this.cornerRadius(), width / 2, height / 2);
          context.beginPath();
          if (!cornerRadius) {
              context.moveTo(0, 0);
          }
          else {
              context.moveTo(cornerRadius, 0);
          }
          if (pointerDirection === UP) {
              context.lineTo((width - pointerWidth) / 2, 0);
              context.lineTo(width / 2, -1 * pointerHeight);
              context.lineTo((width + pointerWidth) / 2, 0);
          }
          if (!cornerRadius) {
              context.lineTo(width, 0);
          }
          else {
              context.lineTo(width - cornerRadius, 0);
              context.arc(width - cornerRadius, cornerRadius, cornerRadius, (Math.PI * 3) / 2, 0, false);
          }
          if (pointerDirection === RIGHT) {
              context.lineTo(width, (height - pointerHeight) / 2);
              context.lineTo(width + pointerWidth, height / 2);
              context.lineTo(width, (height + pointerHeight) / 2);
          }
          if (!cornerRadius) {
              context.lineTo(width, height);
          }
          else {
              context.lineTo(width, height - cornerRadius);
              context.arc(width - cornerRadius, height - cornerRadius, cornerRadius, 0, Math.PI / 2, false);
          }
          if (pointerDirection === DOWN) {
              context.lineTo((width + pointerWidth) / 2, height);
              context.lineTo(width / 2, height + pointerHeight);
              context.lineTo((width - pointerWidth) / 2, height);
          }
          if (!cornerRadius) {
              context.lineTo(0, height);
          }
          else {
              context.lineTo(cornerRadius, height);
              context.arc(cornerRadius, height - cornerRadius, cornerRadius, Math.PI / 2, Math.PI, false);
          }
          if (pointerDirection === LEFT) {
              context.lineTo(0, (height + pointerHeight) / 2);
              context.lineTo(-1 * pointerWidth, height / 2);
              context.lineTo(0, (height - pointerHeight) / 2);
          }
          if (cornerRadius) {
              context.lineTo(0, cornerRadius);
              context.arc(cornerRadius, cornerRadius, cornerRadius, Math.PI, (Math.PI * 3) / 2, false);
          }
          context.closePath();
          context.fillStrokeShape(this);
      };
      Tag.prototype.getSelfRect = function () {
          var x = 0, y = 0, pointerWidth = this.pointerWidth(), pointerHeight = this.pointerHeight(), direction = this.pointerDirection(), width = this.width(), height = this.height();
          if (direction === UP) {
              y -= pointerHeight;
              height += pointerHeight;
          }
          else if (direction === DOWN) {
              height += pointerHeight;
          }
          else if (direction === LEFT) {
              x -= pointerWidth * 1.5;
              width += pointerWidth;
          }
          else if (direction === RIGHT) {
              width += pointerWidth * 1.5;
          }
          return {
              x: x,
              y: y,
              width: width,
              height: height
          };
      };
      return Tag;
  }(Shape_1.Shape));
  exports.Tag = Tag;
  Tag.prototype.className = 'Tag';
  Global_1._registerNode(Tag);
  Factory_1.Factory.addGetterSetter(Tag, 'pointerDirection', NONE);
  Factory_1.Factory.addGetterSetter(Tag, 'pointerWidth', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Tag, 'pointerHeight', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Tag, 'cornerRadius', 0, Validators_1.getNumberValidator());
  Util_1.Collection.mapMethods(Tag);

  },{"../Factory":10,"../Global":12,"../Group":13,"../Shape":17,"../Util":20,"../Validators":21}],50:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __spreadArrays = (this && this.__spreadArrays) || function () {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Validators_1 = _dereq_("../Validators");
  var Global_1 = _dereq_("../Global");
  var Line = (function (_super) {
      __extends(Line, _super);
      function Line(config) {
          var _this = _super.call(this, config) || this;
          _this.on('pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva', function () {
              this._clearCache('tensionPoints');
          });
          return _this;
      }
      Line.prototype._sceneFunc = function (context) {
          var points = this.points(), length = points.length, tension = this.tension(), closed = this.closed(), bezier = this.bezier(), tp, len, n;
          if (!length) {
              return;
          }
          context.beginPath();
          context.moveTo(points[0], points[1]);
          if (tension !== 0 && length > 4) {
              tp = this.getTensionPoints();
              len = tp.length;
              n = closed ? 0 : 4;
              if (!closed) {
                  context.quadraticCurveTo(tp[0], tp[1], tp[2], tp[3]);
              }
              while (n < len - 2) {
                  context.bezierCurveTo(tp[n++], tp[n++], tp[n++], tp[n++], tp[n++], tp[n++]);
              }
              if (!closed) {
                  context.quadraticCurveTo(tp[len - 2], tp[len - 1], points[length - 2], points[length - 1]);
              }
          }
          else if (bezier) {
              n = 2;
              while (n < length) {
                  context.bezierCurveTo(points[n++], points[n++], points[n++], points[n++], points[n++], points[n++]);
              }
          }
          else {
              for (n = 2; n < length; n += 2) {
                  context.lineTo(points[n], points[n + 1]);
              }
          }
          if (closed) {
              context.closePath();
              context.fillStrokeShape(this);
          }
          else {
              context.strokeShape(this);
          }
      };
      Line.prototype.getTensionPoints = function () {
          return this._getCache('tensionPoints', this._getTensionPoints);
      };
      Line.prototype._getTensionPoints = function () {
          if (this.closed()) {
              return this._getTensionPointsClosed();
          }
          else {
              return Util_1.Util._expandPoints(this.points(), this.tension());
          }
      };
      Line.prototype._getTensionPointsClosed = function () {
          var p = this.points(), len = p.length, tension = this.tension(), firstControlPoints = Util_1.Util._getControlPoints(p[len - 2], p[len - 1], p[0], p[1], p[2], p[3], tension), lastControlPoints = Util_1.Util._getControlPoints(p[len - 4], p[len - 3], p[len - 2], p[len - 1], p[0], p[1], tension), middle = Util_1.Util._expandPoints(p, tension), tp = [firstControlPoints[2], firstControlPoints[3]]
              .concat(middle)
              .concat([
              lastControlPoints[0],
              lastControlPoints[1],
              p[len - 2],
              p[len - 1],
              lastControlPoints[2],
              lastControlPoints[3],
              firstControlPoints[0],
              firstControlPoints[1],
              p[0],
              p[1]
          ]);
          return tp;
      };
      Line.prototype.getWidth = function () {
          return this.getSelfRect().width;
      };
      Line.prototype.getHeight = function () {
          return this.getSelfRect().height;
      };
      Line.prototype.getSelfRect = function () {
          var points = this.points();
          if (points.length < 4) {
              return {
                  x: points[0] || 0,
                  y: points[1] || 0,
                  width: 0,
                  height: 0
              };
          }
          if (this.tension() !== 0) {
              points = __spreadArrays([
                  points[0],
                  points[1]
              ], this._getTensionPoints(), [
                  points[points.length - 2],
                  points[points.length - 2]
              ]);
          }
          else {
              points = this.points();
          }
          var minX = points[0];
          var maxX = points[0];
          var minY = points[1];
          var maxY = points[1];
          var x, y;
          for (var i = 0; i < points.length / 2; i++) {
              x = points[i * 2];
              y = points[i * 2 + 1];
              minX = Math.min(minX, x);
              maxX = Math.max(maxX, x);
              minY = Math.min(minY, y);
              maxY = Math.max(maxY, y);
          }
          return {
              x: Math.round(minX),
              y: Math.round(minY),
              width: Math.round(maxX - minX),
              height: Math.round(maxY - minY)
          };
      };
      return Line;
  }(Shape_1.Shape));
  exports.Line = Line;
  Line.prototype.className = 'Line';
  Line.prototype._attrsAffectingSize = ['points', 'bezier', 'tension'];
  Global_1._registerNode(Line);
  Factory_1.Factory.addGetterSetter(Line, 'closed', false);
  Factory_1.Factory.addGetterSetter(Line, 'bezier', false);
  Factory_1.Factory.addGetterSetter(Line, 'tension', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Line, 'points', [], Validators_1.getNumberArrayValidator());
  Util_1.Collection.mapMethods(Line);

  },{"../Factory":10,"../Global":12,"../Shape":17,"../Util":20,"../Validators":21}],51:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Global_1 = _dereq_("../Global");
  var Path = (function (_super) {
      __extends(Path, _super);
      function Path(config) {
          var _this = _super.call(this, config) || this;
          _this.dataArray = [];
          _this.pathLength = 0;
          _this.dataArray = Path.parsePathData(_this.data());
          _this.pathLength = 0;
          for (var i = 0; i < _this.dataArray.length; ++i) {
              _this.pathLength += _this.dataArray[i].pathLength;
          }
          _this.on('dataChange.konva', function () {
              this.dataArray = Path.parsePathData(this.data());
              this.pathLength = 0;
              for (var i = 0; i < this.dataArray.length; ++i) {
                  this.pathLength += this.dataArray[i].pathLength;
              }
          });
          return _this;
      }
      Path.prototype._sceneFunc = function (context) {
          var ca = this.dataArray;
          context.beginPath();
          for (var n = 0; n < ca.length; n++) {
              var c = ca[n].command;
              var p = ca[n].points;
              switch (c) {
                  case 'L':
                      context.lineTo(p[0], p[1]);
                      break;
                  case 'M':
                      context.moveTo(p[0], p[1]);
                      break;
                  case 'C':
                      context.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);
                      break;
                  case 'Q':
                      context.quadraticCurveTo(p[0], p[1], p[2], p[3]);
                      break;
                  case 'A':
                      var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6], fs = p[7];
                      var r = rx > ry ? rx : ry;
                      var scaleX = rx > ry ? 1 : rx / ry;
                      var scaleY = rx > ry ? ry / rx : 1;
                      context.translate(cx, cy);
                      context.rotate(psi);
                      context.scale(scaleX, scaleY);
                      context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);
                      context.scale(1 / scaleX, 1 / scaleY);
                      context.rotate(-psi);
                      context.translate(-cx, -cy);
                      break;
                  case 'z':
                      context.closePath();
                      break;
              }
          }
          context.fillStrokeShape(this);
      };
      Path.prototype.getSelfRect = function () {
          var points = [];
          this.dataArray.forEach(function (data) {
              points = points.concat(data.points);
          });
          var minX = points[0];
          var maxX = points[0];
          var minY = points[1];
          var maxY = points[1];
          var x, y;
          for (var i = 0; i < points.length / 2; i++) {
              x = points[i * 2];
              y = points[i * 2 + 1];
              if (!isNaN(x)) {
                  minX = Math.min(minX, x);
                  maxX = Math.max(maxX, x);
              }
              if (!isNaN(y)) {
                  minY = Math.min(minY, y);
                  maxY = Math.max(maxY, y);
              }
          }
          return {
              x: Math.round(minX),
              y: Math.round(minY),
              width: Math.round(maxX - minX),
              height: Math.round(maxY - minY)
          };
      };
      Path.prototype.getLength = function () {
          return this.pathLength;
      };
      Path.prototype.getPointAtLength = function (length) {
          var point, i = 0, ii = this.dataArray.length;
          if (!ii) {
              return null;
          }
          while (i < ii && length > this.dataArray[i].pathLength) {
              length -= this.dataArray[i].pathLength;
              ++i;
          }
          if (i === ii) {
              point = this.dataArray[i - 1].points.slice(-2);
              return {
                  x: point[0],
                  y: point[1]
              };
          }
          if (length < 0.01) {
              point = this.dataArray[i].points.slice(0, 2);
              return {
                  x: point[0],
                  y: point[1]
              };
          }
          var cp = this.dataArray[i];
          var p = cp.points;
          switch (cp.command) {
              case 'L':
                  return Path.getPointOnLine(length, cp.start.x, cp.start.y, p[0], p[1]);
              case 'C':
                  return Path.getPointOnCubicBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3], p[4], p[5]);
              case 'Q':
                  return Path.getPointOnQuadraticBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3]);
              case 'A':
                  var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6];
                  theta += (dTheta * length) / cp.pathLength;
                  return Path.getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi);
          }
          return null;
      };
      Path.getLineLength = function (x1, y1, x2, y2) {
          return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      };
      Path.getPointOnLine = function (dist, P1x, P1y, P2x, P2y, fromX, fromY) {
          if (fromX === undefined) {
              fromX = P1x;
          }
          if (fromY === undefined) {
              fromY = P1y;
          }
          var m = (P2y - P1y) / (P2x - P1x + 0.00000001);
          var run = Math.sqrt((dist * dist) / (1 + m * m));
          if (P2x < P1x) {
              run *= -1;
          }
          var rise = m * run;
          var pt;
          if (P2x === P1x) {
              pt = {
                  x: fromX,
                  y: fromY + rise
              };
          }
          else if ((fromY - P1y) / (fromX - P1x + 0.00000001) === m) {
              pt = {
                  x: fromX + run,
                  y: fromY + rise
              };
          }
          else {
              var ix, iy;
              var len = this.getLineLength(P1x, P1y, P2x, P2y);
              if (len < 0.00000001) {
                  return undefined;
              }
              var u = (fromX - P1x) * (P2x - P1x) + (fromY - P1y) * (P2y - P1y);
              u = u / (len * len);
              ix = P1x + u * (P2x - P1x);
              iy = P1y + u * (P2y - P1y);
              var pRise = this.getLineLength(fromX, fromY, ix, iy);
              var pRun = Math.sqrt(dist * dist - pRise * pRise);
              run = Math.sqrt((pRun * pRun) / (1 + m * m));
              if (P2x < P1x) {
                  run *= -1;
              }
              rise = m * run;
              pt = {
                  x: ix + run,
                  y: iy + rise
              };
          }
          return pt;
      };
      Path.getPointOnCubicBezier = function (pct, P1x, P1y, P2x, P2y, P3x, P3y, P4x, P4y) {
          function CB1(t) {
              return t * t * t;
          }
          function CB2(t) {
              return 3 * t * t * (1 - t);
          }
          function CB3(t) {
              return 3 * t * (1 - t) * (1 - t);
          }
          function CB4(t) {
              return (1 - t) * (1 - t) * (1 - t);
          }
          var x = P4x * CB1(pct) + P3x * CB2(pct) + P2x * CB3(pct) + P1x * CB4(pct);
          var y = P4y * CB1(pct) + P3y * CB2(pct) + P2y * CB3(pct) + P1y * CB4(pct);
          return {
              x: x,
              y: y
          };
      };
      Path.getPointOnQuadraticBezier = function (pct, P1x, P1y, P2x, P2y, P3x, P3y) {
          function QB1(t) {
              return t * t;
          }
          function QB2(t) {
              return 2 * t * (1 - t);
          }
          function QB3(t) {
              return (1 - t) * (1 - t);
          }
          var x = P3x * QB1(pct) + P2x * QB2(pct) + P1x * QB3(pct);
          var y = P3y * QB1(pct) + P2y * QB2(pct) + P1y * QB3(pct);
          return {
              x: x,
              y: y
          };
      };
      Path.getPointOnEllipticalArc = function (cx, cy, rx, ry, theta, psi) {
          var cosPsi = Math.cos(psi), sinPsi = Math.sin(psi);
          var pt = {
              x: rx * Math.cos(theta),
              y: ry * Math.sin(theta)
          };
          return {
              x: cx + (pt.x * cosPsi - pt.y * sinPsi),
              y: cy + (pt.x * sinPsi + pt.y * cosPsi)
          };
      };
      Path.parsePathData = function (data) {
          if (!data) {
              return [];
          }
          var cs = data;
          var cc = [
              'm',
              'M',
              'l',
              'L',
              'v',
              'V',
              'h',
              'H',
              'z',
              'Z',
              'c',
              'C',
              'q',
              'Q',
              't',
              'T',
              's',
              'S',
              'a',
              'A'
          ];
          cs = cs.replace(new RegExp(' ', 'g'), ',');
          for (var n = 0; n < cc.length; n++) {
              cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
          }
          var arr = cs.split('|');
          var ca = [];
          var coords = [];
          var cpx = 0;
          var cpy = 0;
          var re = /([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;
          var match;
          for (n = 1; n < arr.length; n++) {
              var str = arr[n];
              var c = str.charAt(0);
              str = str.slice(1);
              coords.length = 0;
              while ((match = re.exec(str))) {
                  coords.push(match[0]);
              }
              var p = [];
              for (var j = 0, jlen = coords.length; j < jlen; j++) {
                  var parsed = parseFloat(coords[j]);
                  if (!isNaN(parsed)) {
                      p.push(parsed);
                  }
                  else {
                      p.push(0);
                  }
              }
              while (p.length > 0) {
                  if (isNaN(p[0])) {
                      break;
                  }
                  var cmd = null;
                  var points = [];
                  var startX = cpx, startY = cpy;
                  var prevCmd, ctlPtx, ctlPty;
                  var rx, ry, psi, fa, fs, x1, y1;
                  switch (c) {
                      case 'l':
                          cpx += p.shift();
                          cpy += p.shift();
                          cmd = 'L';
                          points.push(cpx, cpy);
                          break;
                      case 'L':
                          cpx = p.shift();
                          cpy = p.shift();
                          points.push(cpx, cpy);
                          break;
                      case 'm':
                          var dx = p.shift();
                          var dy = p.shift();
                          cpx += dx;
                          cpy += dy;
                          cmd = 'M';
                          if (ca.length > 2 && ca[ca.length - 1].command === 'z') {
                              for (var idx = ca.length - 2; idx >= 0; idx--) {
                                  if (ca[idx].command === 'M') {
                                      cpx = ca[idx].points[0] + dx;
                                      cpy = ca[idx].points[1] + dy;
                                      break;
                                  }
                              }
                          }
                          points.push(cpx, cpy);
                          c = 'l';
                          break;
                      case 'M':
                          cpx = p.shift();
                          cpy = p.shift();
                          cmd = 'M';
                          points.push(cpx, cpy);
                          c = 'L';
                          break;
                      case 'h':
                          cpx += p.shift();
                          cmd = 'L';
                          points.push(cpx, cpy);
                          break;
                      case 'H':
                          cpx = p.shift();
                          cmd = 'L';
                          points.push(cpx, cpy);
                          break;
                      case 'v':
                          cpy += p.shift();
                          cmd = 'L';
                          points.push(cpx, cpy);
                          break;
                      case 'V':
                          cpy = p.shift();
                          cmd = 'L';
                          points.push(cpx, cpy);
                          break;
                      case 'C':
                          points.push(p.shift(), p.shift(), p.shift(), p.shift());
                          cpx = p.shift();
                          cpy = p.shift();
                          points.push(cpx, cpy);
                          break;
                      case 'c':
                          points.push(cpx + p.shift(), cpy + p.shift(), cpx + p.shift(), cpy + p.shift());
                          cpx += p.shift();
                          cpy += p.shift();
                          cmd = 'C';
                          points.push(cpx, cpy);
                          break;
                      case 'S':
                          ctlPtx = cpx;
                          ctlPty = cpy;
                          prevCmd = ca[ca.length - 1];
                          if (prevCmd.command === 'C') {
                              ctlPtx = cpx + (cpx - prevCmd.points[2]);
                              ctlPty = cpy + (cpy - prevCmd.points[3]);
                          }
                          points.push(ctlPtx, ctlPty, p.shift(), p.shift());
                          cpx = p.shift();
                          cpy = p.shift();
                          cmd = 'C';
                          points.push(cpx, cpy);
                          break;
                      case 's':
                          ctlPtx = cpx;
                          ctlPty = cpy;
                          prevCmd = ca[ca.length - 1];
                          if (prevCmd.command === 'C') {
                              ctlPtx = cpx + (cpx - prevCmd.points[2]);
                              ctlPty = cpy + (cpy - prevCmd.points[3]);
                          }
                          points.push(ctlPtx, ctlPty, cpx + p.shift(), cpy + p.shift());
                          cpx += p.shift();
                          cpy += p.shift();
                          cmd = 'C';
                          points.push(cpx, cpy);
                          break;
                      case 'Q':
                          points.push(p.shift(), p.shift());
                          cpx = p.shift();
                          cpy = p.shift();
                          points.push(cpx, cpy);
                          break;
                      case 'q':
                          points.push(cpx + p.shift(), cpy + p.shift());
                          cpx += p.shift();
                          cpy += p.shift();
                          cmd = 'Q';
                          points.push(cpx, cpy);
                          break;
                      case 'T':
                          ctlPtx = cpx;
                          ctlPty = cpy;
                          prevCmd = ca[ca.length - 1];
                          if (prevCmd.command === 'Q') {
                              ctlPtx = cpx + (cpx - prevCmd.points[0]);
                              ctlPty = cpy + (cpy - prevCmd.points[1]);
                          }
                          cpx = p.shift();
                          cpy = p.shift();
                          cmd = 'Q';
                          points.push(ctlPtx, ctlPty, cpx, cpy);
                          break;
                      case 't':
                          ctlPtx = cpx;
                          ctlPty = cpy;
                          prevCmd = ca[ca.length - 1];
                          if (prevCmd.command === 'Q') {
                              ctlPtx = cpx + (cpx - prevCmd.points[0]);
                              ctlPty = cpy + (cpy - prevCmd.points[1]);
                          }
                          cpx += p.shift();
                          cpy += p.shift();
                          cmd = 'Q';
                          points.push(ctlPtx, ctlPty, cpx, cpy);
                          break;
                      case 'A':
                          rx = p.shift();
                          ry = p.shift();
                          psi = p.shift();
                          fa = p.shift();
                          fs = p.shift();
                          x1 = cpx;
                          y1 = cpy;
                          cpx = p.shift();
                          cpy = p.shift();
                          cmd = 'A';
                          points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);
                          break;
                      case 'a':
                          rx = p.shift();
                          ry = p.shift();
                          psi = p.shift();
                          fa = p.shift();
                          fs = p.shift();
                          x1 = cpx;
                          y1 = cpy;
                          cpx += p.shift();
                          cpy += p.shift();
                          cmd = 'A';
                          points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);
                          break;
                  }
                  ca.push({
                      command: cmd || c,
                      points: points,
                      start: {
                          x: startX,
                          y: startY
                      },
                      pathLength: this.calcLength(startX, startY, cmd || c, points)
                  });
              }
              if (c === 'z' || c === 'Z') {
                  ca.push({
                      command: 'z',
                      points: [],
                      start: undefined,
                      pathLength: 0
                  });
              }
          }
          return ca;
      };
      Path.calcLength = function (x, y, cmd, points) {
          var len, p1, p2, t;
          var path = Path;
          switch (cmd) {
              case 'L':
                  return path.getLineLength(x, y, points[0], points[1]);
              case 'C':
                  len = 0.0;
                  p1 = path.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);
                  for (t = 0.01; t <= 1; t += 0.01) {
                      p2 = path.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);
                      len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
                      p1 = p2;
                  }
                  return len;
              case 'Q':
                  len = 0.0;
                  p1 = path.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);
                  for (t = 0.01; t <= 1; t += 0.01) {
                      p2 = path.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);
                      len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
                      p1 = p2;
                  }
                  return len;
              case 'A':
                  len = 0.0;
                  var start = points[4];
                  var dTheta = points[5];
                  var end = points[4] + dTheta;
                  var inc = Math.PI / 180.0;
                  if (Math.abs(start - end) < inc) {
                      inc = Math.abs(start - end);
                  }
                  p1 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);
                  if (dTheta < 0) {
                      for (t = start - inc; t > end; t -= inc) {
                          p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);
                          len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
                          p1 = p2;
                      }
                  }
                  else {
                      for (t = start + inc; t < end; t += inc) {
                          p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);
                          len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
                          p1 = p2;
                      }
                  }
                  p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);
                  len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
                  return len;
          }
          return 0;
      };
      Path.convertEndpointToCenterParameterization = function (x1, y1, x2, y2, fa, fs, rx, ry, psiDeg) {
          var psi = psiDeg * (Math.PI / 180.0);
          var xp = (Math.cos(psi) * (x1 - x2)) / 2.0 + (Math.sin(psi) * (y1 - y2)) / 2.0;
          var yp = (-1 * Math.sin(psi) * (x1 - x2)) / 2.0 +
              (Math.cos(psi) * (y1 - y2)) / 2.0;
          var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);
          if (lambda > 1) {
              rx *= Math.sqrt(lambda);
              ry *= Math.sqrt(lambda);
          }
          var f = Math.sqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) /
              (rx * rx * (yp * yp) + ry * ry * (xp * xp)));
          if (fa === fs) {
              f *= -1;
          }
          if (isNaN(f)) {
              f = 0;
          }
          var cxp = (f * rx * yp) / ry;
          var cyp = (f * -ry * xp) / rx;
          var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;
          var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;
          var vMag = function (v) {
              return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
          };
          var vRatio = function (u, v) {
              return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
          };
          var vAngle = function (u, v) {
              return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
          };
          var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
          var u = [(xp - cxp) / rx, (yp - cyp) / ry];
          var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
          var dTheta = vAngle(u, v);
          if (vRatio(u, v) <= -1) {
              dTheta = Math.PI;
          }
          if (vRatio(u, v) >= 1) {
              dTheta = 0;
          }
          if (fs === 0 && dTheta > 0) {
              dTheta = dTheta - 2 * Math.PI;
          }
          if (fs === 1 && dTheta < 0) {
              dTheta = dTheta + 2 * Math.PI;
          }
          return [cx, cy, rx, ry, theta, dTheta, psi, fs];
      };
      return Path;
  }(Shape_1.Shape));
  exports.Path = Path;
  Path.prototype.className = 'Path';
  Path.prototype._attrsAffectingSize = ['data'];
  Global_1._registerNode(Path);
  Factory_1.Factory.addGetterSetter(Path, 'data');
  Util_1.Collection.mapMethods(Path);

  },{"../Factory":10,"../Global":12,"../Shape":17,"../Util":20}],52:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Global_1 = _dereq_("../Global");
  var Rect = (function (_super) {
      __extends(Rect, _super);
      function Rect() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      Rect.prototype._sceneFunc = function (context) {
          var cornerRadius = this.cornerRadius(), width = this.width(), height = this.height();
          context.beginPath();
          if (!cornerRadius) {
              context.rect(0, 0, width, height);
          }
          else {
              var topLeft = 0;
              var topRight = 0;
              var bottomLeft = 0;
              var bottomRight = 0;
              if (typeof cornerRadius === 'number') {
                  topLeft = topRight = bottomLeft = bottomRight = Math.min(cornerRadius, width / 2, height / 2);
              }
              else {
                  topLeft = Math.min(cornerRadius[0], width / 2, height / 2);
                  topRight = Math.min(cornerRadius[1], width / 2, height / 2);
                  bottomRight = Math.min(cornerRadius[2], width / 2, height / 2);
                  bottomLeft = Math.min(cornerRadius[3], width / 2, height / 2);
              }
              context.moveTo(topLeft, 0);
              context.lineTo(width - topRight, 0);
              context.arc(width - topRight, topRight, topRight, (Math.PI * 3) / 2, 0, false);
              context.lineTo(width, height - bottomRight);
              context.arc(width - bottomRight, height - bottomRight, bottomRight, 0, Math.PI / 2, false);
              context.lineTo(bottomLeft, height);
              context.arc(bottomLeft, height - bottomLeft, bottomLeft, Math.PI / 2, Math.PI, false);
              context.lineTo(0, topLeft);
              context.arc(topLeft, topLeft, topLeft, Math.PI, (Math.PI * 3) / 2, false);
          }
          context.closePath();
          context.fillStrokeShape(this);
      };
      return Rect;
  }(Shape_1.Shape));
  exports.Rect = Rect;
  Rect.prototype.className = 'Rect';
  Global_1._registerNode(Rect);
  Factory_1.Factory.addGetterSetter(Rect, 'cornerRadius', 0);
  Util_1.Collection.mapMethods(Rect);

  },{"../Factory":10,"../Global":12,"../Shape":17,"../Util":20}],53:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Validators_1 = _dereq_("../Validators");
  var Global_1 = _dereq_("../Global");
  var RegularPolygon = (function (_super) {
      __extends(RegularPolygon, _super);
      function RegularPolygon() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      RegularPolygon.prototype._sceneFunc = function (context) {
          var sides = this.sides(), radius = this.radius(), n, x, y;
          context.beginPath();
          context.moveTo(0, 0 - radius);
          for (n = 1; n < sides; n++) {
              x = radius * Math.sin((n * 2 * Math.PI) / sides);
              y = -1 * radius * Math.cos((n * 2 * Math.PI) / sides);
              context.lineTo(x, y);
          }
          context.closePath();
          context.fillStrokeShape(this);
      };
      RegularPolygon.prototype.getWidth = function () {
          return this.radius() * 2;
      };
      RegularPolygon.prototype.getHeight = function () {
          return this.radius() * 2;
      };
      RegularPolygon.prototype.setWidth = function (width) {
          this.radius(width / 2);
      };
      RegularPolygon.prototype.setHeight = function (height) {
          this.radius(height / 2);
      };
      return RegularPolygon;
  }(Shape_1.Shape));
  exports.RegularPolygon = RegularPolygon;
  RegularPolygon.prototype.className = 'RegularPolygon';
  RegularPolygon.prototype._centroid = true;
  RegularPolygon.prototype._attrsAffectingSize = ['radius'];
  Global_1._registerNode(RegularPolygon);
  Factory_1.Factory.addGetterSetter(RegularPolygon, 'radius', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(RegularPolygon, 'sides', 0, Validators_1.getNumberValidator());
  Util_1.Collection.mapMethods(RegularPolygon);

  },{"../Factory":10,"../Global":12,"../Shape":17,"../Util":20,"../Validators":21}],54:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Validators_1 = _dereq_("../Validators");
  var Global_1 = _dereq_("../Global");
  var PIx2 = Math.PI * 2;
  var Ring = (function (_super) {
      __extends(Ring, _super);
      function Ring() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      Ring.prototype._sceneFunc = function (context) {
          context.beginPath();
          context.arc(0, 0, this.innerRadius(), 0, PIx2, false);
          context.moveTo(this.outerRadius(), 0);
          context.arc(0, 0, this.outerRadius(), PIx2, 0, true);
          context.closePath();
          context.fillStrokeShape(this);
      };
      Ring.prototype.getWidth = function () {
          return this.outerRadius() * 2;
      };
      Ring.prototype.getHeight = function () {
          return this.outerRadius() * 2;
      };
      Ring.prototype.setWidth = function (width) {
          this.outerRadius(width / 2);
      };
      Ring.prototype.setHeight = function (height) {
          this.outerRadius(height / 2);
      };
      return Ring;
  }(Shape_1.Shape));
  exports.Ring = Ring;
  Ring.prototype.className = 'Ring';
  Ring.prototype._centroid = true;
  Ring.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];
  Global_1._registerNode(Ring);
  Factory_1.Factory.addGetterSetter(Ring, 'innerRadius', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Ring, 'outerRadius', 0, Validators_1.getNumberValidator());
  Util_1.Collection.mapMethods(Ring);

  },{"../Factory":10,"../Global":12,"../Shape":17,"../Util":20,"../Validators":21}],55:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Animation_1 = _dereq_("../Animation");
  var Validators_1 = _dereq_("../Validators");
  var Global_1 = _dereq_("../Global");
  var Sprite = (function (_super) {
      __extends(Sprite, _super);
      function Sprite(config) {
          var _this = _super.call(this, config) || this;
          _this._updated = true;
          _this.anim = new Animation_1.Animation(function () {
              var updated = _this._updated;
              _this._updated = false;
              return updated;
          });
          _this.on('animationChange.konva', function () {
              this.frameIndex(0);
          });
          _this.on('frameIndexChange.konva', function () {
              this._updated = true;
          });
          _this.on('frameRateChange.konva', function () {
              if (!this.anim.isRunning()) {
                  return;
              }
              clearInterval(this.interval);
              this._setInterval();
          });
          return _this;
      }
      Sprite.prototype._sceneFunc = function (context) {
          var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), x = set[ix4 + 0], y = set[ix4 + 1], width = set[ix4 + 2], height = set[ix4 + 3], image = this.image();
          if (this.hasFill() || this.hasStroke()) {
              context.beginPath();
              context.rect(0, 0, width, height);
              context.closePath();
              context.fillStrokeShape(this);
          }
          if (image) {
              if (offsets) {
                  var offset = offsets[anim], ix2 = index * 2;
                  context.drawImage(image, x, y, width, height, offset[ix2 + 0], offset[ix2 + 1], width, height);
              }
              else {
                  context.drawImage(image, x, y, width, height, 0, 0, width, height);
              }
          }
      };
      Sprite.prototype._hitFunc = function (context) {
          var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), width = set[ix4 + 2], height = set[ix4 + 3];
          context.beginPath();
          if (offsets) {
              var offset = offsets[anim];
              var ix2 = index * 2;
              context.rect(offset[ix2 + 0], offset[ix2 + 1], width, height);
          }
          else {
              context.rect(0, 0, width, height);
          }
          context.closePath();
          context.fillShape(this);
      };
      Sprite.prototype._useBufferCanvas = function () {
          return ((this.hasShadow() || this.getAbsoluteOpacity() !== 1) && this.hasStroke());
      };
      Sprite.prototype._setInterval = function () {
          var that = this;
          this.interval = setInterval(function () {
              that._updateIndex();
          }, 1000 / this.frameRate());
      };
      Sprite.prototype.start = function () {
          if (this.isRunning()) {
              return;
          }
          var layer = this.getLayer();
          this.anim.setLayers(layer);
          this._setInterval();
          this.anim.start();
      };
      Sprite.prototype.stop = function () {
          this.anim.stop();
          clearInterval(this.interval);
      };
      Sprite.prototype.isRunning = function () {
          return this.anim.isRunning();
      };
      Sprite.prototype._updateIndex = function () {
          var index = this.frameIndex(), animation = this.animation(), animations = this.animations(), anim = animations[animation], len = anim.length / 4;
          if (index < len - 1) {
              this.frameIndex(index + 1);
          }
          else {
              this.frameIndex(0);
          }
      };
      return Sprite;
  }(Shape_1.Shape));
  exports.Sprite = Sprite;
  Sprite.prototype.className = 'Sprite';
  Global_1._registerNode(Sprite);
  Factory_1.Factory.addGetterSetter(Sprite, 'animation');
  Factory_1.Factory.addGetterSetter(Sprite, 'animations');
  Factory_1.Factory.addGetterSetter(Sprite, 'frameOffsets');
  Factory_1.Factory.addGetterSetter(Sprite, 'image');
  Factory_1.Factory.addGetterSetter(Sprite, 'frameIndex', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Sprite, 'frameRate', 17, Validators_1.getNumberValidator());
  Factory_1.Factory.backCompat(Sprite, {
      index: 'frameIndex',
      getIndex: 'getFrameIndex',
      setIndex: 'setFrameIndex'
  });
  Util_1.Collection.mapMethods(Sprite);

  },{"../Animation":4,"../Factory":10,"../Global":12,"../Shape":17,"../Util":20,"../Validators":21}],56:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Validators_1 = _dereq_("../Validators");
  var Global_1 = _dereq_("../Global");
  var Star = (function (_super) {
      __extends(Star, _super);
      function Star() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      Star.prototype._sceneFunc = function (context) {
          var innerRadius = this.innerRadius(), outerRadius = this.outerRadius(), numPoints = this.numPoints();
          context.beginPath();
          context.moveTo(0, 0 - outerRadius);
          for (var n = 1; n < numPoints * 2; n++) {
              var radius = n % 2 === 0 ? outerRadius : innerRadius;
              var x = radius * Math.sin((n * Math.PI) / numPoints);
              var y = -1 * radius * Math.cos((n * Math.PI) / numPoints);
              context.lineTo(x, y);
          }
          context.closePath();
          context.fillStrokeShape(this);
      };
      Star.prototype.getWidth = function () {
          return this.outerRadius() * 2;
      };
      Star.prototype.getHeight = function () {
          return this.outerRadius() * 2;
      };
      Star.prototype.setWidth = function (width) {
          this.outerRadius(width / 2);
      };
      Star.prototype.setHeight = function (height) {
          this.outerRadius(height / 2);
      };
      return Star;
  }(Shape_1.Shape));
  exports.Star = Star;
  Star.prototype.className = 'Star';
  Star.prototype._centroid = true;
  Star.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];
  Global_1._registerNode(Star);
  Factory_1.Factory.addGetterSetter(Star, 'numPoints', 5, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Star, 'innerRadius', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Star, 'outerRadius', 0, Validators_1.getNumberValidator());
  Util_1.Collection.mapMethods(Star);

  },{"../Factory":10,"../Global":12,"../Shape":17,"../Util":20,"../Validators":21}],57:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Global_1 = _dereq_("../Global");
  var Validators_1 = _dereq_("../Validators");
  var Global_2 = _dereq_("../Global");
  var AUTO = 'auto', CENTER = 'center', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = '…', ATTR_CHANGE_LIST = [
      'fontFamily',
      'fontSize',
      'fontStyle',
      'fontVariant',
      'padding',
      'align',
      'verticalAlign',
      'lineHeight',
      'text',
      'width',
      'height',
      'wrap',
      'ellipsis',
      'letterSpacing'
  ], attrChangeListLen = ATTR_CHANGE_LIST.length;
  var dummyContext;
  function getDummyContext() {
      if (dummyContext) {
          return dummyContext;
      }
      dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);
      return dummyContext;
  }
  function _fillFunc(context) {
      context.fillText(this._partialText, this._partialTextX, this._partialTextY);
  }
  function _strokeFunc(context) {
      context.strokeText(this._partialText, this._partialTextX, this._partialTextY);
  }
  function checkDefaultFill(config) {
      config = config || {};
      if (!config.fillLinearGradientColorStops &&
          !config.fillRadialGradientColorStops &&
          !config.fillPatternImage) {
          config.fill = config.fill || 'black';
      }
      return config;
  }
  var Text = (function (_super) {
      __extends(Text, _super);
      function Text(config) {
          var _this = _super.call(this, checkDefaultFill(config)) || this;
          _this._partialTextX = 0;
          _this._partialTextY = 0;
          for (var n = 0; n < attrChangeListLen; n++) {
              _this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, _this._setTextData);
          }
          _this._setTextData();
          return _this;
      }
      Text.prototype._sceneFunc = function (context) {
          var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, textArr = this.textArr, textArrLen = textArr.length, verticalAlign = this.verticalAlign(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;
          var translateY = 0;
          var translateY = lineHeightPx / 2;
          var lineTranslateX = 0;
          var lineTranslateY = 0;
          context.setAttr('font', this._getContextFont());
          context.setAttr('textBaseline', MIDDLE);
          context.setAttr('textAlign', LEFT);
          if (verticalAlign === MIDDLE) {
              alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;
          }
          else if (verticalAlign === BOTTOM) {
              alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;
          }
          context.translate(padding, alignY + padding);
          for (n = 0; n < textArrLen; n++) {
              var lineTranslateX = 0;
              var lineTranslateY = 0;
              var obj = textArr[n], text = obj.text, width = obj.width, lastLine = n !== textArrLen - 1, spacesNumber, oneWord, lineWidth;
              context.save();
              if (align === RIGHT) {
                  lineTranslateX += totalWidth - width - padding * 2;
              }
              else if (align === CENTER) {
                  lineTranslateX += (totalWidth - width - padding * 2) / 2;
              }
              if (shouldUnderline) {
                  context.save();
                  context.beginPath();
                  context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));
                  spacesNumber = text.split(' ').length - 1;
                  oneWord = spacesNumber === 0;
                  lineWidth =
                      align === JUSTIFY && lastLine && !oneWord
                          ? totalWidth - padding * 2
                          : width;
                  context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));
                  context.lineWidth = fontSize / 15;
                  context.strokeStyle = fill;
                  context.stroke();
                  context.restore();
              }
              if (shouldLineThrough) {
                  context.save();
                  context.beginPath();
                  context.moveTo(lineTranslateX, translateY + lineTranslateY);
                  spacesNumber = text.split(' ').length - 1;
                  oneWord = spacesNumber === 0;
                  lineWidth =
                      align === JUSTIFY && lastLine && !oneWord
                          ? totalWidth - padding * 2
                          : width;
                  context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);
                  context.lineWidth = fontSize / 15;
                  context.strokeStyle = fill;
                  context.stroke();
                  context.restore();
              }
              if (letterSpacing !== 0 || align === JUSTIFY) {
                  spacesNumber = text.split(' ').length - 1;
                  for (var li = 0; li < text.length; li++) {
                      var letter = text[li];
                      if (letter === ' ' && n !== textArrLen - 1 && align === JUSTIFY) {
                          lineTranslateX += Math.floor((totalWidth - padding * 2 - width) / spacesNumber);
                      }
                      this._partialTextX = lineTranslateX;
                      this._partialTextY = translateY + lineTranslateY;
                      this._partialText = letter;
                      context.fillStrokeShape(this);
                      lineTranslateX +=
                          Math.round(this.measureSize(letter).width) + letterSpacing;
                  }
              }
              else {
                  this._partialTextX = lineTranslateX;
                  this._partialTextY = translateY + lineTranslateY;
                  this._partialText = text;
                  context.fillStrokeShape(this);
              }
              context.restore();
              if (textArrLen > 1) {
                  translateY += lineHeightPx;
              }
          }
      };
      Text.prototype._hitFunc = function (context) {
          var width = this.getWidth(), height = this.getHeight();
          context.beginPath();
          context.rect(0, 0, width, height);
          context.closePath();
          context.fillStrokeShape(this);
      };
      Text.prototype.setText = function (text) {
          var str = Util_1.Util._isString(text) ? text : (text || '').toString();
          this._setAttr(TEXT, str);
          return this;
      };
      Text.prototype.getWidth = function () {
          var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;
          return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;
      };
      Text.prototype.getHeight = function () {
          var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;
          return isAuto
              ? this.fontSize() * this.textArr.length * this.lineHeight() +
                  this.padding() * 2
              : this.attrs.height;
      };
      Text.prototype.getTextWidth = function () {
          return this.textWidth;
      };
      Text.prototype.getTextHeight = function () {
          Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');
          return this.textHeight;
      };
      Text.prototype.measureSize = function (text) {
          var _context = getDummyContext(), fontSize = this.fontSize(), metrics;
          _context.save();
          _context.font = this._getContextFont();
          metrics = _context.measureText(text);
          _context.restore();
          return {
              width: metrics.width,
              height: fontSize
          };
      };
      Text.prototype._getContextFont = function () {
          if (Global_1.Konva.UA.isIE) {
              return (this.fontStyle() +
                  SPACE +
                  this.fontSize() +
                  PX_SPACE +
                  this.fontFamily());
          }
          return (this.fontStyle() +
              SPACE +
              this.fontVariant() +
              SPACE +
              this.fontSize() +
              PX_SPACE +
              this.fontFamily());
      };
      Text.prototype._addTextLine = function (line) {
          if (this.align() === JUSTIFY) {
              line = line.trim();
          }
          var width = this._getTextWidth(line);
          return this.textArr.push({ text: line, width: width });
      };
      Text.prototype._getTextWidth = function (text) {
          var letterSpacing = this.letterSpacing();
          var length = text.length;
          return (getDummyContext().measureText(text).width +
              (length ? letterSpacing * (length - 1) : 0));
      };
      Text.prototype._setTextData = function () {
          var lines = this.text().split('\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis() && !shouldWrap;
          this.textArr = [];
          getDummyContext().font = this._getContextFont();
          var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;
          for (var i = 0, max = lines.length; i < max; ++i) {
              var line = lines[i];
              var lineWidth = this._getTextWidth(line);
              if (fixedWidth && lineWidth > maxWidth) {
                  while (line.length > 0) {
                      var low = 0, high = line.length, match = '', matchWidth = 0;
                      while (low < high) {
                          var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;
                          if (substrWidth <= maxWidth) {
                              low = mid + 1;
                              match = substr + (shouldAddEllipsis ? ELLIPSIS : '');
                              matchWidth = substrWidth;
                          }
                          else {
                              high = mid;
                          }
                      }
                      if (match) {
                          if (wrapAtWord) {
                              var wrapIndex;
                              var nextChar = line[match.length];
                              var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;
                              if (nextIsSpaceOrDash && matchWidth <= maxWidth) {
                                  wrapIndex = match.length;
                              }
                              else {
                                  wrapIndex =
                                      Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +
                                          1;
                              }
                              if (wrapIndex > 0) {
                                  low = wrapIndex;
                                  match = match.slice(0, low);
                                  matchWidth = this._getTextWidth(match);
                              }
                          }
                          match = match.trimRight();
                          this._addTextLine(match);
                          textWidth = Math.max(textWidth, matchWidth);
                          currentHeightPx += lineHeightPx;
                          if (!shouldWrap ||
                              (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx)) {
                              break;
                          }
                          line = line.slice(low);
                          line = line.trimLeft();
                          if (line.length > 0) {
                              lineWidth = this._getTextWidth(line);
                              if (lineWidth <= maxWidth) {
                                  this._addTextLine(line);
                                  currentHeightPx += lineHeightPx;
                                  textWidth = Math.max(textWidth, lineWidth);
                                  break;
                              }
                          }
                      }
                      else {
                          break;
                      }
                  }
              }
              else {
                  this._addTextLine(line);
                  currentHeightPx += lineHeightPx;
                  textWidth = Math.max(textWidth, lineWidth);
              }
              if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {
                  break;
              }
          }
          this.textHeight = fontSize;
          this.textWidth = textWidth;
      };
      Text.prototype.getStrokeScaleEnabled = function () {
          return true;
      };
      return Text;
  }(Shape_1.Shape));
  exports.Text = Text;
  Text.prototype._fillFunc = _fillFunc;
  Text.prototype._strokeFunc = _strokeFunc;
  Text.prototype.className = TEXT_UPPER;
  Text.prototype._attrsAffectingSize = [
      'text',
      'fontSize',
      'padding',
      'wrap',
      'lineHeight'
  ];
  Global_2._registerNode(Text);
  Factory_1.Factory.overWriteSetter(Text, 'width', Validators_1.getNumberOrAutoValidator());
  Factory_1.Factory.overWriteSetter(Text, 'height', Validators_1.getNumberOrAutoValidator());
  Factory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');
  Factory_1.Factory.addGetterSetter(Text, 'fontSize', 12, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);
  Factory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);
  Factory_1.Factory.addGetterSetter(Text, 'padding', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Text, 'align', LEFT);
  Factory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);
  Factory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Text, 'wrap', WORD);
  Factory_1.Factory.addGetterSetter(Text, 'ellipsis', false);
  Factory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Text, 'text', '', Validators_1.getStringValidator());
  Factory_1.Factory.addGetterSetter(Text, 'textDecoration', '');
  Util_1.Collection.mapMethods(Text);

  },{"../Factory":10,"../Global":12,"../Shape":17,"../Util":20,"../Validators":21}],58:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Path_1 = _dereq_("./Path");
  var Text_1 = _dereq_("./Text");
  var Validators_1 = _dereq_("../Validators");
  var Global_1 = _dereq_("../Global");
  var EMPTY_STRING = '', NORMAL = 'normal';
  function _fillFunc(context) {
      context.fillText(this.partialText, 0, 0);
  }
  function _strokeFunc(context) {
      context.strokeText(this.partialText, 0, 0);
  }
  var TextPath = (function (_super) {
      __extends(TextPath, _super);
      function TextPath(config) {
          var _this = _super.call(this, config) || this;
          _this.dummyCanvas = Util_1.Util.createCanvasElement();
          _this.dataArray = [];
          _this.dataArray = Path_1.Path.parsePathData(_this.attrs.data);
          _this.on('dataChange.konva', function () {
              this.dataArray = Path_1.Path.parsePathData(this.attrs.data);
              this._setTextData();
          });
          _this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva', _this._setTextData);
          if (config && config['getKerning']) {
              Util_1.Util.warn('getKerning TextPath API is deprecated. Please use "kerningFunc" instead.');
              _this.kerningFunc(config['getKerning']);
          }
          _this._setTextData();
          return _this;
      }
      TextPath.prototype._sceneFunc = function (context) {
          context.setAttr('font', this._getContextFont());
          context.setAttr('textBaseline', this.textBaseline());
          context.setAttr('textAlign', 'left');
          context.save();
          var textDecoration = this.textDecoration();
          var fill = this.fill();
          var fontSize = this.fontSize();
          var glyphInfo = this.glyphInfo;
          if (textDecoration === 'underline') {
              context.beginPath();
          }
          for (var i = 0; i < glyphInfo.length; i++) {
              context.save();
              var p0 = glyphInfo[i].p0;
              context.translate(p0.x, p0.y);
              context.rotate(glyphInfo[i].rotation);
              this.partialText = glyphInfo[i].text;
              context.fillStrokeShape(this);
              if (textDecoration === 'underline') {
                  if (i === 0) {
                      context.moveTo(0, fontSize / 2 + 1);
                  }
                  context.lineTo(fontSize, fontSize / 2 + 1);
              }
              context.restore();
          }
          if (textDecoration === 'underline') {
              context.strokeStyle = fill;
              context.lineWidth = fontSize / 20;
              context.stroke();
          }
          context.restore();
      };
      TextPath.prototype._hitFunc = function (context) {
          context.beginPath();
          var glyphInfo = this.glyphInfo;
          if (glyphInfo.length >= 1) {
              var p0 = glyphInfo[0].p0;
              context.moveTo(p0.x, p0.y);
          }
          for (var i = 0; i < glyphInfo.length; i++) {
              var p1 = glyphInfo[i].p1;
              context.lineTo(p1.x, p1.y);
          }
          context.setAttr('lineWidth', this.fontSize());
          context.setAttr('strokeStyle', this.colorKey);
          context.stroke();
      };
      TextPath.prototype.getTextWidth = function () {
          return this.textWidth;
      };
      TextPath.prototype.getTextHeight = function () {
          Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');
          return this.textHeight;
      };
      TextPath.prototype.setText = function (text) {
          return Text_1.Text.prototype.setText.call(this, text);
      };
      TextPath.prototype._getContextFont = function () {
          return Text_1.Text.prototype._getContextFont.call(this);
      };
      TextPath.prototype._getTextSize = function (text) {
          var dummyCanvas = this.dummyCanvas;
          var _context = dummyCanvas.getContext('2d');
          _context.save();
          _context.font = this._getContextFont();
          var metrics = _context.measureText(text);
          _context.restore();
          return {
              width: metrics.width,
              height: parseInt(this.attrs.fontSize, 10)
          };
      };
      TextPath.prototype._setTextData = function () {
          var that = this;
          var size = this._getTextSize(this.attrs.text);
          var letterSpacing = this.letterSpacing();
          var align = this.align();
          var kerningFunc = this.kerningFunc();
          this.textWidth = size.width;
          this.textHeight = size.height;
          var textFullWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);
          this.glyphInfo = [];
          var fullPathWidth = 0;
          for (var l = 0; l < that.dataArray.length; l++) {
              if (that.dataArray[l].pathLength > 0) {
                  fullPathWidth += that.dataArray[l].pathLength;
              }
          }
          var offset = 0;
          if (align === 'center') {
              offset = Math.max(0, fullPathWidth / 2 - textFullWidth / 2);
          }
          if (align === 'right') {
              offset = Math.max(0, fullPathWidth - textFullWidth);
          }
          var charArr = this.text().split('');
          var spacesNumber = this.text().split(' ').length - 1;
          var p0, p1, pathCmd;
          var pIndex = -1;
          var currentT = 0;
          var getNextPathSegment = function () {
              currentT = 0;
              var pathData = that.dataArray;
              for (var j = pIndex + 1; j < pathData.length; j++) {
                  if (pathData[j].pathLength > 0) {
                      pIndex = j;
                      return pathData[j];
                  }
                  else if (pathData[j].command === 'M') {
                      p0 = {
                          x: pathData[j].points[0],
                          y: pathData[j].points[1]
                      };
                  }
              }
              return {};
          };
          var findSegmentToFitCharacter = function (c) {
              var glyphWidth = that._getTextSize(c).width + letterSpacing;
              if (c === ' ' && align === 'justify') {
                  glyphWidth += (fullPathWidth - textFullWidth) / spacesNumber;
              }
              var currLen = 0;
              var attempts = 0;
              p1 = undefined;
              while (Math.abs(glyphWidth - currLen) / glyphWidth > 0.01 &&
                  attempts < 25) {
                  attempts++;
                  var cumulativePathLength = currLen;
                  while (pathCmd === undefined) {
                      pathCmd = getNextPathSegment();
                      if (pathCmd &&
                          cumulativePathLength + pathCmd.pathLength < glyphWidth) {
                          cumulativePathLength += pathCmd.pathLength;
                          pathCmd = undefined;
                      }
                  }
                  if (pathCmd === {} || p0 === undefined) {
                      return undefined;
                  }
                  var needNewSegment = false;
                  switch (pathCmd.command) {
                      case 'L':
                          if (Path_1.Path.getLineLength(p0.x, p0.y, pathCmd.points[0], pathCmd.points[1]) > glyphWidth) {
                              p1 = Path_1.Path.getPointOnLine(glyphWidth, p0.x, p0.y, pathCmd.points[0], pathCmd.points[1], p0.x, p0.y);
                          }
                          else {
                              pathCmd = undefined;
                          }
                          break;
                      case 'A':
                          var start = pathCmd.points[4];
                          var dTheta = pathCmd.points[5];
                          var end = pathCmd.points[4] + dTheta;
                          if (currentT === 0) {
                              currentT = start + 0.00000001;
                          }
                          else if (glyphWidth > currLen) {
                              currentT += ((Math.PI / 180.0) * dTheta) / Math.abs(dTheta);
                          }
                          else {
                              currentT -= ((Math.PI / 360.0) * dTheta) / Math.abs(dTheta);
                          }
                          if ((dTheta < 0 && currentT < end) ||
                              (dTheta >= 0 && currentT > end)) {
                              currentT = end;
                              needNewSegment = true;
                          }
                          p1 = Path_1.Path.getPointOnEllipticalArc(pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], currentT, pathCmd.points[6]);
                          break;
                      case 'C':
                          if (currentT === 0) {
                              if (glyphWidth > pathCmd.pathLength) {
                                  currentT = 0.00000001;
                              }
                              else {
                                  currentT = glyphWidth / pathCmd.pathLength;
                              }
                          }
                          else if (glyphWidth > currLen) {
                              currentT += (glyphWidth - currLen) / pathCmd.pathLength;
                          }
                          else {
                              currentT -= (currLen - glyphWidth) / pathCmd.pathLength;
                          }
                          if (currentT > 1.0) {
                              currentT = 1.0;
                              needNewSegment = true;
                          }
                          p1 = Path_1.Path.getPointOnCubicBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], pathCmd.points[4], pathCmd.points[5]);
                          break;
                      case 'Q':
                          if (currentT === 0) {
                              currentT = glyphWidth / pathCmd.pathLength;
                          }
                          else if (glyphWidth > currLen) {
                              currentT += (glyphWidth - currLen) / pathCmd.pathLength;
                          }
                          else {
                              currentT -= (currLen - glyphWidth) / pathCmd.pathLength;
                          }
                          if (currentT > 1.0) {
                              currentT = 1.0;
                              needNewSegment = true;
                          }
                          p1 = Path_1.Path.getPointOnQuadraticBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3]);
                          break;
                  }
                  if (p1 !== undefined) {
                      currLen = Path_1.Path.getLineLength(p0.x, p0.y, p1.x, p1.y);
                  }
                  if (needNewSegment) {
                      needNewSegment = false;
                      pathCmd = undefined;
                  }
              }
          };
          var testChar = 'C';
          var glyphWidth = that._getTextSize(testChar).width + letterSpacing;
          var lettersInOffset = offset / glyphWidth - 1;
          for (var k = 0; k < lettersInOffset; k++) {
              findSegmentToFitCharacter(testChar);
              if (p0 === undefined || p1 === undefined) {
                  break;
              }
              p0 = p1;
          }
          for (var i = 0; i < charArr.length; i++) {
              findSegmentToFitCharacter(charArr[i]);
              if (p0 === undefined || p1 === undefined) {
                  break;
              }
              var width = Path_1.Path.getLineLength(p0.x, p0.y, p1.x, p1.y);
              var kern = 0;
              if (kerningFunc) {
                  try {
                      kern = kerningFunc(charArr[i - 1], charArr[i]) * this.fontSize();
                  }
                  catch (e) {
                      kern = 0;
                  }
              }
              p0.x += kern;
              p1.x += kern;
              this.textWidth += kern;
              var midpoint = Path_1.Path.getPointOnLine(kern + width / 2.0, p0.x, p0.y, p1.x, p1.y);
              var rotation = Math.atan2(p1.y - p0.y, p1.x - p0.x);
              this.glyphInfo.push({
                  transposeX: midpoint.x,
                  transposeY: midpoint.y,
                  text: charArr[i],
                  rotation: rotation,
                  p0: p0,
                  p1: p1
              });
              p0 = p1;
          }
      };
      TextPath.prototype.getSelfRect = function () {
          if (!this.glyphInfo.length) {
              return {
                  x: 0,
                  y: 0,
                  width: 0,
                  height: 0
              };
          }
          var points = [];
          this.glyphInfo.forEach(function (info) {
              points.push(info.p0.x);
              points.push(info.p0.y);
              points.push(info.p1.x);
              points.push(info.p1.y);
          });
          var minX = points[0] || 0;
          var maxX = points[0] || 0;
          var minY = points[1] || 0;
          var maxY = points[1] || 0;
          var x, y;
          for (var i = 0; i < points.length / 2; i++) {
              x = points[i * 2];
              y = points[i * 2 + 1];
              minX = Math.min(minX, x);
              maxX = Math.max(maxX, x);
              minY = Math.min(minY, y);
              maxY = Math.max(maxY, y);
          }
          var fontSize = this.fontSize();
          return {
              x: Math.round(minX) - fontSize / 2,
              y: Math.round(minY) - fontSize / 2,
              width: Math.round(maxX - minX) + fontSize,
              height: Math.round(maxY - minY) + fontSize
          };
      };
      return TextPath;
  }(Shape_1.Shape));
  exports.TextPath = TextPath;
  TextPath.prototype._fillFunc = _fillFunc;
  TextPath.prototype._strokeFunc = _strokeFunc;
  TextPath.prototype._fillFuncHit = _fillFunc;
  TextPath.prototype._strokeFuncHit = _strokeFunc;
  TextPath.prototype.className = 'TextPath';
  TextPath.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];
  Global_1._registerNode(TextPath);
  Factory_1.Factory.addGetterSetter(TextPath, 'data');
  Factory_1.Factory.addGetterSetter(TextPath, 'fontFamily', 'Arial');
  Factory_1.Factory.addGetterSetter(TextPath, 'fontSize', 12, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(TextPath, 'fontStyle', NORMAL);
  Factory_1.Factory.addGetterSetter(TextPath, 'align', 'left');
  Factory_1.Factory.addGetterSetter(TextPath, 'letterSpacing', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(TextPath, 'textBaseline', 'middle');
  Factory_1.Factory.addGetterSetter(TextPath, 'fontVariant', NORMAL);
  Factory_1.Factory.addGetterSetter(TextPath, 'text', EMPTY_STRING);
  Factory_1.Factory.addGetterSetter(TextPath, 'textDecoration', null);
  Factory_1.Factory.addGetterSetter(TextPath, 'kerningFunc', null);
  Util_1.Collection.mapMethods(TextPath);

  },{"../Factory":10,"../Global":12,"../Shape":17,"../Util":20,"../Validators":21,"./Path":51,"./Text":57}],59:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Node_1 = _dereq_("../Node");
  var Shape_1 = _dereq_("../Shape");
  var Rect_1 = _dereq_("./Rect");
  var Group_1 = _dereq_("../Group");
  var Global_1 = _dereq_("../Global");
  var Validators_1 = _dereq_("../Validators");
  var Global_2 = _dereq_("../Global");
  var EVENTS_NAME = 'tr-konva';
  var ATTR_CHANGE_LIST = [
      'resizeEnabledChange',
      'rotateAnchorOffsetChange',
      'rotateEnabledChange',
      'enabledAnchorsChange',
      'anchorSizeChange',
      'borderEnabledChange',
      'borderStrokeChange',
      'borderStrokeWidthChange',
      'borderDashChange',
      'anchorStrokeChange',
      'anchorStrokeWidthChange',
      'anchorFillChange',
      'anchorCornerRadiusChange',
      'ignoreStrokeChange'
  ]
      .map(function (e) { return e + ("." + EVENTS_NAME); })
      .join(' ');
  var NODE_RECT = 'nodeRect';
  var TRANSFORM_CHANGE_STR = [
      'widthChange',
      'heightChange',
      'scaleXChange',
      'scaleYChange',
      'skewXChange',
      'skewYChange',
      'rotationChange',
      'offsetXChange',
      'offsetYChange',
      'transformsEnabledChange',
      'strokeWidthChange'
  ]
      .map(function (e) { return e + ("." + EVENTS_NAME); })
      .join(' ');
  var ANGLES = {
      'top-left': -45,
      'top-center': 0,
      'top-right': 45,
      'middle-right': -90,
      'middle-left': 90,
      'bottom-left': -135,
      'bottom-center': 180,
      'bottom-right': 135
  };
  function getCursor(anchorName, rad, isMirrored) {
      if (anchorName === 'rotater') {
          return 'crosshair';
      }
      rad += Util_1.Util._degToRad(ANGLES[anchorName] || 0);
      if (isMirrored) {
          rad *= -1;
      }
      var angle = ((Util_1.Util._radToDeg(rad) % 360) + 360) % 360;
      if (Util_1.Util._inRange(angle, 315 + 22.5, 360) || Util_1.Util._inRange(angle, 0, 22.5)) {
          return 'ns-resize';
      }
      else if (Util_1.Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {
          return 'nesw-resize';
      }
      else if (Util_1.Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {
          return 'ew-resize';
      }
      else if (Util_1.Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {
          return 'nwse-resize';
      }
      else if (Util_1.Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {
          return 'ns-resize';
      }
      else if (Util_1.Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {
          return 'nesw-resize';
      }
      else if (Util_1.Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {
          return 'ew-resize';
      }
      else if (Util_1.Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {
          return 'nwse-resize';
      }
      else {
          Util_1.Util.error('Transformer has unknown angle for cursor detection: ' + angle);
          return 'pointer';
      }
  }
  var ANCHORS_NAMES = [
      'top-left',
      'top-center',
      'top-right',
      'middle-right',
      'middle-left',
      'bottom-left',
      'bottom-center',
      'bottom-right'
  ];
  var MAX_SAFE_INTEGER = 100000000;
  var Transformer = (function (_super) {
      __extends(Transformer, _super);
      function Transformer(config) {
          var _this = _super.call(this, config) || this;
          _this._transforming = false;
          _this._createElements();
          _this._handleMouseMove = _this._handleMouseMove.bind(_this);
          _this._handleMouseUp = _this._handleMouseUp.bind(_this);
          _this.update = _this.update.bind(_this);
          _this.on(ATTR_CHANGE_LIST, _this.update);
          if (_this.getNode()) {
              _this.update();
          }
          return _this;
      }
      Transformer.prototype.attachTo = function (node) {
          this.setNode(node);
          return this;
      };
      Transformer.prototype.setNode = function (node) {
          var _this = this;
          if (this._node) {
              this.detach();
          }
          this._node = node;
          this._resetTransformCache();
          var additionalEvents = node._attrsAffectingSize
              .map(function (prop) { return prop + 'Change.' + EVENTS_NAME; })
              .join(' ');
          var onChange = function () {
              _this._resetTransformCache();
              if (!_this._transforming) {
                  _this.update();
              }
          };
          node.on(additionalEvents, onChange);
          node.on(TRANSFORM_CHANGE_STR, onChange);
          node.on("xChange." + EVENTS_NAME + " yChange." + EVENTS_NAME, function () {
              return _this._resetTransformCache();
          });
          var elementsCreated = !!this.findOne('.top-left');
          if (elementsCreated) {
              this.update();
          }
          return this;
      };
      Transformer.prototype.getNode = function () {
          return this._node;
      };
      Transformer.prototype.detach = function () {
          if (this.getNode()) {
              this.getNode().off('.' + EVENTS_NAME);
              this._node = undefined;
          }
          this._resetTransformCache();
      };
      Transformer.prototype._resetTransformCache = function () {
          this._clearCache(NODE_RECT);
          this._clearCache('transform');
          this._clearSelfAndDescendantCache('absoluteTransform');
      };
      Transformer.prototype._getNodeRect = function () {
          return this._getCache(NODE_RECT, this.__getNodeRect);
      };
      Transformer.prototype.__getNodeRect = function () {
          var node = this.getNode();
          if (!node) {
              return {
                  x: -MAX_SAFE_INTEGER,
                  y: -MAX_SAFE_INTEGER,
                  width: 0,
                  height: 0,
                  rotation: 0
              };
          }
          if (node.parent && this.parent && node.parent !== this.parent) {
              Util_1.Util.warn('Transformer and attached node have different parents. Konva does not support such case right now. Please move Transformer to the parent of attaching node.');
          }
          var rect = node.getClientRect({
              skipTransform: true,
              skipShadow: true,
              skipStroke: this.ignoreStroke()
          });
          var rotation = Global_1.Konva.getAngle(node.rotation());
          var dx = rect.x * node.scaleX() - node.offsetX() * node.scaleX();
          var dy = rect.y * node.scaleY() - node.offsetY() * node.scaleY();
          return {
              x: node.x() + dx * Math.cos(rotation) + dy * Math.sin(-rotation),
              y: node.y() + dy * Math.cos(rotation) + dx * Math.sin(rotation),
              width: rect.width * node.scaleX(),
              height: rect.height * node.scaleY(),
              rotation: node.rotation()
          };
      };
      Transformer.prototype.getX = function () {
          return this._getNodeRect().x;
      };
      Transformer.prototype.getY = function () {
          return this._getNodeRect().y;
      };
      Transformer.prototype.getRotation = function () {
          return this._getNodeRect().rotation;
      };
      Transformer.prototype.getWidth = function () {
          return this._getNodeRect().width;
      };
      Transformer.prototype.getHeight = function () {
          return this._getNodeRect().height;
      };
      Transformer.prototype._createElements = function () {
          this._createBack();
          ANCHORS_NAMES.forEach(function (name) {
              this._createAnchor(name);
          }.bind(this));
          this._createAnchor('rotater');
      };
      Transformer.prototype._createAnchor = function (name) {
          var _this = this;
          var anchor = new Rect_1.Rect({
              stroke: 'rgb(0, 161, 255)',
              fill: 'white',
              strokeWidth: 1,
              name: name + ' _anchor',
              dragDistance: 0,
              draggable: true
          });
          var self = this;
          anchor.on('mousedown touchstart', function (e) {
              self._handleMouseDown(e);
          });
          anchor.on('dragstart', function (e) {
              e.cancelBubble = true;
          });
          anchor.on('dragmove', function (e) {
              e.cancelBubble = true;
          });
          anchor.on('dragend', function (e) {
              e.cancelBubble = true;
          });
          anchor.on('mouseenter', function () {
              var rad = Global_1.Konva.getAngle(_this.rotation());
              var scale = _this.getNode().getAbsoluteScale();
              var isMirrored = scale.y * scale.x < 0;
              var cursor = getCursor(name, rad, isMirrored);
              anchor.getStage().content.style.cursor = cursor;
              _this._cursorChange = true;
          });
          anchor.on('mouseout', function () {
              if (!anchor.getStage() || !anchor.getParent()) {
                  return;
              }
              anchor.getStage().content.style.cursor = '';
              _this._cursorChange = false;
          });
          this.add(anchor);
      };
      Transformer.prototype._createBack = function () {
          var back = new Shape_1.Shape({
              name: 'back',
              width: 0,
              height: 0,
              listening: false,
              sceneFunc: function (ctx) {
                  var tr = this.getParent();
                  var padding = tr.padding();
                  ctx.beginPath();
                  ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);
                  ctx.moveTo(this.width() / 2, -padding);
                  if (tr.rotateEnabled()) {
                      ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util_1.Util._sign(this.height()) - padding);
                  }
                  ctx.fillStrokeShape(this);
              }
          });
          this.add(back);
      };
      Transformer.prototype._handleMouseDown = function (e) {
          this._movingAnchorName = e.target.name().split(' ')[0];
          var attrs = this._getNodeRect();
          var width = attrs.width;
          var height = attrs.height;
          var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));
          this.sin = Math.abs(height / hypotenuse);
          this.cos = Math.abs(width / hypotenuse);
          window.addEventListener('mousemove', this._handleMouseMove);
          window.addEventListener('touchmove', this._handleMouseMove);
          window.addEventListener('mouseup', this._handleMouseUp, true);
          window.addEventListener('touchend', this._handleMouseUp, true);
          this._transforming = true;
          this._fire('transformstart', { evt: e });
          this.getNode()._fire('transformstart', { evt: e });
      };
      Transformer.prototype._handleMouseMove = function (e) {
          var x, y, newHypotenuse;
          var anchorNode = this.findOne('.' + this._movingAnchorName);
          var stage = anchorNode.getStage();
          var box = stage.getContent().getBoundingClientRect();
          var zeroPoint = {
              x: box.left,
              y: box.top
          };
          var pointerPos = {
              left: e.clientX !== undefined ? e.clientX : e.touches[0].clientX,
              top: e.clientX !== undefined ? e.clientY : e.touches[0].clientY
          };
          var newAbsPos = {
              x: pointerPos.left - zeroPoint.x,
              y: pointerPos.top - zeroPoint.y
          };
          anchorNode.setAbsolutePosition(newAbsPos);
          var keepProportion = this.keepRatio() || e.shiftKey;
          var padding = this.padding();
          if (this._movingAnchorName === 'top-left') {
              if (keepProportion) {
                  newHypotenuse = Math.sqrt(Math.pow(this.findOne('.bottom-right').x() - anchorNode.x() - padding * 2, 2) +
                      Math.pow(this.findOne('.bottom-right').y() - anchorNode.y() - padding * 2, 2));
                  var reverseX = this.findOne('.top-left').x() > this.findOne('.bottom-right').x()
                      ? -1
                      : 1;
                  var reverseY = this.findOne('.top-left').y() > this.findOne('.bottom-right').y()
                      ? -1
                      : 1;
                  x = newHypotenuse * this.cos * reverseX;
                  y = newHypotenuse * this.sin * reverseY;
                  this.findOne('.top-left').x(this.findOne('.bottom-right').x() - x - padding * 2);
                  this.findOne('.top-left').y(this.findOne('.bottom-right').y() - y - padding * 2);
              }
          }
          else if (this._movingAnchorName === 'top-center') {
              this.findOne('.top-left').y(anchorNode.y());
          }
          else if (this._movingAnchorName === 'top-right') {
              if (keepProportion) {
                  newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - this.findOne('.bottom-left').x() - padding * 2, 2) +
                      Math.pow(this.findOne('.bottom-left').y() - anchorNode.y() - padding * 2, 2));
                  var reverseX = this.findOne('.top-right').x() < this.findOne('.top-left').x()
                      ? -1
                      : 1;
                  var reverseY = this.findOne('.top-right').y() > this.findOne('.bottom-left').y()
                      ? -1
                      : 1;
                  x = newHypotenuse * this.cos * reverseX;
                  y = newHypotenuse * this.sin * reverseY;
                  this.findOne('.top-right').x(x + padding);
                  this.findOne('.top-right').y(this.findOne('.bottom-left').y() - y - padding * 2);
              }
              var pos = anchorNode.position();
              this.findOne('.top-left').y(pos.y);
              this.findOne('.bottom-right').x(pos.x);
          }
          else if (this._movingAnchorName === 'middle-left') {
              this.findOne('.top-left').x(anchorNode.x());
          }
          else if (this._movingAnchorName === 'middle-right') {
              this.findOne('.bottom-right').x(anchorNode.x());
          }
          else if (this._movingAnchorName === 'bottom-left') {
              if (keepProportion) {
                  newHypotenuse = Math.sqrt(Math.pow(this.findOne('.top-right').x() - anchorNode.x() - padding * 2, 2) +
                      Math.pow(anchorNode.y() - this.findOne('.top-right').y() - padding * 2, 2));
                  var reverseX = this.findOne('.top-right').x() < this.findOne('.bottom-left').x()
                      ? -1
                      : 1;
                  var reverseY = this.findOne('.bottom-right').y() < this.findOne('.top-left').y()
                      ? -1
                      : 1;
                  x = newHypotenuse * this.cos * reverseX;
                  y = newHypotenuse * this.sin * reverseY;
                  this.findOne('.bottom-left').x(this.findOne('.top-right').x() - x - padding * 2);
                  this.findOne('.bottom-left').y(y + padding);
              }
              pos = anchorNode.position();
              this.findOne('.top-left').x(pos.x);
              this.findOne('.bottom-right').y(pos.y);
          }
          else if (this._movingAnchorName === 'bottom-center') {
              this.findOne('.bottom-right').y(anchorNode.y());
          }
          else if (this._movingAnchorName === 'bottom-right') {
              if (keepProportion) {
                  newHypotenuse = Math.sqrt(Math.pow(this.findOne('.bottom-right').x() - padding, 2) +
                      Math.pow(this.findOne('.bottom-right').y() - padding, 2));
                  var reverseX = this.findOne('.top-left').x() > this.findOne('.bottom-right').x()
                      ? -1
                      : 1;
                  var reverseY = this.findOne('.top-left').y() > this.findOne('.bottom-right').y()
                      ? -1
                      : 1;
                  x = newHypotenuse * this.cos * reverseX;
                  y = newHypotenuse * this.sin * reverseY;
                  this.findOne('.bottom-right').x(x + padding);
                  this.findOne('.bottom-right').y(y + padding);
              }
          }
          else if (this._movingAnchorName === 'rotater') {
              var attrs = this._getNodeRect();
              x = anchorNode.x() - attrs.width / 2;
              y = -anchorNode.y() + attrs.height / 2;
              var dAlpha = Math.atan2(-y, x) + Math.PI / 2;
              if (attrs.height < 0) {
                  dAlpha -= Math.PI;
              }
              var rot = Global_1.Konva.getAngle(this.rotation());
              var newRotation = Util_1.Util._radToDeg(rot) + Util_1.Util._radToDeg(dAlpha);
              var alpha = Global_1.Konva.getAngle(this.getNode().rotation());
              var newAlpha = Util_1.Util._degToRad(newRotation);
              var snaps = this.rotationSnaps();
              var offset = 0.1;
              for (var i = 0; i < snaps.length; i++) {
                  var angle = Global_1.Konva.getAngle(snaps[i]);
                  var dif = Math.abs(angle - Util_1.Util._degToRad(newRotation)) % (Math.PI * 2);
                  if (dif < offset) {
                      newRotation = Util_1.Util._radToDeg(angle);
                      newAlpha = Util_1.Util._degToRad(newRotation);
                  }
              }
              var dx = padding;
              var dy = padding;
              this._fitNodeInto({
                  rotation: Global_1.Konva.angleDeg ? newRotation : Util_1.Util._degToRad(newRotation),
                  x: attrs.x +
                      (attrs.width / 2 + padding) *
                          (Math.cos(alpha) - Math.cos(newAlpha)) +
                      (attrs.height / 2 + padding) *
                          (Math.sin(-alpha) - Math.sin(-newAlpha)) -
                      (dx * Math.cos(rot) + dy * Math.sin(-rot)),
                  y: attrs.y +
                      (attrs.height / 2 + padding) *
                          (Math.cos(alpha) - Math.cos(newAlpha)) +
                      (attrs.width / 2 + padding) *
                          (Math.sin(alpha) - Math.sin(newAlpha)) -
                      (dy * Math.cos(rot) + dx * Math.sin(rot)),
                  width: attrs.width + padding * 2,
                  height: attrs.height + padding * 2
              }, e);
          }
          else {
              console.error(new Error('Wrong position argument of selection resizer: ' +
                  this._movingAnchorName));
          }
          if (this._movingAnchorName === 'rotater') {
              return;
          }
          var centeredScaling = this.centeredScaling() || e.altKey;
          if (centeredScaling) {
              var topLeft = this.findOne('.top-left');
              var bottomRight = this.findOne('.bottom-right');
              var topOffsetX = topLeft.x() + padding;
              var topOffsetY = topLeft.y() + padding;
              var bottomOffsetX = this.getWidth() - bottomRight.x() + padding;
              var bottomOffsetY = this.getHeight() - bottomRight.y() + padding;
              bottomRight.move({
                  x: -topOffsetX,
                  y: -topOffsetY
              });
              topLeft.move({
                  x: bottomOffsetX,
                  y: bottomOffsetY
              });
          }
          var absPos = this.findOne('.top-left').getAbsolutePosition(this.getParent());
          x = absPos.x;
          y = absPos.y;
          var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();
          var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();
          this._fitNodeInto({
              x: x + this.offsetX(),
              y: y + this.offsetY(),
              width: width,
              height: height
          }, e);
      };
      Transformer.prototype._handleMouseUp = function (e) {
          this._removeEvents(e);
      };
      Transformer.prototype._removeEvents = function (e) {
          if (this._transforming) {
              this._transforming = false;
              window.removeEventListener('mousemove', this._handleMouseMove);
              window.removeEventListener('touchmove', this._handleMouseMove);
              window.removeEventListener('mouseup', this._handleMouseUp, true);
              window.removeEventListener('touchend', this._handleMouseUp, true);
              this._fire('transformend', { evt: e });
              var node = this.getNode();
              if (node) {
                  node.fire('transformend', { evt: e });
              }
          }
      };
      Transformer.prototype._fitNodeInto = function (newAttrs, evt) {
          var boundBoxFunc = this.boundBoxFunc();
          if (boundBoxFunc) {
              var oldAttrs = this._getNodeRect();
              newAttrs = boundBoxFunc.call(this, oldAttrs, newAttrs);
          }
          var node = this.getNode();
          if (newAttrs.rotation !== undefined) {
              this.getNode().rotation(newAttrs.rotation);
          }
          var pure = node.getClientRect({
              skipTransform: true,
              skipShadow: true,
              skipStroke: this.ignoreStroke()
          });
          var padding = this.padding();
          var scaleX = pure.width ? (newAttrs.width - padding * 2) / pure.width : 1;
          var scaleY = pure.height
              ? (newAttrs.height - padding * 2) / pure.height
              : 1;
          var rotation = Global_1.Konva.getAngle(node.rotation());
          var dx = pure.x * scaleX - padding - node.offsetX() * scaleX;
          var dy = pure.y * scaleY - padding - node.offsetY() * scaleY;
          this.getNode().setAttrs({
              scaleX: scaleX,
              scaleY: scaleY,
              x: newAttrs.x - (dx * Math.cos(rotation) + dy * Math.sin(-rotation)),
              y: newAttrs.y - (dy * Math.cos(rotation) + dx * Math.sin(rotation))
          });
          this._fire('transform', { evt: evt });
          this.getNode()._fire('transform', { evt: evt });
          this.update();
          this.getLayer().batchDraw();
      };
      Transformer.prototype.forceUpdate = function () {
          this._resetTransformCache();
          this.update();
      };
      Transformer.prototype.update = function () {
          var _this = this;
          var attrs = this._getNodeRect();
          var node = this.getNode();
          var scale = { x: 1, y: 1 };
          if (node && node.getParent()) {
              scale = node.getParent().getAbsoluteScale();
          }
          var invertedScale = {
              x: 1 / scale.x,
              y: 1 / scale.y
          };
          var width = attrs.width;
          var height = attrs.height;
          var enabledAnchors = this.enabledAnchors();
          var resizeEnabled = this.resizeEnabled();
          var padding = this.padding();
          var anchorSize = this.anchorSize();
          this.find('._anchor').each(function (node) {
              return node.setAttrs({
                  width: anchorSize,
                  height: anchorSize,
                  offsetX: anchorSize / 2,
                  offsetY: anchorSize / 2,
                  stroke: _this.anchorStroke(),
                  strokeWidth: _this.anchorStrokeWidth(),
                  fill: _this.anchorFill(),
                  cornerRadius: _this.anchorCornerRadius()
              });
          });
          this.findOne('.top-left').setAttrs({
              x: -padding,
              y: -padding,
              scale: invertedScale,
              visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0
          });
          this.findOne('.top-center').setAttrs({
              x: width / 2,
              y: -padding,
              scale: invertedScale,
              visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0
          });
          this.findOne('.top-right').setAttrs({
              x: width + padding,
              y: -padding,
              scale: invertedScale,
              visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0
          });
          this.findOne('.middle-left').setAttrs({
              x: -padding,
              y: height / 2,
              scale: invertedScale,
              visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0
          });
          this.findOne('.middle-right').setAttrs({
              x: width + padding,
              y: height / 2,
              scale: invertedScale,
              visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0
          });
          this.findOne('.bottom-left').setAttrs({
              x: -padding,
              y: height + padding,
              scale: invertedScale,
              visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0
          });
          this.findOne('.bottom-center').setAttrs({
              x: width / 2,
              y: height + padding,
              scale: invertedScale,
              visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0
          });
          this.findOne('.bottom-right').setAttrs({
              x: width + padding,
              y: height + padding,
              scale: invertedScale,
              visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0
          });
          var scaledRotateAnchorOffset = -this.rotateAnchorOffset() * Math.abs(invertedScale.y);
          this.findOne('.rotater').setAttrs({
              x: width / 2,
              y: scaledRotateAnchorOffset * Util_1.Util._sign(height) - padding,
              scale: invertedScale,
              visible: this.rotateEnabled()
          });
          this.findOne('.back').setAttrs({
              width: width * scale.x,
              height: height * scale.y,
              scale: invertedScale,
              visible: this.borderEnabled(),
              stroke: this.borderStroke(),
              strokeWidth: this.borderStrokeWidth(),
              dash: this.borderDash()
          });
      };
      Transformer.prototype.isTransforming = function () {
          return this._transforming;
      };
      Transformer.prototype.stopTransform = function () {
          if (this._transforming) {
              this._removeEvents();
              var anchorNode = this.findOne('.' + this._movingAnchorName);
              if (anchorNode) {
                  anchorNode.stopDrag();
              }
          }
      };
      Transformer.prototype.destroy = function () {
          if (this.getStage() && this._cursorChange) {
              this.getStage().content.style.cursor = '';
          }
          Group_1.Group.prototype.destroy.call(this);
          this.detach();
          this._removeEvents();
          return this;
      };
      Transformer.prototype.toObject = function () {
          return Node_1.Node.prototype.toObject.call(this);
      };
      return Transformer;
  }(Group_1.Group));
  exports.Transformer = Transformer;
  function validateAnchors(val) {
      if (!(val instanceof Array)) {
          Util_1.Util.warn('enabledAnchors value should be an array');
      }
      if (val instanceof Array) {
          val.forEach(function (name) {
              if (ANCHORS_NAMES.indexOf(name) === -1) {
                  Util_1.Util.warn('Unknown anchor name: ' +
                      name +
                      '. Available names are: ' +
                      ANCHORS_NAMES.join(', '));
              }
          });
      }
      return val || [];
  }
  Transformer.prototype.className = 'Transformer';
  Global_2._registerNode(Transformer);
  Factory_1.Factory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);
  Factory_1.Factory.addGetterSetter(Transformer, 'resizeEnabled', true);
  Factory_1.Factory.addGetterSetter(Transformer, 'anchorSize', 10, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Transformer, 'rotateEnabled', true);
  Factory_1.Factory.addGetterSetter(Transformer, 'rotationSnaps', []);
  Factory_1.Factory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Transformer, 'borderEnabled', true);
  Factory_1.Factory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');
  Factory_1.Factory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Transformer, 'anchorFill', 'white');
  Factory_1.Factory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');
  Factory_1.Factory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Transformer, 'borderDash');
  Factory_1.Factory.addGetterSetter(Transformer, 'keepRatio', true);
  Factory_1.Factory.addGetterSetter(Transformer, 'centeredScaling', false);
  Factory_1.Factory.addGetterSetter(Transformer, 'ignoreStroke', false);
  Factory_1.Factory.addGetterSetter(Transformer, 'padding', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Transformer, 'node');
  Factory_1.Factory.addGetterSetter(Transformer, 'boundBoxFunc');
  Factory_1.Factory.backCompat(Transformer, {
      lineEnabled: 'borderEnabled',
      rotateHandlerOffset: 'rotateAnchorOffset',
      enabledHandlers: 'enabledAnchors'
  });
  Util_1.Collection.mapMethods(Transformer);

  },{"../Factory":10,"../Global":12,"../Group":13,"../Node":15,"../Shape":17,"../Util":20,"../Validators":21,"./Rect":52}],60:[function(_dereq_,module,exports){
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var Util_1 = _dereq_("../Util");
  var Factory_1 = _dereq_("../Factory");
  var Shape_1 = _dereq_("../Shape");
  var Global_1 = _dereq_("../Global");
  var Validators_1 = _dereq_("../Validators");
  var Global_2 = _dereq_("../Global");
  var Wedge = (function (_super) {
      __extends(Wedge, _super);
      function Wedge() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      Wedge.prototype._sceneFunc = function (context) {
          context.beginPath();
          context.arc(0, 0, this.radius(), 0, Global_1.Konva.getAngle(this.angle()), this.clockwise());
          context.lineTo(0, 0);
          context.closePath();
          context.fillStrokeShape(this);
      };
      Wedge.prototype.getWidth = function () {
          return this.radius() * 2;
      };
      Wedge.prototype.getHeight = function () {
          return this.radius() * 2;
      };
      Wedge.prototype.setWidth = function (width) {
          this.radius(width / 2);
      };
      Wedge.prototype.setHeight = function (height) {
          this.radius(height / 2);
      };
      return Wedge;
  }(Shape_1.Shape));
  exports.Wedge = Wedge;
  Wedge.prototype.className = 'Wedge';
  Wedge.prototype._centroid = true;
  Wedge.prototype._attrsAffectingSize = ['radius'];
  Global_2._registerNode(Wedge);
  Factory_1.Factory.addGetterSetter(Wedge, 'radius', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Wedge, 'angle', 0, Validators_1.getNumberValidator());
  Factory_1.Factory.addGetterSetter(Wedge, 'clockwise', false);
  Factory_1.Factory.backCompat(Wedge, {
      angleDeg: 'angle',
      getAngleDeg: 'getAngle',
      setAngleDeg: 'setAngle'
  });
  Util_1.Collection.mapMethods(Wedge);

  },{"../Factory":10,"../Global":12,"../Shape":17,"../Util":20,"../Validators":21}],61:[function(_dereq_,module,exports){
  // shim for using process in browser
  var process = module.exports = {};

  // cached from whatever global is present so that test runners that stub it
  // don't break things.  But we need to wrap it in a try catch in case it is
  // wrapped in strict mode code which doesn't define any globals.  It's inside a
  // function because try/catches deoptimize in certain engines.

  var cachedSetTimeout;
  var cachedClearTimeout;

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  (function () {
      try {
          if (typeof setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
          } else {
              cachedSetTimeout = defaultSetTimout;
          }
      } catch (e) {
          cachedSetTimeout = defaultSetTimout;
      }
      try {
          if (typeof clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
          } else {
              cachedClearTimeout = defaultClearTimeout;
          }
      } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
      }
  } ());
  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }

  process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  };

  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = ''; // empty string to avoid regexp issues
  process.versions = {};

  function noop() {}

  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;
  process.prependListener = noop;
  process.prependOnceListener = noop;

  process.listeners = function (name) { return [] };

  process.binding = function (name) {
      throw new Error('process.binding is not supported');
  };

  process.cwd = function () { return '/' };
  process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
  };
  process.umask = function() { return 0; };

  },{}],62:[function(_dereq_,module,exports){

  /**
   * ArrayBuffer adapter consumes binary waveform data.
   * It is used as a data abstraction layer by `WaveformData`.
   *
   * This is supposed to be the fastest adapter ever:
   * * **Pros**: working directly in memory, everything is done by reference
   *   (including the offsetting)
   * * **Cons**: binary data are hardly readable without data format knowledge
   *   (and this is why this adapter exists).
   *
   * @param {ArrayBuffer} buffer
   * @constructor
   */

  function WaveformDataArrayBufferAdapter(buffer) {
    this._data = new DataView(buffer);
    this._offset = this.version === 2 ? 24 : 20;
  }

  /**
   * Detects if a set of data is suitable for the ArrayBuffer adapter.
   * It is used internally by `WaveformData.create` so you should not bother using it.
   *
   * @static
   * @param {Mixed} data
   * @returns {boolean}
   */

  WaveformDataArrayBufferAdapter.isCompatible = function isCompatible(data) {
    const isCompatible = data && typeof data === "object" && "byteLength" in data;

    if (isCompatible) {
      const view = new DataView(data);
      const version = view.getInt32(0, true);

      if (version !== 1 && version !== 2) {
        throw new TypeError("This waveform data version not supported.");
      }
    }

    return isCompatible;
  };

  /**
   * @namespace WaveformDataArrayBufferAdapter
   */

   WaveformDataArrayBufferAdapter.prototype = {
    /**
     * Returns the data format version number.
     *
     * @return {Integer} Version number of the consumed data format.
     */

    get version() {
      return this._data.getInt32(0, true);
    },

    /**
     * Returns the number of bits per sample, either 8 or 16.
     */

    get bits() {
      var bits = Boolean(this._data.getUint32(4, true));

      return bits ? 8 : 16;
    },

    /**
     * Returns the number of channels.
     *
     * @return {Integer} Number of channels.
     */

    get channels() {
      if (this.version === 2) {
        return this._data.getInt32(20, true);
      }
      else {
        return 1;
      }
    },

    /**
     * Returns the number of samples per second.
     *
     * @return {Integer} Number of samples per second.
     */

    get sample_rate() {
      return this._data.getInt32(8, true);
    },

    /**
     * Returns the scale (number of samples per pixel).
     *
     * @return {Integer} Number of samples per pixel.
     */

    get scale() {
      return this._data.getInt32(12, true);
    },

    /**
     * Returns the length of the waveform data (number of data points).
     *
     * @return {Integer} Length of the waveform data.
     */

    get length() {
      return this._data.getUint32(16, true);
    },

    /**
     * Returns a value at a specific offset.
     *
     * @param {Integer} index
     * @return {Integer} waveform value
     */

    at: function at_sample(index) {
      return this._data.getInt8(this._offset + index);
    }
  };

  module.exports = WaveformDataArrayBufferAdapter;

  },{}],63:[function(_dereq_,module,exports){

  /**
   * Object adapter consumes waveform data in JSON format.
   * It is used as a data abstraction layer by `WaveformData`.
   *
   * This is supposed to be a fallback for browsers not supporting ArrayBuffer:
   * * **Pros**: easy to debug and quite self describing.
   * * **Cons**: slower than ArrayBuffer, more memory consumption.
   *
   * @param {Object} data Waveform data object
   * @constructor
   */

  function WaveformDataObjectAdapter(data) {
    this._data = data;
  }

  /**
   * Detects if a set of data is suitable for the Object adapter.
   * It is used internally by `WaveformData.create` so you should not bother using it.
   *
   * @static
   * @param {Mixed} data
   * @returns {boolean}
   */

  WaveformDataObjectAdapter.isCompatible = function isCompatible(data) {
    return data &&
      typeof data === "object" &&
      "sample_rate" in data &&
      "samples_per_pixel" in data &&
      "bits" in data &&
      "length" in data &&
      "data" in data;
  };

  /**
   * @namespace WaveformDataObjectAdapter
   */

  WaveformDataObjectAdapter.prototype = {
    /**
     * Returns the data format version number.
     *
     * @return {Integer} Version number of the consumed data format.
     */

    get version() {
      return this._data.version || 1;
    },

    /**
     * Returns the number of bits per sample, either 8 or 16.
     */

    get bits() {
      return this._data.bits;
    },

    /**
     * Returns the number of channels.
     *
     * @return {Integer} Number of channels.
     */

    get channels() {
      return this._data.channels || 1;
    },

    /**
     * Returns the number of samples per second.
     *
     * @return {Integer} Number of samples per second.
     */

    get sample_rate() {
      return this._data.sample_rate;
    },

    /**
     * Returns the scale (number of samples per pixel).
     *
     * @return {Integer} Number of samples per pixel.
     */

    get scale() {
      return this._data.samples_per_pixel;
    },

    /**
     * Returns the length of the waveform data (number of data points).
     *
     * @return {Integer} Length of the waveform data.
     */

    get length() {
      return this._data.length;
    },

    /**
     * Returns a value at a specific offset.
     *
     * @param {Integer} index
     * @return {number} waveform value
     */

    at: function at_sample(index) {
      const data = this._data.data;

      if (index >= 0 && index < data.length) {
        return data[index];
      }
      else {
        throw new RangeError("Invalid index: " + index);
      }
    }
  };

  module.exports = WaveformDataObjectAdapter;

  },{}],64:[function(_dereq_,module,exports){

  var WaveformData = _dereq_("../core");
  var InlineWorker = _dereq_("inline-worker");

  /**
   * This callback is executed once the audio has been decoded by the browser and
   * resampled by waveform-data.
   *
   * @callback onAudioResampled
   * @param {Error?}
   * @param {WaveformData} waveform_data Waveform instance of the browser decoded audio
   * @param {AudioBuffer} audio_buffer Decoded audio buffer
   */

  /**
   * AudioBuffer-based WaveformData generator
   *
   * Adapted from BlockFile::CalcSummary in Audacity, with permission.
   * @see https://code.google.com/p/audacity/source/browse/audacity-src/trunk/src/BlockFile.cpp
   *
   * @param {Object.<{scale: Number, amplitude_scale: Number, split_channels: Boolean}>} options
   * @param {onAudioResampled} callback
   * @returns {Function.<AudioBuffer>}
   */

  function getAudioDecoder(options, callback) {
    return function onAudioDecoded(audio_buffer) {
      var worker = new InlineWorker(function() {
        var INT8_MAX = 127;
        var INT8_MIN = -128;

        function calculateWaveformDataLength(audio_sample_count, scale) {
          var data_length = Math.floor(audio_sample_count / scale);

          var samples_remaining = audio_sample_count - (data_length * scale);

          if (samples_remaining > 0) {
            data_length++;
          }

          return data_length;
        }

        this.addEventListener("message", function(evt) {
          var scale = evt.data.scale;
          var amplitude_scale = evt.data.amplitude_scale;
          var split_channels = evt.data.split_channels;
          var audio_buffer = evt.data.audio_buffer;

          var channels = audio_buffer.channels;
          var output_channels = split_channels ? channels.length : 1;
          var version = output_channels === 1 ? 1 : 2;
          var header_size = version === 1 ? 20 : 24;
          var data_length = calculateWaveformDataLength(audio_buffer.length, scale);
          var total_size = header_size + data_length * 2 * output_channels;
          var data_object = new DataView(new ArrayBuffer(total_size));

          var min_value = new Array(output_channels);
          var max_value = new Array(output_channels);

          for (let channel = 0; channel < output_channels; channel++) {
            min_value[channel] = Infinity;
            max_value[channel] = -Infinity;
          }

          var scale_counter = 0;
          var buffer_length = audio_buffer.length;
          var offset = header_size;
          var channel, i;

          data_object.setInt32(0, version, true); // Version
          data_object.setUint32(4, 1, true); // Is 8 bit?
          data_object.setInt32(8, audio_buffer.sampleRate, true); // Sample rate
          data_object.setInt32(12, scale, true); // Scale
          data_object.setInt32(16, data_length, true); // Length

          if (version === 2) {
            data_object.setInt32(20, output_channels, true);
          }

          for (i = 0; i < buffer_length; i++) {
            var sample = 0;

            if (output_channels === 1) {
              for (channel = 0; channel < channels.length; ++channel) {
                sample += channels[channel][i];
              }

              sample = Math.floor(INT8_MAX * sample * amplitude_scale / channels.length);

              if (sample < min_value[0]) {
                min_value[0] = sample;

                if (min_value[0] < INT8_MIN) {
                  min_value[0] = INT8_MIN;
                }
              }

              if (sample > max_value[0]) {
                max_value[0] = sample;

                if (max_value[0] > INT8_MAX) {
                  max_value[0] = INT8_MAX;
                }
              }
            }
            else {
              for (channel = 0; channel < output_channels; ++channel) {
                sample = Math.floor(INT8_MAX * channels[channel][i] * amplitude_scale);

                if (sample < min_value[channel]) {
                  min_value[channel] = sample;

                  if (min_value[channel] < INT8_MIN) {
                    min_value[channel] = INT8_MIN;
                  }
                }

                if (sample > max_value[channel]) {
                  max_value[channel] = sample;

                  if (max_value[channel] > INT8_MAX) {
                    max_value[channel] = INT8_MAX;
                  }
                }
              }
            }

            if (++scale_counter === scale) {
              for (channel = 0; channel < output_channels; channel++) {
                data_object.setInt8(offset++, min_value[channel]);
                data_object.setInt8(offset++, max_value[channel]);

                min_value[channel] = Infinity;
                max_value[channel] = -Infinity;
              }

              scale_counter = 0;
            }
          }

          if (scale_counter > 0) {
            for (channel = 0; channel < output_channels; channel++) {
              data_object.setInt8(offset++, min_value[channel]);
              data_object.setInt8(offset++, max_value[channel]);
            }
          }

          this.postMessage(data_object);
        });
      });

      worker.addEventListener("message", function(evt) {
        var data_object = evt.data;

        callback(
          null,
          new WaveformData(data_object.buffer),
          audio_buffer
        );
      });

      // Construct a simple object with the necessary AudioBuffer data,
      // as we cannot send an AudioBuffer to a Web Worker.
      var audio_buffer_obj = {
        length: audio_buffer.length,
        sampleRate: audio_buffer.sampleRate,
        channels: []
      };

      // Fill in the channels data.
      for (var channel = 0; channel < audio_buffer.numberOfChannels; ++channel) {
        audio_buffer_obj.channels[channel] = audio_buffer.getChannelData(channel);
      }

      worker.postMessage({
        scale: options.scale,
        amplitude_scale: options.amplitude_scale,
        split_channels: options.split_channels,
        audio_buffer: audio_buffer_obj
      });
    };
  }

  module.exports = getAudioDecoder;

  },{"../core":68,"inline-worker":3}],65:[function(_dereq_,module,exports){

  var defaultOptions = {
    scale: 512,
    amplitude_scale: 1.0,
    split_channels: false
  };

  function getOptions(options) {
    if (Object.prototype.hasOwnProperty.call(options, "scale_adjuster")) {
      throw new Error("Please rename the 'scale_adjuster' option to 'amplitude_scale'");
    }

    var opts = {
      scale: options.scale || defaultOptions.scale,
      amplitude_scale: options.amplitude_scale || defaultOptions.amplitude_scale,
      split_channels: options.split_channels || defaultOptions.split_channels
    };

    return opts;
  }

  module.exports = getOptions;

  },{}],66:[function(_dereq_,module,exports){

  var getAudioDecoder = _dereq_("./audiodecoder");
  var getOptions = _dereq_("./options");

  function createFromArrayBuffer(audioContext, audioData, options, callback) {
    // The following function is a workaround for a Webkit bug where decodeAudioData
    // invokes the errorCallback with null instead of a DOMException.
    // See https://webaudio.github.io/web-audio-api/#dom-baseaudiocontext-decodeaudiodata
    // and http://stackoverflow.com/q/10365335/103396

    function errorCallback(error) {
      if (!error) {
        error = new DOMException("EncodingError");
      }

      callback(error);
    }

    audioContext.decodeAudioData(
      audioData,
      getAudioDecoder(options, callback),
      errorCallback
    );
  }

  function createFromAudioBuffer(audioBuffer, options, callback) {
    var audioDecoder = getAudioDecoder(options, callback);

    return audioDecoder(audioBuffer);
  }

  /**
   * Creates a working WaveformData based on binary audio data.
   *
   * This is still quite experimental and the result will mostly depend on the
   * level of browser support.
   *
   * ```javascript
   * const xhr = new XMLHttpRequest();
   * const audioContext = new AudioContext();
   *
   * // URL of a CORS MP3/Ogg file
   * xhr.open('GET', 'https://example.com/audio/track.ogg');
   * xhr.responseType = 'arraybuffer';
   *
   * xhr.addEventListener('load', function(progressEvent) {
   *   WaveformData.createFromAudio(audioContext, progressEvent.target.response,
   *     function(err, waveform) {
   *     if (err) {
   *       console.error(err);
   *       return;
   *     }
   *
   *     console.log(waveform.duration);
   *   });
   * });
   *
   * xhr.send();
   * ```
   *
   * @todo Use `SourceBuffer.appendBuffer` and `ProgressEvent` to stream the decoding?
   * @param {AudioContext|webkitAudioContext} audio_context
   * @param {ArrayBuffer} audio_data
   * @param {callback} what to do once the decoding is done
   * @constructor
   */

  function createFromAudio(options, callback) {
    var opts = getOptions(options);

    if (options.audio_context && options.array_buffer) {
      return createFromArrayBuffer(options.audio_context, options.array_buffer, opts, callback);
    }
    else if (options.audio_buffer) {
      return createFromAudioBuffer(options.audio_buffer, opts, callback);
    }
    else {
      throw new TypeError("Please pass either an AudioContext and ArrayBuffer, or an AudioBuffer object");
    }
  }

  module.exports = createFromAudio;

  },{"./audiodecoder":64,"./options":65}],67:[function(_dereq_,module,exports){

  /**
   * Provides access to the waveform data for a single audio channel.
   *
   * @param {WaveformData} waveformData Waveform data.
   * @param {Number} channelIndex Channel number.
   * @constructor
   */

  function WaveformDataChannel(waveformData, channelIndex) {
    this._waveformData = waveformData;
    this._channelIndex = channelIndex;
  }

  /**
   * Returns a min value for a specific offset.
   *
   * ```javascript
   * var waveform = WaveformData.create({ ... });
   * var channel = waveform.channel(0);
   *
   * console.log(channel.min_sample(10)); // -> -12
   * ```
   *
   * @api
   * @param {Integer} offset
   * @return {Number} Offset min value
   */

  WaveformDataChannel.prototype.min_sample = function(index) {
    const offset = (index * this._waveformData.channels + this._channelIndex) * 2;

    return this._waveformData._adapter.at(offset);
  };

  /**
   * Returns a max value for a specific offset.
   *
   * ```javascript
   * var waveform = WaveformData.create({ ... });
   * var channel = waveform.channel(0);
   *
   * console.log(channel.max_sample(10)); // -> 12
   * ```
   *
   * @api
   * @param {Integer} offset
   * @return {Number} Offset max value
   */

  WaveformDataChannel.prototype.max_sample = function(index) {
    const offset = (index * this._waveformData.channels + this._channelIndex) * 2 + 1;

    return this._waveformData._adapter.at(offset);
  };

  /**
   * Returns all the min values within the current offset.
   *
   * ```javascript
   * var waveform = WaveformData.create({ ... });
   * var channel = waveform.channel(0);
   *
   * console.log(channel.min_array()); // -> [-7, -5, -10]
   * ```
   *
   * @return {Array.<Integer>} Min values contained in the offset.
   */

  WaveformDataChannel.prototype.min_array = function() {
    return this._waveformData._offsetValues(
      0,
      this._waveformData.length,
      this._channelIndex * 2
    );
  };

  /**
   * Returns all the max values within the current offset.
   *
   * ```javascript
   * var waveform = WaveformData.create({ ... });
   * var channel = waveform.channel(0);
   *
   * console.log(channel.max_array()); // -> [9, 6, 11]
   * ```
   *
   * @return {Array.<Integer>} Max values contained in the offset.
   */

  WaveformDataChannel.prototype.max_array = function() {
    return this._waveformData._offsetValues(
      0,
      this._waveformData.length,
      this._channelIndex * 2 + 1
    );
  };

  module.exports = WaveformDataChannel;

  },{}],68:[function(_dereq_,module,exports){

  var WaveformDataChannel = _dereq_("./channel");
  var WaveformDataObjectAdapter = _dereq_("./adapters/object");
  var WaveformDataArrayBufferAdapter = _dereq_("./adapters/arraybuffer");

  var adapters = [
    WaveformDataArrayBufferAdapter,
    WaveformDataObjectAdapter
  ];

  /**
   * Facade to iterate on audio waveform response.
   *
   * ```javascript
   * var waveform = new WaveformData({ ... });
   *
   * var json_waveform = new WaveformData(xhr.responseText);
   *
   * var arraybuff_waveform = new WaveformData(
   *   getArrayBufferData()
   * );
   * ```
   *
   * ## Offsets
   *
   * An **offset** is a non-destructive way to iterate on a subset of data.
   *
   * It is the easiest way to **navigate** through data without having to deal
   * with complex calculations. Simply iterate over the data to display them.
   *
   * *Notice*: the default offset is the entire set of data.
   *
   * @param {String|ArrayBuffer|Object} data Waveform data,
   * to be consumed by the related adapter.
   * @param {WaveformData.adapter|Function} adapter Backend adapter used to manage
   * access to the data.
   * @constructor
   */

  function WaveformData(data) {
    var Adapter = this._getAdapter(data);

    this._adapter = new Adapter(data);

    this._channels = [];

    for (let channel = 0; channel < this.channels; channel++) {
      this._channels[channel] = new WaveformDataChannel(this, channel);
    }
  }

  /**
   * Creates an instance of WaveformData by guessing the adapter from the
   * data type. It can also accept an XMLHttpRequest response.
   *
   * ```javascript
   * var xhr = new XMLHttpRequest();
   * xhr.open("GET", "http://example.com/waveforms/track.dat");
   * xhr.responseType = "arraybuffer";
   *
   * xhr.addEventListener("load", function onResponse(progressEvent) {
   *   var waveform = WaveformData.create(progressEvent.target);
   *
   *   console.log(waveform.duration);
   * });
   *
   * xhr.send();
   * ```
   *
   * @static
   * @throws TypeError
   * @param {Object} data
   * @return {WaveformData}
   */

  WaveformData.create = function create(data) {
    return new WaveformData(data);
  };

  /**
   * Public API for the Waveform Data manager.
   *
   * @namespace WaveformData
   */

  WaveformData.prototype = {

    _getAdapter: function(data) {
      var Adapter = null;

      adapters.some(function(AdapterClass) {
        if (AdapterClass.isCompatible(data)) {
          Adapter = AdapterClass;
          return true;
        }
      });

      if (Adapter === null) {
        throw new TypeError("Could not detect a WaveformData adapter from the input.");
      }

      return Adapter;
    },

    /**
     * Creates a new WaveformData object with resampled data.
     * Returns a rescaled waveform, to either fit the waveform to a specific
     * width, or to a specific zoom level.
     *
     * **Note**: You may specify either the *width* or the *scale*, but not both.
     * The `scale` will be deduced from the `width` you want to fit the data into.
     *
     * Adapted from Sequence::GetWaveDisplay in Audacity, with permission.
     *
     * ```javascript
     * var waveform = WaveformData.create({ ... });
     * // ...
     *
     * // fitting the data in a 500px wide canvas
     * var resampled_waveform = waveform.resample({ width: 500 });
     *
     * console.log(resampled_waveform.min.length);   // -> 500
     *
     * // zooming out on a 3 times less precise scale
     * var resampled_waveform = waveform.resample({ scale: waveform.scale * 3 });
     * ```
     *
     * @see https://code.google.com/p/audacity/source/browse/audacity-src/trunk/src/Sequence.cpp
     * @param {Number|{width: Number, scale: Number}} options Either a constraint width or a constraint sample rate
     * @return {WaveformData} New resampled object
     */

    resample: function(options) {
      if (typeof options === "number") {
        options = {
          width: options
        };
      }

      options.input_index = typeof options.input_index === "number" ? options.input_index : null;
      options.output_index = typeof options.output_index === "number" ? options.output_index : null;
      options.scale = typeof options.scale === "number" ? options.scale : null;
      options.width = typeof options.width === "number" ? options.width : null;

      var is_partial_resampling = Boolean(options.input_index) || Boolean(options.output_index);

      if (options.input_index != null && (options.input_index < 0)) {
        throw new RangeError("options.input_index should be a positive integer value. [" + options.input_index + "]");
      }

      if (options.output_index != null && (options.output_index < 0)) {
        throw new RangeError("options.output_index should be a positive integer value. [" + options.output_index + "]");
      }

      if (options.width != null && (options.width <= 0)) {
        throw new RangeError("options.width should be a strictly positive integer value. [" + options.width + "]");
      }

      if (options.scale != null && (options.scale <= 0)) {
        throw new RangeError("options.scale should be a strictly positive integer value. [" + options.scale + "]");
      }

      if (!options.scale && !options.width) {
        throw new RangeError("You should provide either a resampling scale or a width in pixel the data should fit in.");
      }

      var definedPartialOptionsCount = ["width", "scale", "output_index", "input_index"].reduce(function(count, key) {
        return count + (options[key] === null ? 0 : 1);
      }, 0);

      if (is_partial_resampling && definedPartialOptionsCount !== 4) {
        throw new Error("Some partial resampling options are missing. You provided " + definedPartialOptionsCount + " of them over 4.");
      }

      var output_data = [];
      var samples_per_pixel = options.scale || Math.floor(this.duration * this.sample_rate / options.width); // scale we want to reach
      var scale = this.scale; // scale we are coming from
      var channel_count = 2 * this.channels;

      var input_buffer_size = this.length; // the amount of data we want to resample i.e. final zoom want to resample all data but for intermediate zoom we want to resample subset
      var input_index = options.input_index || 0; // is this start point? or is this the index at current scale
      var output_index = options.output_index || 0; // is this end point? or is this the index at scale we want to be?

      var channels = this.channels;

      var min = new Array(channels);
      var max = new Array(channels);

      for (let channel = 0; channel < channels; ++channel) {
        if (input_buffer_size > 0) {
          min[channel] = this.channel(channel).min_sample(input_index);
          max[channel] = this.channel(channel).max_sample(input_index);
        }
        else {
          min[channel] = 0;
          max[channel] = 0;
        }
      }

      var min_value = -128;
      var max_value = 127;

      if (samples_per_pixel < scale) {
        throw new Error("Zoom level " + samples_per_pixel + " too low, minimum: " + scale);
      }

      var where, prev_where, stop, value, last_input_index;

      function sample_at_pixel(x) {
        return Math.floor(x * samples_per_pixel);
      }

      function add_sample(min, max) {
        output_data.push(min, max);
      }

      while (input_index < input_buffer_size) {
        while (Math.floor(sample_at_pixel(output_index) / scale) <= input_index) {
          if (output_index > 0) {
            for (let channel = 0; channel < channels; ++channel) {
              add_sample(min[channel], max[channel]);
            }
          }

          last_input_index = input_index;

          output_index++;

          where      = sample_at_pixel(output_index);
          prev_where = sample_at_pixel(output_index - 1);

          if (where !== prev_where) {
            for (let channel = 0; channel < channels; ++channel) {
              min[channel] = max_value;
              max[channel] = min_value;
            }
          }
        }

        where = sample_at_pixel(output_index);
        stop = Math.floor(where / scale);

        if (stop > input_buffer_size) {
          stop = input_buffer_size;
        }

        while (input_index < stop) {
          for (let channel = 0; channel < channels; ++channel) {
            value = this.channel(channel).min_sample(input_index);

            if (value < min[channel]) {
              min[channel] = value;
            }

            value = this.channel(channel).max_sample(input_index);

            if (value > max[channel]) {
              max[channel] = value;
            }
          }

          input_index++;
        }

        if (is_partial_resampling && (output_data.length / channel_count) >= options.width) {
          break;
        }
      }

      if (is_partial_resampling) {
        if ((output_data.length / channel_count) > options.width &&
            input_index !== last_input_index) {
            for (let channel = 0; channel < channels; ++channel) {
              add_sample(min[channel], max[channel]);
            }
        }
      }
      else if (input_index !== last_input_index) {
        for (let channel = 0; channel < channels; ++channel) {
          add_sample(min[channel], max[channel]);
        }
      }

      return new WaveformData({
        version: this._adapter.version,
        bits: this.bits,
        samples_per_pixel: samples_per_pixel,
        length: output_data.length / channel_count,
        data: output_data,
        sample_rate: this.sample_rate,
        channels: channels
      });
    },

    /**
     * Return the unpacked values for a particular offset.
     *
     * @param {Integer} start
     * @param {Integer} length
     * @param {Integer} correction The step to skip for each iteration
     * (as the response body is [min, max, min, max...])
     * @return {Array.<Integer>}
     */

    _offsetValues: function getOffsetValues(start, length, correction) {
      var adapter = this._adapter;
      var values = [];
      var channels = this.channels;

      correction += (start * channels * 2); // offset the positioning query

      for (var i = 0; i < length; i++) {
        values.push(adapter.at((i * channels * 2) + correction));
      }

      return values;
    },

    /**
     * Returns the length of the waveform, in pixels.
     *
     * ```javascript
     * var waveform = WaveformData.create({ ... });
     * console.log(waveform.length); // -> 600
     * ```
     *
     * @api
     * @return {Integer} Length of the waveform, in pixels.
     */

    get length() {
      return this._adapter.length;
    },

    /**
     * Returns the number of bits per sample, either 8 or 16.
     */

    get bits() {
      return this._adapter.bits;
    },

    /**
     * Returns the (approximate) duration of the audio file, in seconds.
     *
     * ```javascript
     * var waveform = WaveformData.create({ ... });
     * console.log(waveform.duration); // -> 10.33333333333
     * ```
     *
     * @api
     * @return {number} Duration of the audio waveform, in seconds.
     */

    get duration() {
      return this.length * this.scale / this.sample_rate;
    },

    /**
     * Return the number of pixels per second.
     *
     * ```javascript
     * var waveform = WaveformData.create({ ... });
     *
     * console.log(waveform.pixels_per_second); // -> 93.75
     * ```
     *
     * @api
     * @return {number} Number of pixels per second.
     */

    get pixels_per_second() {
      return this.sample_rate / this.scale;
    },

    /**
     * Return the amount of time represented by a single pixel.
     *
     * ```javascript
     * var waveform = WaveformData.create({ ... });
     *
     * console.log(waveform.seconds_per_pixel);       // -> 0.010666666666666666
     * ```
     *
     * @return {number} Amount of time (in seconds) contained in a pixel.
     */

    get seconds_per_pixel() {
      return this.scale / this.sample_rate;
    },

    /**
     * Returns the number of waveform channels.
     *
     * ```javascript
     * var waveform = WaveformData.create({ ... });
     * console.log(waveform.channels);    // -> 1
     * ```
     *
     * @api
     * @return {number} Number of channels.
     */

    get channels() {
      return this._adapter.channels;
    },

    /**
     * Returns a waveform channel.
     *
     * ```javascript
     * var waveform = WaveformData.create({ ... });
     * var channel = waveform.channel(0);
     * console.log(channel.min_sample(0)); // -> 1
     * ```
     *
     * @api
     * @param {Number} Channel index.
     * @return {WaveformDataChannel} Waveform channel.
     */

    channel: function(index) {
      if (index >= 0 && index < this._channels.length) {
        return this._channels[index];
      }
      else {
        throw new RangeError("Invalid channel: " + index);
      }
    },

    /**
     * Returns the number of samples per second.
     *
     * @return {Integer} Number of samples per second.
     */

    get sample_rate() {
      return this._adapter.sample_rate;
    },

    /**
     * Returns the scale (number of samples per pixel).
     *
     * @return {Integer} Number of samples per pixel.
     */

    get scale() {
      return this._adapter.scale;
    },

    /**
     * Returns the pixel location for a given time.
     *
     * @param {number} time
     * @return {integer} Index location for a specific time.
     */

    at_time: function at_time(time) {
      return Math.floor(time * this.sample_rate / this.scale);
    },

    /**
     * Returns the time in seconds for a given index
     *
     * @param {Integer} index
     * @return {number}
     */

    time: function time(index) {
      return index * this.scale / this.sample_rate;
    }
  };

  module.exports = WaveformData;

  },{"./adapters/arraybuffer":62,"./adapters/object":63,"./channel":67}],69:[function(_dereq_,module,exports){

  var WaveformData = _dereq_("./lib/core");

  WaveformData.createFromAudio = _dereq_("./lib/builders/webaudio");

  module.exports = WaveformData;

  },{"./lib/builders/webaudio":66,"./lib/core":68}],70:[function(_dereq_,module,exports){
  module.exports = function (Colors, EventEmitter, WaveformPoints, WaveformSegments, Player, ViewController, TimeController, ZoomController, WaveformBuilder, mixins, Utils, KeyboardHandler, CueEmitter) {
      function buildUi(container) {
          return {
              player: container.querySelector('.waveform'),
              zoomview: container.querySelector('.zoom-container'),
              overview: container.querySelector('.overview-container')
          };
      }
      function Peaks() {
          EventEmitter.call(this, { wildcard: true });
          this.options = {
              zoomLevels: [
                  512,
                  1024,
                  2048,
                  4096
              ],
              dataUri: null,
              dataUriDefaultFormat: 'json',
              withCredentials: false,
              logger: null,
              deprecationLogger: console.log.bind(console),
              keyboard: false,
              nudgeIncrement: 1,
              inMarkerColor: Colors.gray,
              outMarkerColor: Colors.gray,
              zoomWaveformColor: 'rgba(0, 225, 128, 1)',
              overviewWaveformColor: 'rgba(0,0,0,0.2)',
              overviewHighlightRectangleColor: 'grey',
              randomizeSegmentColor: true,
              height: 200,
              segmentColor: Colors.orange,
              playheadColor: Colors.black,
              playheadTextColor: Colors.gray,
              showPlayheadTime: false,
              axisGridlineColor: '#ccc',
              axisLabelColor: Colors.gray,
              template: [
                  '<div class="waveform">',
                  '<div class="zoom-container"></div>',
                  '<div class="overview-container"></div>',
                  '</div>'
              ].join(''),
              pointMarkerColor: Colors.teal,
              pointDblClickHandler: null,
              pointDragEndHandler: null,
              webAudio: null,
              zoomAdapter: 'static',
              emitCueEvents: false
          };
          this.logger = console.error.bind(console);
          return this;
      }
      Peaks.prototype = Object.create(EventEmitter.prototype);
      Peaks.init = function (opts, callback) {
          var instance = new Peaks();
          opts = opts || {};
          instance._setOptions(opts);
          var containers = null;
          if (typeof instance.options.template === 'string') {
              opts.container.innerHTML = instance.options.template;
              containers = buildUi(instance.options.container);
          } else if (Utils.isHTMLElement(instance.options.template)) {
              this.container.appendChild(instance.options.template);
              containers = buildUi(instance.options.container);
          } else if (instance.options.containers) {
              containers = instance.options.containers;
          } else {
              throw new TypeError('Peaks.init(): The template option must be a valid HTML string or a DOM object');
          }
          var zoomviewContainer = containers.zoomview || containers.zoom;
          if (!Utils.isHTMLElement(zoomviewContainer) && !Utils.isHTMLElement(containers.overview)) {
              throw new TypeError('Peaks.init(): The containers.zoomview and/or containers.overview options must be valid HTML elements');
          }
          if (zoomviewContainer && zoomviewContainer.clientWidth <= 0) {
              throw new TypeError('Peaks.init(): Please ensure that the zoomview container is visible and has non-zero width');
          }
          if (containers.overview && containers.overview.clientWidth <= 0) {
              throw new TypeError('Peaks.init(): Please ensure that the overview container is visible and has non-zero width');
          }
          if (instance.options.keyboard) {
              instance.keyboardHandler = new KeyboardHandler(instance);
          }
          instance.player = new Player(instance, instance.options.mediaElement);
          instance.segments = new WaveformSegments(instance);
          instance.points = new WaveformPoints(instance);
          instance.zoom = new ZoomController(instance, instance.options.zoomLevels);
          instance.time = new TimeController(instance);
          instance.views = new ViewController(instance);
          var waveformBuilder = new WaveformBuilder(instance);
          waveformBuilder.init(instance.options, function (err, waveformData) {
              if (err) {
                  if (callback) {
                      callback(err);
                  }
                  return;
              }
              instance._waveformData = waveformData;
              if (containers.overview) {
                  instance.views.createOverview(containers.overview);
              }
              if (zoomviewContainer) {
                  instance.views.createZoomview(zoomviewContainer);
              }
              instance._addWindowResizeHandler();
              if (instance.options.segments) {
                  instance.segments.add(instance.options.segments);
              }
              if (instance.options.points) {
                  instance.points.add(instance.options.points);
              }
              if (instance.options.emitCueEvents) {
                  instance._cueEmitter = new CueEmitter(instance);
              }
              instance.emit('segments.ready');
              instance.emit('peaks.ready');
              if (callback) {
                  callback(null, instance);
              }
          });
          return instance;
      };
      Peaks.prototype._setOptions = function (opts) {
          opts.deprecationLogger = opts.deprecationLogger || console.log.bind(console);
          if (opts.audioElement) {
              opts.mediaElement = opts.audioElement;
              opts.deprecationLogger('Peaks.init(): The audioElement option is deprecated, please use mediaElement instead');
          }
          if (!opts.mediaElement) {
              throw new Error('Peaks.init(): Missing mediaElement option');
          }
          if (!(opts.mediaElement instanceof HTMLMediaElement)) {
              throw new TypeError('Peaks.init(): The mediaElement option should be an HTMLMediaElement');
          }
          if (!opts.container && !opts.containers) {
              throw new Error('Peaks.init(): Please specify either a container or containers option');
          } else if (Boolean(opts.container) === Boolean(opts.containers)) {
              throw new Error('Peaks.init(): Please specify either a container or containers option, but not both');
          }
          if (opts.template && opts.containers) {
              throw new Error('Peaks.init(): Please specify either a template or a containers option, but not both');
          }
          if (opts.containers) {
              opts.template = null;
          }
          if (opts.logger && !Utils.isFunction(opts.logger)) {
              throw new TypeError('Peaks.init(): The logger option should be a function');
          }
          if (opts.segments && !Array.isArray(opts.segments)) {
              throw new TypeError('Peaks.init(): options.segments must be an array of segment objects');
          }
          if (opts.points && !Array.isArray(opts.points)) {
              throw new TypeError('Peaks.init(): options.points must be an array of point objects');
          }
          Utils.extend(this.options, opts);
          Utils.extend(this.options, {
              createSegmentMarker: mixins.createSegmentMarker,
              createSegmentLabel: mixins.createSegmentLabel,
              createPointMarker: mixins.createPointMarker
          });
          if (!Array.isArray(this.options.zoomLevels)) {
              throw new TypeError('Peaks.init(): The zoomLevels option should be an array');
          } else if (this.options.zoomLevels.length === 0) {
              throw new Error('Peaks.init(): The zoomLevels array must not be empty');
          } else {
              if (!Utils.isInAscendingOrder(this.options.zoomLevels)) {
                  throw new Error('Peaks.init(): The zoomLevels array must be sorted in ascending order');
              }
          }
          if (this.options.pointDblClickHandler) {
              opts.deprecationLogger('Peaks.init(): The pointDblClickHandler option is deprecated, please use the points.dblclick event instead');
              this.on('points.dblclick', this.options.pointDblClickHandler);
          }
          if (this.options.pointDragEndHandler) {
              opts.deprecationLogger('Peaks.init(): The pointDragEndHandler option is deprecated, please use the points.dragend event instead');
              this.on('points.dragend', this.options.pointDragEndHandler);
          }
          if (opts.logger) {
              this.logger = opts.logger;
          }
      };
      Peaks.prototype.setSource = function (options, callback) {
          var self = this;
          if (!options.mediaUrl) {
              callback(new Error('peaks.setSource(): options must contain a mediaUrl'));
              return;
          }
          function reset() {
              self.removeAllListeners('player_canplay');
              self.removeAllListeners('player_error');
          }
          function playerErrorHandler(err) {
              reset();
              callback(err);
          }
          function playerCanPlayHandler() {
              reset();
              if (!options.zoomLevels) {
                  options.zoomLevels = self.options.zoomLevels;
              }
              var waveformBuilder = new WaveformBuilder(self);
              waveformBuilder.init(options, function (err, waveformData) {
                  if (err) {
                      callback(err);
                      return;
                  }
                  self._waveformData = waveformData;
                  [
                      'overview',
                      'zoomview'
                  ].forEach(function (viewName) {
                      var view = self.views.getView(viewName);
                      if (view) {
                          view.setWaveformData(waveformData);
                      }
                  });
                  self.zoom.setZoomLevels(options.zoomLevels);
                  callback();
              });
          }
          self.once('player_canplay', playerCanPlayHandler);
          self.once('player_error', playerErrorHandler);
          self.player.setSource(options.mediaUrl);
      };
      Peaks.prototype.getWaveformData = function () {
          return this._waveformData;
      };
      Peaks.prototype._addWindowResizeHandler = function () {
          this._onResize = this._onResize.bind(this);
          window.addEventListener('resize', this._onResize);
      };
      Peaks.prototype._onResize = function () {
          this.emit('window_resize');
      };
      Peaks.prototype._removeWindowResizeHandler = function () {
          window.removeEventListener('resize', this._onResize);
      };
      Peaks.prototype.destroy = function () {
          this._removeWindowResizeHandler();
          if (this.views) {
              this.views.destroy();
          }
          if (this.player) {
              this.player.destroy();
          }
          if (this._cueEmitter) {
              this._cueEmitter.destroy();
          }
      };
      return Peaks;
  }(_dereq_('colors.css'), _dereq_('EventEmitter'), _dereq_('peaks/markers/waveform.points'), _dereq_('peaks/markers/waveform.segments'), _dereq_('peaks/player/player'), _dereq_('peaks/views/view-controller'), _dereq_('peaks/views/waveform.timecontroller'), _dereq_('peaks/views/waveform.zoomcontroller'), _dereq_('peaks/waveform/waveform-builder'), _dereq_('peaks/waveform/waveform.mixins'), _dereq_('peaks/waveform/waveform.utils'), _dereq_('peaks/player/player.keyboard'), _dereq_('peaks/cues/cue-emitter'));
  },{"EventEmitter":2,"colors.css":1,"peaks/cues/cue-emitter":71,"peaks/markers/waveform.points":75,"peaks/markers/waveform.segments":76,"peaks/player/player":77,"peaks/player/player.keyboard":78,"peaks/views/view-controller":83,"peaks/views/waveform.timecontroller":86,"peaks/views/waveform.zoomcontroller":87,"peaks/waveform/waveform-builder":89,"peaks/waveform/waveform.mixins":91,"peaks/waveform/waveform.utils":92}],71:[function(_dereq_,module,exports){
  module.exports = function (Cue) {
      var isHeadless = /HeadlessChrome/.test(navigator.userAgent);
      function windowIsVisible() {
          if (isHeadless || navigator.webdriver) {
              return false;
          }
          return typeof document === 'object' && 'visibilityState' in document && document.visibilityState === 'visible';
      }
      var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
      var cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;
      var eventTypes = {
          forward: {},
          reverse: {}
      };
      var EVENT_TYPE_POINT = 0;
      var EVENT_TYPE_SEGMENT_ENTER = 1;
      var EVENT_TYPE_SEGMENT_EXIT = 2;
      eventTypes.forward[Cue.POINT] = EVENT_TYPE_POINT;
      eventTypes.forward[Cue.SEGMENT_START] = EVENT_TYPE_SEGMENT_ENTER;
      eventTypes.forward[Cue.SEGMENT_END] = EVENT_TYPE_SEGMENT_EXIT;
      eventTypes.reverse[Cue.POINT] = EVENT_TYPE_POINT;
      eventTypes.reverse[Cue.SEGMENT_START] = EVENT_TYPE_SEGMENT_EXIT;
      eventTypes.reverse[Cue.SEGMENT_END] = EVENT_TYPE_SEGMENT_ENTER;
      var eventNames = {};
      eventNames[EVENT_TYPE_POINT] = 'points.enter';
      eventNames[EVENT_TYPE_SEGMENT_ENTER] = 'segments.enter';
      eventNames[EVENT_TYPE_SEGMENT_EXIT] = 'segments.exit';
      function getPointOrSegment(peaks, cue) {
          switch (cue.type) {
          case Cue.POINT:
              return peaks.points.getPoint(cue.id);
          case Cue.SEGMENT_START:
          case Cue.SEGMENT_END:
              return peaks.segments.getSegment(cue.id);
          default:
              throw new Error('getPointOrSegment: id not found?');
          }
      }
      function CueEmitter(peaks) {
          this._cues = [];
          this._peaks = peaks;
          this._previousTime = -1;
          this._updateCues = this._updateCues.bind(this);
          this._onPlay = this.onPlay.bind(this);
          this._onSeek = this.onSeek.bind(this);
          this._onTimeUpdate = this.onTimeUpdate.bind(this);
          this._onAnimationFrame = this.onAnimationFrame.bind(this);
          this._rAFHandle = null;
          this._activeSegments = {};
          this._attachEventHandlers();
      }
      CueEmitter.prototype._updateCues = function () {
          var self = this;
          var points = self._peaks.points.getPoints();
          var segments = self._peaks.segments.getSegments();
          self._cues.length = 0;
          points.forEach(function (point) {
              self._cues.push(new Cue(point.time, Cue.POINT, point.id));
          });
          segments.forEach(function (segment) {
              self._cues.push(new Cue(segment.startTime, Cue.SEGMENT_START, segment.id));
              self._cues.push(new Cue(segment.endTime, Cue.SEGMENT_END, segment.id));
          });
          self._cues.sort(Cue.sorter);
          var time = self._peaks.player.getCurrentTime();
          self._updateActiveSegments(time);
      };
      CueEmitter.prototype._onUpdate = function (time, previousTime) {
          var isForward = time > previousTime;
          var start;
          var end;
          var step;
          if (isForward) {
              start = 0;
              end = this._cues.length;
              step = 1;
          } else {
              start = this._cues.length - 1;
              end = -1;
              step = -1;
          }
          for (var i = start; isForward ? i < end : i > end; i += step) {
              var cue = this._cues[i];
              if (isForward ? cue.time > previousTime : cue.time < previousTime) {
                  if (isForward ? cue.time > time : cue.time < time) {
                      break;
                  }
                  var marker = getPointOrSegment(this._peaks, cue);
                  var eventType = isForward ? eventTypes.forward[cue.type] : eventTypes.reverse[cue.type];
                  if (eventType === EVENT_TYPE_SEGMENT_ENTER) {
                      this._activeSegments[marker.id] = marker;
                  } else if (eventType === EVENT_TYPE_SEGMENT_EXIT) {
                      delete this._activeSegments[marker.id];
                  }
                  this._peaks.emit(eventNames[eventType], marker);
              }
          }
      };
      CueEmitter.prototype.onTimeUpdate = function (time) {
          if (windowIsVisible()) {
              return;
          }
          if (this._peaks.player.isPlaying() && !this._peaks.player.isSeeking()) {
              this._onUpdate(time, this._previousTime);
          }
          this._previousTime = time;
      };
      CueEmitter.prototype.onAnimationFrame = function () {
          var time = this._peaks.player.getCurrentTime();
          if (!this._peaks.player.isSeeking()) {
              this._onUpdate(time, this._previousTime);
          }
          this._previousTime = time;
          if (this._peaks.player.isPlaying()) {
              this._rAFHandle = requestAnimationFrame(this._onAnimationFrame);
          }
      };
      CueEmitter.prototype.onPlay = function () {
          this._previousTime = this._peaks.player.getCurrentTime();
          this._rAFHandle = requestAnimationFrame(this._onAnimationFrame);
      };
      CueEmitter.prototype.onSeek = function (time) {
          this._previousTime = time;
          this._updateActiveSegments(time);
      };
      function getSegmentIdComparator(id) {
          return function compareSegmentIds(segment) {
              return segment.id === id;
          };
      }
      CueEmitter.prototype._updateActiveSegments = function (time) {
          var self = this;
          var activeSegments = self._peaks.segments.getSegmentsAtTime(time);
          for (var id in self._activeSegments) {
              if (Object.prototype.hasOwnProperty.call(self._activeSegments, id)) {
                  var segment = activeSegments.find(getSegmentIdComparator(id));
                  if (!segment) {
                      self._peaks.emit('segments.exit', self._activeSegments[id]);
                      delete self._activeSegments[id];
                  }
              }
          }
          activeSegments.forEach(function (segment) {
              if (!(segment.id in self._activeSegments)) {
                  self._activeSegments[segment.id] = segment;
                  self._peaks.emit('segments.enter', segment);
              }
          });
      };
      var triggerUpdateOn = Array('points.update', 'points.dragmove', 'points.add', 'points.remove', 'points.remove_all', 'segments.update', 'segments.dragged', 'segments.add', 'segments.remove', 'segments.remove_all');
      CueEmitter.prototype._attachEventHandlers = function () {
          this._peaks.on('player_time_update', this._onTimeUpdate);
          this._peaks.on('player_play', this._onPlay);
          this._peaks.on('player_seek', this._onSeek);
          for (var i = 0; i < triggerUpdateOn.length; i++) {
              this._peaks.on(triggerUpdateOn[i], this._updateCues);
          }
          this._updateCues();
      };
      CueEmitter.prototype._detachEventHandlers = function () {
          this._peaks.off('player_time_update', this._onTimeUpdate);
          this._peaks.off('player_play', this._onPlay);
          this._peaks.off('player_seek', this._onSeek);
          for (var i = 0; i < triggerUpdateOn.length; i++) {
              this._peaks.off(triggerUpdateOn[i], this._updateCues);
          }
      };
      CueEmitter.prototype.destroy = function () {
          if (this._rAFHandle) {
              cancelAnimationFrame(this._rAFHandle);
              this._rAFHandle = null;
          }
          this._detachEventHandlers();
          this._previousTime = -1;
          this._marks.length = 0;
      };
      return CueEmitter;
  }(_dereq_('peaks/cues/cue'));
  },{"peaks/cues/cue":72}],72:[function(_dereq_,module,exports){
  module.exports = function () {
      function Cue(time, type, id) {
          this.time = time;
          this.type = type;
          this.id = id;
      }
      Cue.POINT = 0;
      Cue.SEGMENT_START = 1;
      Cue.SEGMENT_END = 2;
      Cue.sorter = function (a, b) {
          return a.time - b.time;
      };
      return Cue;
  }();
  },{}],73:[function(_dereq_,module,exports){
  module.exports = function (Utils) {
      function validatePoint(time, labelText) {
          if (!Utils.isValidTime(time)) {
              throw new TypeError('peaks.points.add(): time should be a numeric value');
          }
          if (time < 0) {
              throw new TypeError('peaks.points.add(): time should not be negative');
          }
          if (Utils.isNullOrUndefined(labelText)) {
              labelText = '';
          } else if (!Utils.isString(labelText)) {
              throw new TypeError('peaks.points.add(): labelText must be a string');
          }
      }
      function Point(parent, id, time, labelText, color, editable) {
          labelText = labelText || '';
          validatePoint(time, labelText);
          this._parent = parent;
          this._id = id;
          this._time = time;
          this._labelText = labelText;
          this._color = color;
          this._editable = editable;
      }
      Object.defineProperties(Point.prototype, {
          parent: {
              get: function () {
                  return this._parent;
              }
          },
          id: {
              enumerable: true,
              get: function () {
                  return this._id;
              }
          },
          time: {
              enumerable: true,
              get: function () {
                  return this._time;
              },
              set: function (time) {
                  this._time = time;
              }
          },
          labelText: {
              get: function () {
                  return this._labelText;
              }
          },
          color: {
              enumerable: true,
              get: function () {
                  return this._color;
              }
          },
          editable: {
              enumerable: true,
              get: function () {
                  return this._editable;
              }
          }
      });
      Point.prototype.update = function (options) {
          var time = Object.prototype.hasOwnProperty.call(options, 'time') ? options.time : this.time;
          var labelText = Object.prototype.hasOwnProperty.call(options, 'labelText') ? options.labelText || '' : this.labelText;
          var color = Object.prototype.hasOwnProperty.call(options, 'color') ? options.color : this.color;
          var editable = Object.prototype.hasOwnProperty.call(options, 'editable') ? options.editable : this.editable;
          validatePoint(time, labelText);
          this._time = time;
          this._labelText = labelText;
          this._color = color;
          this._editable = editable;
          this._parent._peaks.emit('points.update', this);
      };
      Point.prototype.isVisible = function (startTime, endTime) {
          return this.time >= startTime && this.time < endTime;
      };
      return Point;
  }(_dereq_('peaks/waveform/waveform.utils'));
  },{"peaks/waveform/waveform.utils":92}],74:[function(_dereq_,module,exports){
  module.exports = function (Utils) {
      function validateSegment(startTime, endTime, validationContext) {
          if (!Utils.isValidTime(startTime)) {
              throw new TypeError('peaks.segments.' + validationContext + ': startTime should be a valid number');
          }
          if (!Utils.isValidTime(endTime)) {
              throw new TypeError('peaks.segments.' + validationContext + ': endTime should be a valid number');
          }
          if (startTime < 0) {
              throw new RangeError('peaks.segments.' + validationContext + ': startTime should not be negative');
          }
          if (endTime < 0) {
              throw new RangeError('peaks.segments.' + validationContext + ': endTime should not be negative');
          }
          if (endTime <= startTime) {
              throw new RangeError('peaks.segments.' + validationContext + ': endTime should be greater than startTime');
          }
      }
      function Segment(parent, id, startTime, endTime, labelText, color, editable) {
          validateSegment(startTime, endTime, 'add()');
          this._parent = parent;
          this._id = id;
          this._startTime = startTime;
          this._endTime = endTime;
          this._labelText = labelText;
          this._color = color;
          this._editable = editable;
      }
      Object.defineProperties(Segment.prototype, {
          parent: {
              get: function () {
                  return this._parent;
              }
          },
          id: {
              enumerable: true,
              get: function () {
                  return this._id;
              }
          },
          startTime: {
              enumerable: true,
              get: function () {
                  return this._startTime;
              },
              set: function (time) {
                  this._startTime = time;
              }
          },
          endTime: {
              enumerable: true,
              get: function () {
                  return this._endTime;
              },
              set: function (time) {
                  this._endTime = time;
              }
          },
          labelText: {
              enumerable: true,
              get: function () {
                  return this._labelText;
              }
          },
          color: {
              enumerable: true,
              get: function () {
                  return this._color;
              }
          },
          editable: {
              enumerable: true,
              get: function () {
                  return this._editable;
              }
          }
      });
      Segment.prototype.update = function (options) {
          var startTime = Object.prototype.hasOwnProperty.call(options, 'startTime') ? options.startTime : this.startTime;
          var endTime = Object.prototype.hasOwnProperty.call(options, 'endTime') ? options.endTime : this.endTime;
          var labelText = Object.prototype.hasOwnProperty.call(options, 'labelText') ? options.labelText : this.labelText;
          var color = Object.prototype.hasOwnProperty.call(options, 'color') ? options.color : this.color;
          var editable = Object.prototype.hasOwnProperty.call(options, 'editable') ? options.editable : this.editable;
          validateSegment(startTime, endTime, 'updateTime()');
          this._startTime = startTime;
          this._endTime = endTime;
          this._labelText = labelText;
          this._color = color;
          this._editable = editable;
          this._parent._peaks.emit('segments.update', this);
      };
      Segment.prototype.isVisible = function (startTime, endTime) {
          return this.startTime < endTime && startTime < this.endTime;
      };
      return Segment;
  }(_dereq_('peaks/waveform/waveform.utils'));
  },{"peaks/waveform/waveform.utils":92}],75:[function(_dereq_,module,exports){
  module.exports = function (Point, Utils) {
      function WaveformPoints(peaks) {
          this._peaks = peaks;
          this._points = [];
          this._pointsById = {};
          this._pointIdCounter = 0;
      }
      WaveformPoints.prototype._getNextPointId = function () {
          return 'peaks.point.' + this._pointIdCounter++;
      };
      WaveformPoints.prototype._addPoint = function (point) {
          this._points.push(point);
          this._pointsById[point.id] = point;
      };
      WaveformPoints.prototype._createPoint = function (options) {
          if (Object.prototype.hasOwnProperty.call(options, 'timestamp') || !Object.prototype.hasOwnProperty.call(options, 'time')) {
              this._peaks.options.deprecationLogger('peaks.points.add(): The \'timestamp\' attribute is deprecated; use \'time\' instead');
              options.time = options.timestamp;
          }
          var point = new Point(this, Utils.isNullOrUndefined(options.id) ? this._getNextPointId() : options.id, options.time, options.labelText, options.color, Boolean(options.editable));
          return point;
      };
      WaveformPoints.prototype.getPoints = function () {
          return this._points;
      };
      WaveformPoints.prototype.getPoint = function (id) {
          return this._pointsById[id] || null;
      };
      WaveformPoints.prototype.find = function (startTime, endTime) {
          return this._points.filter(function (point) {
              return point.isVisible(startTime, endTime);
          });
      };
      WaveformPoints.prototype.add = function (pointOrPoints) {
          var self = this;
          var points = Array.isArray(arguments[0]) ? arguments[0] : Array.prototype.slice.call(arguments);
          if (typeof points[0] === 'number') {
              this._peaks.options.deprecationLogger('peaks.points.add(): expected a segment object or an array');
              points = [{
                      time: arguments[0],
                      editable: arguments[1],
                      color: arguments[2],
                      labelText: arguments[3]
                  }];
          }
          points = points.map(function (pointOptions) {
              var point = self._createPoint(pointOptions);
              if (Object.prototype.hasOwnProperty.call(self._pointsById, point.id)) {
                  throw new Error('peaks.points.add(): duplicate id');
              }
              return point;
          });
          points.forEach(function (point) {
              self._addPoint(point);
          });
          this._peaks.emit('points.add', points);
      };
      WaveformPoints.prototype._findPoint = function (predicate) {
          var indexes = [];
          for (var i = 0, length = this._points.length; i < length; i++) {
              if (predicate(this._points[i])) {
                  indexes.push(i);
              }
          }
          return indexes;
      };
      WaveformPoints.prototype._removeIndexes = function (indexes) {
          var removed = [];
          for (var i = 0; i < indexes.length; i++) {
              var index = indexes[i] - removed.length;
              var itemRemoved = this._points.splice(index, 1)[0];
              delete this._pointsById[itemRemoved.id];
              removed.push(itemRemoved);
          }
          return removed;
      };
      WaveformPoints.prototype._removePoints = function (predicate) {
          var indexes = this._findPoint(predicate);
          var removed = this._removeIndexes(indexes);
          this._peaks.emit('points.remove', removed);
          return removed;
      };
      WaveformPoints.prototype.remove = function (point) {
          return this._removePoints(function (p) {
              return p === point;
          });
      };
      WaveformPoints.prototype.removeById = function (pointId) {
          return this._removePoints(function (point) {
              return point.id === pointId;
          });
      };
      WaveformPoints.prototype.removeByTime = function (time) {
          return this._removePoints(function (point) {
              return point.time === time;
          });
      };
      WaveformPoints.prototype.removeAll = function () {
          this._points = [];
          this._pointsById = {};
          this._peaks.emit('points.remove_all');
      };
      return WaveformPoints;
  }(_dereq_('peaks/markers/point'), _dereq_('peaks/waveform/waveform.utils'));
  },{"peaks/markers/point":73,"peaks/waveform/waveform.utils":92}],76:[function(_dereq_,module,exports){
  module.exports = function (Colors, Segment, Utils) {
      function WaveformSegments(peaks) {
          this._peaks = peaks;
          this._segments = [];
          this._segmentsById = {};
          this._segmentIdCounter = 0;
          this._colorIndex = 0;
      }
      WaveformSegments.prototype._getNextSegmentId = function () {
          return 'peaks.segment.' + this._segmentIdCounter++;
      };
      var colors = [
          Colors.navy,
          Colors.blue,
          Colors.aqua,
          Colors.teal,
          Colors.yellow,
          Colors.orange,
          Colors.red,
          Colors.maroon,
          Colors.fuchsia,
          Colors.purple
      ];
      WaveformSegments.prototype._getSegmentColor = function () {
          if (this._peaks.options.randomizeSegmentColor) {
              if (++this._colorIndex === colors.length) {
                  this._colorIndex = 0;
              }
              return colors[this._colorIndex];
          } else {
              return this._peaks.options.segmentColor;
          }
      };
      WaveformSegments.prototype._addSegment = function (segment) {
          this._segments.push(segment);
          this._segmentsById[segment.id] = segment;
      };
      WaveformSegments.prototype._createSegment = function (options) {
          if (!Utils.isObject(options)) {
              throw new TypeError('peaks.segments.add(): expected a Segment object parameter');
          }
          var segment = new Segment(this, Utils.isNullOrUndefined(options.id) ? this._getNextSegmentId() : options.id, options.startTime, options.endTime, options.labelText || '', options.color || this._getSegmentColor(), options.editable || false);
          return segment;
      };
      WaveformSegments.prototype.getSegments = function () {
          return this._segments;
      };
      WaveformSegments.prototype.getSegment = function (id) {
          return this._segmentsById[id] || null;
      };
      WaveformSegments.prototype.getSegmentsAtTime = function (time) {
          return this._segments.filter(function (segment) {
              return time >= segment.startTime && time < segment.endTime;
          });
      };
      WaveformSegments.prototype.find = function (startTime, endTime) {
          return this._segments.filter(function (segment) {
              return segment.isVisible(startTime, endTime);
          });
      };
      WaveformSegments.prototype.add = function (segmentOrSegments) {
          var self = this;
          var segments = Array.isArray(arguments[0]) ? arguments[0] : Array.prototype.slice.call(arguments);
          if (typeof segments[0] === 'number') {
              this._peaks.options.deprecationLogger('peaks.segments.add(): expected a segment object or an array');
              segments = [{
                      startTime: arguments[0],
                      endTime: arguments[1],
                      editable: arguments[2],
                      color: arguments[3],
                      labelText: arguments[4]
                  }];
          }
          segments = segments.map(function (segmentOptions) {
              var segment = self._createSegment(segmentOptions);
              if (Object.prototype.hasOwnProperty.call(self._segmentsById, segment.id)) {
                  throw new Error('peaks.segments.add(): duplicate id');
              }
              return segment;
          });
          segments.forEach(function (segment) {
              self._addSegment(segment);
          });
          this._peaks.emit('segments.add', segments);
      };
      WaveformSegments.prototype._findSegment = function (predicate) {
          var indexes = [];
          for (var i = 0, length = this._segments.length; i < length; i++) {
              if (predicate(this._segments[i])) {
                  indexes.push(i);
              }
          }
          return indexes;
      };
      WaveformSegments.prototype._removeIndexes = function (indexes) {
          var removed = [];
          for (var i = 0; i < indexes.length; i++) {
              var index = indexes[i] - removed.length;
              var itemRemoved = this._segments.splice(index, 1)[0];
              delete this._segmentsById[itemRemoved.id];
              removed.push(itemRemoved);
          }
          return removed;
      };
      WaveformSegments.prototype._removeSegments = function (predicate) {
          var indexes = this._findSegment(predicate);
          var removed = this._removeIndexes(indexes);
          this._peaks.emit('segments.remove', removed);
          return removed;
      };
      WaveformSegments.prototype.remove = function (segment) {
          return this._removeSegments(function (s) {
              return s === segment;
          });
      };
      WaveformSegments.prototype.removeById = function (segmentId) {
          return this._removeSegments(function (segment) {
              return segment.id === segmentId;
          });
      };
      WaveformSegments.prototype.removeByTime = function (startTime, endTime) {
          endTime = typeof endTime === 'number' ? endTime : 0;
          var fnFilter;
          if (endTime > 0) {
              fnFilter = function (segment) {
                  return segment.startTime === startTime && segment.endTime === endTime;
              };
          } else {
              fnFilter = function (segment) {
                  return segment.startTime === startTime;
              };
          }
          return this._removeSegments(fnFilter);
      };
      WaveformSegments.prototype.removeAll = function () {
          this._segments = [];
          this._segmentsById = {};
          this._peaks.emit('segments.remove_all');
      };
      return WaveformSegments;
  }(_dereq_('colors.css'), _dereq_('peaks/markers/segment'), _dereq_('peaks/waveform/waveform.utils'));
  },{"colors.css":1,"peaks/markers/segment":74,"peaks/waveform/waveform.utils":92}],77:[function(_dereq_,module,exports){
  module.exports = function (Utils) {
      function Player(peaks, mediaElement) {
          var self = this;
          self._peaks = peaks;
          self._listeners = [];
          self._mediaElement = mediaElement;
          self._duration = self.getDuration();
          self._isPlaying = false;
          if (self._mediaElement.readyState === 4) {
              self._peaks.emit('player_load', self);
          }
          self._addMediaListener('timeupdate', function () {
              self._peaks.emit('player_time_update', self.getCurrentTime());
          });
          self._addMediaListener('play', function () {
              self._isPlaying = true;
              self._peaks.emit('player_play', self.getCurrentTime());
          });
          self._addMediaListener('pause', function () {
              self._isPlaying = false;
              self._peaks.emit('player_pause', self.getCurrentTime());
          });
          self._addMediaListener('seeked', function () {
              self._peaks.emit('player_seek', self.getCurrentTime());
          });
          self._addMediaListener('canplay', function () {
              self._peaks.emit('player_canplay', self);
          });
          self._addMediaListener('error', function (event) {
              self._peaks.emit('player_error', event.target.error);
          });
          self._interval = null;
      }
      Player.prototype._addMediaListener = function (type, callback) {
          this._listeners.push({
              type: type,
              callback: callback
          });
          this._mediaElement.addEventListener(type, callback);
      };
      Player.prototype.destroy = function () {
          for (var i = 0; i < this._listeners.length; i++) {
              var listener = this._listeners[i];
              this._mediaElement.removeEventListener(listener.type, listener.callback);
          }
          this._listeners.length = 0;
          if (this._interval !== null) {
              clearTimeout(this._interval);
              this._interval = null;
          }
      };
      Player.prototype.setSource = function (source) {
          this._mediaElement.setAttribute('src', source);
      };
      Player.prototype.getSource = function () {
          return this._mediaElement.src;
      };
      Player.prototype.getCurrentSource = function () {
          return this._mediaElement.currentSrc;
      };
      Player.prototype.play = function () {
          this._mediaElement.play();
      };
      Player.prototype.pause = function () {
          this._mediaElement.pause();
      };
      Player.prototype.isPlaying = function () {
          return this._isPlaying;
      };
      Player.prototype.isSeeking = function () {
          return this._mediaElement.seeking;
      };
      Player.prototype.getCurrentTime = function () {
          return this._mediaElement.currentTime;
      };
      Player.prototype.getDuration = function () {
          return this._mediaElement.duration;
      };
      Player.prototype.seek = function (time) {
          if (!Utils.isValidTime(time)) {
              this._peaks.logger('peaks.player.seek(): parameter must be a valid time, in seconds');
              return;
          }
          this._mediaElement.currentTime = time;
      };
      Player.prototype.playSegment = function (segment) {
          var self = this;
          if (!segment || !Utils.isValidTime(segment.startTime) || !Utils.isValidTime(segment.endTime)) {
              self._peaks.logger('peaks.player.playSegment(): parameter must be a segment object');
              return;
          }
          clearTimeout(self._interval);
          self._interval = null;
          self.seek(segment.startTime);
          self._mediaElement.play();
          self._interval = setInterval(function () {
              if (self.getCurrentTime() >= segment.endTime || self._mediaElement.paused) {
                  clearTimeout(self._interval);
                  self._interval = null;
                  self._mediaElement.pause();
              }
          }, 30);
      };
      return Player;
  }(_dereq_('peaks/waveform/waveform.utils'));
  },{"peaks/waveform/waveform.utils":92}],78:[function(_dereq_,module,exports){
  module.exports = function () {
      var nodes = [
          'OBJECT',
          'TEXTAREA',
          'INPUT',
          'SELECT',
          'OPTION'
      ];
      var SPACE = 32, TAB = 9, LEFT_ARROW = 37, RIGHT_ARROW = 39;
      var keys = [
          SPACE,
          TAB,
          LEFT_ARROW,
          RIGHT_ARROW
      ];
      function KeyboardHandler(eventEmitter) {
          this.eventEmitter = eventEmitter;
          document.addEventListener('keydown', this.handleKeyEvent.bind(this));
          document.addEventListener('keypress', this.handleKeyEvent.bind(this));
          document.addEventListener('keyup', this.handleKeyEvent.bind(this));
      }
      KeyboardHandler.prototype.handleKeyEvent = function handleKeyEvent(event) {
          if (nodes.indexOf(event.target.nodeName) === -1) {
              if (keys.indexOf(event.type) > -1) {
                  event.preventDefault();
              }
              if (event.type === 'keydown' || event.type === 'keypress') {
                  switch (event.keyCode) {
                  case SPACE:
                      this.eventEmitter.emit('keyboard.space');
                      break;
                  case TAB:
                      this.eventEmitter.emit('keyboard.tab');
                      break;
                  }
              } else if (event.type === 'keyup') {
                  switch (event.keyCode) {
                  case LEFT_ARROW:
                      if (event.shiftKey) {
                          this.eventEmitter.emit('keyboard.shift_left');
                      } else {
                          this.eventEmitter.emit('keyboard.left');
                      }
                      break;
                  case RIGHT_ARROW:
                      if (event.shiftKey) {
                          this.eventEmitter.emit('keyboard.shift_right');
                      } else {
                          this.eventEmitter.emit('keyboard.right');
                      }
                      break;
                  }
              }
          }
      };
      return KeyboardHandler;
  }();
  },{}],79:[function(_dereq_,module,exports){
  module.exports = function () {
      function MouseDragHandler(stage, handlers) {
          this._stage = stage;
          this._handlers = handlers;
          this._dragging = false;
          this._mouseDown = this.mouseDown.bind(this);
          this._mouseUp = this.mouseUp.bind(this);
          this._mouseMove = this.mouseMove.bind(this);
          this._stage.on('mousedown', this._mouseDown);
          this._stage.on('touchstart', this._mouseDown);
          this._mouseDownClientX = null;
      }
      MouseDragHandler.prototype.mouseDown = function (event) {
          if (!event.target) {
              return;
          }
          if (event.target.attrs.draggable) {
              return;
          }
          if (event.target.parent && event.target.parent.attrs.draggable) {
              return;
          }
          if (event.type === 'touchstart') {
              this._mouseDownClientX = Math.floor(event.evt.touches[0].clientX);
          } else {
              this._mouseDownClientX = event.evt.clientX;
          }
          if (this._handlers.onMouseDown) {
              var mouseDownPosX = this._getMousePosX(this._mouseDownClientX);
              this._handlers.onMouseDown(mouseDownPosX);
          }
          window.addEventListener('mousemove', this._mouseMove, false);
          window.addEventListener('touchmove', this._mouseMove, false);
          window.addEventListener('mouseup', this._mouseUp, false);
          window.addEventListener('touchend', this._mouseUp, false);
          window.addEventListener('blur', this._mouseUp, false);
      };
      MouseDragHandler.prototype.mouseMove = function (event) {
          var clientX = null;
          if (event.type === 'touchmove') {
              clientX = Math.floor(event.changedTouches[0].clientX);
          } else {
              clientX = event.clientX;
          }
          if (clientX === this._mouseDownClientX) {
              return;
          }
          this._dragging = true;
          if (this._handlers.onMouseMove) {
              var mousePosX = this._getMousePosX(clientX);
              this._handlers.onMouseMove(mousePosX);
          }
      };
      MouseDragHandler.prototype.mouseUp = function (event) {
          var clientX = null;
          if (event.type === 'touchend') {
              clientX = Math.floor(event.changedTouches[0].clientX);
              if (event.cancelable) {
                  event.preventDefault();
              }
          } else {
              clientX = event.clientX;
          }
          if (this._handlers.onMouseUp) {
              var mousePosX = this._getMousePosX(clientX);
              this._handlers.onMouseUp(mousePosX);
          }
          window.removeEventListener('mousemove', this._mouseMove, false);
          window.removeEventListener('touchmove', this._mouseMove, false);
          window.removeEventListener('mouseup', this._mouseUp, false);
          window.removeEventListener('touchend', this._mouseUp, false);
          window.removeEventListener('blur', this._mouseUp, false);
          this._dragging = false;
      };
      MouseDragHandler.prototype._getMousePosX = function (clientX) {
          var containerPos = this._stage.getContainer().getBoundingClientRect();
          return clientX - containerPos.left;
      };
      MouseDragHandler.prototype.isDragging = function () {
          return this._dragging;
      };
      return MouseDragHandler;
  }();
  },{}],80:[function(_dereq_,module,exports){
  module.exports = function (Utils, Konva) {
      function PlayheadLayer(peaks, view, showTime, time) {
          this._peaks = peaks;
          this._view = view;
          this._playheadPixel = 0;
          this._playheadLineAnimation = null;
          this._playheadVisible = false;
          this._playheadColor = peaks.options.playheadColor;
          this._playheadTextColor = peaks.options.playheadTextColor;
          this._playheadLayer = new Konva.Layer();
          this._createPlayhead(this._playheadColor);
          if (showTime) {
              this._createPlayheadText(this._playheadTextColor);
          }
          this.zoomLevelChanged();
          this._syncPlayhead(time);
      }
      PlayheadLayer.prototype.addToStage = function (stage) {
          stage.add(this._playheadLayer);
      };
      PlayheadLayer.prototype.zoomLevelChanged = function () {
          var pixelsPerSecond = this._view.timeToPixels(1);
          var time;
          this._useAnimation = pixelsPerSecond >= 5;
          if (this._useAnimation) {
              if (this._peaks.player.isPlaying() && !this._playheadLineAnimation) {
                  this._start();
              }
          } else {
              if (this._playheadLineAnimation) {
                  time = this._peaks.player.getCurrentTime();
                  this.stop(time);
              }
          }
      };
      PlayheadLayer.prototype._createPlayhead = function (color) {
          this._playheadLine = new Konva.Line({
              points: [
                  0.5,
                  0,
                  0.5,
                  this._view.getHeight()
              ],
              stroke: color,
              strokeWidth: 1
          });
          this._playheadGroup = new Konva.Group({
              x: 0,
              y: 0
          });
          this._playheadGroup.add(this._playheadLine);
          this._playheadLayer.add(this._playheadGroup);
      };
      PlayheadLayer.prototype._createPlayheadText = function (color) {
          this._playheadText = new Konva.Text({
              x: 2,
              y: 12,
              text: '00:00:00',
              fontSize: 11,
              fontFamily: 'sans-serif',
              fill: color,
              align: 'right'
          });
          this._playheadGroup.add(this._playheadText);
      };
      PlayheadLayer.prototype.updatePlayheadTime = function (time) {
          this._syncPlayhead(time);
          if (this._peaks.player.isPlaying()) {
              this._start();
          }
      };
      PlayheadLayer.prototype._syncPlayhead = function (time) {
          var pixelIndex = this._view.timeToPixels(time);
          var frameOffset = this._view.getFrameOffset();
          var width = this._view.getWidth();
          var isVisible = pixelIndex >= frameOffset && pixelIndex < frameOffset + width;
          this._playheadPixel = pixelIndex;
          if (isVisible) {
              var playheadX = this._playheadPixel - frameOffset;
              if (!this._playheadVisible) {
                  this._playheadVisible = true;
                  this._playheadGroup.show();
              }
              this._playheadGroup.setAttr('x', playheadX);
              if (this._playheadText) {
                  var text = Utils.formatTime(time, false);
                  this._playheadText.setText(text);
              }
              this._playheadLayer.draw();
          } else {
              if (this._playheadVisible) {
                  this._playheadVisible = false;
                  this._playheadGroup.hide();
                  this._playheadLayer.draw();
              }
          }
      };
      PlayheadLayer.prototype._start = function () {
          var self = this;
          if (self._playheadLineAnimation) {
              self._playheadLineAnimation.stop();
              self._playheadLineAnimation = null;
          }
          if (!self._useAnimation) {
              return;
          }
          var lastPlayheadPosition = null;
          self._playheadLineAnimation = new Konva.Animation(function () {
              var time = self._peaks.player.getCurrentTime();
              var playheadPosition = self._view.timeToPixels(time);
              if (playheadPosition !== lastPlayheadPosition) {
                  self._syncPlayhead(time);
                  lastPlayheadPosition = playheadPosition;
              }
          }, self._playheadLayer);
          self._playheadLineAnimation.start();
      };
      PlayheadLayer.prototype.stop = function (time) {
          if (this._playheadLineAnimation) {
              this._playheadLineAnimation.stop();
              this._playheadLineAnimation = null;
          }
          this._syncPlayhead(time);
      };
      PlayheadLayer.prototype.getPlayheadOffset = function () {
          return this._playheadPixel - this._view.getFrameOffset();
      };
      PlayheadLayer.prototype.getPlayheadPixel = function () {
          return this._playheadPixel;
      };
      PlayheadLayer.prototype.showPlayheadTime = function (show) {
          var updated = false;
          if (show) {
              if (!this._playheadText) {
                  this._createPlayheadText(this._playheadTextColor);
                  updated = true;
              }
          } else {
              if (this._playheadText) {
                  this._playheadText.remove();
                  this._playheadText.destroy();
                  this._playheadText = null;
                  updated = true;
              }
          }
          if (updated) {
              this._playheadLayer.draw();
          }
      };
      return PlayheadLayer;
  }(_dereq_('peaks/waveform/waveform.utils'), _dereq_('konva'));
  },{"konva":43,"peaks/waveform/waveform.utils":92}],81:[function(_dereq_,module,exports){
  module.exports = function (Utils, Konva) {
      function PointsLayer(peaks, view, allowEditing, showLabels) {
          this._peaks = peaks;
          this._view = view;
          this._allowEditing = allowEditing;
          this._showLabels = showLabels;
          this._pointGroups = {};
          this._layer = new Konva.Layer();
          this._registerEventHandlers();
      }
      PointsLayer.prototype.addToStage = function (stage) {
          stage.add(this._layer);
      };
      PointsLayer.prototype._registerEventHandlers = function () {
          var self = this;
          this._peaks.on('points.update', function (point) {
              var frameOffset = self._view.getFrameOffset();
              var width = self._view.getWidth();
              var frameStartTime = self._view.pixelsToTime(frameOffset);
              var frameEndTime = self._view.pixelsToTime(frameOffset + width);
              self._removePoint(point);
              if (point.isVisible(frameStartTime, frameEndTime)) {
                  self._addPointGroup(point);
              }
              self.updatePoints(frameStartTime, frameEndTime);
          });
          this._peaks.on('points.add', function (points) {
              var frameOffset = self._view.getFrameOffset();
              var width = self._view.getWidth();
              var frameStartTime = self._view.pixelsToTime(frameOffset);
              var frameEndTime = self._view.pixelsToTime(frameOffset + width);
              points.forEach(function (point) {
                  if (point.isVisible(frameStartTime, frameEndTime)) {
                      self._addPointGroup(point);
                  }
              });
              self.updatePoints(frameStartTime, frameEndTime);
          });
          this._peaks.on('points.remove', function (points) {
              points.forEach(function (point) {
                  self._removePoint(point);
              });
              self._layer.draw();
          });
          this._peaks.on('points.remove_all', function () {
              self._layer.removeChildren();
              self._pointGroups = {};
              self._layer.draw();
          });
          var pointDragHandler = this._pointDragHandler.bind(this);
          this._peaks.on('points.dragstart', pointDragHandler);
          this._peaks.on('points.dragmove', pointDragHandler);
          this._peaks.on('points.dragend', pointDragHandler);
      };
      PointsLayer.prototype._pointDragHandler = function (point) {
          this._updatePoint(point);
          this._layer.draw();
      };
      PointsLayer.prototype._createPointGroup = function (point) {
          var pointGroup = new Konva.Group();
          pointGroup.point = point;
          var editable = this._allowEditing && point.editable;
          pointGroup.marker = this._peaks.options.createPointMarker({
              draggable: editable,
              showLabel: this._showLabels,
              handleColor: point.color ? point.color : this._peaks.options.pointMarkerColor,
              height: this._view.getHeight(),
              pointGroup: pointGroup,
              point: point,
              layer: this._layer,
              onDblClick: this._onPointHandleDblClick.bind(this),
              onDragStart: this._onPointHandleDragStart.bind(this),
              onDragMove: this._onPointHandleDragMove.bind(this),
              onDragEnd: this._onPointHandleDragEnd.bind(this),
              onMouseEnter: this._onPointHandleMouseEnter.bind(this),
              onMouseLeave: this._onPointHandleMouseLeave.bind(this)
          });
          pointGroup.add(pointGroup.marker);
          return pointGroup;
      };
      PointsLayer.prototype._addPointGroup = function (point) {
          var pointGroup = this._createPointGroup(point);
          this._pointGroups[point.id] = pointGroup;
          this._layer.add(pointGroup);
          return pointGroup;
      };
      PointsLayer.prototype._onPointHandleDragMove = function (point) {
          var pointGroup = this._pointGroups[point.id];
          var markerX = pointGroup.marker.getX();
          if (markerX > 0 && markerX < this._view.getWidth()) {
              var offset = this._view.getFrameOffset() + markerX + pointGroup.marker.getWidth();
              point.time = this._view.pixelsToTime(offset);
          }
          this._peaks.emit('points.dragmove', point);
      };
      PointsLayer.prototype._onPointHandleMouseEnter = function (point) {
          this._peaks.emit('points.mouseenter', point);
      };
      PointsLayer.prototype._onPointHandleMouseLeave = function (point) {
          this._peaks.emit('points.mouseleave', point);
      };
      PointsLayer.prototype._onPointHandleDblClick = function (point) {
          this._peaks.emit('points.dblclick', point);
      };
      PointsLayer.prototype._onPointHandleDragStart = function (point) {
          this._peaks.emit('points.dragstart', point);
      };
      PointsLayer.prototype._onPointHandleDragEnd = function (point) {
          this._peaks.emit('points.dragend', point);
      };
      PointsLayer.prototype.updatePoints = function (startTime, endTime) {
          var points = this._peaks.points.find(startTime, endTime);
          var count = points.length;
          points.forEach(this._updatePoint.bind(this));
          count += this._removeInvisiblePoints(startTime, endTime);
          if (count > 0) {
              this._layer.draw();
          }
      };
      PointsLayer.prototype._updatePoint = function (point) {
          var pointGroup = this._findOrAddPointGroup(point);
          var timestampOffset = this._view.timeToPixels(point.time);
          var startPixel = timestampOffset - this._view.getFrameOffset();
          if (pointGroup.marker) {
              pointGroup.marker.setX(startPixel);
              if (pointGroup.marker.time) {
                  pointGroup.marker.time.setText(Utils.formatTime(point.time, false));
              }
          }
      };
      PointsLayer.prototype._findOrAddPointGroup = function (point) {
          var pointGroup = this._pointGroups[point.id];
          if (!pointGroup) {
              pointGroup = this._addPointGroup(point);
          }
          return pointGroup;
      };
      PointsLayer.prototype._removeInvisiblePoints = function (startTime, endTime) {
          var count = 0;
          for (var pointId in this._pointGroups) {
              if (Object.prototype.hasOwnProperty.call(this._pointGroups, pointId)) {
                  var point = this._pointGroups[pointId].point;
                  if (!point.isVisible(startTime, endTime)) {
                      this._removePoint(point);
                      count++;
                  }
              }
          }
          return count;
      };
      PointsLayer.prototype._removePoint = function (point) {
          var pointGroup = this._pointGroups[point.id];
          if (pointGroup) {
              pointGroup.destroyChildren();
              pointGroup.destroy();
              delete this._pointGroups[point.id];
          }
      };
      PointsLayer.prototype.setVisible = function (visible) {
          this._layer.setVisible(visible);
      };
      return PointsLayer;
  }(_dereq_('peaks/waveform/waveform.utils'), _dereq_('konva'));
  },{"konva":43,"peaks/waveform/waveform.utils":92}],82:[function(_dereq_,module,exports){
  module.exports = function (WaveformShape, Utils, Konva) {
      function SegmentsLayer(peaks, view, allowEditing) {
          this._peaks = peaks;
          this._view = view;
          this._allowEditing = allowEditing;
          this._segmentGroups = {};
          this._layer = new Konva.Layer();
          this._registerEventHandlers();
      }
      SegmentsLayer.prototype.addToStage = function (stage) {
          stage.add(this._layer);
      };
      SegmentsLayer.prototype._registerEventHandlers = function () {
          var self = this;
          this._peaks.on('segments.update', function (segment) {
              var redraw = false;
              var segmentGroup = self._segmentGroups[segment.id];
              var frameOffset = self._view.getFrameOffset();
              var width = self._view.getWidth();
              var frameStartTime = self._view.pixelsToTime(frameOffset);
              var frameEndTime = self._view.pixelsToTime(frameOffset + width);
              if (segmentGroup) {
                  self._removeSegment(segment);
                  redraw = true;
              }
              if (segment.isVisible(frameStartTime, frameEndTime)) {
                  self._addSegmentGroup(segment);
                  redraw = true;
              }
              if (redraw) {
                  self.updateSegments(frameStartTime, frameEndTime);
              }
          });
          this._peaks.on('segments.add', function (segments) {
              var frameOffset = self._view.getFrameOffset();
              var width = self._view.getWidth();
              var frameStartTime = self._view.pixelsToTime(frameOffset);
              var frameEndTime = self._view.pixelsToTime(frameOffset + width);
              segments.forEach(function (segment) {
                  if (segment.isVisible(frameStartTime, frameEndTime)) {
                      self._addSegmentGroup(segment);
                  }
              });
              self.updateSegments(frameStartTime, frameEndTime);
          });
          this._peaks.on('segments.remove', function (segments) {
              segments.forEach(function (segment) {
                  self._removeSegment(segment);
              });
              self._layer.draw();
          });
          this._peaks.on('segments.remove_all', function () {
              self._layer.removeChildren();
              self._segmentGroups = {};
              self._layer.draw();
          });
          this._peaks.on('segments.dragged', function (segment) {
              self._updateSegment(segment);
              self._layer.draw();
          });
      };
      SegmentsLayer.prototype._createSegmentGroup = function (segment) {
          var self = this;
          var segmentGroup = new Konva.Group();
          segmentGroup.segment = segment;
          segmentGroup.waveformShape = new WaveformShape({
              color: segment.color,
              view: self._view,
              segment: segment
          });
          segmentGroup.waveformShape.on('mouseenter', function (event) {
              if (!event.target.parent) {
                  self._peaks.logger('No parent for object:', event.target);
                  return;
              }
              event.target.parent.label.show();
              self._layer.draw();
              self._peaks.emit('segments.mouseenter', event.target._segment);
          });
          segmentGroup.waveformShape.on('mouseleave', function (event) {
              if (!event.target.parent) {
                  self._peaks.logger('No parent for object:', event.target);
                  return;
              }
              event.target.parent.label.hide();
              self._layer.draw();
              self._peaks.emit('segments.mouseleave', event.target._segment);
          });
          segmentGroup.waveformShape.on('click', function (event) {
              if (!event.target.parent) {
                  self._peaks.logger('No parent for object:', event.target);
                  return;
              }
              self._peaks.emit('segments.click', event.target._segment);
          });
          segmentGroup.add(segmentGroup.waveformShape);
          segmentGroup.label = self._peaks.options.createSegmentLabel(segmentGroup, segment);
          segmentGroup.label.hide();
          segmentGroup.add(segmentGroup.label);
          var editable = self._allowEditing && segment.editable;
          if (editable) {
              segmentGroup.inMarker = this._peaks.options.createSegmentMarker({
                  draggable: editable,
                  height: this._view.getHeight(),
                  color: this._peaks.options.inMarkerColor,
                  inMarker: true,
                  segmentGroup: segmentGroup,
                  segment: segment,
                  layer: self._layer,
                  onDrag: editable ? self._onSegmentHandleDrag.bind(self) : null
              });
              segmentGroup.add(segmentGroup.inMarker);
              segmentGroup.outMarker = this._peaks.options.createSegmentMarker({
                  draggable: editable,
                  height: this._view.getHeight(),
                  color: this._peaks.options.outMarkerColor,
                  inMarker: false,
                  segmentGroup: segmentGroup,
                  segment: segment,
                  layer: self._layer,
                  onDrag: editable ? self._onSegmentHandleDrag.bind(self) : null
              });
              segmentGroup.add(segmentGroup.outMarker);
          }
          return segmentGroup;
      };
      SegmentsLayer.prototype._addSegmentGroup = function (segment) {
          var segmentGroup = this._createSegmentGroup(segment);
          this._layer.add(segmentGroup);
          this._segmentGroups[segment.id] = segmentGroup;
          return segmentGroup;
      };
      SegmentsLayer.prototype._onSegmentHandleDrag = function (segmentGroup, segment) {
          var frameOffset = this._view.getFrameOffset();
          var width = this._view.getWidth();
          var inMarkerX = segmentGroup.inMarker.getX();
          var outMarkerX = segmentGroup.outMarker.getX();
          if (inMarkerX > 0) {
              var inOffset = frameOffset + inMarkerX + segmentGroup.inMarker.getWidth();
              segment.startTime = this._view.pixelsToTime(inOffset);
          }
          if (outMarkerX < width) {
              var outOffset = frameOffset + outMarkerX;
              segment.endTime = this._view.pixelsToTime(outOffset);
          }
          this._peaks.emit('segments.dragged', segment);
      };
      SegmentsLayer.prototype.updateSegments = function (startTime, endTime) {
          var segments = this._peaks.segments.find(startTime, endTime);
          var count = segments.length;
          segments.forEach(this._updateSegment.bind(this));
          count += this._removeInvisibleSegments(startTime, endTime);
          if (count > 0) {
              this._layer.draw();
          }
      };
      SegmentsLayer.prototype._updateSegment = function (segment) {
          var segmentGroup = this._findOrAddSegmentGroup(segment);
          var segmentStartOffset = this._view.timeToPixels(segment.startTime);
          var segmentEndOffset = this._view.timeToPixels(segment.endTime);
          var frameStartOffset = this._view.getFrameOffset();
          var startPixel = segmentStartOffset - frameStartOffset;
          var endPixel = segmentEndOffset - frameStartOffset;
          if (this._allowEditing && segment.editable) {
              var marker = segmentGroup.inMarker;
              if (marker) {
                  marker.setX(startPixel - marker.getWidth());
                  marker.label.setText(Utils.formatTime(segment.startTime, false));
              }
              marker = segmentGroup.outMarker;
              if (marker) {
                  marker.setX(endPixel);
                  marker.label.setText(Utils.formatTime(segment.endTime, false));
              }
          }
      };
      SegmentsLayer.prototype._findOrAddSegmentGroup = function (segment) {
          var segmentGroup = this._segmentGroups[segment.id];
          if (!segmentGroup) {
              segmentGroup = this._addSegmentGroup(segment);
          }
          return segmentGroup;
      };
      SegmentsLayer.prototype._removeInvisibleSegments = function (startTime, endTime) {
          var count = 0;
          for (var segmentId in this._segmentGroups) {
              if (Object.prototype.hasOwnProperty.call(this._segmentGroups, segmentId)) {
                  var segment = this._segmentGroups[segmentId].segment;
                  if (!segment.isVisible(startTime, endTime)) {
                      this._removeSegment(segment);
                      count++;
                  }
              }
          }
          return count;
      };
      SegmentsLayer.prototype._removeSegment = function (segment) {
          var segmentGroup = this._segmentGroups[segment.id];
          if (segmentGroup) {
              segmentGroup.destroyChildren();
              segmentGroup.destroy();
              delete this._segmentGroups[segment.id];
          }
      };
      SegmentsLayer.prototype.setVisible = function (visible) {
          this._layer.setVisible(visible);
      };
      SegmentsLayer.prototype.setAmplitudeScale = function (scale) {
          var updated = false;
          for (var segmentId in this._segmentGroups) {
              if (Object.prototype.hasOwnProperty.call(this._segmentGroups, segmentId)) {
                  var segmentGroup = this._segmentGroups[segmentId];
                  segmentGroup.waveformShape.setAmplitudeScale(scale);
                  updated = true;
              }
          }
          if (updated) {
              this._layer.draw();
          }
      };
      return SegmentsLayer;
  }(_dereq_('peaks/views/waveform-shape'), _dereq_('peaks/waveform/waveform.utils'), _dereq_('konva'));
  },{"konva":43,"peaks/views/waveform-shape":84,"peaks/waveform/waveform.utils":92}],83:[function(_dereq_,module,exports){
  module.exports = function (WaveformOverview, WaveformZoomView, Utils) {
      function ViewController(peaks) {
          this._peaks = peaks;
          this._overview = null;
          this._zoomview = null;
      }
      ViewController.prototype.createOverview = function (container) {
          if (this._overview) {
              return this._overview;
          }
          var waveformData = this._peaks.getWaveformData();
          this._overview = new WaveformOverview(waveformData, container, this._peaks);
          return this._overview;
      };
      ViewController.prototype.createZoomview = function (container) {
          if (this._zoomview) {
              return this._zoomview;
          }
          var waveformData = this._peaks.getWaveformData();
          this._zoomview = new WaveformZoomView(waveformData, container, this._peaks);
          return this._zoomview;
      };
      ViewController.prototype.destroy = function () {
          if (this._overview) {
              this._overview.destroy();
              this._overview = null;
          }
          if (this._zoomview) {
              this._zoomview.destroy();
              this._zoomview = null;
          }
      };
      ViewController.prototype.getView = function (name) {
          if (Utils.isNullOrUndefined(name)) {
              if (this._overview && this._zoomview) {
                  return null;
              } else if (this._overview) {
                  return this._overview;
              } else if (this._zoomview) {
                  return this._zoomview;
              } else {
                  return null;
              }
          } else {
              switch (name) {
              case 'overview':
                  return this._overview;
              case 'zoomview':
                  return this._zoomview;
              default:
                  return null;
              }
          }
      };
      return ViewController;
  }(_dereq_('peaks/views/waveform.overview'), _dereq_('peaks/views/waveform.zoomview'), _dereq_('peaks/waveform/waveform.utils'));
  },{"peaks/views/waveform.overview":85,"peaks/views/waveform.zoomview":88,"peaks/waveform/waveform.utils":92}],84:[function(_dereq_,module,exports){
  module.exports = function (Utils, Konva) {
      function scaleY(amplitude, height, scale) {
          var range = 256;
          var offset = 128;
          var scaledAmplitude = (amplitude * scale + offset) * height / range;
          return height - Utils.clamp(height - scaledAmplitude, 0, height);
      }
      function WaveformShape(options) {
          Konva.Shape.call(this, { fill: options.color });
          this._view = options.view;
          this._segment = options.segment;
          this._scale = 1;
          this.sceneFunc(this._sceneFunc);
      }
      WaveformShape.prototype = Object.create(Konva.Shape.prototype);
      WaveformShape.prototype.setAmplitudeScale = function (scale) {
          this._scale = scale;
      };
      WaveformShape.prototype.setWaveformColor = function (color) {
          this.fill(color);
      };
      WaveformShape.prototype._sceneFunc = function (context) {
          var frameOffset = this._view.getFrameOffset();
          var width = this._view.getWidth();
          var height = this._view.getHeight();
          this._drawWaveform(context, this._view.getWaveformData(), frameOffset, this._segment ? this._view.timeToPixels(this._segment.startTime) : frameOffset, this._segment ? this._view.timeToPixels(this._segment.endTime) : frameOffset + width, width, height);
      };
      WaveformShape.prototype._drawWaveform = function (context, waveformData, frameOffset, startPixels, endPixels, width, height) {
          if (startPixels < frameOffset) {
              startPixels = frameOffset;
          }
          var limit = frameOffset + width;
          if (endPixels > limit) {
              endPixels = limit;
          }
          if (endPixels > waveformData.length) {
              endPixels = waveformData.length;
          }
          var channels = waveformData.channels;
          var waveformTop = 0;
          var waveformHeight = Math.floor(height / channels);
          for (var i = 0; i < channels; i++) {
              if (i === channels - 1) {
                  waveformHeight = height - (channels - 1) * waveformHeight;
              }
              this._drawChannel(context, waveformData.channel(i), frameOffset, startPixels, endPixels, waveformTop, waveformHeight);
              waveformTop += waveformHeight;
          }
      };
      WaveformShape.prototype._drawChannel = function (context, channel, frameOffset, startPixels, endPixels, top, height) {
          var x, val;
          context.beginPath();
          for (x = startPixels; x < endPixels; x++) {
              val = channel.min_sample(x);
              context.lineTo(x - frameOffset + 0.5, top + scaleY(val, height, this._scale) + 0.5);
          }
          for (x = endPixels - 1; x >= startPixels; x--) {
              val = channel.max_sample(x);
              context.lineTo(x - frameOffset + 0.5, top + scaleY(val, height, this._scale) + 0.5);
          }
          context.closePath();
          context.fillShape(this);
      };
      return WaveformShape;
  }(_dereq_('peaks/waveform/waveform.utils'), _dereq_('konva'));
  },{"konva":43,"peaks/waveform/waveform.utils":92}],85:[function(_dereq_,module,exports){
  module.exports = function (PlayheadLayer, PointsLayer, SegmentsLayer, WaveformShape, MouseDragHandler, WaveformAxis, Utils, Konva) {
      function WaveformOverview(waveformData, container, peaks) {
          var self = this;
          self._originalWaveformData = waveformData;
          self._container = container;
          self._peaks = peaks;
          self._options = peaks.options;
          self._width = container.clientWidth;
          self._height = container.clientHeight || self._options.height;
          if (self._width !== 0) {
              self._data = waveformData.resample(self._width);
          } else {
              self._data = waveformData;
          }
          self._resizeTimeoutId = null;
          self._stage = new Konva.Stage({
              container: container,
              width: self._width,
              height: self._height
          });
          self._waveformLayer = new Konva.FastLayer();
          self._axis = new WaveformAxis(self, self._waveformLayer, peaks.options);
          self._createWaveform();
          self._segmentsLayer = new SegmentsLayer(peaks, self, false);
          self._segmentsLayer.addToStage(self._stage);
          self._pointsLayer = new PointsLayer(peaks, self, false, false);
          self._pointsLayer.addToStage(self._stage);
          self._createHighlightLayer();
          self._playheadLayer = new PlayheadLayer(peaks, self, false, self._options.mediaElement.currentTime);
          self._playheadLayer.addToStage(self._stage);
          self._mouseDragHandler = new MouseDragHandler(self._stage, {
              onMouseDown: function (mousePosX) {
                  mousePosX = Utils.clamp(mousePosX, 0, self._width);
                  var time = self.pixelsToTime(mousePosX);
                  self._playheadLayer.updatePlayheadTime(time);
                  peaks.player.seek(time);
              },
              onMouseMove: function (mousePosX) {
                  mousePosX = Utils.clamp(mousePosX, 0, self._width);
                  var time = self.pixelsToTime(mousePosX);
                  self._playheadLayer.updatePlayheadTime(time);
                  self._peaks.player.seek(time);
              }
          });
          peaks.on('player_play', function (time) {
              self._playheadLayer.updatePlayheadTime(time);
          });
          peaks.on('player_pause', function (time) {
              self._playheadLayer.stop(time);
          });
          peaks.on('player_time_update', function (time) {
              self._playheadLayer.updatePlayheadTime(time);
          });
          peaks.on('zoomview.displaying', function (startTime, endTime) {
              if (!self._highlightRect) {
                  self._createHighlightRect(startTime, endTime);
              }
              self._updateHighlightRect(startTime, endTime);
          });
          peaks.on('window_resize', function () {
              if (self._resizeTimeoutId) {
                  clearTimeout(self._resizeTimeoutId);
                  self._resizeTimeoutId = null;
              }
              if (self._container.clientWidth !== 0) {
                  self._width = self._container.clientWidth;
                  self._stage.setWidth(self._width);
                  self._resizeTimeoutId = setTimeout(function () {
                      self._width = self._container.clientWidth;
                      self._data = self._originalWaveformData.resample(self._width);
                      self._stage.setWidth(self._width);
                      self._updateWaveform();
                  }, 500);
              }
          });
      }
      WaveformOverview.prototype.setWaveformData = function (waveformData) {
          this._originalWaveformData = waveformData;
          if (this._width !== 0) {
              this._data = waveformData.resample(this._width);
          } else {
              this._data = waveformData;
          }
          this._updateWaveform();
      };
      WaveformOverview.prototype.timeToPixels = function (time) {
          return Math.floor(time * this._data.sample_rate / this._data.scale);
      };
      WaveformOverview.prototype.pixelsToTime = function (pixels) {
          return pixels * this._data.scale / this._data.sample_rate;
      };
      WaveformOverview.prototype.getFrameOffset = function () {
          return 0;
      };
      WaveformOverview.prototype.getWidth = function () {
          return this._width;
      };
      WaveformOverview.prototype.getHeight = function () {
          return this._height;
      };
      WaveformOverview.prototype.setAmplitudeScale = function (scale) {
          if (!Utils.isNumber(scale) || !Number.isFinite(scale)) {
              throw new Error('view.setAmplitudeScale(): Scale must be a valid number');
          }
          this._waveformShape.setAmplitudeScale(scale);
          this._waveformLayer.draw();
      };
      WaveformOverview.prototype.getWaveformData = function () {
          return this._data;
      };
      WaveformOverview.prototype._createWaveform = function () {
          this._waveformShape = new WaveformShape({
              color: this._options.overviewWaveformColor,
              view: this
          });
          this._waveformLayer.add(this._waveformShape);
          this._stage.add(this._waveformLayer);
      };
      WaveformOverview.prototype._createHighlightLayer = function () {
          this._highlightLayer = new Konva.FastLayer();
          this._stage.add(this._highlightLayer);
      };
      WaveformOverview.prototype._createHighlightRect = function (startTime, endTime) {
          this._highlightRectStartTime = startTime;
          this._highlightRectEndTime = endTime;
          var startOffset = this.timeToPixels(startTime);
          var endOffset = this.timeToPixels(endTime);
          this._highlightRect = new Konva.Rect({
              startOffset: 0,
              y: 11,
              width: endOffset - startOffset,
              stroke: this._options.overviewHighlightRectangleColor,
              strokeWidth: 1,
              height: this._height - 11 * 2,
              fill: this._options.overviewHighlightRectangleColor,
              opacity: 0.3,
              cornerRadius: 2
          });
          this._highlightLayer.add(this._highlightRect);
      };
      WaveformOverview.prototype._updateHighlightRect = function (startTime, endTime) {
          this._highlightRectStartTime = startTime;
          this._highlightRectEndTime = endTime;
          var startOffset = this.timeToPixels(startTime);
          var endOffset = this.timeToPixels(endTime);
          this._highlightRect.setAttrs({
              x: startOffset,
              width: endOffset - startOffset
          });
          this._highlightLayer.draw();
      };
      WaveformOverview.prototype._updateWaveform = function () {
          this._waveformLayer.draw();
          var playheadTime = this._peaks.player.getCurrentTime();
          this._playheadLayer.updatePlayheadTime(playheadTime);
          if (this._highlightRect) {
              this._updateHighlightRect(this._highlightRectStartTime, this._highlightRectEndTime);
          }
          var frameStartTime = 0;
          var frameEndTime = this.pixelsToTime(this._width);
          this._pointsLayer.updatePoints(frameStartTime, frameEndTime);
          this._segmentsLayer.updateSegments(frameStartTime, frameEndTime);
      };
      WaveformOverview.prototype.setWaveformColor = function (color) {
          this._waveformShape.setWaveformColor(color);
          this._waveformLayer.draw();
      };
      WaveformOverview.prototype.showPlayheadTime = function (show) {
          this._playheadLayer.showPlayheadTime(show);
      };
      WaveformOverview.prototype.enableAutoScroll = function () {
      };
      WaveformOverview.prototype.destroy = function () {
          if (this._resizeTimeoutId) {
              clearTimeout(this._resizeTimeoutId);
              this._resizeTimeoutId = null;
          }
          if (this._stage) {
              this._stage.destroy();
              this._stage = null;
          }
      };
      return WaveformOverview;
  }(_dereq_('peaks/views/playhead-layer'), _dereq_('peaks/views/points-layer'), _dereq_('peaks/views/segments-layer'), _dereq_('peaks/views/waveform-shape'), _dereq_('peaks/views/helpers/mousedraghandler'), _dereq_('peaks/waveform/waveform.axis'), _dereq_('peaks/waveform/waveform.utils'), _dereq_('konva'));
  },{"konva":43,"peaks/views/helpers/mousedraghandler":79,"peaks/views/playhead-layer":80,"peaks/views/points-layer":81,"peaks/views/segments-layer":82,"peaks/views/waveform-shape":84,"peaks/waveform/waveform.axis":90,"peaks/waveform/waveform.utils":92}],86:[function(_dereq_,module,exports){
  module.exports = function () {
      function TimeController(peaks) {
          this._peaks = peaks;
      }
      TimeController.prototype.setCurrentTime = function (time) {
          this._peaks.options.deprecationLogger('peaks.time.setCurrentTime(): this function is deprecated. Call peaks.player.seek() instead');
          return this._peaks.player.seek(time);
      };
      TimeController.prototype.getCurrentTime = function () {
          this._peaks.options.deprecationLogger('peaks.time.getCurrentTime(): this function is deprecated. Call peaks.player.getCurrentTime() instead');
          return this._peaks.player.getCurrentTime();
      };
      return TimeController;
  }();
  },{}],87:[function(_dereq_,module,exports){
  module.exports = function () {
      function ZoomController(peaks, zoomLevels) {
          this._peaks = peaks;
          this._zoomLevels = zoomLevels;
          this._zoomLevelIndex = 0;
      }
      ZoomController.prototype.setZoomLevels = function (zoomLevels) {
          this._zoomLevels = zoomLevels;
          this.setZoom(0, true);
      };
      ZoomController.prototype.zoomIn = function () {
          this.setZoom(this._zoomLevelIndex - 1);
      };
      ZoomController.prototype.zoomOut = function () {
          this.setZoom(this._zoomLevelIndex + 1);
      };
      ZoomController.prototype.setZoom = function (zoomLevelIndex, forceUpdate) {
          if (zoomLevelIndex >= this._zoomLevels.length) {
              zoomLevelIndex = this._zoomLevels.length - 1;
          }
          if (zoomLevelIndex < 0) {
              zoomLevelIndex = 0;
          }
          if (!forceUpdate && zoomLevelIndex === this._zoomLevelIndex) {
              return;
          }
          var previousZoomLevelIndex = this._zoomLevelIndex;
          this._zoomLevelIndex = zoomLevelIndex;
          this._peaks.emit('zoom.update', this._zoomLevels[zoomLevelIndex], this._zoomLevels[previousZoomLevelIndex]);
      };
      ZoomController.prototype.getZoom = function () {
          return this._zoomLevelIndex;
      };
      ZoomController.prototype.getZoomLevel = function () {
          return this._zoomLevels[this._zoomLevelIndex];
      };
      return ZoomController;
  }();
  },{}],88:[function(_dereq_,module,exports){
  module.exports = function (PlayheadLayer, PointsLayer, SegmentsLayer, WaveformShape, MouseDragHandler, WaveformAxis, Utils, Konva) {
      function WaveformZoomView(waveformData, container, peaks) {
          var self = this;
          self._originalWaveformData = waveformData;
          self._container = container;
          self._peaks = peaks;
          self._enableAutoScroll = true;
          self._options = peaks.options;
          self._data = null;
          self._pixelLength = 0;
          var initialZoomLevel = self._options.zoomLevels[peaks.zoom.getZoom()];
          self._resampleData(initialZoomLevel);
          self._width = container.clientWidth;
          self._height = container.clientHeight || self._options.height;
          self._frameOffset = 0;
          self._stage = new Konva.Stage({
              container: container,
              width: self._width,
              height: self._height
          });
          self._waveformLayer = new Konva.FastLayer();
          self._axis = new WaveformAxis(self, self._waveformLayer, peaks.options);
          self._createWaveform();
          self._segmentsLayer = new SegmentsLayer(peaks, self, true);
          self._segmentsLayer.addToStage(self._stage);
          self._pointsLayer = new PointsLayer(peaks, self, true, true);
          self._pointsLayer.addToStage(self._stage);
          self._playheadLayer = new PlayheadLayer(peaks, self, self._options.showPlayheadTime, self._options.mediaElement.currentTime);
          self._playheadLayer.addToStage(self._stage);
          var time = self._peaks.player.getCurrentTime();
          self._syncPlayhead(time);
          self._mouseDragHandler = new MouseDragHandler(self._stage, {
              onMouseDown: function (mousePosX) {
                  this.initialFrameOffset = self._frameOffset;
                  this.mouseDownX = mousePosX;
              },
              onMouseMove: function (mousePosX) {
                  var diff = this.mouseDownX - mousePosX;
                  var newFrameOffset = Utils.clamp(this.initialFrameOffset + diff, 0, self._pixelLength - self._width);
                  if (newFrameOffset !== this.initialFrameOffset) {
                      self._peaks.emit('user_scroll.zoomview', newFrameOffset);
                  }
              },
              onMouseUp: function (mousePosX) {
                  if (!self._mouseDragHandler.isDragging()) {
                      var mouseDownX = Math.floor(this.mouseDownX);
                      var pixelIndex = self._frameOffset + mouseDownX;
                      var time = self.pixelsToTime(pixelIndex);
                      self._updateWaveform(pixelIndex - mouseDownX);
                      self._playheadLayer.updatePlayheadTime(time);
                      self._peaks.player.seek(time);
                  }
              }
          });
          self._peaks.on('player_time_update', function (time) {
              if (self._mouseDragHandler.isDragging()) {
                  return;
              }
              self._syncPlayhead(time);
          });
          self._peaks.on('user_seek', function (time) {
              var frameIndex = self.timeToPixels(time);
              self._updateWaveform(frameIndex - Math.floor(self._width / 2));
              self._playheadLayer.updatePlayheadTime(time);
          });
          self._peaks.on('user_scroll.zoomview', function (pixelOffset) {
              self._updateWaveform(pixelOffset);
          });
          self._peaks.on('player_play', function (time) {
              self._playheadLayer.updatePlayheadTime(time);
          });
          self._peaks.on('player_pause', function (time) {
              self._playheadLayer.stop(time);
          });
          self._peaks.on('zoom.update', function (currentScale, previousScale) {
              self.setZoomLevel(currentScale, previousScale);
          });
          self._peaks.on('window_resize', function () {
              self._width = self._container.clientWidth;
              self._stage.setWidth(self._width);
              self._updateWaveform(self._frameOffset);
          });
          function nudgeFrame(direction, large) {
              var increment;
              if (large) {
                  increment = direction * self._width;
              } else {
                  increment = direction * self.timeToPixels(self._options.nudgeIncrement);
              }
              self._updateWaveform(self._frameOffset + increment);
          }
          self._peaks.on('keyboard.left', nudgeFrame.bind(self, -1, false));
          self._peaks.on('keyboard.right', nudgeFrame.bind(self, 1, false));
          self._peaks.on('keyboard.shift_left', nudgeFrame.bind(self, -1, true));
          self._peaks.on('keyboard.shift_right', nudgeFrame.bind(self, 1, true));
      }
      WaveformZoomView.prototype.setWaveformData = function (waveformData) {
          this._originalWaveformData = waveformData;
      };
      WaveformZoomView.prototype._syncPlayhead = function (time) {
          this._playheadLayer.updatePlayheadTime(time);
          if (this._enableAutoScroll) {
              var pixelIndex = this.timeToPixels(time);
              var endThreshold = this._frameOffset + this._width - 100;
              if (pixelIndex >= endThreshold || pixelIndex < this._frameOffset) {
                  this._frameOffset = pixelIndex - 100;
                  if (this._frameOffset < 0) {
                      this._frameOffset = 0;
                  }
                  this._updateWaveform(this._frameOffset);
              }
          }
      };
      WaveformZoomView.prototype.setZoomLevel = function (currentScale, previousScale) {
          var currentTime = this._peaks.player.getCurrentTime();
          var apexTime;
          var playheadOffsetPixels = this._playheadLayer.getPlayheadOffset();
          if (playheadOffsetPixels >= 0 && playheadOffsetPixels < this._width) {
              apexTime = currentTime;
          } else {
              playheadOffsetPixels = this._width / 2;
              apexTime = this.pixelsToTime(this._frameOffset + playheadOffsetPixels);
          }
          this._resampleData(currentScale);
          var apexPixel = this.timeToPixels(apexTime);
          this._frameOffset = apexPixel - playheadOffsetPixels;
          this._updateWaveform(this._frameOffset);
          this._playheadLayer.zoomLevelChanged();
          this._playheadLayer.updatePlayheadTime(currentTime);
      };
      WaveformZoomView.prototype._resampleData = function (scale) {
          this._scale = scale;
          this._data = this._originalWaveformData.resample({ scale: scale });
          this._pixelLength = this._data.length;
      };
      WaveformZoomView.prototype.timeToPixels = function (time) {
          return Math.floor(time * this._data.sample_rate / this._data.scale);
      };
      WaveformZoomView.prototype.pixelsToTime = function (pixels) {
          return pixels * this._data.scale / this._data.sample_rate;
      };
      WaveformZoomView.prototype.getFrameOffset = function () {
          return this._frameOffset;
      };
      WaveformZoomView.prototype.getWidth = function () {
          return this._width;
      };
      WaveformZoomView.prototype.getHeight = function () {
          return this._height;
      };
      WaveformZoomView.prototype.setAmplitudeScale = function (scale) {
          if (!Utils.isNumber(scale) || !Number.isFinite(scale)) {
              throw new Error('view.setAmplitudeScale(): Scale must be a valid number');
          }
          this._waveformShape.setAmplitudeScale(scale);
          this._waveformLayer.draw();
          this._segmentsLayer.setAmplitudeScale(scale);
      };
      WaveformZoomView.prototype.getWaveformData = function () {
          return this._data;
      };
      WaveformZoomView.prototype._createWaveform = function () {
          this._waveformShape = new WaveformShape({
              color: this._options.zoomWaveformColor,
              view: this
          });
          this._waveformLayer.add(this._waveformShape);
          this._stage.add(this._waveformLayer);
          this._peaks.emit('zoomview.displaying', 0, this.pixelsToTime(this._width));
      };
      WaveformZoomView.prototype._updateWaveform = function (frameOffset) {
          var upperLimit;
          if (this._pixelLength < this._width) {
              frameOffset = 0;
              upperLimit = this._width;
          } else {
              upperLimit = this._pixelLength - this._width;
          }
          frameOffset = Utils.clamp(frameOffset, 0, upperLimit);
          this._frameOffset = frameOffset;
          var playheadPixel = this._playheadLayer.getPlayheadPixel();
          this._playheadLayer.updatePlayheadTime(this.pixelsToTime(playheadPixel));
          this._waveformLayer.draw();
          var frameStartTime = this.pixelsToTime(this._frameOffset);
          var frameEndTime = this.pixelsToTime(this._frameOffset + this._width);
          this._pointsLayer.updatePoints(frameStartTime, frameEndTime);
          this._segmentsLayer.updateSegments(frameStartTime, frameEndTime);
          this._peaks.emit('zoomview.displaying', frameStartTime, frameEndTime);
      };
      WaveformZoomView.prototype.setWaveformColor = function (color) {
          this._waveformShape.setWaveformColor(color);
          this._waveformLayer.draw();
      };
      WaveformZoomView.prototype.showPlayheadTime = function (show) {
          this._playheadLayer.showPlayheadTime(show);
      };
      WaveformZoomView.prototype.enableAutoScroll = function (enable) {
          this._enableAutoScroll = enable;
      };
      WaveformZoomView.prototype.destroy = function () {
          if (this._stage) {
              this._stage.destroy();
              this._stage = null;
          }
      };
      return WaveformZoomView;
  }(_dereq_('peaks/views/playhead-layer'), _dereq_('peaks/views/points-layer'), _dereq_('peaks/views/segments-layer'), _dereq_('peaks/views/waveform-shape'), _dereq_('peaks/views/helpers/mousedraghandler'), _dereq_('peaks/waveform/waveform.axis'), _dereq_('peaks/waveform/waveform.utils'), _dereq_('konva'));
  },{"konva":43,"peaks/views/helpers/mousedraghandler":79,"peaks/views/playhead-layer":80,"peaks/views/points-layer":81,"peaks/views/segments-layer":82,"peaks/views/waveform-shape":84,"peaks/waveform/waveform.axis":90,"peaks/waveform/waveform.utils":92}],89:[function(_dereq_,module,exports){
  module.exports = function (WaveformData, Utils) {
      var isXhr2 = 'withCredentials' in new XMLHttpRequest();
      function WaveformBuilder(peaks) {
          this._peaks = peaks;
      }
      WaveformBuilder.prototype.init = function (options, callback) {
          if (options.dataUri && (options.webAudio || options.audioContext)) {
              throw new Error('Peaks.init(): You must pass a webAudio or dataUri to render waveform data, not both');
          }
          if (options.audioContext) {
              this._peaks.options.deprecationLogger('Peaks.init(): The audioContext option is deprecated, please pass a webAudio object instead');
              options.webAudio = { audioContext: options.audioContext };
          }
          if (options.dataUri) {
              return this._getRemoteWaveformData(options, callback);
          } else if (options.webAudio) {
              if (options.webAudio.audioBuffer) {
                  return this._buildWaveformDataFromAudioBuffer(options, callback);
              } else {
                  return this._buildWaveformDataUsingWebAudio(options, callback);
              }
          } else {
              throw new Error('Peaks.init(): You must pass an audioContext or dataUri to render waveform data');
          }
      };
      WaveformBuilder.prototype._getRemoteWaveformData = function (options, callback) {
          var self = this;
          var dataUri = null;
          var requestType = null;
          var url;
          if (Utils.isObject(options.dataUri)) {
              dataUri = options.dataUri;
          } else if (Utils.isString(options.dataUri)) {
              dataUri = {};
              dataUri[options.dataUriDefaultFormat || 'json'] = options.dataUri;
          } else {
              throw new Error('Peaks.init(): The dataUri option must be an object');
          }
          [
              'ArrayBuffer',
              'JSON'
          ].some(function (connector) {
              if (window[connector]) {
                  requestType = connector.toLowerCase();
                  url = dataUri[requestType];
                  return Boolean(url);
              }
          });
          if (!url) {
              throw new Error('Peaks.init(): Unable to determine a compatible dataUri format for this browser');
          }
          var xhr = self._createXHR(url, requestType, options.withCredentials, function (event) {
              if (this.readyState !== 4) {
                  return;
              }
              if (this.status !== 200) {
                  callback(new Error('Unable to fetch remote data. HTTP status ' + this.status));
                  return;
              }
              var waveformData = WaveformData.create(event.target.response);
              if (waveformData.channels !== 1 && waveformData.channels !== 2) {
                  callback(new Error('Peaks.init(): Only mono or stereo waveforms are currently supported'));
                  return;
              }
              callback(null, waveformData);
          }, function () {
              callback(new Error('XHR Failed'));
          });
          xhr.send();
      };
      WaveformBuilder.prototype._buildWaveformDataUsingWebAudio = function (options, callback) {
          var self = this;
          var audioContext = window.AudioContext || window.webkitAudioContext;
          if (!(options.webAudio.audioContext instanceof audioContext)) {
              throw new TypeError('Peaks.init(): The webAudio.audioContext option must be a valid AudioContext');
          }
          var webAudioOptions = options.webAudio;
          if (webAudioOptions.scale !== options.zoomLevels[0]) {
              webAudioOptions.scale = options.zoomLevels[0];
          }
          var mediaSourceUrl = self._peaks.player.getCurrentSource();
          if (mediaSourceUrl) {
              self._requestAudioAndBuildWaveformData(mediaSourceUrl, webAudioOptions, options.withCredentials, callback);
          } else {
              self._peaks.once('player_canplay', function (player) {
                  self._requestAudioAndBuildWaveformData(player.getCurrentSource(), webAudioOptions, options.withCredentials, callback);
              });
          }
      };
      WaveformBuilder.prototype._buildWaveformDataFromAudioBuffer = function (options, callback) {
          var webAudioOptions = options.webAudio;
          if (webAudioOptions.scale !== options.zoomLevels[0]) {
              webAudioOptions.scale = options.zoomLevels[0];
          }
          var webAudioBuilderOptions = {
              audio_buffer: webAudioOptions.audioBuffer,
              split_channels: webAudioOptions.multiChannel,
              scale: webAudioOptions.scale
          };
          WaveformData.createFromAudio(webAudioBuilderOptions, callback);
      };
      WaveformBuilder.prototype._requestAudioAndBuildWaveformData = function (url, webAudio, withCredentials, callback) {
          var self = this;
          if (!url) {
              self._peaks.logger('Peaks.init(): The mediaElement src is invalid');
              return;
          }
          var xhr = self._createXHR(url, 'arraybuffer', withCredentials, function (event) {
              if (this.readyState !== 4) {
                  return;
              }
              if (this.status !== 200) {
                  callback(new Error('Unable to fetch remote data. HTTP status ' + this.status));
                  return;
              }
              var webAudioBuilderOptions = {
                  audio_context: webAudio.audioContext,
                  array_buffer: event.target.response,
                  split_channels: webAudio.multiChannel,
                  scale: webAudio.scale
              };
              WaveformData.createFromAudio(webAudioBuilderOptions, callback);
          }, function () {
              callback(new Error('XHR Failed'));
          });
          xhr.send();
      };
      WaveformBuilder.prototype._createXHR = function (url, requestType, withCredentials, onLoad, onError) {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', url, true);
          if (isXhr2) {
              try {
                  xhr.responseType = requestType;
              } catch (e) {
              }
          }
          xhr.onload = onLoad;
          xhr.onerror = onError;
          if (isXhr2 && withCredentials) {
              xhr.withCredentials = true;
          }
          return xhr;
      };
      return WaveformBuilder;
  }(_dereq_('waveform-data'), _dereq_('peaks/waveform/waveform.utils'));
  },{"peaks/waveform/waveform.utils":92,"waveform-data":69}],90:[function(_dereq_,module,exports){
  module.exports = function (Utils, Konva) {
      function WaveformAxis(view, layer, options) {
          var self = this;
          self._options = options;
          var axisShape = new Konva.Shape({
              fill: 'rgba(38, 255, 161, 1)',
              strokeWidth: 0,
              opacity: 1,
              sceneFunc: function (context) {
                  self.drawAxis(context, view);
              }
          });
          layer.add(axisShape);
      }
      WaveformAxis.prototype.getAxisLabelScale = function (view) {
          var baseSecs = 1;
          var steps = [
              1,
              2,
              5,
              10,
              20,
              30
          ];
          var minSpacing = 60;
          var index = 0;
          var secs;
          for (;;) {
              secs = baseSecs * steps[index];
              var pixels = view.timeToPixels(secs);
              if (pixels < minSpacing) {
                  if (++index === steps.length) {
                      baseSecs *= 60;
                      index = 0;
                  }
              } else {
                  break;
              }
          }
          return secs;
      };
      WaveformAxis.prototype.drawAxis = function (context, view) {
          var currentFrameStartTime = view.pixelsToTime(view.getFrameOffset());
          var markerHeight = 10;
          var axisLabelIntervalSecs = this.getAxisLabelScale(view);
          var firstAxisLabelSecs = Utils.roundUpToNearest(currentFrameStartTime, axisLabelIntervalSecs);
          var axisLabelOffsetSecs = firstAxisLabelSecs - currentFrameStartTime;
          var axisLabelOffsetPixels = view.timeToPixels(axisLabelOffsetSecs);
          context.setAttr('strokeStyle', this._options.axisGridlineColor);
          context.setAttr('lineWidth', 1);
          context.setAttr('font', '11px sans-serif');
          context.setAttr('fillStyle', this._options.axisLabelColor);
          context.setAttr('textAlign', 'left');
          context.setAttr('textBaseline', 'bottom');
          var secs = firstAxisLabelSecs;
          var x;
          var width = view.getWidth();
          var height = view.getHeight();
          for (;;) {
              x = axisLabelOffsetPixels + view.timeToPixels(secs - firstAxisLabelSecs);
              if (x >= width) {
                  break;
              }
              context.beginPath();
              context.moveTo(x + 0.5, 0);
              context.lineTo(x + 0.5, 0 + markerHeight);
              context.moveTo(x + 0.5, height);
              context.lineTo(x + 0.5, height - markerHeight);
              context.stroke();
              var label = Utils.formatTime(secs, true);
              var labelWidth = context.measureText(label).width;
              var labelX = x - labelWidth / 2;
              var labelY = height - 1 - markerHeight;
              if (labelX >= 0) {
                  context.fillText(label, labelX, labelY);
              }
              secs += axisLabelIntervalSecs;
          }
      };
      return WaveformAxis;
  }(_dereq_('peaks/waveform/waveform.utils'), _dereq_('konva'));
  },{"konva":43,"peaks/waveform/waveform.utils":92}],91:[function(_dereq_,module,exports){
  module.exports = function (Konva) {
      function createSegmentMarker(options) {
          var handleHeight = 20;
          var handleWidth = handleHeight / 2;
          var handleY = options.height / 2 - 10.5;
          var handleX = -(handleWidth / 2) + 0.5;
          var group = new Konva.Group({
              draggable: options.draggable,
              dragBoundFunc: function (pos) {
                  var limit;
                  if (options.inMarker) {
                      limit = options.segmentGroup.outMarker.getX() - options.segmentGroup.outMarker.getWidth();
                      if (pos.x > limit) {
                          pos.x = limit;
                      }
                  } else {
                      limit = options.segmentGroup.inMarker.getX() + options.segmentGroup.inMarker.getWidth();
                      if (pos.x < limit) {
                          pos.x = limit;
                      }
                  }
                  return {
                      x: pos.x,
                      y: this.getAbsolutePosition().y
                  };
              }
          });
          var xPosition = options.inMarker ? -24 : 24;
          var text = new Konva.Text({
              x: xPosition,
              y: options.height / 2 - 5,
              text: '',
              fontSize: 10,
              fontFamily: 'sans-serif',
              fill: '#000',
              textAlign: 'center'
          });
          text.hide();
          group.label = text;
          var handle = new Konva.Rect({
              x: handleX,
              y: handleY,
              width: handleWidth,
              height: handleHeight,
              fill: options.color,
              stroke: options.color,
              strokeWidth: 1
          });
          var line = new Konva.Line({
              x: 0,
              y: 0,
              points: [
                  0.5,
                  0,
                  0.5,
                  options.height
              ],
              stroke: options.color,
              strokeWidth: 1
          });
          if (options.draggable && options.onDrag) {
              group.on('dragmove', function (event) {
                  options.onDrag(options.segmentGroup, options.segment);
              });
              group.on('dragstart', function (event) {
                  if (options.inMarker) {
                      text.setX(xPosition - text.getWidth());
                  }
                  text.show();
                  options.layer.draw();
              });
              group.on('dragend', function (event) {
                  text.hide();
                  options.layer.draw();
              });
          }
          handle.on('mouseover touchstart', function (event) {
              if (options.inMarker) {
                  text.setX(xPosition - text.getWidth());
              }
              text.show();
              options.layer.draw();
          });
          handle.on('mouseout touchend', function (event) {
              text.hide();
              options.layer.draw();
          });
          group.add(text);
          group.add(line);
          group.add(handle);
          return group;
      }
      function createSegmentLabel(segmentGroup, segment) {
          return new Konva.Text({
              x: 12,
              y: 12,
              text: segment.labelText,
              textAlign: 'center',
              fontSize: 12,
              fontFamily: 'Arial, sans-serif',
              fill: '#000'
          });
      }
      function createPointMarker(options) {
          var handleTop = options.height / 2 - 10.5;
          var handleWidth = 10;
          var handleHeight = 20;
          var handleX = -(handleWidth / 2) + 0.5;
          var group = new Konva.Group({
              draggable: options.draggable,
              dragBoundFunc: function (pos) {
                  return {
                      x: pos.x,
                      y: this.getAbsolutePosition().y
                  };
              }
          });
          if (options.onDragStart) {
              group.on('dragstart', function (event) {
                  options.onDragStart(options.point);
              });
          }
          if (options.onDragMove) {
              group.on('dragmove', function (event) {
                  options.onDragMove(options.point);
              });
          }
          if (options.onDragEnd) {
              group.on('dragend', function (event) {
                  options.onDragEnd(options.point);
              });
          }
          if (options.onDblClick) {
              group.on('dblclick', function (event) {
                  options.onDblClick(options.point);
              });
          }
          if (options.onMouseEnter) {
              group.on('mouseenter', function (event) {
                  options.onMouseEnter(options.point);
              });
          }
          if (options.onMouseLeave) {
              group.on('mouseleave', function (event) {
                  options.onMouseLeave(options.point);
              });
          }
          var text = null;
          if (options.showLabel) {
              text = new Konva.Text({
                  x: 2,
                  y: 12,
                  text: options.point.labelText,
                  textAlign: 'left',
                  fontSize: 10,
                  fontFamily: 'sans-serif',
                  fill: '#000'
              });
              group.label = text;
          }
          var handle = null;
          if (options.draggable) {
              handle = new Konva.Rect({
                  x: handleX,
                  y: handleTop,
                  width: handleWidth,
                  height: handleHeight,
                  fill: options.handleColor
              });
          }
          var line = new Konva.Line({
              x: 0,
              y: 0,
              points: [
                  0,
                  0,
                  0,
                  options.height
              ],
              stroke: options.handleColor,
              strokeWidth: 1
          });
          var time = null;
          if (handle) {
              time = new Konva.Text({
                  x: -24,
                  y: options.height / 2 - 5,
                  text: '',
                  fontSize: 10,
                  fontFamily: 'sans-serif',
                  fill: '#000',
                  textAlign: 'center'
              });
              time.hide();
              group.time = time;
              handle.on('mouseover touchstart', function (event) {
                  time.setX(-24 - time.getWidth());
                  time.show();
                  options.layer.draw();
              });
              handle.on('mouseout touchend', function (event) {
                  time.hide();
                  options.layer.draw();
              });
              group.on('dragstart', function (event) {
                  time.setX(-24 - time.getWidth());
                  time.show();
                  options.layer.draw();
              });
              group.on('dragend', function (event) {
                  time.hide();
                  options.layer.draw();
              });
          }
          if (handle) {
              group.add(handle);
          }
          group.add(line);
          if (text) {
              group.add(text);
          }
          if (time) {
              group.add(time);
          }
          return group;
      }
      return {
          createSegmentMarker: createSegmentMarker,
          createPointMarker: createPointMarker,
          createSegmentLabel: createSegmentLabel
      };
  }(_dereq_('konva'));
  },{"konva":43}],92:[function(_dereq_,module,exports){
  module.exports = function () {
      if (typeof Number.isFinite !== 'function') {
          Number.isFinite = function isFinite(value) {
              if (typeof value !== 'number') {
                  return false;
              }
              if (value !== value || value === Infinity || value === -Infinity) {
                  return false;
              }
              return true;
          };
      }
      function zeroPad(number) {
          return number < 10 ? '0' + number : number;
      }
      return {
          formatTime: function (time, dropHundredths) {
              var result = [];
              var hundredths = Math.floor(time % 1 * 100);
              var seconds = Math.floor(time);
              var minutes = Math.floor(seconds / 60);
              var hours = Math.floor(minutes / 60);
              if (hours > 0) {
                  result.push(hours);
              }
              result.push(minutes % 60);
              result.push(seconds % 60);
              for (var i = 0; i < result.length; i++) {
                  result[i] = zeroPad(result[i]);
              }
              result = result.join(':');
              if (!dropHundredths) {
                  result += '.' + zeroPad(hundredths);
              }
              return result;
          },
          roundUpToNearest: function (value, multiple) {
              if (multiple === 0) {
                  return 0;
              }
              var multiplier = 1;
              if (value < 0) {
                  multiplier = -1;
                  value = -value;
              }
              var roundedUp = Math.ceil(value);
              return multiplier * ((roundedUp + multiple - 1) / multiple | 0) * multiple;
          },
          clamp: function (value, min, max) {
              if (value < min) {
                  return min;
              } else if (value > max) {
                  return max;
              } else {
                  return value;
              }
          },
          extend: function (to, from) {
              for (var key in from) {
                  if (Object.prototype.hasOwnProperty.call(from, key)) {
                      to[key] = from[key];
                  }
              }
              return to;
          },
          isInAscendingOrder: function (array) {
              if (array.length === 0) {
                  return true;
              }
              var value = array[0];
              for (var i = 1; i < array.length; i++) {
                  if (value >= array[i]) {
                      return false;
                  }
                  value = array[i];
              }
              return true;
          },
          isNumber: function (value) {
              return typeof value === 'number';
          },
          isValidTime: function (value) {
              return typeof value === 'number' && Number.isFinite(value);
          },
          isObject: function (value) {
              return value !== null && typeof value === 'object' && !Array.isArray(value);
          },
          isString: function (value) {
              return typeof value === 'string';
          },
          isNullOrUndefined: function (value) {
              return value === undefined || value === null;
          },
          isFunction: function (value) {
              return typeof value === 'function';
          },
          isHTMLElement: function (value) {
              return value instanceof HTMLElement;
          }
      };
  }();
  },{}]},{},[70])(70)
  });
  //# sourceMappingURL=peaks.js.map
  });

  var Peaks = unwrapExports(peaks);

  var console_1 = globals.console;
  var file$1 = "src/pages/Quiz.svelte";

  function get_each_context(ctx, list, i) {
    var child_ctx = Object.create(ctx);
    child_ctx.segment = list[i];
    child_ctx.i = i;
    return child_ctx;
  } // (339:6) {:else}


  function create_else_block_3(ctx) {
    var p0;
    var button;
    var span;
    var i;
    var t;
    var p1;
    var dispose;

    function select_block_type_1(changed, ctx) {
      if (ctx.currentStep === ctx.tutorialInstructions.length - 1) return create_if_block_8;
      if (ctx.currentStep !== 2 || ctx.segments.length > 0) return create_if_block_9;
    }

    var current_block_type = select_block_type_1(null, ctx);
    var if_block = current_block_type && current_block_type(ctx);
    var block = {
      c: function create() {
        p0 = element("p");
        button = element("button");
        span = element("span");
        i = element("i");
        t = space();
        p1 = element("p");
        if (if_block) if_block.c();
        attr_dev(i, "class", "fas fa-backward");
        add_location(i, file$1, 342, 14, 13998);
        attr_dev(span, "class", "icon");
        add_location(span, file$1, 341, 12, 13964);
        attr_dev(button, "class", "button is-link controls");
        add_location(button, file$1, 340, 10, 13891);
        attr_dev(p0, "class", "card-footer-item");
        add_location(p0, file$1, 339, 8, 13852);
        attr_dev(p1, "class", "card-footer-item");
        add_location(p1, file$1, 346, 8, 14089);
        dispose = listen_dev(button, "click", ctx.backward, false, false, false);
      },
      m: function mount(target, anchor) {
        insert_dev(target, p0, anchor);
        append_dev(p0, button);
        append_dev(button, span);
        append_dev(span, i);
        insert_dev(target, t, anchor);
        insert_dev(target, p1, anchor);
        if (if_block) if_block.m(p1, null);
      },
      p: function update(changed, ctx) {
        if (current_block_type === (current_block_type = select_block_type_1(changed, ctx)) && if_block) {
          if_block.p(changed, ctx);
        } else {
          if (if_block) if_block.d(1);
          if_block = current_block_type && current_block_type(ctx);

          if (if_block) {
            if_block.c();
            if_block.m(p1, null);
          }
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(p0);
        if (detaching) detach_dev(t);
        if (detaching) detach_dev(p1);

        if (if_block) {
          if_block.d();
        }

        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_else_block_3.name,
      type: "else",
      source: "(339:6) {:else}",
      ctx: ctx
    });
    return block;
  } // (313:6) {#if quizComplete}


  function create_if_block_5(ctx) {
    var t;
    var if_block1_anchor;
    var if_block0 = ctx.tutorialSubmitted && create_if_block_7(ctx);
    var if_block1 = ctx.quizFailed && create_if_block_6(ctx);
    var block = {
      c: function create() {
        if (if_block0) if_block0.c();
        t = space();
        if (if_block1) if_block1.c();
        if_block1_anchor = empty();
      },
      m: function mount(target, anchor) {
        if (if_block0) if_block0.m(target, anchor);
        insert_dev(target, t, anchor);
        if (if_block1) if_block1.m(target, anchor);
        insert_dev(target, if_block1_anchor, anchor);
      },
      p: function update(changed, ctx) {
        if (ctx.tutorialSubmitted) {
          if (if_block0) {
            if_block0.p(changed, ctx);
          } else {
            if_block0 = create_if_block_7(ctx);
            if_block0.c();
            if_block0.m(t.parentNode, t);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }

        if (ctx.quizFailed) {
          if (if_block1) {
            if_block1.p(changed, ctx);
          } else {
            if_block1 = create_if_block_6(ctx);
            if_block1.c();
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      d: function destroy(detaching) {
        if (if_block0) if_block0.d(detaching);
        if (detaching) detach_dev(t);
        if (if_block1) if_block1.d(detaching);
        if (detaching) detach_dev(if_block1_anchor);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_5.name,
      type: "if",
      source: "(313:6) {#if quizComplete}",
      ctx: ctx
    });
    return block;
  } // (356:61) 


  function create_if_block_9(ctx) {
    var button;
    var span;
    var i;
    var dispose;
    var block = {
      c: function create() {
        button = element("button");
        span = element("span");
        i = element("i");
        attr_dev(i, "class", "fas fa-forward");
        add_location(i, file$1, 358, 16, 14568);
        attr_dev(span, "class", "icon");
        add_location(span, file$1, 357, 14, 14532);
        attr_dev(button, "class", "button is-link controls");
        add_location(button, file$1, 356, 12, 14458);
        dispose = listen_dev(button, "click", ctx.forward, false, false, false);
      },
      m: function mount(target, anchor) {
        insert_dev(target, button, anchor);
        append_dev(button, span);
        append_dev(span, i);
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(button);
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_9.name,
      type: "if",
      source: "(356:61) ",
      ctx: ctx
    });
    return block;
  } // (348:10) {#if currentStep === tutorialInstructions.length - 1}


  function create_if_block_8(ctx) {
    var button;
    var dispose;
    var block = {
      c: function create() {
        button = element("button");
        button.textContent = "Hide Help";
        attr_dev(button, "class", "button is-link controls");
        add_location(button, file$1, 348, 12, 14194);
        dispose = listen_dev(button, "click", ctx.click_handler_3, false, false, false);
      },
      m: function mount(target, anchor) {
        insert_dev(target, button, anchor);
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(button);
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_8.name,
      type: "if",
      source: "(348:10) {#if currentStep === tutorialInstructions.length - 1}",
      ctx: ctx
    });
    return block;
  } // (314:8) {#if tutorialSubmitted}


  function create_if_block_7(ctx) {
    var p0;
    var button0;
    var t1;
    var p1;
    var button1;
    var dispose;
    var block = {
      c: function create() {
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Skip bonus work";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Do bonus work";
        attr_dev(button0, "class", "button is-warning controls");
        add_location(button0, file$1, 315, 12, 13118);
        attr_dev(p0, "class", "card-footer-item");
        add_location(p0, file$1, 314, 10, 13077);
        attr_dev(button1, "class", "button is-success controls");
        add_location(button1, file$1, 322, 12, 13354);
        attr_dev(p1, "class", "card-footer-item");
        add_location(p1, file$1, 321, 10, 13313);
        dispose = [listen_dev(button0, "click", ctx.click_handler, false, false, false), listen_dev(button1, "click", ctx.click_handler_1, false, false, false)];
      },
      m: function mount(target, anchor) {
        insert_dev(target, p0, anchor);
        append_dev(p0, button0);
        insert_dev(target, t1, anchor);
        insert_dev(target, p1, anchor);
        append_dev(p1, button1);
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(p0);
        if (detaching) detach_dev(t1);
        if (detaching) detach_dev(p1);
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_7.name,
      type: "if",
      source: "(314:8) {#if tutorialSubmitted}",
      ctx: ctx
    });
    return block;
  } // (330:8) {#if quizFailed}


  function create_if_block_6(ctx) {
    var p;
    var button;
    var dispose;
    var block = {
      c: function create() {
        p = element("p");
        button = element("button");
        button.textContent = "Submit HIT";
        attr_dev(button, "class", "button is-success is-large controls");
        add_location(button, file$1, 331, 12, 13627);
        attr_dev(p, "class", "card-footer-item");
        add_location(p, file$1, 330, 10, 13586);
        dispose = listen_dev(button, "click", ctx.click_handler_2, false, false, false);
      },
      m: function mount(target, anchor) {
        insert_dev(target, p, anchor);
        append_dev(p, button);
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(p);
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_6.name,
      type: "if",
      source: "(330:8) {#if quizFailed}",
      ctx: ctx
    });
    return block;
  } // (376:6) {#if peaksLoading}


  function create_if_block_4(ctx) {
    var h3;
    var t1;
    var button;
    var block = {
      c: function create() {
        h3 = element("h3");
        h3.textContent = "Loading audio...";
        t1 = space();
        button = element("button");
        attr_dev(h3, "class", "title is-3");
        add_location(h3, file$1, 376, 8, 15040);
        attr_dev(button, "class", "button is-white is-loading loading-button svelte-o2ldp3");
        button.disabled = true;
        add_location(button, file$1, 377, 8, 15093);
      },
      m: function mount(target, anchor) {
        insert_dev(target, h3, anchor);
        insert_dev(target, t1, anchor);
        insert_dev(target, button, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(h3);
        if (detaching) detach_dev(t1);
        if (detaching) detach_dev(button);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_4.name,
      type: "if",
      source: "(376:6) {#if peaksLoading}",
      ctx: ctx
    });
    return block;
  } // (412:10) {:else}


  function create_else_block_2(ctx) {
    var div6;
    var div4;
    var div1;
    var div0;
    var button0;
    var t1;
    var button1;
    var t2;
    var t3;
    var div3;
    var div2;
    var p;
    var t5;
    var div5;
    var button2;
    var t7;
    var button3;
    var dispose;
    var block = {
      c: function create() {
        div6 = element("div");
        div4 = element("div");
        div1 = element("div");
        div0 = element("div");
        button0 = element("button");
        button0.textContent = "Tag";
        t1 = space();
        button1 = element("button");
        t2 = text("Done");
        t3 = space();
        div3 = element("div");
        div2 = element("div");
        p = element("p");
        p.textContent = "Select a row below to edit a Thought";
        t5 = space();
        div5 = element("div");
        button2 = element("button");
        button2.textContent = "Play";
        t7 = space();
        button3 = element("button");
        button3.textContent = "Delete";
        attr_dev(button0, "class", "button is-primary is-large svelte-o2ldp3");
        toggle_class(button0, "blur", ctx.currentStep < 2);
        add_location(button0, file$1, 416, 20, 16613);
        attr_dev(button1, "class", "button is-info is-large svelte-o2ldp3");
        button1.disabled = ctx.ratingActive;
        toggle_class(button1, "blur", ctx.currentStep < 2);
        add_location(button1, file$1, 422, 20, 16850);
        attr_dev(div0, "class", "column button-row svelte-o2ldp3");
        add_location(div0, file$1, 415, 18, 16561);
        attr_dev(div1, "class", "columns");
        add_location(div1, file$1, 414, 16, 16521);
        attr_dev(p, "class", "is-size-7");
        toggle_class(p, "is-invisible", ctx.segments.length === 0);
        add_location(p, file$1, 433, 20, 17256);
        attr_dev(div2, "class", "column");
        add_location(div2, file$1, 432, 18, 17215);
        attr_dev(div3, "class", "columns");
        add_location(div3, file$1, 431, 16, 17175);
        attr_dev(div4, "class", "column is-4 unset-width svelte-o2ldp3");
        add_location(div4, file$1, 413, 14, 16467);
        attr_dev(button2, "class", "button is-success is-large");
        toggle_class(button2, "is-invisible", !ctx.rowSelected);
        add_location(button2, file$1, 440, 16, 17525);
        attr_dev(button3, "class", "button is-danger is-large");
        toggle_class(button3, "is-invisible", !ctx.rowSelected);
        add_location(button3, file$1, 446, 16, 17745);
        attr_dev(div5, "class", "column");
        add_location(div5, file$1, 439, 14, 17488);
        attr_dev(div6, "class", "columns");
        add_location(div6, file$1, 412, 12, 16431);
        dispose = [listen_dev(button0, "click", ctx.addSegment, false, false, false), listen_dev(button1, "click", ctx.submitTags, false, false, false), listen_dev(button2, "click", ctx.playSegment, false, false, false), listen_dev(button3, "click", ctx.deleteSegment, false, false, false)];
      },
      m: function mount(target, anchor) {
        insert_dev(target, div6, anchor);
        append_dev(div6, div4);
        append_dev(div4, div1);
        append_dev(div1, div0);
        append_dev(div0, button0);
        append_dev(div0, t1);
        append_dev(div0, button1);
        append_dev(button1, t2);
        append_dev(div4, t3);
        append_dev(div4, div3);
        append_dev(div3, div2);
        append_dev(div2, p);
        append_dev(div6, t5);
        append_dev(div6, div5);
        append_dev(div5, button2);
        append_dev(div5, t7);
        append_dev(div5, button3);
      },
      p: function update(changed, ctx) {
        if (changed.currentStep) {
          toggle_class(button0, "blur", ctx.currentStep < 2);
        }

        if (changed.ratingActive) {
          prop_dev(button1, "disabled", ctx.ratingActive);
        }

        if (changed.currentStep) {
          toggle_class(button1, "blur", ctx.currentStep < 2);
        }

        if (changed.segments) {
          toggle_class(p, "is-invisible", ctx.segments.length === 0);
        }

        if (changed.rowSelected) {
          toggle_class(button2, "is-invisible", !ctx.rowSelected);
        }

        if (changed.rowSelected) {
          toggle_class(button3, "is-invisible", !ctx.rowSelected);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div6);
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_else_block_2.name,
      type: "else",
      source: "(412:10) {:else}",
      ctx: ctx
    });
    return block;
  } // (408:10) {#if rate}


  function create_if_block_3(ctx) {
    var button;
    var t;
    var dispose;
    var block = {
      c: function create() {
        button = element("button");
        t = text("Next");
        attr_dev(button, "class", "button is-primary is-large");
        button.disabled = ctx.nextTrialActive;
        add_location(button, file$1, 408, 12, 16271);
        dispose = listen_dev(button, "click", ctx.finish, false, false, false);
      },
      m: function mount(target, anchor) {
        insert_dev(target, button, anchor);
        append_dev(button, t);
      },
      p: function update(changed, ctx) {
        if (changed.nextTrialActive) {
          prop_dev(button, "disabled", ctx.nextTrialActive);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(button);
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_3.name,
      type: "if",
      source: "(408:10) {#if rate}",
      ctx: ctx
    });
    return block;
  } // (519:2) {:else}


  function create_else_block$1(ctx) {
    var div1;
    var div0;

    function select_block_type_4(changed, ctx) {
      if (ctx.segments && ctx.segments.length) return create_if_block_2;
      return create_else_block_1;
    }

    var current_block_type = select_block_type_4(null, ctx);
    var if_block = current_block_type(ctx);
    var block = {
      c: function create() {
        div1 = element("div");
        div0 = element("div");
        if_block.c();
        attr_dev(div0, "class", "column is-three-quarters has-text-centered");
        add_location(div0, file$1, 521, 6, 20325);
        attr_dev(div1, "class", "columns is-centered svelte-o2ldp3");
        toggle_class(div1, "blur", ctx.currentStep < 2);
        add_location(div1, file$1, 520, 4, 20256);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div1, anchor);
        append_dev(div1, div0);
        if_block.m(div0, null);
      },
      p: function update(changed, ctx) {
        if (current_block_type === (current_block_type = select_block_type_4(changed, ctx)) && if_block) {
          if_block.p(changed, ctx);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx);

          if (if_block) {
            if_block.c();
            if_block.m(div0, null);
          }
        }

        if (changed.currentStep) {
          toggle_class(div1, "blur", ctx.currentStep < 2);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div1);
        if_block.d();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_else_block$1.name,
      type: "else",
      source: "(519:2) {:else}",
      ctx: ctx
    });
    return block;
  } // (460:2) {#if rate}


  function create_if_block$1(ctx) {
    var div11;
    var div2;
    var div1;
    var label;
    var t1;
    var div0;
    var input0;
    var input0_class_value;
    var t2;
    var t3;
    var div6;
    var p0;
    var t5;
    var input1;
    var t6;
    var div5;
    var div3;
    var p1;
    var t8;
    var div4;
    var p2;
    var t10;
    var div10;
    var p3;
    var t12;
    var input2;
    var t13;
    var div9;
    var div7;
    var p4;
    var t15;
    var div8;
    var p5;
    var div11_class_value;
    var dispose;
    var if_block = ctx.invalidTime && create_if_block_1(ctx);
    var block = {
      c: function create() {
        div11 = element("div");
        div2 = element("div");
        div1 = element("div");
        label = element("label");
        label.textContent = "When did the speaker stop talking?";
        t1 = space();
        div0 = element("div");
        input0 = element("input");
        t2 = space();
        if (if_block) if_block.c();
        t3 = space();
        div6 = element("div");
        p0 = element("p");
        p0.textContent = "How clear was the quality of the recording?";
        t5 = space();
        input1 = element("input");
        t6 = space();
        div5 = element("div");
        div3 = element("div");
        p1 = element("p");
        p1.textContent = "Uninterpretable";
        t8 = space();
        div4 = element("div");
        p2 = element("p");
        p2.textContent = "Perfect";
        t10 = space();
        div10 = element("div");
        p3 = element("p");
        p3.textContent = "How easy was it to tag different thoughts?";
        t12 = space();
        input2 = element("input");
        t13 = space();
        div9 = element("div");
        div7 = element("div");
        p4 = element("p");
        p4.textContent = "Impossible";
        t15 = space();
        div8 = element("div");
        p5 = element("p");
        p5.textContent = "Effortless";
        attr_dev(label, "class", "label has-text-weight-normal is-size-5");
        add_location(label, file$1, 464, 10, 18282);
        attr_dev(input0, "class", input0_class_value = ctx.invalidTime ? "input age-input is-danger" : "input age-input");
        attr_dev(input0, "type", "text");
        attr_dev(input0, "placeholder", "Please enter a timestamp like MM:SS");
        add_location(input0, file$1, 468, 12, 18447);
        attr_dev(div0, "class", "control");
        add_location(div0, file$1, 467, 10, 18413);
        attr_dev(div1, "class", "field");
        add_location(div1, file$1, 463, 8, 18252);
        attr_dev(div2, "class", "column is-3 has-text-centered");
        add_location(div2, file$1, 462, 6, 18200);
        attr_dev(p0, "class", "has-text-centered is-size-5");
        add_location(p0, file$1, 481, 8, 18955);
        attr_dev(input1, "step", "1");
        attr_dev(input1, "min", "0");
        attr_dev(input1, "max", "100");
        attr_dev(input1, "type", "range");
        add_location(input1, file$1, 482, 8, 19050);
        attr_dev(p1, "class", "subtitle is-size-6");
        add_location(p1, file$1, 491, 12, 19324);
        attr_dev(div3, "class", "column has-text-left");
        add_location(div3, file$1, 490, 10, 19277);
        attr_dev(p2, "class", "subtitle is-size-6");
        add_location(p2, file$1, 494, 12, 19449);
        attr_dev(div4, "class", "column has-text-right");
        add_location(div4, file$1, 493, 10, 19401);
        attr_dev(div5, "class", "columns is-centered");
        add_location(div5, file$1, 489, 8, 19233);
        attr_dev(div6, "class", "column is-3 has-text-centered");
        add_location(div6, file$1, 480, 6, 18903);
        attr_dev(p3, "class", "has-text-centered is-size-5");
        add_location(p3, file$1, 499, 8, 19594);
        attr_dev(input2, "step", "1");
        attr_dev(input2, "min", "0");
        attr_dev(input2, "max", "100");
        attr_dev(input2, "type", "range");
        add_location(input2, file$1, 500, 8, 19688);
        attr_dev(p4, "class", "subtitle is-size-6");
        add_location(p4, file$1, 509, 12, 19968);
        attr_dev(div7, "class", "column has-text-left");
        add_location(div7, file$1, 508, 10, 19921);
        attr_dev(p5, "class", "subtitle is-size-6");
        add_location(p5, file$1, 512, 12, 20088);
        attr_dev(div8, "class", "column has-text-right");
        add_location(div8, file$1, 511, 10, 20040);
        attr_dev(div9, "class", "columns is-centered");
        add_location(div9, file$1, 507, 8, 19877);
        attr_dev(div10, "class", "column is-3 has-text-centered");
        add_location(div10, file$1, 498, 6, 19542);
        attr_dev(div11, "class", div11_class_value = ctx.rate ? "columns is-centered" : "columns is-centered");
        add_location(div11, file$1, 461, 4, 18127);
        dispose = [listen_dev(input0, "input", ctx.input0_input_handler), listen_dev(input0, "keyup", ctx.keyup_handler, false, false, false), listen_dev(input1, "change", ctx.input1_change_input_handler), listen_dev(input1, "input", ctx.input1_change_input_handler), listen_dev(input1, "click", ctx.click_handler_5, {
          once: true
        }, false, false), listen_dev(input2, "change", ctx.input2_change_input_handler), listen_dev(input2, "input", ctx.input2_change_input_handler), listen_dev(input2, "click", ctx.click_handler_6, {
          once: true
        }, false, false)];
      },
      m: function mount(target, anchor) {
        insert_dev(target, div11, anchor);
        append_dev(div11, div2);
        append_dev(div2, div1);
        append_dev(div1, label);
        append_dev(div1, t1);
        append_dev(div1, div0);
        append_dev(div0, input0);
        set_input_value(input0, ctx.time);
        append_dev(div1, t2);
        if (if_block) if_block.m(div1, null);
        append_dev(div11, t3);
        append_dev(div11, div6);
        append_dev(div6, p0);
        append_dev(div6, t5);
        append_dev(div6, input1);
        set_input_value(input1, ctx.clarity);
        append_dev(div6, t6);
        append_dev(div6, div5);
        append_dev(div5, div3);
        append_dev(div3, p1);
        append_dev(div5, t8);
        append_dev(div5, div4);
        append_dev(div4, p2);
        append_dev(div11, t10);
        append_dev(div11, div10);
        append_dev(div10, p3);
        append_dev(div10, t12);
        append_dev(div10, input2);
        set_input_value(input2, ctx.confidence);
        append_dev(div10, t13);
        append_dev(div10, div9);
        append_dev(div9, div7);
        append_dev(div7, p4);
        append_dev(div9, t15);
        append_dev(div9, div8);
        append_dev(div8, p5);
      },
      p: function update(changed, ctx) {
        if (changed.invalidTime && input0_class_value !== (input0_class_value = ctx.invalidTime ? "input age-input is-danger" : "input age-input")) {
          attr_dev(input0, "class", input0_class_value);
        }

        if (changed.time && input0.value !== ctx.time) {
          set_input_value(input0, ctx.time);
        }

        if (ctx.invalidTime) {
          if (!if_block) {
            if_block = create_if_block_1(ctx);
            if_block.c();
            if_block.m(div1, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }

        if (changed.clarity) {
          set_input_value(input1, ctx.clarity);
        }

        if (changed.confidence) {
          set_input_value(input2, ctx.confidence);
        }

        if (changed.rate && div11_class_value !== (div11_class_value = ctx.rate ? "columns is-centered" : "columns is-centered")) {
          attr_dev(div11, "class", div11_class_value);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div11);
        if (if_block) if_block.d();
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block$1.name,
      type: "if",
      source: "(460:2) {#if rate}",
      ctx: ctx
    });
    return block;
  } // (544:8) {:else}


  function create_else_block_1(ctx) {
    var h2;
    var block = {
      c: function create() {
        h2 = element("h2");
        h2.textContent = "No Thoughts Tagged";
        attr_dev(h2, "class", "title is-4");
        add_location(h2, file$1, 544, 10, 21241);
      },
      m: function mount(target, anchor) {
        insert_dev(target, h2, anchor);
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(h2);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_else_block_1.name,
      type: "else",
      source: "(544:8) {:else}",
      ctx: ctx
    });
    return block;
  } // (523:8) {#if segments && segments.length}


  function create_if_block_2(ctx) {
    var div;
    var table;
    var thead;
    var tr;
    var th0;
    var t1;
    var th1;
    var t3;
    var th2;
    var t5;
    var tbody;
    var each_blocks = [];
    var each_1_lookup = new Map();
    var each_value = ctx.segments;

    var get_key = function get_key(ctx) {
      return ctx.segment.id;
    };

    for (var i = 0; i < each_value.length; i += 1) {
      var child_ctx = get_each_context(ctx, each_value, i);
      var key = get_key(child_ctx);
      each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
    }

    var block = {
      c: function create() {
        div = element("div");
        table = element("table");
        thead = element("thead");
        tr = element("tr");
        th0 = element("th");
        th0.textContent = "Thought Number";
        t1 = space();
        th1 = element("th");
        th1.textContent = "Start time";
        t3 = space();
        th2 = element("th");
        th2.textContent = "End time";
        t5 = space();
        tbody = element("tbody");

        for (var _i = 0; _i < each_blocks.length; _i += 1) {
          each_blocks[_i].c();
        }

        add_location(th0, file$1, 527, 18, 20572);
        add_location(th1, file$1, 528, 18, 20614);
        add_location(th2, file$1, 529, 18, 20652);
        add_location(tr, file$1, 526, 16, 20549);
        add_location(thead, file$1, 525, 14, 20525);
        add_location(tbody, file$1, 532, 14, 20729);
        attr_dev(table, "class", "table is-hoverable svelte-o2ldp3");
        add_location(table, file$1, 524, 12, 20476);
        attr_dev(div, "class", "table-container");
        add_location(div, file$1, 523, 10, 20434);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        append_dev(div, table);
        append_dev(table, thead);
        append_dev(thead, tr);
        append_dev(tr, th0);
        append_dev(tr, t1);
        append_dev(tr, th1);
        append_dev(tr, t3);
        append_dev(tr, th2);
        append_dev(table, t5);
        append_dev(table, tbody);

        for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
          each_blocks[_i2].m(tbody, null);
        }
      },
      p: function update(changed, ctx) {
        var each_value = ctx.segments;
        each_blocks = update_keyed_each(each_blocks, changed, get_key, 1, ctx, each_value, each_1_lookup, tbody, destroy_block, create_each_block, null, get_each_context);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);

        for (var _i3 = 0; _i3 < each_blocks.length; _i3 += 1) {
          each_blocks[_i3].d();
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_2.name,
      type: "if",
      source: "(523:8) {#if segments && segments.length}",
      ctx: ctx
    });
    return block;
  } // (534:16) {#each segments as segment, i (segment.id)}


  function create_each_block(key_1, ctx) {
    var tr;
    var td0;
    var t0_value = ctx.segment.id.split(".").slice(-1)[0] + "";
    var t0;
    var t1;
    var td1;
    var t2_value = ctx.segment.startTime.toFixed(2) + "";
    var t2;
    var t3;
    var td2;
    var t4_value = ctx.segment.endTime.toFixed(2) + "";
    var t4;
    var t5;
    var dispose;
    var block = {
      key: key_1,
      first: null,
      c: function create() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        attr_dev(td0, "type", "text");
        attr_dev(td0, "class", "segment-id");
        add_location(td0, file$1, 535, 20, 20883);
        attr_dev(td1, "type", "number");
        add_location(td1, file$1, 536, 20, 20980);
        attr_dev(td2, "type", "number");
        add_location(td2, file$1, 537, 20, 21054);
        attr_dev(tr, "class", "table-row");
        add_location(tr, file$1, 534, 18, 20815);
        dispose = listen_dev(tr, "click", ctx.selectSegment, false, false, false);
        this.first = tr;
      },
      m: function mount(target, anchor) {
        insert_dev(target, tr, anchor);
        append_dev(tr, td0);
        append_dev(td0, t0);
        append_dev(tr, t1);
        append_dev(tr, td1);
        append_dev(td1, t2);
        append_dev(tr, t3);
        append_dev(tr, td2);
        append_dev(td2, t4);
        append_dev(tr, t5);
      },
      p: function update(changed, ctx) {
        if (changed.segments && t0_value !== (t0_value = ctx.segment.id.split(".").slice(-1)[0] + "")) set_data_dev(t0, t0_value);
        if (changed.segments && t2_value !== (t2_value = ctx.segment.startTime.toFixed(2) + "")) set_data_dev(t2, t2_value);
        if (changed.segments && t4_value !== (t4_value = ctx.segment.endTime.toFixed(2) + "")) set_data_dev(t4, t4_value);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(tr);
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_each_block.name,
      type: "each",
      source: "(534:16) {#each segments as segment, i (segment.id)}",
      ctx: ctx
    });
    return block;
  } // (476:10) {#if invalidTime}


  function create_if_block_1(ctx) {
    var p;
    var block = {
      c: function create() {
        p = element("p");
        p.textContent = "Invalid timestamp. Please use MM:SS format.";
        attr_dev(p, "class", "help is-danger");
        add_location(p, file$1, 476, 12, 18779);
      },
      m: function mount(target, anchor) {
        insert_dev(target, p, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(p);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_1.name,
      type: "if",
      source: "(476:10) {#if invalidTime}",
      ctx: ctx
    });
    return block;
  }

  function create_fragment$1(ctx) {
    var div1;
    var div0;
    var header;
    var p;
    var t0;
    var t1;
    var section;
    var t2;
    var footer;
    var div1_class_value;
    var t3;
    var div13;
    var div4;
    var div3;
    var h1;
    var t5;
    var t6;
    var div2;
    var t7;
    var div12;
    var div11;
    var div10;
    var div8;
    var div7;
    var div5;
    var audio;
    var source;
    var source_src_value;
    var t8;
    var t9;
    var div6;
    var span;
    var i;
    var t10;
    var div9;
    var t11;
    var dispose;

    function select_block_type(changed, ctx) {
      if (ctx.quizComplete) return create_if_block_5;
      return create_else_block_3;
    }

    var current_block_type = select_block_type(null, ctx);
    var if_block0 = current_block_type(ctx);
    var if_block1 = ctx.peaksLoading && create_if_block_4(ctx);

    function select_block_type_2(changed, ctx) {
      if (ctx.rate) return create_if_block_3;
      return create_else_block_2;
    }

    var current_block_type_1 = select_block_type_2(null, ctx);
    var if_block2 = current_block_type_1(ctx);

    function select_block_type_3(changed, ctx) {
      if (ctx.rate) return create_if_block$1;
      return create_else_block$1;
    }

    var current_block_type_2 = select_block_type_3(null, ctx);
    var if_block3 = current_block_type_2(ctx);
    var block = {
      c: function create() {
        div1 = element("div");
        div0 = element("div");
        header = element("header");
        p = element("p");
        t0 = text(ctx.tutorialState);
        t1 = space();
        section = element("section");
        t2 = space();
        footer = element("footer");
        if_block0.c();
        t3 = space();
        div13 = element("div");
        div4 = element("div");
        div3 = element("div");
        h1 = element("h1");
        h1.textContent = "Example Audio";
        t5 = space();
        if (if_block1) if_block1.c();
        t6 = space();
        div2 = element("div");
        t7 = space();
        div12 = element("div");
        div11 = element("div");
        div10 = element("div");
        div8 = element("div");
        div7 = element("div");
        div5 = element("div");
        audio = element("audio");
        source = element("source");
        t8 = text("\n                Your browser does not support the audio element.");
        t9 = space();
        div6 = element("div");
        span = element("span");
        i = element("i");
        t10 = space();
        div9 = element("div");
        if_block2.c();
        t11 = space();
        if_block3.c();
        attr_dev(p, "class", "modal-card-title");
        add_location(p, file$1, 304, 6, 12826);
        attr_dev(header, "class", "modal-card-head");
        add_location(header, file$1, 303, 4, 12787);
        attr_dev(section, "class", "modal-card-body");
        add_location(section, file$1, 306, 4, 12892);
        attr_dev(footer, "class", "modal-card-foot");
        add_location(footer, file$1, 311, 4, 12977);
        attr_dev(div0, "class", "modal-card svelte-o2ldp3");
        attr_dev(div0, "id", "modal");
        toggle_class(div0, "up", ctx.up);
        toggle_class(div0, "right", ctx.right);
        toggle_class(div0, "down", ctx.down);
        toggle_class(div0, "upp", ctx.upp);
        add_location(div0, file$1, 302, 2, 12705);
        attr_dev(div1, "class", div1_class_value = "" + (null_to_empty(ctx.modalOpen ? "modal is-active" : "modal") + " svelte-o2ldp3"));
        add_location(div1, file$1, 297, 0, 12530);
        attr_dev(h1, "class", "title");
        add_location(h1, file$1, 374, 6, 14970);
        attr_dev(div2, "id", "waveform-container");
        attr_dev(div2, "class", "svelte-o2ldp3");
        toggle_class(div2, "blur", ctx.currentStep < 1);
        add_location(div2, file$1, 379, 6, 15181);
        attr_dev(div3, "class", "column is-three-quarters has-text-centered");
        add_location(div3, file$1, 373, 4, 14907);
        attr_dev(div4, "class", "columns is-centered");
        add_location(div4, file$1, 372, 2, 14869);
        if (source.src !== (source_src_value = ctx.src)) attr_dev(source, "src", source_src_value);
        attr_dev(source, "type", "audio/wav");
        add_location(source, file$1, 391, 16, 15701);
        attr_dev(audio, "id", "audio");
        audio.controls = "controls";
        attr_dev(audio, "controlslist", "nodownload");
        add_location(audio, file$1, 390, 14, 15620);
        attr_dev(div5, "class", "column is-10");
        add_location(div5, file$1, 389, 12, 15579);
        attr_dev(i, "class", "fas fa-question-circle fa-2x fa-fw");
        add_location(i, file$1, 400, 16, 16068);
        attr_dev(span, "class", "icon is-large");
        toggle_class(span, "is-invisible", !ctx.tutorialComplete);
        add_location(span, file$1, 396, 14, 15894);
        attr_dev(div6, "class", "column is-2");
        add_location(div6, file$1, 395, 12, 15854);
        attr_dev(div7, "class", "columns is-gapless");
        add_location(div7, file$1, 388, 10, 15534);
        attr_dev(div8, "class", "column is-one-quarter");
        add_location(div8, file$1, 387, 8, 15488);
        attr_dev(div9, "class", "column is-three-quarters");
        add_location(div9, file$1, 406, 8, 16199);
        attr_dev(div10, "class", "columns");
        add_location(div10, file$1, 386, 6, 15458);
        attr_dev(div11, "class", "column is-three-quarters");
        add_location(div11, file$1, 384, 4, 15335);
        attr_dev(div12, "class", "columns is-centered");
        add_location(div12, file$1, 383, 2, 15297);
        attr_dev(div13, "class", "container is-fluid svelte-o2ldp3");
        toggle_class(div13, "blur", ctx.tutorialState === "Overview" || ctx.tutorialSubmitted || ctx.quizFailed);
        add_location(div13, file$1, 368, 0, 14713);
        dispose = [listen_dev(div1, "mousedown", prevent_default(ctx.dragStart), false, false, true), listen_dev(div1, "mouseup", prevent_default(ctx.dragEnd), false, false, true), listen_dev(div1, "mousemove", prevent_default(ctx.drag), false, false, true), listen_dev(span, "click", ctx.click_handler_4, false, false, false)];
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, div1, anchor);
        append_dev(div1, div0);
        append_dev(div0, header);
        append_dev(header, p);
        append_dev(p, t0);
        append_dev(div0, t1);
        append_dev(div0, section);
        section.innerHTML = ctx.tutorialContent;
        append_dev(div0, t2);
        append_dev(div0, footer);
        if_block0.m(footer, null);
        insert_dev(target, t3, anchor);
        insert_dev(target, div13, anchor);
        append_dev(div13, div4);
        append_dev(div4, div3);
        append_dev(div3, h1);
        append_dev(div3, t5);
        if (if_block1) if_block1.m(div3, null);
        append_dev(div3, t6);
        append_dev(div3, div2);
        append_dev(div13, t7);
        append_dev(div13, div12);
        append_dev(div12, div11);
        append_dev(div11, div10);
        append_dev(div10, div8);
        append_dev(div8, div7);
        append_dev(div7, div5);
        append_dev(div5, audio);
        append_dev(audio, source);
        append_dev(audio, t8);
        append_dev(div7, t9);
        append_dev(div7, div6);
        append_dev(div6, span);
        append_dev(span, i);
        append_dev(div10, t10);
        append_dev(div10, div9);
        if_block2.m(div9, null);
        append_dev(div13, t11);
        if_block3.m(div13, null);
      },
      p: function update(changed, ctx) {
        if (changed.tutorialState) set_data_dev(t0, ctx.tutorialState);
        if (changed.tutorialContent) section.innerHTML = ctx.tutorialContent;

        if (current_block_type === (current_block_type = select_block_type(changed, ctx)) && if_block0) {
          if_block0.p(changed, ctx);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx);

          if (if_block0) {
            if_block0.c();
            if_block0.m(footer, null);
          }
        }

        if (changed.up) {
          toggle_class(div0, "up", ctx.up);
        }

        if (changed.right) {
          toggle_class(div0, "right", ctx.right);
        }

        if (changed.down) {
          toggle_class(div0, "down", ctx.down);
        }

        if (changed.upp) {
          toggle_class(div0, "upp", ctx.upp);
        }

        if (changed.modalOpen && div1_class_value !== (div1_class_value = "" + (null_to_empty(ctx.modalOpen ? "modal is-active" : "modal") + " svelte-o2ldp3"))) {
          attr_dev(div1, "class", div1_class_value);
        }

        if (ctx.peaksLoading) {
          if (!if_block1) {
            if_block1 = create_if_block_4(ctx);
            if_block1.c();
            if_block1.m(div3, t6);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }

        if (changed.currentStep) {
          toggle_class(div2, "blur", ctx.currentStep < 1);
        }

        if (changed.src && source.src !== (source_src_value = ctx.src)) {
          attr_dev(source, "src", source_src_value);
        }

        if (changed.tutorialComplete) {
          toggle_class(span, "is-invisible", !ctx.tutorialComplete);
        }

        if (current_block_type_1 === (current_block_type_1 = select_block_type_2(changed, ctx)) && if_block2) {
          if_block2.p(changed, ctx);
        } else {
          if_block2.d(1);
          if_block2 = current_block_type_1(ctx);

          if (if_block2) {
            if_block2.c();
            if_block2.m(div9, null);
          }
        }

        if (current_block_type_2 === (current_block_type_2 = select_block_type_3(changed, ctx)) && if_block3) {
          if_block3.p(changed, ctx);
        } else {
          if_block3.d(1);
          if_block3 = current_block_type_2(ctx);

          if (if_block3) {
            if_block3.c();
            if_block3.m(div13, null);
          }
        }

        if (changed.tutorialState || changed.tutorialSubmitted || changed.quizFailed) {
          toggle_class(div13, "blur", ctx.tutorialState === "Overview" || ctx.tutorialSubmitted || ctx.quizFailed);
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(div1);
        if_block0.d();
        if (detaching) detach_dev(t3);
        if (detaching) detach_dev(div13);
        if (if_block1) if_block1.d();
        if_block2.d();
        if_block3.d();
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$1.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$1($$self, $$props, $$invalidate) {
    var src = $$props.src;
    var peaksInstance;
    var segments = [];
    var selectedSegmentId;
    var rowSelected = false;
    var segmentPrevMax = 0;
    var dispatch = createEventDispatcher();
    var peaksLoading = true;
    var rate = false;
    var confidence = 50;
    var clarity = 50;
    var clarityRated = false;
    var confidenceRated = false;
    var time = "";
    var timer;
    var invalidTime = false;
    var modalOpen;
    var tutorialSteps = ["Overview", "Recording Display", "Controls", "Tagging Thoughts", "Comprehension Check"];
    var currentStep = 0;
    var modalXInitial;
    var modalYInitial;
    var modalXCurrent;
    var modalYCurrent;
    var modalXOffset = 0;
    var modalYOffset = 0;
    var dragActive = false;
    var tutorialComplete = false;
    var quizComplete = false;
    var quizFailed = false;
    var tutorialSubmitted = false;
    var tutorialInstructions = ["<p>This brief tutorial will introduce you to the interface you will use to complete the task. Feel free to drag and reposition this popup as you progress through each step of the tutorial.</p>", "<p>This part of the screen creen contains a visual representation of the audio recording. The top half of this display (in green) shows a zoomed in view of an <strong>audio snippet</strong> of the recording, while the bottom half displays the <strong>full recording</strong> along with a box highlighting the <strong>location of the snippet</strong> within the full recording. Below this are playback controls you can use to play, pause, and adjust the volume of the recording. Playback is synchronized between these controls and the visual display.</p><p>You can move to a specific location within the snippet or within the full recording by <strong>clicking</strong> in the top or bottom display respectively. This will move the vertical position indicator to a new timepoint in both displays. You can also scrub through the snippet or full recording by <strong>clicking & dragging</strong> left or right.</p><br/><p>Feel free to click around within this display to get a feel for how you can control your position within the recording.</p>", "<p>Next to the audio controls you will also find buttons to tag a new thought and submit your responses when you are finished tagging thoughts in this audio file. Below this you will see a section that lists your currently tagged thoughts. As you can see currently no thoughts have been tagged so nothing is visible.</p><br/><p><strong>Try clicking the Tag thought button now.</strong></p>", "Notice how this added a row to the table along with markers to the visual display above. The <span class=\"has-text-weight-bold has-text-grey\">start marker (light grey)</span> indicates the beginning of a tag based on your current position in the audio file. The <span class=\"has-text-weight-bold has-text-grey-darker\">end marker (dark grey)</span> indicates the end of a tag and defaults to 5 seconds after the start marker. <br><br>You should edit these times to match when when you think a new thought begins and when that same thought ends. To edit these times first select this thought by <strong>clicking on its row</strong> within the table. Then <strong>drag the markers</strong> in the display above to make an adjustment. Notice how the values in the table change in sync with your actions in the display above. You can also delete a tag or play audio within a tag verify your work using the buttons that appear. After you finish editing just click on the same thought in the table to deselect it.", "You now know how to use the controls. Try to identify <strong>three thoughts</strong> within this audio file to continue. We will verify your tags to determine your eligibility to continue with this HIT and earn a bonus payment for tagging more files. If you fail to correctly identify these thoughts you will be paid for the HIT but will not be permitted to continute tagging. You can bring up this guide by clicking the help icon next to the audio controls."];
    var quizOutcome = ["<div class=\"content\"><p>Nice job! You did exactly what were looking for. After you finish tagging thoughts there are 3 additional questions we would like you input before submitting your tags.<ol class=\"1\"><li>The approximate time that the speaker in the recording stopped talking</li><li>The clarity of the audio recording</li><li>The difficulty of identifying thoughts based on the speaker style</li><ol>Please complete these now and click the Next button.</p></div>", "<p>Perfect! You are now eligible to tag more recordings. You will earn a $0.50 bonus for each additional recording you tag thoughts for. Otherwise you can complete this HIT and earn your payment without any bonuses. Please select your preference below </p>", "<p>Hmm your tags are not quite what we are looking for. We have highlighted the tags you made below that do not line up with what we expected. Please adjust your tags and click Done to try verifying your responses again. <br><br> You will only have <strong>1 more chance</strong> to identify the correct tags before you forfeit any bonus payments.</p>", "<p>Unfortunately your tags still do not reflect what we are looking for. Therefore you can no longer continue with this HIT and earn bonus payments.<br><br>Do not worry, you will still be compensenated the base payment for this HIT.</p>"];

    var backward = function backward() {
      $$invalidate("currentStep", currentStep -= 1);
      $$invalidate("currentStep", currentStep = Math.max(currentStep, 0));
      console.log(tutorialSteps[currentStep]);
    };

    var forward = function forward() {
      $$invalidate("currentStep", currentStep = Math.min(currentStep + 1, tutorialSteps.length - 1));

      if (currentStep === tutorialSteps.length - 1) {
        $$invalidate("tutorialComplete", tutorialComplete = true);
      }

      console.log(tutorialSteps[currentStep]);
    };

    var setTranslate = function setTranslate(xPos, yPos, el) {
      el.style.transform = "translate3d(".concat(xPos, "px, ").concat(yPos, "px, 0)");
    };

    var dragStart = function dragStart(ev) {
      if (ev.target.parentElement.closest(".modal")) {
        modalXInitial = ev.clientX - modalXOffset;
        modalYInitial = ev.clientY - modalYOffset;
        dragActive = true;
      }
    };

    var drag = function drag(ev) {
      if (dragActive) {
        modalXCurrent = ev.clientX - modalXInitial;
        modalYCurrent = ev.clientY - modalYInitial;
        modalXOffset = modalXCurrent;
        modalYOffset = modalYCurrent;
        var el = document.getElementById("modal");
        setTranslate(modalXCurrent, modalYCurrent, el);
      }
    };

    var dragEnd = function dragEnd(ev) {
      modalXInitial = modalXCurrent;
      modalYInitial = modalYCurrent;
      dragActive = false;
    };

    var debounce = function debounce(v) {
      clearTimeout(timer);
      timer = setTimeout(function () {
        if (time.length === 5 && time.includes(":") || !time) {
          $$invalidate("invalidTime", invalidTime = false);
        } else {
          $$invalidate("invalidTime", invalidTime = true);
        }
      }, 600);
    };

    var checkQuiz = function checkQuiz() {
      if (segments.length === 3) {
        $$invalidate("quizComplete", quizComplete = true);
        $$invalidate("tutorialContent", tutorialContent = quizOutcome[0]);
        $$invalidate("rate", rate = true);
      } else {
        $$invalidate("quizComplete", quizComplete = true);
        $$invalidate("quizFailed", quizFailed = true);
        $$invalidate("tutorialContent", tutorialContent = quizOutcome[3]);
      }
    };

    onMount(function () {
      var options = {
        container: document.getElementById("waveform-container"),
        mediaElement: document.getElementById("audio"),
        webAudio: {
          audioContext: new AudioContext()
        },
        keyboard: false,
        pointMarkerColor: "#006eb0",
        showPlayheadTime: true,
        inMarkerColor: "#999999",
        outMarkerColor: "#3d3d3d"
      };
      $$invalidate("modalOpen", modalOpen = true);
      peaksInstance = Peaks.init(options, function (err) {
        if (err) {
          console.error(err);
        } else {
          $$invalidate("peaksLoading", peaksLoading = false);
          console.log("Peaks instance ready");
          $$invalidate("segments", segments = peaksInstance.segments.getSegments());
        }
      });
      peaksInstance.on("segments.mouseleave", function (segment) {
        $$invalidate("segments", segments = peaksInstance.segments.getSegments());
      });
      peaksInstance.on("segments.click", function (segment) {
        $$invalidate("segments", segments = peaksInstance.segments.getSegments());
      });
      peaksInstance.on("segments.dragged", function (segment) {
        $$invalidate("segments", segments = peaksInstance.segments.getSegments());
      });
    });

    var finish = function finish() {
      $$invalidate("tutorialSubmitted", tutorialSubmitted = true);
      $$invalidate("tutorialContent", tutorialContent = quizOutcome[1]);
      $$invalidate("modalOpen", modalOpen = true);
    };

    var submitTags = function submitTags() {
      if (!segments || segments && segments.length <= 2) {
        alert("Please tag a few more thoughts");
      } else {
        checkQuiz();
        $$invalidate("modalOpen", modalOpen = true);
      }
    };

    function addSegment() {
      peaksInstance.segments.add({
        startTime: peaksInstance.player.getCurrentTime(),
        endTime: peaksInstance.player.getCurrentTime() + 5,
        labelText: "Thought ".concat(segmentPrevMax.toString()),
        editable: true
      });
      $$invalidate("segments", segments = peaksInstance.segments.getSegments());
      segmentPrevMax += 1;

      if (currentStep === 2) {
        forward();
      }
    }

    function selectSegment(ev) {
      var rows = document.getElementsByClassName("table-row");
      var row = ev.target.parentNode;

      if (row.className === "table-row is-selected") {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var r = _step.value;
            r.className = "table-row";
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        $$invalidate("rowSelected", rowSelected = false);
      } else {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = rows[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _r = _step2.value;
            _r.className = "table-row";
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        row.className += " is-selected";
        $$invalidate("rowSelected", rowSelected = true);
      }

      selectedSegmentId = parseInt(row.querySelector("td.segment-id").innerText, 10);
      selectedSegmentId = "peaks.segment.".concat(selectedSegmentId.toString());
    }

    function playSegment() {
      var segment = peaksInstance.segments.getSegment(selectedSegmentId);
      peaksInstance.player.playSegment(segment);
    }

    function deleteSegment() {
      peaksInstance.segments.removeById(selectedSegmentId);
      var rows = document.getElementsByClassName("table-row");
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = rows[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var r = _step3.value;
          r.className = "table-row";
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      $$invalidate("rowSelected", rowSelected = false);
      $$invalidate("segments", segments = peaksInstance.segments.getSegments());
    }

    var writable_props = ["src"];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn("<Quiz> was created with unknown prop '".concat(key, "'"));
    });

    var click_handler = function click_handler() {
      return dispatch("finishedComplete");
    };

    var click_handler_1 = function click_handler_1() {
      return dispatch("finishedContinue");
    };

    var click_handler_2 = function click_handler_2() {
      return dispatch("finishedComplete");
    };

    var click_handler_3 = function click_handler_3() {
      $$invalidate("modalOpen", modalOpen = !modalOpen);
    };

    var click_handler_4 = function click_handler_4() {
      return $$invalidate("modalOpen", modalOpen = !modalOpen);
    };

    function input0_input_handler() {
      time = this.value;
      $$invalidate("time", time);
    }

    var keyup_handler = function keyup_handler(ev) {
      return debounce(ev.target.value);
    };

    function input1_change_input_handler() {
      clarity = to_number(this.value);
      $$invalidate("clarity", clarity);
    }

    var click_handler_5 = function click_handler_5() {
      return $$invalidate("clarityRated", clarityRated = true);
    };

    function input2_change_input_handler() {
      confidence = to_number(this.value);
      $$invalidate("confidence", confidence);
    }

    var click_handler_6 = function click_handler_6() {
      return $$invalidate("confidenceRated", confidenceRated = true);
    };

    $$self.$set = function ($$props) {
      if ("src" in $$props) $$invalidate("src", src = $$props.src);
    };

    $$self.$capture_state = function () {
      return {
        src: src,
        peaksInstance: peaksInstance,
        segments: segments,
        selectedSegmentId: selectedSegmentId,
        rowSelected: rowSelected,
        segmentPrevMax: segmentPrevMax,
        peaksLoading: peaksLoading,
        rate: rate,
        confidence: confidence,
        clarity: clarity,
        clarityRated: clarityRated,
        confidenceRated: confidenceRated,
        time: time,
        timer: timer,
        invalidTime: invalidTime,
        modalOpen: modalOpen,
        currentStep: currentStep,
        modalXInitial: modalXInitial,
        modalYInitial: modalYInitial,
        modalXCurrent: modalXCurrent,
        modalYCurrent: modalYCurrent,
        modalXOffset: modalXOffset,
        modalYOffset: modalYOffset,
        dragActive: dragActive,
        tutorialComplete: tutorialComplete,
        quizComplete: quizComplete,
        quizFailed: quizFailed,
        tutorialSubmitted: tutorialSubmitted,
        nextTrialActive: nextTrialActive,
        ratingActive: ratingActive,
        tutorialState: tutorialState,
        down: down,
        up: up,
        right: right,
        upp: upp,
        tutorialContent: tutorialContent
      };
    };

    $$self.$inject_state = function ($$props) {
      if ("src" in $$props) $$invalidate("src", src = $$props.src);
      if ("peaksInstance" in $$props) peaksInstance = $$props.peaksInstance;
      if ("segments" in $$props) $$invalidate("segments", segments = $$props.segments);
      if ("selectedSegmentId" in $$props) selectedSegmentId = $$props.selectedSegmentId;
      if ("rowSelected" in $$props) $$invalidate("rowSelected", rowSelected = $$props.rowSelected);
      if ("segmentPrevMax" in $$props) segmentPrevMax = $$props.segmentPrevMax;
      if ("peaksLoading" in $$props) $$invalidate("peaksLoading", peaksLoading = $$props.peaksLoading);
      if ("rate" in $$props) $$invalidate("rate", rate = $$props.rate);
      if ("confidence" in $$props) $$invalidate("confidence", confidence = $$props.confidence);
      if ("clarity" in $$props) $$invalidate("clarity", clarity = $$props.clarity);
      if ("clarityRated" in $$props) $$invalidate("clarityRated", clarityRated = $$props.clarityRated);
      if ("confidenceRated" in $$props) $$invalidate("confidenceRated", confidenceRated = $$props.confidenceRated);
      if ("time" in $$props) $$invalidate("time", time = $$props.time);
      if ("timer" in $$props) timer = $$props.timer;
      if ("invalidTime" in $$props) $$invalidate("invalidTime", invalidTime = $$props.invalidTime);
      if ("modalOpen" in $$props) $$invalidate("modalOpen", modalOpen = $$props.modalOpen);
      if ("currentStep" in $$props) $$invalidate("currentStep", currentStep = $$props.currentStep);
      if ("modalXInitial" in $$props) modalXInitial = $$props.modalXInitial;
      if ("modalYInitial" in $$props) modalYInitial = $$props.modalYInitial;
      if ("modalXCurrent" in $$props) modalXCurrent = $$props.modalXCurrent;
      if ("modalYCurrent" in $$props) modalYCurrent = $$props.modalYCurrent;
      if ("modalXOffset" in $$props) modalXOffset = $$props.modalXOffset;
      if ("modalYOffset" in $$props) modalYOffset = $$props.modalYOffset;
      if ("dragActive" in $$props) dragActive = $$props.dragActive;
      if ("tutorialComplete" in $$props) $$invalidate("tutorialComplete", tutorialComplete = $$props.tutorialComplete);
      if ("quizComplete" in $$props) $$invalidate("quizComplete", quizComplete = $$props.quizComplete);
      if ("quizFailed" in $$props) $$invalidate("quizFailed", quizFailed = $$props.quizFailed);
      if ("tutorialSubmitted" in $$props) $$invalidate("tutorialSubmitted", tutorialSubmitted = $$props.tutorialSubmitted);
      if ("nextTrialActive" in $$props) $$invalidate("nextTrialActive", nextTrialActive = $$props.nextTrialActive);
      if ("ratingActive" in $$props) $$invalidate("ratingActive", ratingActive = $$props.ratingActive);
      if ("tutorialState" in $$props) $$invalidate("tutorialState", tutorialState = $$props.tutorialState);
      if ("down" in $$props) $$invalidate("down", down = $$props.down);
      if ("up" in $$props) $$invalidate("up", up = $$props.up);
      if ("right" in $$props) $$invalidate("right", right = $$props.right);
      if ("upp" in $$props) $$invalidate("upp", upp = $$props.upp);
      if ("tutorialContent" in $$props) $$invalidate("tutorialContent", tutorialContent = $$props.tutorialContent);
    };

    var nextTrialActive;
    var ratingActive;
    var tutorialState;
    var down;
    var up;
    var right;
    var upp;
    var tutorialContent;

    $$self.$$.update = function () {
      var changed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        clarityRated: 1,
        confidenceRated: 1,
        time: 1,
        invalidTime: 1,
        segments: 1,
        currentStep: 1,
        quizComplete: 1
      };

      if (changed.clarityRated || changed.confidenceRated || changed.time || changed.invalidTime) {
         $$invalidate("nextTrialActive", nextTrialActive = !(clarityRated && confidenceRated && time && !invalidTime));
      }

      if (changed.segments) {
         $$invalidate("ratingActive", ratingActive = segments.length === 0);
      }

      if (changed.currentStep) {
         $$invalidate("tutorialState", tutorialState = tutorialSteps[currentStep]);
      }

      if (changed.currentStep) {
         $$invalidate("down", down = currentStep === 1);
      }

      if (changed.currentStep || changed.quizComplete) {
         $$invalidate("up", up = currentStep === 2 || quizComplete);
      }

      if (changed.currentStep) {
         $$invalidate("right", right = currentStep === 3 || currentStep === 1);
      }

      if (changed.currentStep) {
         $$invalidate("upp", upp = currentStep === 3);
      }

      if (changed.currentStep) {
         $$invalidate("tutorialContent", tutorialContent = tutorialInstructions[currentStep]);
      }
    };

    return {
      src: src,
      segments: segments,
      rowSelected: rowSelected,
      dispatch: dispatch,
      peaksLoading: peaksLoading,
      rate: rate,
      confidence: confidence,
      clarity: clarity,
      clarityRated: clarityRated,
      confidenceRated: confidenceRated,
      time: time,
      invalidTime: invalidTime,
      modalOpen: modalOpen,
      currentStep: currentStep,
      tutorialComplete: tutorialComplete,
      quizComplete: quizComplete,
      quizFailed: quizFailed,
      tutorialSubmitted: tutorialSubmitted,
      tutorialInstructions: tutorialInstructions,
      backward: backward,
      forward: forward,
      dragStart: dragStart,
      drag: drag,
      dragEnd: dragEnd,
      debounce: debounce,
      finish: finish,
      submitTags: submitTags,
      addSegment: addSegment,
      selectSegment: selectSegment,
      playSegment: playSegment,
      deleteSegment: deleteSegment,
      nextTrialActive: nextTrialActive,
      ratingActive: ratingActive,
      tutorialState: tutorialState,
      down: down,
      up: up,
      right: right,
      upp: upp,
      tutorialContent: tutorialContent,
      click_handler: click_handler,
      click_handler_1: click_handler_1,
      click_handler_2: click_handler_2,
      click_handler_3: click_handler_3,
      click_handler_4: click_handler_4,
      input0_input_handler: input0_input_handler,
      keyup_handler: keyup_handler,
      input1_change_input_handler: input1_change_input_handler,
      click_handler_5: click_handler_5,
      input2_change_input_handler: input2_change_input_handler,
      click_handler_6: click_handler_6
    };
  }

  var Quiz =
  /*#__PURE__*/
  function (_SvelteComponentDev) {
    _inherits(Quiz, _SvelteComponentDev);

    function Quiz(options) {
      var _this;

      _classCallCheck(this, Quiz);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Quiz).call(this, options));
      init(_assertThisInitialized(_this), options, instance$1, create_fragment$1, safe_not_equal, {
        src: 0
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: _assertThisInitialized(_this),
        tagName: "Quiz",
        options: options,
        id: create_fragment$1.name
      });
      var ctx = _this.$$.ctx;
      var props = options.props || {};

      if (ctx.src === undefined && !("src" in props)) {
        console_1.warn("<Quiz> was created without expected prop 'src'");
      }

      return _this;
    }

    _createClass(Quiz, [{
      key: "src",
      get: function get() {
        throw new Error("<Quiz>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
      },
      set: function set(value) {
        throw new Error("<Quiz>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
      }
    }]);

    return Quiz;
  }(SvelteComponentDev);

  var console_1$1 = globals.console;
  var file$2 = "src/components/TagThought.svelte";

  function get_each_context$1(ctx, list, i) {
    var child_ctx = Object.create(ctx);
    child_ctx.segment = list[i];
    child_ctx.i = i;
    return child_ctx;
  } // (201:6) {#if peaksLoading}


  function create_if_block_4$1(ctx) {
    var h3;
    var t1;
    var button;
    var block = {
      c: function create() {
        h3 = element("h3");
        h3.textContent = "Loading audio...";
        t1 = space();
        button = element("button");
        attr_dev(h3, "class", "title is-3");
        add_location(h3, file$2, 201, 8, 6697);
        attr_dev(button, "class", "button is-white is-loading loading-button svelte-1k5bkci");
        button.disabled = true;
        add_location(button, file$2, 202, 8, 6750);
      },
      m: function mount(target, anchor) {
        insert_dev(target, h3, anchor);
        insert_dev(target, t1, anchor);
        insert_dev(target, button, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(h3);
        if (detaching) detach_dev(t1);
        if (detaching) detach_dev(button);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_4$1.name,
      type: "if",
      source: "(201:6) {#if peaksLoading}",
      ctx: ctx
    });
    return block;
  } // (222:10) {:else}


  function create_else_block_2$1(ctx) {
    var button0;
    var t1;
    var button1;
    var t2;
    var t3;
    var button2;
    var t4;
    var button2_class_value;
    var t5;
    var button3;
    var t6;
    var button3_class_value;
    var dispose;
    var block = {
      c: function create() {
        button0 = element("button");
        button0.textContent = "Tag Thought";
        t1 = space();
        button1 = element("button");
        t2 = text("Done");
        t3 = space();
        button2 = element("button");
        t4 = text("Play Thought");
        t5 = space();
        button3 = element("button");
        t6 = text("Delete Segment");
        attr_dev(button0, "class", "button is-primary is-large");
        add_location(button0, file$2, 222, 12, 7475);
        attr_dev(button1, "class", "button is-info is-large");
        button1.disabled = ctx.ratingActive;
        add_location(button1, file$2, 223, 12, 7573);
        attr_dev(button2, "class", button2_class_value = "" + (null_to_empty(ctx.rowSelected ? "button is-success is-large" : "button is-success is-large hidden") + " svelte-1k5bkci"));
        add_location(button2, file$2, 226, 12, 7714);
        attr_dev(button3, "class", button3_class_value = "" + (null_to_empty(ctx.rowSelected ? "button is-danger is-large" : "button is-danger is-large hidden") + " svelte-1k5bkci"));
        add_location(button3, file$2, 231, 12, 7924);
        dispose = [listen_dev(button0, "click", ctx.addSegment, false, false, false), listen_dev(button1, "click", ctx.makeRatings, false, false, false), listen_dev(button2, "click", ctx.playSegment, false, false, false), listen_dev(button3, "click", ctx.deleteSegment, false, false, false)];
      },
      m: function mount(target, anchor) {
        insert_dev(target, button0, anchor);
        insert_dev(target, t1, anchor);
        insert_dev(target, button1, anchor);
        append_dev(button1, t2);
        insert_dev(target, t3, anchor);
        insert_dev(target, button2, anchor);
        append_dev(button2, t4);
        insert_dev(target, t5, anchor);
        insert_dev(target, button3, anchor);
        append_dev(button3, t6);
      },
      p: function update(changed, ctx) {
        if (changed.ratingActive) {
          prop_dev(button1, "disabled", ctx.ratingActive);
        }

        if (changed.rowSelected && button2_class_value !== (button2_class_value = "" + (null_to_empty(ctx.rowSelected ? "button is-success is-large" : "button is-success is-large hidden") + " svelte-1k5bkci"))) {
          attr_dev(button2, "class", button2_class_value);
        }

        if (changed.rowSelected && button3_class_value !== (button3_class_value = "" + (null_to_empty(ctx.rowSelected ? "button is-danger is-large" : "button is-danger is-large hidden") + " svelte-1k5bkci"))) {
          attr_dev(button3, "class", button3_class_value);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(button0);
        if (detaching) detach_dev(t1);
        if (detaching) detach_dev(button1);
        if (detaching) detach_dev(t3);
        if (detaching) detach_dev(button2);
        if (detaching) detach_dev(t5);
        if (detaching) detach_dev(button3);
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_else_block_2$1.name,
      type: "else",
      source: "(222:10) {:else}",
      ctx: ctx
    });
    return block;
  } // (218:10) {#if rate}


  function create_if_block_3$1(ctx) {
    var button;
    var t;
    var dispose;
    var block = {
      c: function create() {
        button = element("button");
        t = text("Next Recording");
        attr_dev(button, "class", "button is-primary is-large");
        button.disabled = ctx.nextTrialActive;
        add_location(button, file$2, 218, 12, 7305);
        dispose = listen_dev(button, "click", ctx.finish, false, false, false);
      },
      m: function mount(target, anchor) {
        insert_dev(target, button, anchor);
        append_dev(button, t);
      },
      p: function update(changed, ctx) {
        if (changed.nextTrialActive) {
          prop_dev(button, "disabled", ctx.nextTrialActive);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(button);
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_3$1.name,
      type: "if",
      source: "(218:10) {#if rate}",
      ctx: ctx
    });
    return block;
  } // (302:2) {:else}


  function create_else_block$2(ctx) {
    var div1;
    var div0;

    function select_block_type_2(changed, ctx) {
      if (ctx.segments && ctx.segments.length) return create_if_block_2$1;
      return create_else_block_1$1;
    }

    var current_block_type = select_block_type_2(null, ctx);
    var if_block = current_block_type(ctx);
    var block = {
      c: function create() {
        div1 = element("div");
        div0 = element("div");
        if_block.c();
        attr_dev(div0, "class", "column is-three-quarters has-text-centered");
        add_location(div0, file$2, 303, 6, 10425);
        attr_dev(div1, "class", "columns is-centered");
        add_location(div1, file$2, 302, 4, 10385);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div1, anchor);
        append_dev(div1, div0);
        if_block.m(div0, null);
      },
      p: function update(changed, ctx) {
        if (current_block_type === (current_block_type = select_block_type_2(changed, ctx)) && if_block) {
          if_block.p(changed, ctx);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx);

          if (if_block) {
            if_block.c();
            if_block.m(div0, null);
          }
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div1);
        if_block.d();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_else_block$2.name,
      type: "else",
      source: "(302:2) {:else}",
      ctx: ctx
    });
    return block;
  } // (244:2) {#if rate}


  function create_if_block$2(ctx) {
    var div11;
    var div2;
    var div1;
    var label;
    var t1;
    var div0;
    var input0;
    var input0_class_value;
    var t2;
    var t3;
    var div6;
    var p0;
    var t5;
    var input1;
    var t6;
    var div5;
    var div3;
    var p1;
    var t8;
    var div4;
    var p2;
    var t10;
    var div10;
    var p3;
    var t12;
    var input2;
    var t13;
    var div9;
    var div7;
    var p4;
    var t15;
    var div8;
    var p5;
    var div11_class_value;
    var dispose;
    var if_block = ctx.invalidTime && create_if_block_1$1(ctx);
    var block = {
      c: function create() {
        div11 = element("div");
        div2 = element("div");
        div1 = element("div");
        label = element("label");
        label.textContent = "When did the speaker stop talking?";
        t1 = space();
        div0 = element("div");
        input0 = element("input");
        t2 = space();
        if (if_block) if_block.c();
        t3 = space();
        div6 = element("div");
        p0 = element("p");
        p0.textContent = "How clear was the quality of the recording?";
        t5 = space();
        input1 = element("input");
        t6 = space();
        div5 = element("div");
        div3 = element("div");
        p1 = element("p");
        p1.textContent = "Uninterpretable";
        t8 = space();
        div4 = element("div");
        p2 = element("p");
        p2.textContent = "Perfect";
        t10 = space();
        div10 = element("div");
        p3 = element("p");
        p3.textContent = "How easy was it to tag different thoughts?";
        t12 = space();
        input2 = element("input");
        t13 = space();
        div9 = element("div");
        div7 = element("div");
        p4 = element("p");
        p4.textContent = "Impossible";
        t15 = space();
        div8 = element("div");
        p5 = element("p");
        p5.textContent = "Effortless";
        attr_dev(label, "class", "label has-text-weight-normal is-size-5");
        add_location(label, file$2, 247, 10, 8463);
        attr_dev(input0, "class", input0_class_value = ctx.invalidTime ? "input age-input is-danger" : "input age-input");
        attr_dev(input0, "type", "text");
        attr_dev(input0, "placeholder", "Please enter a timestamp like MM:SS");
        add_location(input0, file$2, 251, 12, 8628);
        attr_dev(div0, "class", "control");
        add_location(div0, file$2, 250, 10, 8594);
        attr_dev(div1, "class", "field");
        add_location(div1, file$2, 246, 8, 8433);
        attr_dev(div2, "class", "column is-3 has-text-centered");
        add_location(div2, file$2, 245, 6, 8381);
        attr_dev(p0, "class", "has-text-centered is-size-5");
        add_location(p0, file$2, 264, 8, 9136);
        attr_dev(input1, "step", "1");
        attr_dev(input1, "min", "0");
        attr_dev(input1, "max", "100");
        attr_dev(input1, "type", "range");
        add_location(input1, file$2, 265, 8, 9231);
        attr_dev(p1, "class", "subtitle is-size-6");
        add_location(p1, file$2, 274, 12, 9505);
        attr_dev(div3, "class", "column has-text-left");
        add_location(div3, file$2, 273, 10, 9458);
        attr_dev(p2, "class", "subtitle is-size-6");
        add_location(p2, file$2, 277, 12, 9630);
        attr_dev(div4, "class", "column has-text-right");
        add_location(div4, file$2, 276, 10, 9582);
        attr_dev(div5, "class", "columns is-centered");
        add_location(div5, file$2, 272, 8, 9414);
        attr_dev(div6, "class", "column is-3 has-text-centered");
        add_location(div6, file$2, 263, 6, 9084);
        attr_dev(p3, "class", "has-text-centered is-size-5");
        add_location(p3, file$2, 282, 8, 9775);
        attr_dev(input2, "step", "1");
        attr_dev(input2, "min", "0");
        attr_dev(input2, "max", "100");
        attr_dev(input2, "type", "range");
        add_location(input2, file$2, 283, 8, 9869);
        attr_dev(p4, "class", "subtitle is-size-6");
        add_location(p4, file$2, 292, 12, 10149);
        attr_dev(div7, "class", "column has-text-left");
        add_location(div7, file$2, 291, 10, 10102);
        attr_dev(p5, "class", "subtitle is-size-6");
        add_location(p5, file$2, 295, 12, 10269);
        attr_dev(div8, "class", "column has-text-right");
        add_location(div8, file$2, 294, 10, 10221);
        attr_dev(div9, "class", "columns is-centered");
        add_location(div9, file$2, 290, 8, 10058);
        attr_dev(div10, "class", "column is-3 has-text-centered");
        add_location(div10, file$2, 281, 6, 9723);
        attr_dev(div11, "class", div11_class_value = ctx.rate ? "columns is-centered" : "columns is-centered");
        add_location(div11, file$2, 244, 4, 8308);
        dispose = [listen_dev(input0, "input", ctx.input0_input_handler), listen_dev(input0, "keyup", ctx.keyup_handler, false, false, false), listen_dev(input1, "change", ctx.input1_change_input_handler), listen_dev(input1, "input", ctx.input1_change_input_handler), listen_dev(input1, "click", ctx.click_handler, {
          once: true
        }, false, false), listen_dev(input2, "change", ctx.input2_change_input_handler), listen_dev(input2, "input", ctx.input2_change_input_handler), listen_dev(input2, "click", ctx.click_handler_1, {
          once: true
        }, false, false)];
      },
      m: function mount(target, anchor) {
        insert_dev(target, div11, anchor);
        append_dev(div11, div2);
        append_dev(div2, div1);
        append_dev(div1, label);
        append_dev(div1, t1);
        append_dev(div1, div0);
        append_dev(div0, input0);
        set_input_value(input0, ctx.time);
        append_dev(div1, t2);
        if (if_block) if_block.m(div1, null);
        append_dev(div11, t3);
        append_dev(div11, div6);
        append_dev(div6, p0);
        append_dev(div6, t5);
        append_dev(div6, input1);
        set_input_value(input1, ctx.clarity);
        append_dev(div6, t6);
        append_dev(div6, div5);
        append_dev(div5, div3);
        append_dev(div3, p1);
        append_dev(div5, t8);
        append_dev(div5, div4);
        append_dev(div4, p2);
        append_dev(div11, t10);
        append_dev(div11, div10);
        append_dev(div10, p3);
        append_dev(div10, t12);
        append_dev(div10, input2);
        set_input_value(input2, ctx.confidence);
        append_dev(div10, t13);
        append_dev(div10, div9);
        append_dev(div9, div7);
        append_dev(div7, p4);
        append_dev(div9, t15);
        append_dev(div9, div8);
        append_dev(div8, p5);
      },
      p: function update(changed, ctx) {
        if (changed.invalidTime && input0_class_value !== (input0_class_value = ctx.invalidTime ? "input age-input is-danger" : "input age-input")) {
          attr_dev(input0, "class", input0_class_value);
        }

        if (changed.time && input0.value !== ctx.time) {
          set_input_value(input0, ctx.time);
        }

        if (ctx.invalidTime) {
          if (!if_block) {
            if_block = create_if_block_1$1(ctx);
            if_block.c();
            if_block.m(div1, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }

        if (changed.clarity) {
          set_input_value(input1, ctx.clarity);
        }

        if (changed.confidence) {
          set_input_value(input2, ctx.confidence);
        }

        if (changed.rate && div11_class_value !== (div11_class_value = ctx.rate ? "columns is-centered" : "columns is-centered")) {
          attr_dev(div11, "class", div11_class_value);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div11);
        if (if_block) if_block.d();
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block$2.name,
      type: "if",
      source: "(244:2) {#if rate}",
      ctx: ctx
    });
    return block;
  } // (326:8) {:else}


  function create_else_block_1$1(ctx) {
    var h2;
    var block = {
      c: function create() {
        h2 = element("h2");
        h2.textContent = "No Thoughts Tagged";
        attr_dev(h2, "class", "title is-4");
        add_location(h2, file$2, 326, 10, 11341);
      },
      m: function mount(target, anchor) {
        insert_dev(target, h2, anchor);
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(h2);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_else_block_1$1.name,
      type: "else",
      source: "(326:8) {:else}",
      ctx: ctx
    });
    return block;
  } // (305:8) {#if segments && segments.length}


  function create_if_block_2$1(ctx) {
    var div;
    var table;
    var thead;
    var tr;
    var th0;
    var t1;
    var th1;
    var t3;
    var th2;
    var t5;
    var tbody;
    var each_blocks = [];
    var each_1_lookup = new Map();
    var each_value = ctx.segments;

    var get_key = function get_key(ctx) {
      return ctx.segment.id;
    };

    for (var i = 0; i < each_value.length; i += 1) {
      var child_ctx = get_each_context$1(ctx, each_value, i);
      var key = get_key(child_ctx);
      each_1_lookup.set(key, each_blocks[i] = create_each_block$1(key, child_ctx));
    }

    var block = {
      c: function create() {
        div = element("div");
        table = element("table");
        thead = element("thead");
        tr = element("tr");
        th0 = element("th");
        th0.textContent = "Thought Number";
        t1 = space();
        th1 = element("th");
        th1.textContent = "Start time";
        t3 = space();
        th2 = element("th");
        th2.textContent = "End time";
        t5 = space();
        tbody = element("tbody");

        for (var _i = 0; _i < each_blocks.length; _i += 1) {
          each_blocks[_i].c();
        }

        add_location(th0, file$2, 309, 18, 10672);
        add_location(th1, file$2, 310, 18, 10714);
        add_location(th2, file$2, 311, 18, 10752);
        add_location(tr, file$2, 308, 16, 10649);
        add_location(thead, file$2, 307, 14, 10625);
        add_location(tbody, file$2, 314, 14, 10829);
        attr_dev(table, "class", "table is-hoverable svelte-1k5bkci");
        add_location(table, file$2, 306, 12, 10576);
        attr_dev(div, "class", "table-container");
        add_location(div, file$2, 305, 10, 10534);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        append_dev(div, table);
        append_dev(table, thead);
        append_dev(thead, tr);
        append_dev(tr, th0);
        append_dev(tr, t1);
        append_dev(tr, th1);
        append_dev(tr, t3);
        append_dev(tr, th2);
        append_dev(table, t5);
        append_dev(table, tbody);

        for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
          each_blocks[_i2].m(tbody, null);
        }
      },
      p: function update(changed, ctx) {
        var each_value = ctx.segments;
        each_blocks = update_keyed_each(each_blocks, changed, get_key, 1, ctx, each_value, each_1_lookup, tbody, destroy_block, create_each_block$1, null, get_each_context$1);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);

        for (var _i3 = 0; _i3 < each_blocks.length; _i3 += 1) {
          each_blocks[_i3].d();
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_2$1.name,
      type: "if",
      source: "(305:8) {#if segments && segments.length}",
      ctx: ctx
    });
    return block;
  } // (316:16) {#each segments as segment, i (segment.id)}


  function create_each_block$1(key_1, ctx) {
    var tr;
    var td0;
    var t0_value = ctx.segment.id.split(".").slice(-1)[0] + "";
    var t0;
    var t1;
    var td1;
    var t2_value = ctx.segment.startTime.toFixed(2) + "";
    var t2;
    var t3;
    var td2;
    var t4_value = ctx.segment.endTime.toFixed(2) + "";
    var t4;
    var t5;
    var dispose;
    var block = {
      key: key_1,
      first: null,
      c: function create() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        attr_dev(td0, "type", "text");
        attr_dev(td0, "class", "segment-id");
        add_location(td0, file$2, 317, 20, 10983);
        attr_dev(td1, "type", "number");
        add_location(td1, file$2, 318, 20, 11080);
        attr_dev(td2, "type", "number");
        add_location(td2, file$2, 319, 20, 11154);
        attr_dev(tr, "class", "table-row");
        add_location(tr, file$2, 316, 18, 10915);
        dispose = listen_dev(tr, "click", ctx.selectSegment, false, false, false);
        this.first = tr;
      },
      m: function mount(target, anchor) {
        insert_dev(target, tr, anchor);
        append_dev(tr, td0);
        append_dev(td0, t0);
        append_dev(tr, t1);
        append_dev(tr, td1);
        append_dev(td1, t2);
        append_dev(tr, t3);
        append_dev(tr, td2);
        append_dev(td2, t4);
        append_dev(tr, t5);
      },
      p: function update(changed, ctx) {
        if (changed.segments && t0_value !== (t0_value = ctx.segment.id.split(".").slice(-1)[0] + "")) set_data_dev(t0, t0_value);
        if (changed.segments && t2_value !== (t2_value = ctx.segment.startTime.toFixed(2) + "")) set_data_dev(t2, t2_value);
        if (changed.segments && t4_value !== (t4_value = ctx.segment.endTime.toFixed(2) + "")) set_data_dev(t4, t4_value);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(tr);
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_each_block$1.name,
      type: "each",
      source: "(316:16) {#each segments as segment, i (segment.id)}",
      ctx: ctx
    });
    return block;
  } // (259:10) {#if invalidTime}


  function create_if_block_1$1(ctx) {
    var p;
    var block = {
      c: function create() {
        p = element("p");
        p.textContent = "Invalid timestamp. Please use MM:SS format.";
        attr_dev(p, "class", "help is-danger");
        add_location(p, file$2, 259, 12, 8960);
      },
      m: function mount(target, anchor) {
        insert_dev(target, p, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(p);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_1$1.name,
      type: "if",
      source: "(259:10) {#if invalidTime}",
      ctx: ctx
    });
    return block;
  }

  function create_fragment$2(ctx) {
    var div8;
    var div2;
    var div1;
    var h1;
    var t0;
    var t1;
    var t2;
    var t3;
    var div0;
    var t4;
    var div7;
    var div6;
    var div5;
    var div3;
    var audio;
    var source;
    var source_src_value;
    var t5;
    var t6;
    var div4;
    var t7;
    var if_block0 = ctx.peaksLoading && create_if_block_4$1(ctx);

    function select_block_type(changed, ctx) {
      if (ctx.rate) return create_if_block_3$1;
      return create_else_block_2$1;
    }

    var current_block_type = select_block_type(null, ctx);
    var if_block1 = current_block_type(ctx);

    function select_block_type_1(changed, ctx) {
      if (ctx.rate) return create_if_block$2;
      return create_else_block$2;
    }

    var current_block_type_1 = select_block_type_1(null, ctx);
    var if_block2 = current_block_type_1(ctx);
    var block = {
      c: function create() {
        div8 = element("div");
        div2 = element("div");
        div1 = element("div");
        h1 = element("h1");
        t0 = text("Recording #");
        t1 = text(ctx.currentTrial);
        t2 = space();
        if (if_block0) if_block0.c();
        t3 = space();
        div0 = element("div");
        t4 = space();
        div7 = element("div");
        div6 = element("div");
        div5 = element("div");
        div3 = element("div");
        audio = element("audio");
        source = element("source");
        t5 = text("\n            Your browser does not support the audio element.");
        t6 = space();
        div4 = element("div");
        if_block1.c();
        t7 = space();
        if_block2.c();
        attr_dev(h1, "class", "title");
        add_location(h1, file$2, 199, 6, 6615);
        attr_dev(div0, "id", "waveform-container");
        add_location(div0, file$2, 204, 6, 6838);
        attr_dev(div1, "class", "column is-three-quarters has-text-centered");
        add_location(div1, file$2, 198, 4, 6552);
        attr_dev(div2, "class", "columns is-centered");
        add_location(div2, file$2, 197, 2, 6514);
        if (source.src !== (source_src_value = ctx.src)) attr_dev(source, "src", source_src_value);
        attr_dev(source, "type", "audio/wav");
        add_location(source, file$2, 212, 12, 7102);
        attr_dev(audio, "id", "audio");
        audio.controls = "controls";
        add_location(audio, file$2, 211, 10, 7051);
        attr_dev(div3, "class", "column is-one-quarter");
        add_location(div3, file$2, 210, 8, 7005);
        attr_dev(div4, "class", "column is-one-half");
        add_location(div4, file$2, 216, 8, 7239);
        attr_dev(div5, "class", "columns");
        add_location(div5, file$2, 209, 6, 6975);
        attr_dev(div6, "class", "column is-three-quarters");
        add_location(div6, file$2, 208, 4, 6930);
        attr_dev(div7, "class", "columns is-centered");
        add_location(div7, file$2, 207, 2, 6892);
        attr_dev(div8, "class", "container is-fluid");
        add_location(div8, file$2, 196, 0, 6479);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, div8, anchor);
        append_dev(div8, div2);
        append_dev(div2, div1);
        append_dev(div1, h1);
        append_dev(h1, t0);
        append_dev(h1, t1);
        append_dev(div1, t2);
        if (if_block0) if_block0.m(div1, null);
        append_dev(div1, t3);
        append_dev(div1, div0);
        append_dev(div8, t4);
        append_dev(div8, div7);
        append_dev(div7, div6);
        append_dev(div6, div5);
        append_dev(div5, div3);
        append_dev(div3, audio);
        append_dev(audio, source);
        append_dev(audio, t5);
        append_dev(div5, t6);
        append_dev(div5, div4);
        if_block1.m(div4, null);
        append_dev(div8, t7);
        if_block2.m(div8, null);
      },
      p: function update(changed, ctx) {
        if (changed.currentTrial) set_data_dev(t1, ctx.currentTrial);

        if (ctx.peaksLoading) {
          if (!if_block0) {
            if_block0 = create_if_block_4$1(ctx);
            if_block0.c();
            if_block0.m(div1, t3);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }

        if (changed.src && source.src !== (source_src_value = ctx.src)) {
          attr_dev(source, "src", source_src_value);
        }

        if (current_block_type === (current_block_type = select_block_type(changed, ctx)) && if_block1) {
          if_block1.p(changed, ctx);
        } else {
          if_block1.d(1);
          if_block1 = current_block_type(ctx);

          if (if_block1) {
            if_block1.c();
            if_block1.m(div4, null);
          }
        }

        if (current_block_type_1 === (current_block_type_1 = select_block_type_1(changed, ctx)) && if_block2) {
          if_block2.p(changed, ctx);
        } else {
          if_block2.d(1);
          if_block2 = current_block_type_1(ctx);

          if (if_block2) {
            if_block2.c();
            if_block2.m(div8, null);
          }
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(div8);
        if (if_block0) if_block0.d();
        if_block1.d();
        if_block2.d();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$2.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$2($$self, $$props, $$invalidate) {
    var src = $$props.src;
    var currentTrial = $$props.currentTrial;
    var fileName = $$props.fileName;

    var _fileName$split = fileName.split("_"),
        _fileName$split2 = _slicedToArray(_fileName$split, 2),
        subjectId = _fileName$split2[0],
        character = _fileName$split2[1];

    var _character$split = character.split("_");

    var _character$split2 = _slicedToArray(_character$split, 1);

    character = _character$split2[0];
    var peaksInstance;
    var segments = [];
    var selectedSegmentId;
    var rowSelected = false;
    var segmentPrevMax = 0;
    var dispatch = createEventDispatcher();
    var peaksLoading = true;
    var rate = false;
    var confidence = 50;
    var clarity = 50;
    var clarityRated = false;
    var confidenceRated = false;
    var time = "";
    var timer;
    var invalidTime = false;

    var debounce = function debounce(v) {
      clearTimeout(timer);
      timer = setTimeout(function () {
        if (time.length === 5 && time.includes(":") || !time) {
          $$invalidate("invalidTime", invalidTime = false);
        } else {
          $$invalidate("invalidTime", invalidTime = true);
        }
      }, 600);
    };

    onMount(function () {
      var options = {
        container: document.getElementById("waveform-container"),
        mediaElement: document.getElementById("audio"),
        webAudio: {
          audioContext: new AudioContext()
        },
        keyboard: false,
        pointMarkerColor: "#006eb0",
        showPlayheadTime: true,
        inMarkerColor: "#999999",
        outMarkerColor: "#3d3d3d"
      };
      peaksInstance = Peaks.init(options, function (err) {
        if (err) {
          console.error(err);
        } else {
          $$invalidate("peaksLoading", peaksLoading = false);
          console.log("Peaks instance ready");
          $$invalidate("segments", segments = peaksInstance.segments.getSegments());
        }
      });
      peaksInstance.on("segments.mouseleave", function (segment) {
        $$invalidate("segments", segments = peaksInstance.segments.getSegments());
      });
      peaksInstance.on("segments.click", function (segment) {
        $$invalidate("segments", segments = peaksInstance.segments.getSegments());
      });
      peaksInstance.on("segments.dragged", function (segment) {
        $$invalidate("segments", segments = peaksInstance.segments.getSegments());
      });
    });

    var finish = function finish() {
      var _doc;

      var toSave, doc;
      return regeneratorRuntime.async(function finish$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              toSave = {};
              console.log(segments);
              segments.forEach(function (obj) {
                toSave[obj._id.replace(/\./g, "_")] = {
                  startTime: obj._startTime,
                  endTime: obj._endTime
                };
              });
              doc = (_doc = {}, _defineProperty(_doc, "trial_".concat(currentTrial), {
                subject: subjectId,
                character: character.slice(0, character.length - 4),
                clarity: clarity,
                confidence: confidence,
                recordingLength: time,
                thoughts: toSave,
                submitTime: serverTime
              }), _defineProperty(_doc, "currentTrial", currentTrial + 1), _doc);
              _context.prev = 4;
              _context.next = 7;
              return regeneratorRuntime.awrap(db.ref("participants/".concat(params.workerId)).update(doc));

            case 7:
              console.log("document added successfully");
              peaksInstance.destroy();
              dispatch("next");
              _context.next = 15;
              break;

            case 12:
              _context.prev = 12;
              _context.t0 = _context["catch"](4);
              console.error(_context.t0);

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, [[4, 12]]);
    };

    var makeRatings = function makeRatings() {
      if (!segments || segments && segments.length <= 2) {
        alert("Please tag a few more thoughts");
      } else {
        $$invalidate("rate", rate = !rate);
      }
    };

    function addSegment() {
      peaksInstance.segments.add({
        startTime: peaksInstance.player.getCurrentTime(),
        endTime: peaksInstance.player.getCurrentTime() + 5,
        labelText: "Thought ".concat(segmentPrevMax.toString()),
        editable: true
      });
      $$invalidate("segments", segments = peaksInstance.segments.getSegments());
      segmentPrevMax += 1;
    }

    function selectSegment(ev) {
      var rows = document.getElementsByClassName("table-row");
      var row = ev.target.parentNode;

      if (row.className === "table-row is-selected") {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var r = _step.value;
            r.className = "table-row";
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        $$invalidate("rowSelected", rowSelected = false);
      } else {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = rows[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _r = _step2.value;
            _r.className = "table-row";
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        row.className += " is-selected";
        $$invalidate("rowSelected", rowSelected = true);
      }

      selectedSegmentId = parseInt(row.querySelector("td.segment-id").innerText, 10);
      selectedSegmentId = "peaks.segment.".concat(selectedSegmentId.toString());
    }

    function playSegment() {
      var segment = peaksInstance.segments.getSegment(selectedSegmentId);
      peaksInstance.player.playSegment(segment);
    }

    function deleteSegment() {
      peaksInstance.segments.removeById(selectedSegmentId);
      var rows = document.getElementsByClassName("table-row");
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = rows[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var r = _step3.value;
          r.className = "table-row";
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      $$invalidate("rowSelected", rowSelected = false);
      $$invalidate("segments", segments = peaksInstance.segments.getSegments());
    }

    var writable_props = ["src", "currentTrial", "fileName"];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn("<TagThought> was created with unknown prop '".concat(key, "'"));
    });

    function input0_input_handler() {
      time = this.value;
      $$invalidate("time", time);
    }

    var keyup_handler = function keyup_handler(ev) {
      return debounce(ev.target.value);
    };

    function input1_change_input_handler() {
      clarity = to_number(this.value);
      $$invalidate("clarity", clarity);
    }

    var click_handler = function click_handler() {
      return $$invalidate("clarityRated", clarityRated = true);
    };

    function input2_change_input_handler() {
      confidence = to_number(this.value);
      $$invalidate("confidence", confidence);
    }

    var click_handler_1 = function click_handler_1() {
      return $$invalidate("confidenceRated", confidenceRated = true);
    };

    $$self.$set = function ($$props) {
      if ("src" in $$props) $$invalidate("src", src = $$props.src);
      if ("currentTrial" in $$props) $$invalidate("currentTrial", currentTrial = $$props.currentTrial);
      if ("fileName" in $$props) $$invalidate("fileName", fileName = $$props.fileName);
    };

    $$self.$capture_state = function () {
      return {
        src: src,
        currentTrial: currentTrial,
        fileName: fileName,
        subjectId: subjectId,
        character: character,
        peaksInstance: peaksInstance,
        segments: segments,
        selectedSegmentId: selectedSegmentId,
        rowSelected: rowSelected,
        segmentPrevMax: segmentPrevMax,
        peaksLoading: peaksLoading,
        rate: rate,
        confidence: confidence,
        clarity: clarity,
        clarityRated: clarityRated,
        confidenceRated: confidenceRated,
        time: time,
        timer: timer,
        invalidTime: invalidTime,
        nextTrialActive: nextTrialActive,
        ratingActive: ratingActive
      };
    };

    $$self.$inject_state = function ($$props) {
      if ("src" in $$props) $$invalidate("src", src = $$props.src);
      if ("currentTrial" in $$props) $$invalidate("currentTrial", currentTrial = $$props.currentTrial);
      if ("fileName" in $$props) $$invalidate("fileName", fileName = $$props.fileName);
      if ("subjectId" in $$props) subjectId = $$props.subjectId;
      if ("character" in $$props) character = $$props.character;
      if ("peaksInstance" in $$props) peaksInstance = $$props.peaksInstance;
      if ("segments" in $$props) $$invalidate("segments", segments = $$props.segments);
      if ("selectedSegmentId" in $$props) selectedSegmentId = $$props.selectedSegmentId;
      if ("rowSelected" in $$props) $$invalidate("rowSelected", rowSelected = $$props.rowSelected);
      if ("segmentPrevMax" in $$props) segmentPrevMax = $$props.segmentPrevMax;
      if ("peaksLoading" in $$props) $$invalidate("peaksLoading", peaksLoading = $$props.peaksLoading);
      if ("rate" in $$props) $$invalidate("rate", rate = $$props.rate);
      if ("confidence" in $$props) $$invalidate("confidence", confidence = $$props.confidence);
      if ("clarity" in $$props) $$invalidate("clarity", clarity = $$props.clarity);
      if ("clarityRated" in $$props) $$invalidate("clarityRated", clarityRated = $$props.clarityRated);
      if ("confidenceRated" in $$props) $$invalidate("confidenceRated", confidenceRated = $$props.confidenceRated);
      if ("time" in $$props) $$invalidate("time", time = $$props.time);
      if ("timer" in $$props) timer = $$props.timer;
      if ("invalidTime" in $$props) $$invalidate("invalidTime", invalidTime = $$props.invalidTime);
      if ("nextTrialActive" in $$props) $$invalidate("nextTrialActive", nextTrialActive = $$props.nextTrialActive);
      if ("ratingActive" in $$props) $$invalidate("ratingActive", ratingActive = $$props.ratingActive);
    };

    var nextTrialActive;
    var ratingActive;

    $$self.$$.update = function () {
      var changed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        clarityRated: 1,
        confidenceRated: 1,
        time: 1,
        invalidTime: 1,
        segments: 1
      };

      if (changed.clarityRated || changed.confidenceRated || changed.time || changed.invalidTime) {
         $$invalidate("nextTrialActive", nextTrialActive = !(clarityRated && confidenceRated && time && !invalidTime));
      }

      if (changed.segments) {
         $$invalidate("ratingActive", ratingActive = segments.length === 0);
      }
    };

    return {
      src: src,
      currentTrial: currentTrial,
      fileName: fileName,
      segments: segments,
      rowSelected: rowSelected,
      peaksLoading: peaksLoading,
      rate: rate,
      confidence: confidence,
      clarity: clarity,
      clarityRated: clarityRated,
      confidenceRated: confidenceRated,
      time: time,
      invalidTime: invalidTime,
      debounce: debounce,
      finish: finish,
      makeRatings: makeRatings,
      addSegment: addSegment,
      selectSegment: selectSegment,
      playSegment: playSegment,
      deleteSegment: deleteSegment,
      nextTrialActive: nextTrialActive,
      ratingActive: ratingActive,
      input0_input_handler: input0_input_handler,
      keyup_handler: keyup_handler,
      input1_change_input_handler: input1_change_input_handler,
      click_handler: click_handler,
      input2_change_input_handler: input2_change_input_handler,
      click_handler_1: click_handler_1
    };
  }

  var TagThought =
  /*#__PURE__*/
  function (_SvelteComponentDev) {
    _inherits(TagThought, _SvelteComponentDev);

    function TagThought(options) {
      var _this;

      _classCallCheck(this, TagThought);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(TagThought).call(this, options));
      init(_assertThisInitialized(_this), options, instance$2, create_fragment$2, safe_not_equal, {
        src: 0,
        currentTrial: 0,
        fileName: 0
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: _assertThisInitialized(_this),
        tagName: "TagThought",
        options: options,
        id: create_fragment$2.name
      });
      var ctx = _this.$$.ctx;
      var props = options.props || {};

      if (ctx.src === undefined && !("src" in props)) {
        console_1$1.warn("<TagThought> was created without expected prop 'src'");
      }

      if (ctx.currentTrial === undefined && !("currentTrial" in props)) {
        console_1$1.warn("<TagThought> was created without expected prop 'currentTrial'");
      }

      if (ctx.fileName === undefined && !("fileName" in props)) {
        console_1$1.warn("<TagThought> was created without expected prop 'fileName'");
      }

      return _this;
    }

    _createClass(TagThought, [{
      key: "src",
      get: function get() {
        throw new Error("<TagThought>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
      },
      set: function set(value) {
        throw new Error("<TagThought>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
      }
    }, {
      key: "currentTrial",
      get: function get() {
        throw new Error("<TagThought>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
      },
      set: function set(value) {
        throw new Error("<TagThought>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
      }
    }, {
      key: "fileName",
      get: function get() {
        throw new Error("<TagThought>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
      },
      set: function set(value) {
        throw new Error("<TagThought>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
      }
    }]);

    return TagThought;
  }(SvelteComponentDev);

  var file$3 = "src/components/Loading.svelte";

  function create_fragment$3(ctx) {
    var div2;
    var div0;
    var t;
    var div1;
    var h1;
    var current;
    var default_slot_template = ctx.$$slots.default;
    var default_slot = create_slot(default_slot_template, ctx, null);
    var block = {
      c: function create() {
        div2 = element("div");
        div0 = element("div");
        t = space();
        div1 = element("div");
        h1 = element("h1");
        if (default_slot) default_slot.c();
        attr_dev(div0, "class", "loader is-loading svelte-10ue5nm");
        add_location(div0, file$3, 27, 2, 467);
        attr_dev(h1, "class", "is-size-3");
        add_location(h1, file$3, 29, 4, 534);
        attr_dev(div1, "class", "loading-text svelte-10ue5nm");
        add_location(div1, file$3, 28, 2, 503);
        attr_dev(div2, "class", "loader-wrapper svelte-10ue5nm");
        add_location(div2, file$3, 26, 0, 436);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, div2, anchor);
        append_dev(div2, div0);
        append_dev(div2, t);
        append_dev(div2, div1);
        append_dev(div1, h1);

        if (default_slot) {
          default_slot.m(h1, null);
        }

        current = true;
      },
      p: function update(changed, ctx) {
        if (default_slot && default_slot.p && changed.$$scope) {
          default_slot.p(get_slot_changes(default_slot_template, ctx, changed, null), get_slot_context(default_slot_template, ctx, null));
        }
      },
      i: function intro(local) {
        if (current) return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div2);
        if (default_slot) default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$3.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$3($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
        $$scope = $$props.$$scope;

    $$self.$set = function ($$props) {
      if ("$$scope" in $$props) $$invalidate("$$scope", $$scope = $$props.$$scope);
    };

    $$self.$capture_state = function () {
      return {};
    };

    $$self.$inject_state = function ($$props) {};

    return {
      $$slots: $$slots,
      $$scope: $$scope
    };
  }

  var Loading =
  /*#__PURE__*/
  function (_SvelteComponentDev) {
    _inherits(Loading, _SvelteComponentDev);

    function Loading(options) {
      var _this;

      _classCallCheck(this, Loading);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Loading).call(this, options));
      init(_assertThisInitialized(_this), options, instance$3, create_fragment$3, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: _assertThisInitialized(_this),
        tagName: "Loading",
        options: options,
        id: create_fragment$3.name
      });
      return _this;
    }

    return Loading;
  }(SvelteComponentDev);

  var console_1$2 = globals.console;

  function create_catch_block(ctx) {
    var block = {
      c: noop,
      m: noop,
      p: noop,
      i: noop,
      o: noop,
      d: noop
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_catch_block.name,
      type: "catch",
      source: "(1:0) <script>   // This is the main experiment page. It takes as input trialOrder, which gets passed in from App.svelte, which itself gets it from firebase. Then it looks at the current trial number the participant is on, gets the audio file URL and passes that info as parameters to the TagThought component.   import { createEventDispatcher }",
      ctx: ctx
    });
    return block;
  } // (53:0) {:then src}


  function create_then_block(ctx) {
    var current;
    var tagthought = new TagThought({
      props: {
        src: ctx.src,
        currentTrial: ctx.currentTrial,
        fileName: ctx.fileName
      },
      $$inline: true
    });
    tagthought.$on("next", ctx.getNextAudioFile);
    var block = {
      c: function create() {
        create_component(tagthought.$$.fragment);
      },
      m: function mount(target, anchor) {
        mount_component(tagthought, target, anchor);
        current = true;
      },
      p: function update(changed, ctx) {
        var tagthought_changes = {};
        if (changed.filePromise) tagthought_changes.src = ctx.src;
        if (changed.currentTrial) tagthought_changes.currentTrial = ctx.currentTrial;
        if (changed.fileName) tagthought_changes.fileName = ctx.fileName;
        tagthought.$set(tagthought_changes);
      },
      i: function intro(local) {
        if (current) return;
        transition_in(tagthought.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(tagthought.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(tagthought, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_then_block.name,
      type: "then",
      source: "(53:0) {:then src}",
      ctx: ctx
    });
    return block;
  } // (51:20)    <Loading>Preparing Recording...</Loading> {:then src}


  function create_pending_block(ctx) {
    var current;
    var loading = new Loading({
      props: {
        $$slots: {
          default: [create_default_slot]
        },
        $$scope: {
          ctx: ctx
        }
      },
      $$inline: true
    });
    var block = {
      c: function create() {
        create_component(loading.$$.fragment);
      },
      m: function mount(target, anchor) {
        mount_component(loading, target, anchor);
        current = true;
      },
      p: function update(changed, ctx) {
        var loading_changes = {};

        if (changed.$$scope) {
          loading_changes.$$scope = {
            changed: changed,
            ctx: ctx
          };
        }

        loading.$set(loading_changes);
      },
      i: function intro(local) {
        if (current) return;
        transition_in(loading.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(loading.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(loading, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_pending_block.name,
      type: "pending",
      source: "(51:20)    <Loading>Preparing Recording...</Loading> {:then src}",
      ctx: ctx
    });
    return block;
  } // (52:2) <Loading>


  function create_default_slot(ctx) {
    var t;
    var block = {
      c: function create() {
        t = text("Preparing Recording...");
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(t);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_default_slot.name,
      type: "slot",
      source: "(52:2) <Loading>",
      ctx: ctx
    });
    return block;
  }

  function create_fragment$4(ctx) {
    var await_block_anchor;
    var promise;
    var current;
    var info = {
      ctx: ctx,
      current: null,
      token: null,
      pending: create_pending_block,
      then: create_then_block,
      catch: create_catch_block,
      value: "src",
      error: "null",
      blocks: [,,,]
    };
    handle_promise(promise = ctx.filePromise, info);
    var block = {
      c: function create() {
        await_block_anchor = empty();
        info.block.c();
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, await_block_anchor, anchor);
        info.block.m(target, info.anchor = anchor);

        info.mount = function () {
          return await_block_anchor.parentNode;
        };

        info.anchor = await_block_anchor;
        current = true;
      },
      p: function update(changed, new_ctx) {
        ctx = new_ctx;
        info.ctx = ctx;

        if (changed.filePromise && promise !== (promise = ctx.filePromise) && handle_promise(promise, info)) ; else {
          info.block.p(changed, assign(assign({}, ctx), info.resolved)); // nothing
        }
      },
      i: function intro(local) {
        if (current) return;
        transition_in(info.block);
        current = true;
      },
      o: function outro(local) {
        for (var i = 0; i < 3; i += 1) {
          var _block = info.blocks[i];
          transition_out(_block);
        }

        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(await_block_anchor);
        info.block.d(detaching);
        info.token = null;
        info = null;
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$4.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$4($$self, $$props, $$invalidate) {
    var trialOrder = $$props.trialOrder;
    var currentTrial;
    var fileName;
    var dispatch = createEventDispatcher();

    var generateFileURL = function generateFileURL() {
      var _file, url;

      return regeneratorRuntime.async(function generateFileURL$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              $$invalidate("fileName", fileName = trialOrder[currentTrial - 1]);
              _file = storage.refFromURL("gs://thought-segmentation.appspot.com/".concat(fileName));
              _context.next = 5;
              return regeneratorRuntime.awrap(_file.getDownloadURL());

            case 5:
              url = _context.sent;
              return _context.abrupt("return", url);

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](0);
              console.error(_context.t0);

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, [[0, 9]]);
    };

    var filePromise = function _callee() {
      var resp;
      return regeneratorRuntime.async(function _callee$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return regeneratorRuntime.awrap(db.ref("participants/".concat(params.workerId)).once("value"));

            case 3:
              resp = _context2.sent;
              $$invalidate("currentTrial", currentTrial = resp.val().currentTrial);
              _context2.next = 7;
              return regeneratorRuntime.awrap(generateFileURL());

            case 7:
              return _context2.abrupt("return", _context2.sent);

            case 10:
              _context2.prev = 10;
              _context2.t0 = _context2["catch"](0);
              return _context2.abrupt("return", console.error(_context2.t0));

            case 13:
            case "end":
              return _context2.stop();
          }
        }
      }, null, null, [[0, 10]]);
    }();

    var getNextAudioFile = function getNextAudioFile() {
      if (currentTrial === trialOrder.length) {
        dispatch("finished");
      } else {
        $$invalidate("currentTrial", currentTrial += 1);
        $$invalidate("filePromise", filePromise = generateFileURL());
      }
    };

    var writable_props = ["trialOrder"];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$2.warn("<Experiment> was created with unknown prop '".concat(key, "'"));
    });

    $$self.$set = function ($$props) {
      if ("trialOrder" in $$props) $$invalidate("trialOrder", trialOrder = $$props.trialOrder);
    };

    $$self.$capture_state = function () {
      return {
        trialOrder: trialOrder,
        currentTrial: currentTrial,
        fileName: fileName,
        filePromise: filePromise
      };
    };

    $$self.$inject_state = function ($$props) {
      if ("trialOrder" in $$props) $$invalidate("trialOrder", trialOrder = $$props.trialOrder);
      if ("currentTrial" in $$props) $$invalidate("currentTrial", currentTrial = $$props.currentTrial);
      if ("fileName" in $$props) $$invalidate("fileName", fileName = $$props.fileName);
      if ("filePromise" in $$props) $$invalidate("filePromise", filePromise = $$props.filePromise);
    };

    return {
      trialOrder: trialOrder,
      currentTrial: currentTrial,
      fileName: fileName,
      filePromise: filePromise,
      getNextAudioFile: getNextAudioFile
    };
  }

  var Experiment =
  /*#__PURE__*/
  function (_SvelteComponentDev) {
    _inherits(Experiment, _SvelteComponentDev);

    function Experiment(options) {
      var _this;

      _classCallCheck(this, Experiment);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Experiment).call(this, options));
      init(_assertThisInitialized(_this), options, instance$4, create_fragment$4, safe_not_equal, {
        trialOrder: 0
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: _assertThisInitialized(_this),
        tagName: "Experiment",
        options: options,
        id: create_fragment$4.name
      });
      var ctx = _this.$$.ctx;
      var props = options.props || {};

      if (ctx.trialOrder === undefined && !("trialOrder" in props)) {
        console_1$2.warn("<Experiment> was created without expected prop 'trialOrder'");
      }

      return _this;
    }

    _createClass(Experiment, [{
      key: "trialOrder",
      get: function get() {
        throw new Error("<Experiment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
      },
      set: function set(value) {
        throw new Error("<Experiment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
      }
    }]);

    return Experiment;
  }(SvelteComponentDev);

  var file$4 = "src/pages/Debrief.svelte";

  function create_fragment$5(ctx) {
    var div21;
    var div20;
    var div19;
    var p0;
    var t1;
    var p1;
    var em;
    var t3;
    var form;
    var div3;
    var div0;
    var label0;
    var t5;
    var div2;
    var div1;
    var p2;
    var input0;
    var t6;
    var div8;
    var div4;
    var label1;
    var t8;
    var div7;
    var div6;
    var div5;
    var label2;
    var input1;
    var input1_value_value;
    var t9;
    var t10;
    var label3;
    var input2;
    var input2_value_value;
    var t11;
    var t12;
    var div13;
    var div9;
    var label4;
    var t14;
    var div12;
    var div11;
    var div10;
    var textarea;
    var t15;
    var div18;
    var div14;
    var t16;
    var div17;
    var div16;
    var div15;
    var button;
    var dispose;
    var block = {
      c: function create() {
        div21 = element("div");
        div20 = element("div");
        div19 = element("div");
        p0 = element("p");
        p0.textContent = "Thank You For Participating!";
        t1 = space();
        p1 = element("p");
        em = element("em");
        em.textContent = "All questions are optional";
        t3 = space();
        form = element("form");
        div3 = element("div");
        div0 = element("div");
        label0 = element("label");
        label0.textContent = "Age";
        t5 = space();
        div2 = element("div");
        div1 = element("div");
        p2 = element("p");
        input0 = element("input");
        t6 = space();
        div8 = element("div");
        div4 = element("div");
        label1 = element("label");
        label1.textContent = "Sex";
        t8 = space();
        div7 = element("div");
        div6 = element("div");
        div5 = element("div");
        label2 = element("label");
        input1 = element("input");
        t9 = text("\n                  Male");
        t10 = space();
        label3 = element("label");
        input2 = element("input");
        t11 = text("\n                  Female");
        t12 = space();
        div13 = element("div");
        div9 = element("div");
        label4 = element("label");
        label4.textContent = "Feedback";
        t14 = space();
        div12 = element("div");
        div11 = element("div");
        div10 = element("div");
        textarea = element("textarea");
        t15 = space();
        div18 = element("div");
        div14 = element("div");
        t16 = space();
        div17 = element("div");
        div16 = element("div");
        div15 = element("div");
        button = element("button");
        button.textContent = "Submit HIT";
        attr_dev(p0, "class", "title is-3 has-text-centered");
        add_location(p0, file$4, 37, 6, 936);
        add_location(em, file$4, 39, 8, 1067);
        attr_dev(p1, "class", "subtitle is-6 has-text-centered");
        add_location(p1, file$4, 38, 6, 1015);
        attr_dev(label0, "class", "label");
        add_location(label0, file$4, 44, 12, 1264);
        attr_dev(div0, "class", "field-label is-normal");
        add_location(div0, file$4, 43, 10, 1216);
        attr_dev(input0, "class", "input age-input svelte-lbo539");
        attr_dev(input0, "type", "text");
        add_location(input0, file$4, 49, 16, 1441);
        attr_dev(p2, "class", "control");
        add_location(p2, file$4, 48, 14, 1405);
        attr_dev(div1, "class", "field");
        add_location(div1, file$4, 47, 12, 1371);
        attr_dev(div2, "class", "field-body is-narrow");
        add_location(div2, file$4, 46, 10, 1324);
        attr_dev(div3, "class", "field is-horizontal");
        add_location(div3, file$4, 42, 8, 1172);
        attr_dev(label1, "class", "label");
        add_location(label1, file$4, 56, 12, 1664);
        attr_dev(div4, "class", "field-label");
        add_location(div4, file$4, 55, 10, 1626);
        attr_dev(input1, "type", "radio");
        input1.__value = input1_value_value = "male";
        input1.value = input1.__value;
        ctx.$$binding_groups[0].push(input1);
        add_location(input1, file$4, 62, 18, 1883);
        attr_dev(label2, "class", "radio");
        add_location(label2, file$4, 61, 16, 1843);
        attr_dev(input2, "type", "radio");
        input2.__value = input2_value_value = "female";
        input2.value = input2.__value;
        ctx.$$binding_groups[0].push(input2);
        add_location(input2, file$4, 66, 18, 2042);
        attr_dev(label3, "class", "radio");
        add_location(label3, file$4, 65, 16, 2002);
        attr_dev(div5, "class", "control");
        add_location(div5, file$4, 60, 14, 1805);
        attr_dev(div6, "class", "field is-narrow");
        add_location(div6, file$4, 59, 12, 1761);
        attr_dev(div7, "class", "field-body");
        add_location(div7, file$4, 58, 10, 1724);
        attr_dev(div8, "class", "field is-horizontal");
        add_location(div8, file$4, 54, 8, 1582);
        attr_dev(label4, "class", "label");
        add_location(label4, file$4, 75, 12, 2321);
        attr_dev(div9, "class", "field-label is-normal");
        add_location(div9, file$4, 74, 10, 2273);
        attr_dev(textarea, "class", "textarea textarea-feedback svelte-lbo539");
        attr_dev(textarea, "placeholder", "Thoughts or suggestions about this HIT");
        add_location(textarea, file$4, 80, 16, 2495);
        attr_dev(div10, "class", "control");
        add_location(div10, file$4, 79, 14, 2457);
        attr_dev(div11, "class", "field");
        add_location(div11, file$4, 78, 12, 2423);
        attr_dev(div12, "class", "field-body");
        add_location(div12, file$4, 77, 10, 2386);
        attr_dev(div13, "class", "field is-horizontal");
        add_location(div13, file$4, 73, 8, 2229);
        attr_dev(div14, "class", "field-label");
        add_location(div14, file$4, 89, 10, 2796);
        attr_dev(button, "class", "button is-success is-large");
        add_location(button, file$4, 95, 16, 3002);
        attr_dev(div15, "class", "control");
        add_location(div15, file$4, 94, 14, 2964);
        attr_dev(div16, "class", "field");
        add_location(div16, file$4, 93, 12, 2930);
        attr_dev(div17, "class", "field-body");
        add_location(div17, file$4, 92, 10, 2893);
        attr_dev(div18, "class", "field is-horizontal");
        add_location(div18, file$4, 88, 8, 2752);
        add_location(form, file$4, 41, 6, 1120);
        attr_dev(div19, "class", "column is-three-quarters");
        add_location(div19, file$4, 36, 4, 891);
        attr_dev(div20, "class", "columns is-centered");
        add_location(div20, file$4, 35, 2, 853);
        attr_dev(div21, "class", "container");
        add_location(div21, file$4, 34, 0, 827);
        dispose = [listen_dev(input0, "input", ctx.input0_input_handler), listen_dev(input1, "change", ctx.input1_change_handler), listen_dev(input2, "change", ctx.input2_change_handler), listen_dev(textarea, "input", ctx.textarea_input_handler), listen_dev(form, "submit", prevent_default(ctx.submitHIT), false, false, true)];
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, div21, anchor);
        append_dev(div21, div20);
        append_dev(div20, div19);
        append_dev(div19, p0);
        append_dev(div19, t1);
        append_dev(div19, p1);
        append_dev(p1, em);
        append_dev(div19, t3);
        append_dev(div19, form);
        append_dev(form, div3);
        append_dev(div3, div0);
        append_dev(div0, label0);
        append_dev(div3, t5);
        append_dev(div3, div2);
        append_dev(div2, div1);
        append_dev(div1, p2);
        append_dev(p2, input0);
        set_input_value(input0, ctx.age);
        append_dev(form, t6);
        append_dev(form, div8);
        append_dev(div8, div4);
        append_dev(div4, label1);
        append_dev(div8, t8);
        append_dev(div8, div7);
        append_dev(div7, div6);
        append_dev(div6, div5);
        append_dev(div5, label2);
        append_dev(label2, input1);
        input1.checked = input1.__value === ctx.sex;
        append_dev(label2, t9);
        append_dev(div5, t10);
        append_dev(div5, label3);
        append_dev(label3, input2);
        input2.checked = input2.__value === ctx.sex;
        append_dev(label3, t11);
        append_dev(form, t12);
        append_dev(form, div13);
        append_dev(div13, div9);
        append_dev(div9, label4);
        append_dev(div13, t14);
        append_dev(div13, div12);
        append_dev(div12, div11);
        append_dev(div11, div10);
        append_dev(div10, textarea);
        set_input_value(textarea, ctx.feedback);
        append_dev(form, t15);
        append_dev(form, div18);
        append_dev(div18, div14);
        append_dev(div18, t16);
        append_dev(div18, div17);
        append_dev(div17, div16);
        append_dev(div16, div15);
        append_dev(div15, button);
      },
      p: function update(changed, ctx) {
        if (changed.age && input0.value !== ctx.age) {
          set_input_value(input0, ctx.age);
        }

        if (changed.sex) {
          input1.checked = input1.__value === ctx.sex;
        }

        if (changed.sex) {
          input2.checked = input2.__value === ctx.sex;
        }

        if (changed.feedback) {
          set_input_value(textarea, ctx.feedback);
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(div21);
        ctx.$$binding_groups[0].splice(ctx.$$binding_groups[0].indexOf(input1), 1);
        ctx.$$binding_groups[0].splice(ctx.$$binding_groups[0].indexOf(input2), 1);
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$5.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$5($$self, $$props, $$invalidate) {
    var age = "";
    var feedback = "";
    var sex = "";

    var submitHIT = function submitHIT() {
      return regeneratorRuntime.async(function submitHIT$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return regeneratorRuntime.awrap(db.ref("participants/".concat(params.workerId)).update({
                age: age,
                sex: sex,
                feedback: feedback,
                HIT_complete: serverTime
              }));

            case 3:
              console.log("exit survey added successfully");
              window.top.postMessage("finished", "*");
              console.log("back to PsiTurk!");
              _context.next = 11;
              break;

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              console.error(_context.t0);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, [[0, 8]]);
    };

    var $$binding_groups = [[]];

    function input0_input_handler() {
      age = this.value;
      $$invalidate("age", age);
    }

    function input1_change_handler() {
      sex = this.__value;
      $$invalidate("sex", sex);
    }

    function input2_change_handler() {
      sex = this.__value;
      $$invalidate("sex", sex);
    }

    function textarea_input_handler() {
      feedback = this.value;
      $$invalidate("feedback", feedback);
    }

    $$self.$capture_state = function () {
      return {};
    };

    $$self.$inject_state = function ($$props) {
      if ("age" in $$props) $$invalidate("age", age = $$props.age);
      if ("feedback" in $$props) $$invalidate("feedback", feedback = $$props.feedback);
      if ("sex" in $$props) $$invalidate("sex", sex = $$props.sex);
    };

    return {
      age: age,
      feedback: feedback,
      sex: sex,
      submitHIT: submitHIT,
      input0_input_handler: input0_input_handler,
      input1_change_handler: input1_change_handler,
      input2_change_handler: input2_change_handler,
      textarea_input_handler: textarea_input_handler,
      $$binding_groups: $$binding_groups
    };
  }

  var Debrief =
  /*#__PURE__*/
  function (_SvelteComponentDev) {
    _inherits(Debrief, _SvelteComponentDev);

    function Debrief(options) {
      var _this;

      _classCallCheck(this, Debrief);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Debrief).call(this, options));
      init(_assertThisInitialized(_this), options, instance$5, create_fragment$5, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: _assertThisInitialized(_this),
        tagName: "Debrief",
        options: options,
        id: create_fragment$5.name
      });
      return _this;
    }

    return Debrief;
  }(SvelteComponentDev);

  var file$5 = "src/App.svelte"; // (134:39) 

  function create_if_block_4$2(ctx) {
    var current;
    var debrief = new Debrief({
      $$inline: true
    });
    var block = {
      c: function create() {
        create_component(debrief.$$.fragment);
      },
      m: function mount(target, anchor) {
        mount_component(debrief, target, anchor);
        current = true;
      },
      p: noop,
      i: function intro(local) {
        if (current) return;
        transition_in(debrief.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(debrief.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(debrief, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_4$2.name,
      type: "if",
      source: "(134:39) ",
      ctx: ctx
    });
    return block;
  } // (132:42) 


  function create_if_block_3$2(ctx) {
    var current;
    var experiment = new Experiment({
      props: {
        trialOrder: ctx.trialOrder
      },
      $$inline: true
    });
    experiment.$on("finished", ctx.finished_handler_1);
    var block = {
      c: function create() {
        create_component(experiment.$$.fragment);
      },
      m: function mount(target, anchor) {
        mount_component(experiment, target, anchor);
        current = true;
      },
      p: function update(changed, ctx) {
        var experiment_changes = {};
        if (changed.trialOrder) experiment_changes.trialOrder = ctx.trialOrder;
        experiment.$set(experiment_changes);
      },
      i: function intro(local) {
        if (current) return;
        transition_in(experiment.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(experiment.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(experiment, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_3$2.name,
      type: "if",
      source: "(132:42) ",
      ctx: ctx
    });
    return block;
  } // (123:36) 


  function create_if_block_2$2(ctx) {
    var await_block_anchor;
    var promise;
    var current;
    var info = {
      ctx: ctx,
      current: null,
      token: null,
      pending: create_pending_block$1,
      then: create_then_block$1,
      catch: create_catch_block$1,
      value: "src",
      error: "null",
      blocks: [,,,]
    };
    handle_promise(promise = ctx.quizAudio, info);
    var block = {
      c: function create() {
        await_block_anchor = empty();
        info.block.c();
      },
      m: function mount(target, anchor) {
        insert_dev(target, await_block_anchor, anchor);
        info.block.m(target, info.anchor = anchor);

        info.mount = function () {
          return await_block_anchor.parentNode;
        };

        info.anchor = await_block_anchor;
        current = true;
      },
      p: function update(changed, new_ctx) {
        ctx = new_ctx;
        info.block.p(changed, assign(assign({}, ctx), info.resolved));
      },
      i: function intro(local) {
        if (current) return;
        transition_in(info.block);
        current = true;
      },
      o: function outro(local) {
        for (var i = 0; i < 3; i += 1) {
          var _block = info.blocks[i];
          transition_out(_block);
        }

        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(await_block_anchor);
        info.block.d(detaching);
        info.token = null;
        info = null;
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_2$2.name,
      type: "if",
      source: "(123:36) ",
      ctx: ctx
    });
    return block;
  } // (119:44) 


  function create_if_block_1$2(ctx) {
    var current;
    var instructions = new Instructions({
      $$inline: true
    });
    instructions.$on("finished", ctx.finished_handler);
    var block = {
      c: function create() {
        create_component(instructions.$$.fragment);
      },
      m: function mount(target, anchor) {
        mount_component(instructions, target, anchor);
        current = true;
      },
      p: noop,
      i: function intro(local) {
        if (current) return;
        transition_in(instructions.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(instructions.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(instructions, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_1$2.name,
      type: "if",
      source: "(119:44) ",
      ctx: ctx
    });
    return block;
  } // (117:2) {#if !currentState}


  function create_if_block$3(ctx) {
    var current;
    var loading = new Loading({
      props: {
        $$slots: {
          default: [create_default_slot$1]
        },
        $$scope: {
          ctx: ctx
        }
      },
      $$inline: true
    });
    var block = {
      c: function create() {
        create_component(loading.$$.fragment);
      },
      m: function mount(target, anchor) {
        mount_component(loading, target, anchor);
        current = true;
      },
      p: function update(changed, ctx) {
        var loading_changes = {};

        if (changed.$$scope) {
          loading_changes.$$scope = {
            changed: changed,
            ctx: ctx
          };
        }

        loading.$set(loading_changes);
      },
      i: function intro(local) {
        if (current) return;
        transition_in(loading.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(loading.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(loading, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block$3.name,
      type: "if",
      source: "(117:2) {#if !currentState}",
      ctx: ctx
    });
    return block;
  } // (1:0) <script>   // This is the main Svelte component that will display after a user provides conset within PsiTurk. It serves two main purposes: 1) it initializes a new entry into the firebase database if a workerId from the URL is not found or retrieves an existing record if a workerId is found. Creating a new entry sets up the random trial order the participant will receive for all the recordings. 2) it uses that information to dynamically render different experiment states based upon what a user does i.e. show instructions, show quiz, show experiment, show exit survey. Each of those different states exist as their own .svelte files within the pages/ folder   import { onMount }


  function create_catch_block$1(ctx) {
    var block = {
      c: noop,
      m: noop,
      p: noop,
      i: noop,
      o: noop,
      d: noop
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_catch_block$1.name,
      type: "catch",
      source: "(1:0) <script>   // This is the main Svelte component that will display after a user provides conset within PsiTurk. It serves two main purposes: 1) it initializes a new entry into the firebase database if a workerId from the URL is not found or retrieves an existing record if a workerId is found. Creating a new entry sets up the random trial order the participant will receive for all the recordings. 2) it uses that information to dynamically render different experiment states based upon what a user does i.e. show instructions, show quiz, show experiment, show exit survey. Each of those different states exist as their own .svelte files within the pages/ folder   import { onMount }",
      ctx: ctx
    });
    return block;
  } // (126:4) {:then src}


  function create_then_block$1(ctx) {
    var current;
    var quiz = new Quiz({
      props: {
        src: ctx.src
      },
      $$inline: true
    });
    quiz.$on("finishedComplete", ctx.finishedComplete_handler);
    quiz.$on("finishedContinue", ctx.finishedContinue_handler);
    var block = {
      c: function create() {
        create_component(quiz.$$.fragment);
      },
      m: function mount(target, anchor) {
        mount_component(quiz, target, anchor);
        current = true;
      },
      p: noop,
      i: function intro(local) {
        if (current) return;
        transition_in(quiz.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(quiz.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(quiz, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_then_block$1.name,
      type: "then",
      source: "(126:4) {:then src}",
      ctx: ctx
    });
    return block;
  } // (124:22)        <Loading>Loading...</Loading>     {:then src}


  function create_pending_block$1(ctx) {
    var current;
    var loading = new Loading({
      props: {
        $$slots: {
          default: [create_default_slot_1]
        },
        $$scope: {
          ctx: ctx
        }
      },
      $$inline: true
    });
    var block = {
      c: function create() {
        create_component(loading.$$.fragment);
      },
      m: function mount(target, anchor) {
        mount_component(loading, target, anchor);
        current = true;
      },
      p: function update(changed, ctx) {
        var loading_changes = {};

        if (changed.$$scope) {
          loading_changes.$$scope = {
            changed: changed,
            ctx: ctx
          };
        }

        loading.$set(loading_changes);
      },
      i: function intro(local) {
        if (current) return;
        transition_in(loading.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(loading.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(loading, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_pending_block$1.name,
      type: "pending",
      source: "(124:22)        <Loading>Loading...</Loading>     {:then src}",
      ctx: ctx
    });
    return block;
  } // (125:6) <Loading>


  function create_default_slot_1(ctx) {
    var t;
    var block = {
      c: function create() {
        t = text("Loading...");
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(t);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_default_slot_1.name,
      type: "slot",
      source: "(125:6) <Loading>",
      ctx: ctx
    });
    return block;
  } // (118:4) <Loading>


  function create_default_slot$1(ctx) {
    var t;
    var block = {
      c: function create() {
        t = text("Loading...");
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(t);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_default_slot$1.name,
      type: "slot",
      source: "(118:4) <Loading>",
      ctx: ctx
    });
    return block;
  }

  function create_fragment$6(ctx) {
    var section;
    var current_block_type_index;
    var if_block;
    var current;
    var if_block_creators = [create_if_block$3, create_if_block_1$2, create_if_block_2$2, create_if_block_3$2, create_if_block_4$2];
    var if_blocks = [];

    function select_block_type(changed, ctx) {
      if (!ctx.currentState) return 0;
      if (ctx.currentState === "instructions") return 1;
      if (ctx.currentState === "quiz") return 2;
      if (ctx.currentState === "experiment") return 3;
      if (ctx.currentState === "debrief") return 4;
      return -1;
    }

    if (~(current_block_type_index = select_block_type(null, ctx))) {
      if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    }

    var block = {
      c: function create() {
        section = element("section");
        if (if_block) if_block.c();
        attr_dev(section, "class", "section");
        add_location(section, file$5, 115, 0, 4858);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, section, anchor);

        if (~current_block_type_index) {
          if_blocks[current_block_type_index].m(section, null);
        }

        current = true;
      },
      p: function update(changed, ctx) {
        var previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(changed, ctx);

        if (current_block_type_index === previous_block_index) {
          if (~current_block_type_index) {
            if_blocks[current_block_type_index].p(changed, ctx);
          }
        } else {
          if (if_block) {
            group_outros();
            transition_out(if_blocks[previous_block_index], 1, 1, function () {
              if_blocks[previous_block_index] = null;
            });
            check_outros();
          }

          if (~current_block_type_index) {
            if_block = if_blocks[current_block_type_index];

            if (!if_block) {
              if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
              if_block.c();
            }

            transition_in(if_block, 1);
            if_block.m(section, null);
          } else {
            if_block = null;
          }
        }
      },
      i: function intro(local) {
        if (current) return;
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(section);

        if (~current_block_type_index) {
          if_blocks[current_block_type_index].d();
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$6.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$6($$self, $$props, $$invalidate) {
    var currentState;
    var trialOrder = [];

    var updateState = function updateState(newState) {
      var doc;
      return regeneratorRuntime.async(function updateState$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              $$invalidate("currentState", currentState = newState);
              _context.prev = 1;
              doc = {
                currentState: currentState
              };
              doc["".concat(currentState, "_start")] = serverTime;
              _context.next = 6;
              return regeneratorRuntime.awrap(db.ref("participants/".concat(params.workerId)).update(doc));

            case 6:
              console.log("updated user state");
              _context.next = 12;
              break;

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](1);
              console.error(_context.t0);

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, [[1, 9]]);
    };

    var generateFileUrl = function generateFileUrl() {
      var _file, url;

      return regeneratorRuntime.async(function generateFileUrl$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _file = storage.refFromURL("gs://thought-segmentation.appspot.com/quiz.mp3");
              _context2.next = 4;
              return regeneratorRuntime.awrap(_file.getDownloadURL());

            case 4:
              url = _context2.sent;
              return _context2.abrupt("return", url);

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              console.error(_context2.t0);

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, null, null, [[0, 8]]);
    };

    var quizAudio = generateFileUrl();
    onMount(function _callee2() {
      return regeneratorRuntime.async(function _callee2$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              try {
                auth.onAuthStateChanged(function _callee(user) {
                  var resp, data, query;
                  return regeneratorRuntime.async(function _callee$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          if (user) {
                            _context3.next = 18;
                            break;
                          }

                          _context3.prev = 1;
                          _context3.next = 4;
                          return regeneratorRuntime.awrap(auth.signInWithEmailAndPassword("".concat(params.workerId, "@experiment.com"), params.assignmentId));

                        case 4:
                          console.log("user found...signing in with credentials");
                          _context3.next = 16;
                          break;

                        case 7:
                          _context3.prev = 7;
                          _context3.t0 = _context3["catch"](1);

                          if (!(_context3.t0.code === "auth/user-not-found")) {
                            _context3.next = 15;
                            break;
                          }

                          console.log("no user found...creating new credentials");
                          _context3.next = 13;
                          return regeneratorRuntime.awrap(auth.createUserWithEmailAndPassword("".concat(params.workerId, "@experiment.com"), params.assignmentId));

                        case 13:
                          _context3.next = 16;
                          break;

                        case 15:
                          console.error(_context3.t0);

                        case 16:
                          _context3.next = 44;
                          break;

                        case 18:
                          console.log("user already authenticated...");
                          _context3.prev = 19;
                          _context3.next = 22;
                          return regeneratorRuntime.awrap(db.ref("participants/".concat(params.workerId)).once("value"));

                        case 22:
                          resp = _context3.sent;

                          if (!(resp.val() !== null)) {
                            _context3.next = 30;
                            break;
                          }

                          data = resp.val();
                          $$invalidate("currentState", currentState = data.currentState);
                          $$invalidate("trialOrder", trialOrder = data.trialOrder);
                          console.log("previous document found...loading state...");
                          _context3.next = 39;
                          break;

                        case 30:
                          _context3.next = 32;
                          return regeneratorRuntime.awrap(db.ref("recordings").orderByChild("responses").limitToFirst(10).once("value"));

                        case 32:
                          query = _context3.sent;
                          query.forEach(function (doc) {
                            trialOrder.push(doc.val().name);
                          });
                          fisherYatesShuffle(trialOrder);
                          _context3.next = 37;
                          return regeneratorRuntime.awrap(db.ref("participants/".concat(params.workerId)).set({
                            workerId: params.workerId,
                            assignmentId: params.assignmentId,
                            hitId: params.hitId,
                            startTime: serverTime,
                            currentState: "instructions",
                            currentTrial: 1,
                            trialOrder: trialOrder
                          }));

                        case 37:
                          $$invalidate("currentState", currentState = "instructions");
                          console.log("no previous document found...creating new...");

                        case 39:
                          _context3.next = 44;
                          break;

                        case 41:
                          _context3.prev = 41;
                          _context3.t1 = _context3["catch"](19);
                          console.error(_context3.t1);

                        case 44:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, null, null, [[1, 7], [19, 41]]);
                });
              } catch (error) {
                console.error(error);
              }

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      });
    });

    var finished_handler = function finished_handler() {
      return updateState("quiz");
    };

    var finishedComplete_handler = function finishedComplete_handler() {
      return updateState("debrief");
    };

    var finishedContinue_handler = function finishedContinue_handler() {
      return updateState("experiment");
    };

    var finished_handler_1 = function finished_handler_1() {
      return updateState("debrief");
    };

    $$self.$capture_state = function () {
      return {};
    };

    $$self.$inject_state = function ($$props) {
      if ("currentState" in $$props) $$invalidate("currentState", currentState = $$props.currentState);
      if ("trialOrder" in $$props) $$invalidate("trialOrder", trialOrder = $$props.trialOrder);
      if ("quizAudio" in $$props) $$invalidate("quizAudio", quizAudio = $$props.quizAudio);
    };

    return {
      currentState: currentState,
      trialOrder: trialOrder,
      updateState: updateState,
      quizAudio: quizAudio,
      finished_handler: finished_handler,
      finishedComplete_handler: finishedComplete_handler,
      finishedContinue_handler: finishedContinue_handler,
      finished_handler_1: finished_handler_1
    };
  }

  var App =
  /*#__PURE__*/
  function (_SvelteComponentDev) {
    _inherits(App, _SvelteComponentDev);

    function App(options) {
      var _this;

      _classCallCheck(this, App);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, options));
      init(_assertThisInitialized(_this), options, instance$6, create_fragment$6, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: _assertThisInitialized(_this),
        tagName: "App",
        options: options,
        id: create_fragment$6.name
      });
      return _this;
    }

    return App;
  }(SvelteComponentDev);

  var main = new App({
    target: document.body
  });

  return main;

}());
//# sourceMappingURL=bundle.js.map
